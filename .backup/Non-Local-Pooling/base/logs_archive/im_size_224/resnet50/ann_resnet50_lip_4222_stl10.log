
 Run on time: 2022-06-25 13:20:38.734137

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50_LIP_4222
	 im_size              : 224
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0,1
 DataParallel(
  (module): NetworkByName(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): LIP_BASE(
              (logit): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
            )
          )
          (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): LIP_BASE(
              (logit): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): LIP_BASE(
              (logit): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): LIP_BASE(
              (logit): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.4417, train_acc: 0.1652 test_loss: 2.1073, test_acc: 0.1975, best: 0.1975, time: 0:02:56
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0828, train_acc: 0.2162 test_loss: 1.8878, test_acc: 0.2910, best: 0.2910, time: 0:02:50
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9953, train_acc: 0.2438 test_loss: 1.8597, test_acc: 0.3059, best: 0.3059, time: 0:02:53
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9434, train_acc: 0.2610 test_loss: 1.8793, test_acc: 0.2861, best: 0.3059, time: 0:02:52
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9154, train_acc: 0.2708 test_loss: 1.7654, test_acc: 0.3483, best: 0.3483, time: 0:02:51
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8682, train_acc: 0.2934 test_loss: 1.8056, test_acc: 0.3076, best: 0.3483, time: 0:02:47
 Epoch: 7, lr: 1.0e-02, train_loss: 1.8556, train_acc: 0.2974 test_loss: 1.6971, test_acc: 0.3455, best: 0.3483, time: 0:02:46
 Epoch: 8, lr: 1.0e-02, train_loss: 1.8225, train_acc: 0.3126 test_loss: 1.7496, test_acc: 0.3402, best: 0.3483, time: 0:02:47
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7814, train_acc: 0.3232 test_loss: 1.7698, test_acc: 0.3436, best: 0.3483, time: 0:02:48
 Epoch: 10, lr: 1.0e-02, train_loss: 1.7478, train_acc: 0.3352 test_loss: 1.5933, test_acc: 0.4020, best: 0.4020, time: 0:02:47
 Epoch: 11, lr: 1.0e-02, train_loss: 1.7334, train_acc: 0.3394 test_loss: 1.5711, test_acc: 0.4075, best: 0.4075, time: 0:02:46
 Epoch: 12, lr: 1.0e-02, train_loss: 1.7262, train_acc: 0.3586 test_loss: 1.5675, test_acc: 0.4160, best: 0.4160, time: 0:02:47
 Epoch: 13, lr: 1.0e-02, train_loss: 1.6486, train_acc: 0.3756 test_loss: 1.6527, test_acc: 0.4264, best: 0.4264, time: 0:02:51
 Epoch: 14, lr: 1.0e-02, train_loss: 1.6654, train_acc: 0.3756 test_loss: 1.5211, test_acc: 0.4219, best: 0.4264, time: 0:02:46
 Epoch: 15, lr: 1.0e-02, train_loss: 1.6364, train_acc: 0.3904 test_loss: 1.5330, test_acc: 0.4353, best: 0.4353, time: 0:02:50
 Epoch: 16, lr: 1.0e-02, train_loss: 1.5965, train_acc: 0.4118 test_loss: 1.4657, test_acc: 0.4696, best: 0.4696, time: 0:02:48
 Epoch: 17, lr: 1.0e-02, train_loss: 1.5831, train_acc: 0.3970 test_loss: 1.4351, test_acc: 0.4795, best: 0.4795, time: 0:02:55
 Epoch: 18, lr: 1.0e-02, train_loss: 1.5622, train_acc: 0.4202 test_loss: 1.4119, test_acc: 0.4809, best: 0.4809, time: 0:02:51
 Epoch: 19, lr: 1.0e-02, train_loss: 1.5459, train_acc: 0.4192 test_loss: 1.4710, test_acc: 0.4656, best: 0.4809, time: 0:02:52
 Epoch: 20, lr: 1.0e-02, train_loss: 1.5125, train_acc: 0.4310 test_loss: 1.4814, test_acc: 0.4791, best: 0.4809, time: 0:02:50
 Epoch: 21, lr: 1.0e-02, train_loss: 1.4842, train_acc: 0.4468 test_loss: 1.4141, test_acc: 0.5011, best: 0.5011, time: 0:02:51
 Epoch: 22, lr: 1.0e-02, train_loss: 1.4663, train_acc: 0.4570 test_loss: 1.3701, test_acc: 0.4973, best: 0.5011, time: 0:02:53
 Epoch: 23, lr: 1.0e-02, train_loss: 1.4384, train_acc: 0.4650 test_loss: 1.3480, test_acc: 0.4963, best: 0.5011, time: 0:02:47
 Epoch: 24, lr: 1.0e-02, train_loss: 1.4248, train_acc: 0.4740 test_loss: 1.2859, test_acc: 0.5366, best: 0.5366, time: 0:02:52
 Epoch: 25, lr: 1.0e-02, train_loss: 1.4076, train_acc: 0.4802 test_loss: 1.3399, test_acc: 0.5230, best: 0.5366, time: 0:02:50
 Epoch: 26, lr: 1.0e-02, train_loss: 1.4172, train_acc: 0.4762 test_loss: 1.2283, test_acc: 0.5390, best: 0.5390, time: 0:02:49
 Epoch: 27, lr: 1.0e-02, train_loss: 1.3624, train_acc: 0.4930 test_loss: 1.4483, test_acc: 0.5146, best: 0.5390, time: 0:02:50
 Epoch: 28, lr: 1.0e-02, train_loss: 1.3813, train_acc: 0.4902 test_loss: 1.3377, test_acc: 0.5363, best: 0.5390, time: 0:02:48
 Epoch: 29, lr: 1.0e-02, train_loss: 1.3374, train_acc: 0.5126 test_loss: 1.2626, test_acc: 0.5559, best: 0.5559, time: 0:02:52
 Epoch: 30, lr: 1.0e-02, train_loss: 1.3467, train_acc: 0.5104 test_loss: 1.2290, test_acc: 0.5631, best: 0.5631, time: 0:02:54
 Epoch: 31, lr: 1.0e-02, train_loss: 1.3080, train_acc: 0.5260 test_loss: 1.1972, test_acc: 0.5690, best: 0.5690, time: 0:02:55
 Epoch: 32, lr: 1.0e-02, train_loss: 1.2880, train_acc: 0.5250 test_loss: 1.2795, test_acc: 0.5586, best: 0.5690, time: 0:02:52
 Epoch: 33, lr: 1.0e-02, train_loss: 1.2526, train_acc: 0.5380 test_loss: 1.2825, test_acc: 0.5549, best: 0.5690, time: 0:02:52
 Epoch: 34, lr: 1.0e-02, train_loss: 1.2561, train_acc: 0.5372 test_loss: 1.1558, test_acc: 0.5951, best: 0.5951, time: 0:02:52
 Epoch: 35, lr: 1.0e-02, train_loss: 1.2644, train_acc: 0.5392 test_loss: 1.1575, test_acc: 0.6069, best: 0.6069, time: 0:02:57
 Epoch: 36, lr: 1.0e-02, train_loss: 1.2327, train_acc: 0.5458 test_loss: 1.1892, test_acc: 0.5934, best: 0.6069, time: 0:02:53
 Epoch: 37, lr: 1.0e-02, train_loss: 1.2249, train_acc: 0.5490 test_loss: 1.2849, test_acc: 0.5700, best: 0.6069, time: 0:02:52
 Epoch: 38, lr: 1.0e-02, train_loss: 1.2028, train_acc: 0.5652 test_loss: 1.2353, test_acc: 0.5719, best: 0.6069, time: 0:02:52
 Epoch: 39, lr: 1.0e-02, train_loss: 1.1942, train_acc: 0.5584 test_loss: 1.0853, test_acc: 0.6192, best: 0.6192, time: 0:02:52
 Epoch: 40, lr: 1.0e-02, train_loss: 1.1831, train_acc: 0.5700 test_loss: 1.1790, test_acc: 0.6130, best: 0.6192, time: 0:02:48
 Epoch: 41, lr: 1.0e-02, train_loss: 1.1612, train_acc: 0.5778 test_loss: 1.1289, test_acc: 0.6138, best: 0.6192, time: 0:02:54
 Epoch: 42, lr: 1.0e-02, train_loss: 1.1567, train_acc: 0.5794 test_loss: 1.2229, test_acc: 0.6006, best: 0.6192, time: 0:02:52
 Epoch: 43, lr: 1.0e-02, train_loss: 1.1476, train_acc: 0.5800 test_loss: 1.1910, test_acc: 0.6035, best: 0.6192, time: 0:02:56
 Epoch: 44, lr: 1.0e-02, train_loss: 1.1250, train_acc: 0.5980 test_loss: 1.1572, test_acc: 0.6182, best: 0.6192, time: 0:02:54
 Epoch: 45, lr: 1.0e-02, train_loss: 1.1052, train_acc: 0.6010 test_loss: 1.1087, test_acc: 0.6232, best: 0.6232, time: 0:02:54
 Epoch: 46, lr: 1.0e-02, train_loss: 1.0965, train_acc: 0.6004 test_loss: 1.0736, test_acc: 0.6234, best: 0.6234, time: 0:02:52
 Epoch: 47, lr: 1.0e-02, train_loss: 1.0921, train_acc: 0.6092 test_loss: 1.2053, test_acc: 0.6046, best: 0.6234, time: 0:02:51
 Epoch: 48, lr: 1.0e-02, train_loss: 1.0778, train_acc: 0.6114 test_loss: 1.1323, test_acc: 0.6284, best: 0.6284, time: 0:02:55
 Epoch: 49, lr: 1.0e-02, train_loss: 1.0646, train_acc: 0.6224 test_loss: 1.1249, test_acc: 0.6235, best: 0.6284, time: 0:02:51
 Epoch: 50, lr: 1.0e-02, train_loss: 1.0602, train_acc: 0.6114 test_loss: 1.1189, test_acc: 0.6200, best: 0.6284, time: 0:02:51
 Epoch: 51, lr: 1.0e-02, train_loss: 1.0677, train_acc: 0.6090 test_loss: 1.2667, test_acc: 0.6196, best: 0.6284, time: 0:02:51
 Epoch: 52, lr: 1.0e-02, train_loss: 1.0265, train_acc: 0.6270 test_loss: 1.1966, test_acc: 0.6211, best: 0.6284, time: 0:02:52
 Epoch: 53, lr: 1.0e-02, train_loss: 1.0172, train_acc: 0.6374 test_loss: 1.0225, test_acc: 0.6586, best: 0.6586, time: 0:02:54
 Epoch: 54, lr: 1.0e-02, train_loss: 1.0140, train_acc: 0.6330 test_loss: 1.0800, test_acc: 0.6555, best: 0.6586, time: 0:02:52
 Epoch: 55, lr: 1.0e-02, train_loss: 0.9904, train_acc: 0.6382 test_loss: 1.0479, test_acc: 0.6586, best: 0.6586, time: 0:02:54
 Epoch: 56, lr: 1.0e-02, train_loss: 1.0025, train_acc: 0.6354 test_loss: 1.0626, test_acc: 0.6512, best: 0.6586, time: 0:02:51
 Epoch: 57, lr: 1.0e-02, train_loss: 0.9701, train_acc: 0.6478 test_loss: 1.1198, test_acc: 0.6480, best: 0.6586, time: 0:02:51
 Epoch: 58, lr: 1.0e-02, train_loss: 0.9734, train_acc: 0.6472 test_loss: 1.0784, test_acc: 0.6482, best: 0.6586, time: 0:02:54
 Epoch: 59, lr: 1.0e-02, train_loss: 0.9591, train_acc: 0.6504 test_loss: 1.1104, test_acc: 0.6368, best: 0.6586, time: 0:02:51
 Epoch: 60, lr: 1.0e-02, train_loss: 0.9671, train_acc: 0.6508 test_loss: 1.0863, test_acc: 0.6529, best: 0.6586, time: 0:02:53
 Epoch: 61, lr: 1.0e-02, train_loss: 0.9691, train_acc: 0.6474 test_loss: 1.0949, test_acc: 0.6620, best: 0.6620, time: 0:02:52
 Epoch: 62, lr: 1.0e-02, train_loss: 0.9191, train_acc: 0.6738 test_loss: 1.0569, test_acc: 0.6536, best: 0.6620, time: 0:02:51
 Epoch: 63, lr: 1.0e-02, train_loss: 0.9347, train_acc: 0.6646 test_loss: 1.1186, test_acc: 0.6438, best: 0.6620, time: 0:02:49
 Epoch: 64, lr: 1.0e-02, train_loss: 0.9042, train_acc: 0.6740 test_loss: 1.1882, test_acc: 0.6410, best: 0.6620, time: 0:02:54
 Epoch: 65, lr: 1.0e-02, train_loss: 0.9056, train_acc: 0.6768 test_loss: 1.0981, test_acc: 0.6590, best: 0.6620, time: 0:02:52
 Epoch: 66, lr: 1.0e-02, train_loss: 0.9057, train_acc: 0.6846 test_loss: 0.9878, test_acc: 0.6891, best: 0.6891, time: 0:02:56
 Epoch: 67, lr: 1.0e-02, train_loss: 0.9144, train_acc: 0.6696 test_loss: 1.0686, test_acc: 0.6581, best: 0.6891, time: 0:02:51
 Epoch: 68, lr: 1.0e-02, train_loss: 0.8843, train_acc: 0.6760 test_loss: 1.0326, test_acc: 0.6671, best: 0.6891, time: 0:02:51
 Epoch: 69, lr: 1.0e-02, train_loss: 0.8628, train_acc: 0.6874 test_loss: 0.9931, test_acc: 0.6885, best: 0.6891, time: 0:02:54
 Epoch: 70, lr: 1.0e-02, train_loss: 0.8895, train_acc: 0.6804 test_loss: 1.1405, test_acc: 0.6580, best: 0.6891, time: 0:02:53
 Epoch: 71, lr: 1.0e-02, train_loss: 0.8581, train_acc: 0.6934 test_loss: 1.1285, test_acc: 0.6528, best: 0.6891, time: 0:02:52
 Epoch: 72, lr: 1.0e-02, train_loss: 0.8383, train_acc: 0.7004 test_loss: 1.0813, test_acc: 0.6696, best: 0.6891, time: 0:02:50
 Epoch: 73, lr: 1.0e-02, train_loss: 0.8453, train_acc: 0.6898 test_loss: 1.0527, test_acc: 0.6734, best: 0.6891, time: 0:02:50
 Epoch: 74, lr: 1.0e-02, train_loss: 0.8250, train_acc: 0.7092 test_loss: 1.0133, test_acc: 0.6761, best: 0.6891, time: 0:02:49
 Epoch: 75, lr: 1.0e-02, train_loss: 0.8269, train_acc: 0.7042 test_loss: 0.9818, test_acc: 0.6876, best: 0.6891, time: 0:02:52
 Epoch: 76, lr: 1.0e-02, train_loss: 0.8117, train_acc: 0.7068 test_loss: 0.9711, test_acc: 0.6994, best: 0.6994, time: 0:02:56
 Epoch: 77, lr: 1.0e-02, train_loss: 0.8134, train_acc: 0.7084 test_loss: 1.0605, test_acc: 0.6663, best: 0.6994, time: 0:02:53
 Epoch: 78, lr: 1.0e-02, train_loss: 0.7956, train_acc: 0.7192 test_loss: 1.0569, test_acc: 0.6843, best: 0.6994, time: 0:02:52
 Epoch: 79, lr: 1.0e-02, train_loss: 0.8088, train_acc: 0.7116 test_loss: 1.0083, test_acc: 0.6859, best: 0.6994, time: 0:02:51
 Epoch: 80, lr: 1.0e-02, train_loss: 0.7899, train_acc: 0.7172 test_loss: 1.0707, test_acc: 0.6884, best: 0.6994, time: 0:02:51
 Epoch: 81, lr: 1.0e-02, train_loss: 0.7719, train_acc: 0.7260 test_loss: 1.0263, test_acc: 0.6986, best: 0.6994, time: 0:02:50
 Epoch: 82, lr: 1.0e-02, train_loss: 0.8029, train_acc: 0.7122 test_loss: 0.9606, test_acc: 0.7066, best: 0.7066, time: 0:02:53
 Epoch: 83, lr: 1.0e-02, train_loss: 0.7739, train_acc: 0.7240 test_loss: 1.1058, test_acc: 0.6844, best: 0.7066, time: 0:02:52
 Epoch: 84, lr: 1.0e-02, train_loss: 0.7829, train_acc: 0.7232 test_loss: 1.1197, test_acc: 0.6770, best: 0.7066, time: 0:02:53
 Epoch: 85, lr: 1.0e-02, train_loss: 0.7360, train_acc: 0.7352 test_loss: 1.1263, test_acc: 0.6835, best: 0.7066, time: 0:02:51
 Epoch: 86, lr: 1.0e-02, train_loss: 0.7613, train_acc: 0.7298 test_loss: 1.0253, test_acc: 0.6820, best: 0.7066, time: 0:02:46
 Epoch: 87, lr: 1.0e-02, train_loss: 0.7394, train_acc: 0.7332 test_loss: 1.0771, test_acc: 0.6694, best: 0.7066, time: 0:02:49
 Epoch: 88, lr: 1.0e-02, train_loss: 0.7267, train_acc: 0.7428 test_loss: 1.0783, test_acc: 0.6991, best: 0.7066, time: 0:02:49
 Epoch: 89, lr: 1.0e-02, train_loss: 0.7210, train_acc: 0.7486 test_loss: 1.2434, test_acc: 0.6805, best: 0.7066, time: 0:02:45
 Epoch: 90, lr: 1.0e-02, train_loss: 0.7238, train_acc: 0.7434 test_loss: 1.0090, test_acc: 0.6979, best: 0.7066, time: 0:02:46
 Epoch: 91, lr: 1.0e-02, train_loss: 0.6991, train_acc: 0.7510 test_loss: 1.0527, test_acc: 0.6974, best: 0.7066, time: 0:02:46
 Epoch: 92, lr: 1.0e-02, train_loss: 0.7310, train_acc: 0.7430 test_loss: 1.0587, test_acc: 0.6920, best: 0.7066, time: 0:02:46
 Epoch: 93, lr: 1.0e-02, train_loss: 0.6938, train_acc: 0.7542 test_loss: 1.1161, test_acc: 0.6955, best: 0.7066, time: 0:02:49
 Epoch: 94, lr: 1.0e-02, train_loss: 0.7043, train_acc: 0.7530 test_loss: 1.0744, test_acc: 0.6841, best: 0.7066, time: 0:02:54
 Epoch: 95, lr: 1.0e-02, train_loss: 0.6966, train_acc: 0.7536 test_loss: 1.0060, test_acc: 0.7165, best: 0.7165, time: 0:02:52
 Epoch: 96, lr: 1.0e-02, train_loss: 0.7082, train_acc: 0.7554 test_loss: 1.0857, test_acc: 0.6845, best: 0.7165, time: 0:02:49
 Epoch: 97, lr: 1.0e-02, train_loss: 0.6804, train_acc: 0.7590 test_loss: 1.0284, test_acc: 0.6969, best: 0.7165, time: 0:02:50
 Epoch: 98, lr: 1.0e-02, train_loss: 0.6574, train_acc: 0.7638 test_loss: 1.0519, test_acc: 0.6950, best: 0.7165, time: 0:02:51
 Epoch: 99, lr: 1.0e-02, train_loss: 0.6737, train_acc: 0.7656 test_loss: 1.0309, test_acc: 0.7011, best: 0.7165, time: 0:02:49
 Epoch: 100, lr: 1.0e-02, train_loss: 0.6691, train_acc: 0.7680 test_loss: 1.0500, test_acc: 0.7147, best: 0.7165, time: 0:02:49
 Epoch: 101, lr: 1.0e-02, train_loss: 0.6602, train_acc: 0.7666 test_loss: 1.0502, test_acc: 0.7075, best: 0.7165, time: 0:02:50
 Epoch: 102, lr: 1.0e-02, train_loss: 0.6837, train_acc: 0.7656 test_loss: 1.0097, test_acc: 0.7007, best: 0.7165, time: 0:02:50
 Epoch: 103, lr: 1.0e-02, train_loss: 0.6348, train_acc: 0.7808 test_loss: 1.1955, test_acc: 0.6805, best: 0.7165, time: 0:02:48
 Epoch: 104, lr: 1.0e-02, train_loss: 0.6569, train_acc: 0.7710 test_loss: 1.0830, test_acc: 0.6985, best: 0.7165, time: 0:02:47
 Epoch: 105, lr: 1.0e-02, train_loss: 0.6280, train_acc: 0.7752 test_loss: 1.1307, test_acc: 0.6897, best: 0.7165, time: 0:02:47
 Epoch: 106, lr: 1.0e-02, train_loss: 0.6522, train_acc: 0.7660 test_loss: 1.0814, test_acc: 0.7029, best: 0.7165, time: 0:02:49
 Epoch: 107, lr: 1.0e-02, train_loss: 0.6369, train_acc: 0.7748 test_loss: 1.0591, test_acc: 0.7119, best: 0.7165, time: 0:02:47
 Epoch: 108, lr: 1.0e-02, train_loss: 0.6105, train_acc: 0.7840 test_loss: 1.0824, test_acc: 0.7190, best: 0.7190, time: 0:02:48
 Epoch: 109, lr: 1.0e-02, train_loss: 0.6183, train_acc: 0.7864 test_loss: 0.9998, test_acc: 0.7206, best: 0.7206, time: 0:02:46
 Epoch: 110, lr: 1.0e-02, train_loss: 0.6188, train_acc: 0.7850 test_loss: 1.0208, test_acc: 0.7266, best: 0.7266, time: 0:02:48
 Epoch: 111, lr: 1.0e-02, train_loss: 0.5994, train_acc: 0.7902 test_loss: 1.0372, test_acc: 0.7305, best: 0.7305, time: 0:02:49
 Epoch: 112, lr: 1.0e-02, train_loss: 0.6148, train_acc: 0.7826 test_loss: 1.1557, test_acc: 0.7027, best: 0.7305, time: 0:02:47
 Epoch: 113, lr: 1.0e-02, train_loss: 0.6025, train_acc: 0.7864 test_loss: 1.1316, test_acc: 0.7091, best: 0.7305, time: 0:02:47
 Epoch: 114, lr: 1.0e-02, train_loss: 0.6174, train_acc: 0.7838 test_loss: 1.1156, test_acc: 0.7074, best: 0.7305, time: 0:02:46
 Epoch: 115, lr: 1.0e-02, train_loss: 0.5994, train_acc: 0.7904 test_loss: 1.0163, test_acc: 0.7238, best: 0.7305, time: 0:02:47
 Epoch: 116, lr: 1.0e-02, train_loss: 0.5686, train_acc: 0.7992 test_loss: 1.1060, test_acc: 0.7209, best: 0.7305, time: 0:02:46
 Epoch: 117, lr: 1.0e-02, train_loss: 0.5831, train_acc: 0.7896 test_loss: 1.0777, test_acc: 0.7117, best: 0.7305, time: 0:02:44
 Epoch: 118, lr: 1.0e-02, train_loss: 0.5804, train_acc: 0.7998 test_loss: 1.0954, test_acc: 0.7177, best: 0.7305, time: 0:02:46
 Epoch: 119, lr: 1.0e-02, train_loss: 0.5633, train_acc: 0.8106 test_loss: 1.1190, test_acc: 0.7130, best: 0.7305, time: 0:02:47
 Epoch: 120, lr: 1.0e-02, train_loss: 0.5690, train_acc: 0.7972 test_loss: 1.1607, test_acc: 0.7123, best: 0.7305, time: 0:02:46
 Epoch: 121, lr: 1.0e-02, train_loss: 0.5749, train_acc: 0.7992 test_loss: 1.0389, test_acc: 0.7318, best: 0.7318, time: 0:02:48
 Epoch: 122, lr: 1.0e-02, train_loss: 0.5730, train_acc: 0.8052 test_loss: 1.0043, test_acc: 0.7368, best: 0.7368, time: 0:02:46
 Epoch: 123, lr: 1.0e-02, train_loss: 0.5367, train_acc: 0.8142 test_loss: 1.0435, test_acc: 0.7386, best: 0.7386, time: 0:02:46
 Epoch: 124, lr: 1.0e-02, train_loss: 0.5657, train_acc: 0.7970 test_loss: 1.0908, test_acc: 0.7248, best: 0.7386, time: 0:02:45
 Epoch: 125, lr: 1.0e-02, train_loss: 0.5815, train_acc: 0.7940 test_loss: 1.0857, test_acc: 0.7258, best: 0.7386, time: 0:02:48
 Epoch: 126, lr: 1.0e-02, train_loss: 0.5723, train_acc: 0.7938 test_loss: 1.1167, test_acc: 0.7246, best: 0.7386, time: 0:02:47
 Epoch: 127, lr: 1.0e-02, train_loss: 0.5601, train_acc: 0.8034 test_loss: 1.0672, test_acc: 0.7239, best: 0.7386, time: 0:02:46
 Epoch: 128, lr: 1.0e-02, train_loss: 0.5387, train_acc: 0.8120 test_loss: 1.0553, test_acc: 0.7310, best: 0.7386, time: 0:02:44
 Epoch: 129, lr: 1.0e-02, train_loss: 0.5353, train_acc: 0.8096 test_loss: 1.0320, test_acc: 0.7391, best: 0.7391, time: 0:02:48
 Epoch: 130, lr: 1.0e-02, train_loss: 0.5096, train_acc: 0.8202 test_loss: 1.1439, test_acc: 0.7215, best: 0.7391, time: 0:02:49
 Epoch: 131, lr: 1.0e-02, train_loss: 0.5167, train_acc: 0.8194 test_loss: 1.0554, test_acc: 0.7248, best: 0.7391, time: 0:02:45
 Epoch: 132, lr: 1.0e-02, train_loss: 0.5261, train_acc: 0.8130 test_loss: 1.1235, test_acc: 0.7218, best: 0.7391, time: 0:02:47
 Epoch: 133, lr: 1.0e-02, train_loss: 0.5396, train_acc: 0.8152 test_loss: 1.0315, test_acc: 0.7274, best: 0.7391, time: 0:02:47
 Epoch: 134, lr: 1.0e-02, train_loss: 0.5203, train_acc: 0.8178 test_loss: 1.0646, test_acc: 0.7290, best: 0.7391, time: 0:02:45
 Epoch: 135, lr: 1.0e-02, train_loss: 0.5102, train_acc: 0.8228 test_loss: 1.2100, test_acc: 0.7170, best: 0.7391, time: 0:02:44
 Epoch: 136, lr: 1.0e-02, train_loss: 0.5041, train_acc: 0.8210 test_loss: 1.0345, test_acc: 0.7370, best: 0.7391, time: 0:02:46
 Epoch: 137, lr: 1.0e-02, train_loss: 0.5190, train_acc: 0.8198 test_loss: 1.3645, test_acc: 0.7023, best: 0.7391, time: 0:02:47
 Epoch: 138, lr: 1.0e-02, train_loss: 0.4959, train_acc: 0.8296 test_loss: 1.1154, test_acc: 0.7305, best: 0.7391, time: 0:02:44
 Epoch: 139, lr: 1.0e-02, train_loss: 0.5178, train_acc: 0.8160 test_loss: 1.0381, test_acc: 0.7411, best: 0.7411, time: 0:02:50
 Epoch: 140, lr: 1.0e-02, train_loss: 0.4991, train_acc: 0.8270 test_loss: 1.0683, test_acc: 0.7240, best: 0.7411, time: 0:02:53
 Epoch: 141, lr: 1.0e-02, train_loss: 0.5194, train_acc: 0.8200 test_loss: 1.0085, test_acc: 0.7334, best: 0.7411, time: 0:02:55
 Epoch: 142, lr: 1.0e-02, train_loss: 0.5000, train_acc: 0.8260 test_loss: 1.0595, test_acc: 0.7381, best: 0.7411, time: 0:02:50
 Epoch: 143, lr: 1.0e-02, train_loss: 0.4708, train_acc: 0.8360 test_loss: 1.0670, test_acc: 0.7250, best: 0.7411, time: 0:02:48
 Epoch: 144, lr: 1.0e-02, train_loss: 0.4893, train_acc: 0.8326 test_loss: 1.1860, test_acc: 0.7140, best: 0.7411, time: 0:02:46
 Epoch: 145, lr: 1.0e-02, train_loss: 0.4949, train_acc: 0.8272 test_loss: 1.1242, test_acc: 0.7270, best: 0.7411, time: 0:02:47
 Epoch: 146, lr: 1.0e-02, train_loss: 0.4683, train_acc: 0.8344 test_loss: 1.1980, test_acc: 0.7376, best: 0.7411, time: 0:02:46
 Epoch: 147, lr: 1.0e-02, train_loss: 0.4884, train_acc: 0.8326 test_loss: 1.0623, test_acc: 0.7368, best: 0.7411, time: 0:02:47
 Epoch: 148, lr: 1.0e-02, train_loss: 0.5004, train_acc: 0.8286 test_loss: 1.0743, test_acc: 0.7382, best: 0.7411, time: 0:02:44
 Epoch: 149, lr: 1.0e-02, train_loss: 0.5032, train_acc: 0.8252 test_loss: 1.0548, test_acc: 0.7225, best: 0.7411, time: 0:02:48
 Epoch: 150, lr: 1.0e-02, train_loss: 0.4769, train_acc: 0.8248 test_loss: 1.0294, test_acc: 0.7409, best: 0.7411, time: 0:02:50
 Epoch: 151, lr: 1.0e-02, train_loss: 0.4711, train_acc: 0.8386 test_loss: 1.2144, test_acc: 0.7209, best: 0.7411, time: 0:02:51
 Epoch: 152, lr: 1.0e-02, train_loss: 0.4862, train_acc: 0.8328 test_loss: 1.1746, test_acc: 0.7225, best: 0.7411, time: 0:02:50
 Epoch: 153, lr: 1.0e-02, train_loss: 0.4651, train_acc: 0.8338 test_loss: 1.0753, test_acc: 0.7330, best: 0.7411, time: 0:02:50
 Epoch: 154, lr: 1.0e-02, train_loss: 0.4663, train_acc: 0.8364 test_loss: 1.1912, test_acc: 0.7462, best: 0.7462, time: 0:02:52
 Epoch: 155, lr: 1.0e-02, train_loss: 0.4449, train_acc: 0.8452 test_loss: 1.2337, test_acc: 0.7236, best: 0.7462, time: 0:02:47
 Epoch: 156, lr: 1.0e-02, train_loss: 0.4584, train_acc: 0.8410 test_loss: 1.2980, test_acc: 0.7252, best: 0.7462, time: 0:02:50
 Epoch: 157, lr: 1.0e-02, train_loss: 0.4650, train_acc: 0.8348 test_loss: 1.1811, test_acc: 0.7406, best: 0.7462, time: 0:02:47
 Epoch: 158, lr: 1.0e-02, train_loss: 0.4448, train_acc: 0.8468 test_loss: 1.1635, test_acc: 0.7330, best: 0.7462, time: 0:02:48
 Epoch: 159, lr: 1.0e-02, train_loss: 0.4658, train_acc: 0.8344 test_loss: 1.0900, test_acc: 0.7388, best: 0.7462, time: 0:02:48
 Epoch: 160, lr: 1.0e-02, train_loss: 0.4384, train_acc: 0.8464 test_loss: 1.2109, test_acc: 0.7291, best: 0.7462, time: 0:02:50
 Epoch: 161, lr: 1.0e-02, train_loss: 0.4589, train_acc: 0.8464 test_loss: 1.1820, test_acc: 0.7322, best: 0.7462, time: 0:02:49
 Epoch: 162, lr: 1.0e-02, train_loss: 0.4422, train_acc: 0.8458 test_loss: 1.1033, test_acc: 0.7362, best: 0.7462, time: 0:02:51
 Epoch: 163, lr: 1.0e-02, train_loss: 0.4423, train_acc: 0.8468 test_loss: 1.1418, test_acc: 0.7302, best: 0.7462, time: 0:02:51
 Epoch: 164, lr: 1.0e-02, train_loss: 0.4209, train_acc: 0.8526 test_loss: 1.1318, test_acc: 0.7481, best: 0.7481, time: 0:02:49
 Epoch: 165, lr: 1.0e-02, train_loss: 0.4464, train_acc: 0.8406 test_loss: 1.1320, test_acc: 0.7442, best: 0.7481, time: 0:02:48
 Epoch: 166, lr: 1.0e-02, train_loss: 0.4382, train_acc: 0.8488 test_loss: 1.2470, test_acc: 0.7308, best: 0.7481, time: 0:02:49
 Epoch: 167, lr: 1.0e-02, train_loss: 0.4240, train_acc: 0.8546 test_loss: 1.1614, test_acc: 0.7261, best: 0.7481, time: 0:02:50
 Epoch: 168, lr: 1.0e-02, train_loss: 0.4336, train_acc: 0.8464 test_loss: 1.1568, test_acc: 0.7369, best: 0.7481, time: 0:02:48
 Epoch: 169, lr: 1.0e-02, train_loss: 0.4300, train_acc: 0.8542 test_loss: 1.1214, test_acc: 0.7326, best: 0.7481, time: 0:02:48
 Epoch: 170, lr: 1.0e-02, train_loss: 0.4363, train_acc: 0.8532 test_loss: 1.1886, test_acc: 0.7252, best: 0.7481, time: 0:02:51
 Epoch: 171, lr: 1.0e-02, train_loss: 0.4416, train_acc: 0.8496 test_loss: 1.1986, test_acc: 0.7361, best: 0.7481, time: 0:02:50
 Epoch: 172, lr: 1.0e-02, train_loss: 0.4228, train_acc: 0.8518 test_loss: 1.2022, test_acc: 0.7249, best: 0.7481, time: 0:02:49
 Epoch: 173, lr: 1.0e-02, train_loss: 0.4207, train_acc: 0.8488 test_loss: 1.0627, test_acc: 0.7492, best: 0.7492, time: 0:02:53
 Epoch: 174, lr: 1.0e-02, train_loss: 0.4109, train_acc: 0.8584 test_loss: 1.2030, test_acc: 0.7445, best: 0.7492, time: 0:02:49
 Epoch: 175, lr: 1.0e-02, train_loss: 0.4291, train_acc: 0.8522 test_loss: 1.2135, test_acc: 0.7285, best: 0.7492, time: 0:02:48
 Epoch: 176, lr: 1.0e-02, train_loss: 0.4343, train_acc: 0.8454 test_loss: 1.2435, test_acc: 0.7252, best: 0.7492, time: 0:02:48
 Epoch: 177, lr: 1.0e-02, train_loss: 0.4082, train_acc: 0.8564 test_loss: 1.1161, test_acc: 0.7449, best: 0.7492, time: 0:02:50
 Epoch: 178, lr: 1.0e-02, train_loss: 0.4272, train_acc: 0.8516 test_loss: 1.1554, test_acc: 0.7402, best: 0.7492, time: 0:02:48
 Epoch: 179, lr: 1.0e-02, train_loss: 0.4204, train_acc: 0.8474 test_loss: 1.2405, test_acc: 0.7382, best: 0.7492, time: 0:03:00
 Epoch: 180, lr: 2.0e-03, train_loss: 0.3722, train_acc: 0.8724 test_loss: 1.1263, test_acc: 0.7602, best: 0.7602, time: 0:02:57
 Epoch: 181, lr: 2.0e-03, train_loss: 0.3378, train_acc: 0.8798 test_loss: 1.1180, test_acc: 0.7668, best: 0.7668, time: 0:02:54
 Epoch: 182, lr: 2.0e-03, train_loss: 0.3241, train_acc: 0.8898 test_loss: 1.1048, test_acc: 0.7598, best: 0.7668, time: 0:02:47
 Epoch: 183, lr: 2.0e-03, train_loss: 0.3107, train_acc: 0.8900 test_loss: 1.1332, test_acc: 0.7526, best: 0.7668, time: 0:02:50
 Epoch: 184, lr: 2.0e-03, train_loss: 0.3259, train_acc: 0.8858 test_loss: 1.1028, test_acc: 0.7655, best: 0.7668, time: 0:02:48
 Epoch: 185, lr: 2.0e-03, train_loss: 0.2959, train_acc: 0.9000 test_loss: 1.0735, test_acc: 0.7719, best: 0.7719, time: 0:02:50
 Epoch: 186, lr: 2.0e-03, train_loss: 0.3250, train_acc: 0.8902 test_loss: 1.1170, test_acc: 0.7600, best: 0.7719, time: 0:02:47
 Epoch: 187, lr: 2.0e-03, train_loss: 0.3080, train_acc: 0.8932 test_loss: 1.0947, test_acc: 0.7685, best: 0.7719, time: 0:02:50
 Epoch: 188, lr: 2.0e-03, train_loss: 0.2803, train_acc: 0.8992 test_loss: 1.1527, test_acc: 0.7569, best: 0.7719, time: 0:02:47
 Epoch: 189, lr: 2.0e-03, train_loss: 0.3079, train_acc: 0.8900 test_loss: 1.0655, test_acc: 0.7656, best: 0.7719, time: 0:02:50
 Epoch: 190, lr: 2.0e-03, train_loss: 0.2969, train_acc: 0.8976 test_loss: 1.1091, test_acc: 0.7609, best: 0.7719, time: 0:02:49
 Epoch: 191, lr: 2.0e-03, train_loss: 0.2906, train_acc: 0.9054 test_loss: 1.1460, test_acc: 0.7565, best: 0.7719, time: 0:02:48
 Epoch: 192, lr: 2.0e-03, train_loss: 0.2858, train_acc: 0.9024 test_loss: 1.1496, test_acc: 0.7610, best: 0.7719, time: 0:02:54
 Epoch: 193, lr: 2.0e-03, train_loss: 0.2960, train_acc: 0.8952 test_loss: 1.1304, test_acc: 0.7605, best: 0.7719, time: 0:02:48
 Epoch: 194, lr: 2.0e-03, train_loss: 0.2685, train_acc: 0.9082 test_loss: 1.1397, test_acc: 0.7591, best: 0.7719, time: 0:02:49
 Epoch: 195, lr: 2.0e-03, train_loss: 0.2989, train_acc: 0.8946 test_loss: 1.1219, test_acc: 0.7682, best: 0.7719, time: 0:02:48
 Epoch: 196, lr: 2.0e-03, train_loss: 0.2774, train_acc: 0.9048 test_loss: 1.1047, test_acc: 0.7689, best: 0.7719, time: 0:02:48
 Epoch: 197, lr: 2.0e-03, train_loss: 0.2968, train_acc: 0.8964 test_loss: 1.2214, test_acc: 0.7551, best: 0.7719, time: 0:02:48
 Epoch: 198, lr: 2.0e-03, train_loss: 0.3064, train_acc: 0.8966 test_loss: 1.1809, test_acc: 0.7615, best: 0.7719, time: 0:02:51
 Epoch: 199, lr: 2.0e-03, train_loss: 0.2884, train_acc: 0.8948 test_loss: 1.1118, test_acc: 0.7692, best: 0.7719, time: 0:02:51
 Epoch: 200, lr: 2.0e-03, train_loss: 0.2817, train_acc: 0.9036 test_loss: 1.1008, test_acc: 0.7675, best: 0.7719, time: 0:02:49
 Epoch: 201, lr: 2.0e-03, train_loss: 0.2940, train_acc: 0.9014 test_loss: 1.1683, test_acc: 0.7618, best: 0.7719, time: 0:02:48
 Epoch: 202, lr: 2.0e-03, train_loss: 0.2695, train_acc: 0.9134 test_loss: 1.1296, test_acc: 0.7655, best: 0.7719, time: 0:02:47
 Epoch: 203, lr: 2.0e-03, train_loss: 0.2802, train_acc: 0.9020 test_loss: 1.1279, test_acc: 0.7618, best: 0.7719, time: 0:02:54
 Epoch: 204, lr: 2.0e-03, train_loss: 0.2799, train_acc: 0.9032 test_loss: 1.1883, test_acc: 0.7485, best: 0.7719, time: 0:02:47
 Epoch: 205, lr: 2.0e-03, train_loss: 0.2725, train_acc: 0.9070 test_loss: 1.1629, test_acc: 0.7661, best: 0.7719, time: 0:02:51
 Epoch: 206, lr: 2.0e-03, train_loss: 0.2825, train_acc: 0.9058 test_loss: 1.2197, test_acc: 0.7512, best: 0.7719, time: 0:02:49
 Epoch: 207, lr: 2.0e-03, train_loss: 0.2545, train_acc: 0.9102 test_loss: 1.2215, test_acc: 0.7582, best: 0.7719, time: 0:02:48
 Epoch: 208, lr: 2.0e-03, train_loss: 0.2707, train_acc: 0.9044 test_loss: 1.2196, test_acc: 0.7602, best: 0.7719, time: 0:02:50
 Epoch: 209, lr: 2.0e-03, train_loss: 0.2675, train_acc: 0.9066 test_loss: 1.1017, test_acc: 0.7664, best: 0.7719, time: 0:02:48
 Epoch: 210, lr: 2.0e-03, train_loss: 0.2525, train_acc: 0.9100 test_loss: 1.1957, test_acc: 0.7570, best: 0.7719, time: 0:02:47
 Epoch: 211, lr: 2.0e-03, train_loss: 0.2651, train_acc: 0.9102 test_loss: 1.1046, test_acc: 0.7668, best: 0.7719, time: 0:02:47
 Epoch: 212, lr: 2.0e-03, train_loss: 0.2617, train_acc: 0.9120 test_loss: 1.1741, test_acc: 0.7608, best: 0.7719, time: 0:02:46
 Epoch: 213, lr: 2.0e-03, train_loss: 0.2488, train_acc: 0.9086 test_loss: 1.2110, test_acc: 0.7630, best: 0.7719, time: 0:02:48
 Epoch: 214, lr: 2.0e-03, train_loss: 0.2699, train_acc: 0.9068 test_loss: 1.2078, test_acc: 0.7610, best: 0.7719, time: 0:02:45
 Epoch: 215, lr: 2.0e-03, train_loss: 0.2629, train_acc: 0.9128 test_loss: 1.1471, test_acc: 0.7660, best: 0.7719, time: 0:02:46
 Epoch: 216, lr: 2.0e-03, train_loss: 0.2675, train_acc: 0.9068 test_loss: 1.1013, test_acc: 0.7676, best: 0.7719, time: 0:02:50
 Epoch: 217, lr: 2.0e-03, train_loss: 0.2500, train_acc: 0.9140 test_loss: 1.1188, test_acc: 0.7651, best: 0.7719, time: 0:02:48
 Epoch: 218, lr: 2.0e-03, train_loss: 0.2808, train_acc: 0.9008 test_loss: 1.1194, test_acc: 0.7688, best: 0.7719, time: 0:02:50
 Epoch: 219, lr: 2.0e-03, train_loss: 0.2728, train_acc: 0.9054 test_loss: 1.1122, test_acc: 0.7652, best: 0.7719, time: 0:02:49
 Epoch: 220, lr: 2.0e-03, train_loss: 0.2588, train_acc: 0.9118 test_loss: 1.1362, test_acc: 0.7620, best: 0.7719, time: 0:02:50
 Epoch: 221, lr: 2.0e-03, train_loss: 0.2654, train_acc: 0.9104 test_loss: 1.1032, test_acc: 0.7665, best: 0.7719, time: 0:02:49
 Epoch: 222, lr: 2.0e-03, train_loss: 0.2480, train_acc: 0.9166 test_loss: 1.1390, test_acc: 0.7651, best: 0.7719, time: 0:02:48
 Epoch: 223, lr: 2.0e-03, train_loss: 0.2557, train_acc: 0.9090 test_loss: 1.1812, test_acc: 0.7659, best: 0.7719, time: 0:02:47
 Epoch: 224, lr: 2.0e-03, train_loss: 0.2687, train_acc: 0.9100 test_loss: 1.1735, test_acc: 0.7644, best: 0.7719, time: 0:02:49
 Epoch: 225, lr: 2.0e-03, train_loss: 0.2641, train_acc: 0.9068 test_loss: 1.1604, test_acc: 0.7578, best: 0.7719, time: 0:02:47
 Epoch: 226, lr: 2.0e-03, train_loss: 0.2534, train_acc: 0.9156 test_loss: 1.1804, test_acc: 0.7599, best: 0.7719, time: 0:02:47
 Epoch: 227, lr: 2.0e-03, train_loss: 0.2784, train_acc: 0.9066 test_loss: 1.1916, test_acc: 0.7629, best: 0.7719, time: 0:02:45
 Epoch: 228, lr: 2.0e-03, train_loss: 0.2700, train_acc: 0.9080 test_loss: 1.1726, test_acc: 0.7621, best: 0.7719, time: 0:02:47
 Epoch: 229, lr: 2.0e-03, train_loss: 0.2665, train_acc: 0.9116 test_loss: 1.2294, test_acc: 0.7595, best: 0.7719, time: 0:02:45
 Epoch: 230, lr: 2.0e-03, train_loss: 0.2633, train_acc: 0.9092 test_loss: 1.1642, test_acc: 0.7635, best: 0.7719, time: 0:02:46
 Epoch: 231, lr: 2.0e-03, train_loss: 0.2625, train_acc: 0.9112 test_loss: 1.1192, test_acc: 0.7596, best: 0.7719, time: 0:02:46
 Epoch: 232, lr: 2.0e-03, train_loss: 0.2534, train_acc: 0.9130 test_loss: 1.1384, test_acc: 0.7640, best: 0.7719, time: 0:02:49
 Epoch: 233, lr: 2.0e-03, train_loss: 0.2475, train_acc: 0.9132 test_loss: 1.1330, test_acc: 0.7585, best: 0.7719, time: 0:02:49
 Epoch: 234, lr: 2.0e-03, train_loss: 0.2531, train_acc: 0.9134 test_loss: 1.1195, test_acc: 0.7651, best: 0.7719, time: 0:02:52
 Epoch: 235, lr: 2.0e-03, train_loss: 0.2509, train_acc: 0.9160 test_loss: 1.1693, test_acc: 0.7620, best: 0.7719, time: 0:02:52
 Epoch: 236, lr: 2.0e-03, train_loss: 0.2474, train_acc: 0.9170 test_loss: 1.1032, test_acc: 0.7722, best: 0.7722, time: 0:02:49
 Epoch: 237, lr: 2.0e-03, train_loss: 0.2518, train_acc: 0.9188 test_loss: 1.1690, test_acc: 0.7640, best: 0.7722, time: 0:02:45
 Epoch: 238, lr: 2.0e-03, train_loss: 0.2414, train_acc: 0.9148 test_loss: 1.1368, test_acc: 0.7662, best: 0.7722, time: 0:02:55
 Epoch: 239, lr: 2.0e-03, train_loss: 0.2500, train_acc: 0.9136 test_loss: 1.1599, test_acc: 0.7599, best: 0.7722, time: 0:02:52
 Epoch: 240, lr: 4.0e-04, train_loss: 0.2438, train_acc: 0.9146 test_loss: 1.1817, test_acc: 0.7638, best: 0.7722, time: 0:02:48
 Epoch: 241, lr: 4.0e-04, train_loss: 0.2438, train_acc: 0.9110 test_loss: 1.0989, test_acc: 0.7658, best: 0.7722, time: 0:02:52
 Epoch: 242, lr: 4.0e-04, train_loss: 0.2349, train_acc: 0.9192 test_loss: 1.1183, test_acc: 0.7640, best: 0.7722, time: 0:02:51
 Epoch: 243, lr: 4.0e-04, train_loss: 0.2307, train_acc: 0.9228 test_loss: 1.1289, test_acc: 0.7649, best: 0.7722, time: 0:02:48
 Epoch: 244, lr: 4.0e-04, train_loss: 0.2235, train_acc: 0.9270 test_loss: 1.1332, test_acc: 0.7650, best: 0.7722, time: 0:02:50
 Epoch: 245, lr: 4.0e-04, train_loss: 0.2336, train_acc: 0.9144 test_loss: 1.1636, test_acc: 0.7694, best: 0.7722, time: 0:02:50
 Epoch: 246, lr: 4.0e-04, train_loss: 0.2531, train_acc: 0.9104 test_loss: 1.0806, test_acc: 0.7731, best: 0.7731, time: 0:02:54
 Epoch: 247, lr: 4.0e-04, train_loss: 0.2453, train_acc: 0.9200 test_loss: 1.1247, test_acc: 0.7654, best: 0.7731, time: 0:02:46
 Epoch: 248, lr: 4.0e-04, train_loss: 0.2333, train_acc: 0.9234 test_loss: 1.1416, test_acc: 0.7696, best: 0.7731, time: 0:03:00
 Epoch: 249, lr: 4.0e-04, train_loss: 0.2485, train_acc: 0.9172 test_loss: 1.1034, test_acc: 0.7669, best: 0.7731, time: 0:03:21
 Epoch: 250, lr: 4.0e-04, train_loss: 0.2185, train_acc: 0.9226 test_loss: 1.1565, test_acc: 0.7658, best: 0.7731, time: 0:03:49
 Epoch: 251, lr: 4.0e-04, train_loss: 0.2383, train_acc: 0.9198 test_loss: 1.1263, test_acc: 0.7680, best: 0.7731, time: 0:02:59
 Epoch: 252, lr: 4.0e-04, train_loss: 0.2542, train_acc: 0.9126 test_loss: 1.1346, test_acc: 0.7686, best: 0.7731, time: 0:03:31
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2346, train_acc: 0.9204 test_loss: 1.1421, test_acc: 0.7641, best: 0.7731, time: 0:03:33
 Epoch: 254, lr: 4.0e-04, train_loss: 0.2432, train_acc: 0.9132 test_loss: 1.1467, test_acc: 0.7640, best: 0.7731, time: 0:03:22
 Epoch: 255, lr: 4.0e-04, train_loss: 0.2315, train_acc: 0.9196 test_loss: 1.1400, test_acc: 0.7644, best: 0.7731, time: 0:03:32
 Epoch: 256, lr: 4.0e-04, train_loss: 0.2434, train_acc: 0.9160 test_loss: 1.1682, test_acc: 0.7628, best: 0.7731, time: 0:03:03
 Epoch: 257, lr: 4.0e-04, train_loss: 0.2306, train_acc: 0.9194 test_loss: 1.1551, test_acc: 0.7648, best: 0.7731, time: 0:03:18
 Epoch: 258, lr: 4.0e-04, train_loss: 0.2261, train_acc: 0.9232 test_loss: 1.1573, test_acc: 0.7636, best: 0.7731, time: 0:03:51
 Epoch: 259, lr: 4.0e-04, train_loss: 0.2291, train_acc: 0.9200 test_loss: 1.1253, test_acc: 0.7680, best: 0.7731, time: 0:03:16
 Epoch: 260, lr: 4.0e-04, train_loss: 0.2199, train_acc: 0.9262 test_loss: 1.1297, test_acc: 0.7692, best: 0.7731, time: 0:02:54
 Epoch: 261, lr: 4.0e-04, train_loss: 0.2317, train_acc: 0.9204 test_loss: 1.1745, test_acc: 0.7631, best: 0.7731, time: 0:02:48
 Epoch: 262, lr: 4.0e-04, train_loss: 0.2305, train_acc: 0.9208 test_loss: 1.1385, test_acc: 0.7738, best: 0.7738, time: 0:02:48
 Epoch: 263, lr: 4.0e-04, train_loss: 0.2138, train_acc: 0.9268 test_loss: 1.1580, test_acc: 0.7694, best: 0.7738, time: 0:02:46
 Epoch: 264, lr: 4.0e-04, train_loss: 0.2284, train_acc: 0.9220 test_loss: 1.1921, test_acc: 0.7622, best: 0.7738, time: 0:02:46
 Epoch: 265, lr: 4.0e-04, train_loss: 0.2092, train_acc: 0.9280 test_loss: 1.1483, test_acc: 0.7636, best: 0.7738, time: 0:02:46
 Epoch: 266, lr: 4.0e-04, train_loss: 0.2154, train_acc: 0.9268 test_loss: 1.1680, test_acc: 0.7686, best: 0.7738, time: 0:02:45
 Epoch: 267, lr: 4.0e-04, train_loss: 0.2339, train_acc: 0.9194 test_loss: 1.1601, test_acc: 0.7670, best: 0.7738, time: 0:02:47
 Epoch: 268, lr: 4.0e-04, train_loss: 0.2432, train_acc: 0.9136 test_loss: 1.1204, test_acc: 0.7686, best: 0.7738, time: 0:02:46
 Epoch: 269, lr: 4.0e-04, train_loss: 0.2090, train_acc: 0.9302 test_loss: 1.1680, test_acc: 0.7662, best: 0.7738, time: 0:02:47
 Epoch: 270, lr: 8.0e-05, train_loss: 0.2543, train_acc: 0.9080 test_loss: 1.1052, test_acc: 0.7665, best: 0.7738, time: 0:02:44
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2269, train_acc: 0.9224 test_loss: 1.1543, test_acc: 0.7651, best: 0.7738, time: 0:02:48
 Epoch: 272, lr: 8.0e-05, train_loss: 0.2298, train_acc: 0.9190 test_loss: 1.1150, test_acc: 0.7695, best: 0.7738, time: 0:02:47
 Epoch: 273, lr: 8.0e-05, train_loss: 0.2170, train_acc: 0.9242 test_loss: 1.1234, test_acc: 0.7725, best: 0.7738, time: 0:02:46
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2324, train_acc: 0.9162 test_loss: 1.2012, test_acc: 0.7674, best: 0.7738, time: 0:02:49
 Epoch: 275, lr: 8.0e-05, train_loss: 0.2241, train_acc: 0.9242 test_loss: 1.1329, test_acc: 0.7675, best: 0.7738, time: 0:02:48
 Epoch: 276, lr: 8.0e-05, train_loss: 0.2125, train_acc: 0.9256 test_loss: 1.0957, test_acc: 0.7689, best: 0.7738, time: 0:02:51
 Epoch: 277, lr: 8.0e-05, train_loss: 0.2264, train_acc: 0.9208 test_loss: 1.1285, test_acc: 0.7690, best: 0.7738, time: 0:02:46
 Epoch: 278, lr: 8.0e-05, train_loss: 0.2209, train_acc: 0.9222 test_loss: 1.0975, test_acc: 0.7726, best: 0.7738, time: 0:02:59
 Epoch: 279, lr: 8.0e-05, train_loss: 0.2375, train_acc: 0.9154 test_loss: 1.1844, test_acc: 0.7664, best: 0.7738, time: 0:02:57
 Epoch: 280, lr: 8.0e-05, train_loss: 0.2130, train_acc: 0.9242 test_loss: 1.1038, test_acc: 0.7734, best: 0.7738, time: 0:02:57
 Epoch: 281, lr: 8.0e-05, train_loss: 0.2211, train_acc: 0.9242 test_loss: 1.1489, test_acc: 0.7674, best: 0.7738, time: 0:02:57
 Epoch: 282, lr: 8.0e-05, train_loss: 0.2209, train_acc: 0.9228 test_loss: 1.1574, test_acc: 0.7660, best: 0.7738, time: 0:02:55
 Epoch: 283, lr: 8.0e-05, train_loss: 0.2200, train_acc: 0.9218 test_loss: 1.1259, test_acc: 0.7705, best: 0.7738, time: 0:02:56
 Epoch: 284, lr: 8.0e-05, train_loss: 0.2287, train_acc: 0.9238 test_loss: 1.1646, test_acc: 0.7679, best: 0.7738, time: 0:02:53
 Epoch: 285, lr: 8.0e-05, train_loss: 0.2221, train_acc: 0.9192 test_loss: 1.0874, test_acc: 0.7735, best: 0.7738, time: 0:02:56
 Epoch: 286, lr: 8.0e-05, train_loss: 0.2213, train_acc: 0.9226 test_loss: 1.1616, test_acc: 0.7676, best: 0.7738, time: 0:03:00
 Epoch: 287, lr: 8.0e-05, train_loss: 0.2280, train_acc: 0.9192 test_loss: 1.1332, test_acc: 0.7679, best: 0.7738, time: 0:02:55
 Epoch: 288, lr: 8.0e-05, train_loss: 0.2195, train_acc: 0.9240 test_loss: 1.1253, test_acc: 0.7688, best: 0.7738, time: 0:02:52
 Epoch: 289, lr: 8.0e-05, train_loss: 0.2258, train_acc: 0.9224 test_loss: 1.1315, test_acc: 0.7751, best: 0.7751, time: 0:02:56
 Epoch: 290, lr: 8.0e-05, train_loss: 0.2213, train_acc: 0.9230 test_loss: 1.1365, test_acc: 0.7706, best: 0.7751, time: 0:02:55
 Epoch: 291, lr: 8.0e-05, train_loss: 0.2332, train_acc: 0.9172 test_loss: 1.1185, test_acc: 0.7709, best: 0.7751, time: 0:02:59
 Epoch: 292, lr: 8.0e-05, train_loss: 0.2053, train_acc: 0.9272 test_loss: 1.1341, test_acc: 0.7685, best: 0.7751, time: 0:02:55
 Epoch: 293, lr: 8.0e-05, train_loss: 0.2150, train_acc: 0.9266 test_loss: 1.1617, test_acc: 0.7722, best: 0.7751, time: 0:02:56
 Epoch: 294, lr: 8.0e-05, train_loss: 0.2361, train_acc: 0.9238 test_loss: 1.1048, test_acc: 0.7700, best: 0.7751, time: 0:02:57
 Epoch: 295, lr: 8.0e-05, train_loss: 0.2221, train_acc: 0.9242 test_loss: 1.1573, test_acc: 0.7666, best: 0.7751, time: 0:02:54
 Epoch: 296, lr: 8.0e-05, train_loss: 0.2226, train_acc: 0.9240 test_loss: 1.1032, test_acc: 0.7732, best: 0.7751, time: 0:02:53
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2413, train_acc: 0.9126 test_loss: 1.1376, test_acc: 0.7706, best: 0.7751, time: 0:02:50
 Epoch: 298, lr: 8.0e-05, train_loss: 0.2235, train_acc: 0.9262 test_loss: 1.0942, test_acc: 0.7786, best: 0.7786, time: 0:02:55
 Epoch: 299, lr: 8.0e-05, train_loss: 0.2200, train_acc: 0.9264 test_loss: 1.1488, test_acc: 0.7689, best: 0.7786, time: 0:02:52
 Highest accuracy: 0.7786