
 Run on time: 2022-06-25 13:20:00.351836

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50_NLP
	 im_size              : 224
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0,1
 DataParallel(
  (module): NetworkByName(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 256)
                (col_embed): Embedding(256, 256)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=1024, out_features=1024, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 512)
                (col_embed): Embedding(256, 512)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=2048, out_features=2048, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 1024)
                (col_embed): Embedding(256, 1024)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5850, train_acc: 0.1518 test_loss: 5.7166, test_acc: 0.2162, best: 0.2162, time: 0:05:16
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0810, train_acc: 0.2180 test_loss: 2.2781, test_acc: 0.2224, best: 0.2224, time: 0:05:13
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9816, train_acc: 0.2282 test_loss: 2.1985, test_acc: 0.2898, best: 0.2898, time: 0:05:10
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8938, train_acc: 0.2504 test_loss: 3.6930, test_acc: 0.2860, best: 0.2898, time: 0:05:08
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8655, train_acc: 0.2678                                                              :07
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8296, train_acc: 0.2870 test_loss: 2.3952, test_acc: 0.3152, best: 0.3152, time: 0:05:09
 Epoch: 7, lr: 1.0e-02, train_loss: 1.8031, train_acc: 0.3030 test_loss: 2.1222, test_acc: 0.3355, best: 0.3355, time: 0:05:10
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7645, train_acc: 0.3146 test_loss: 1.8201, test_acc: 0.3775, best: 0.3775, time: 0:05:10
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7196, train_acc: 0.3314 test_loss: 1.8366, test_acc: 0.3614, best: 0.3775, time: 0:05:09
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6724, train_acc: 0.3568 test_loss: 2.4947, test_acc: 0.3856, best: 0.3856, time: 0:05:13
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6384, train_acc: 0.3688 test_loss: 2.1633, test_acc: 0.3730, best: 0.3856, time: 0:05:12
 Epoch: 12, lr: 1.0e-02, train_loss: 1.5899, train_acc: 0.4014 test_loss: 2.3946, test_acc: 0.4052, best: 0.4052, time: 0:05:13
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5868, train_acc: 0.3960 test_loss: 1.8354, test_acc: 0.4126, best: 0.4126, time: 0:05:13
 Epoch: 14, lr: 1.0e-02, train_loss: 1.5406, train_acc: 0.4152 test_loss: 7.9754, test_acc: 0.3961, best: 0.4126, time: 0:05:13
 Epoch: 15, lr: 1.0e-02, train_loss: 1.5420, train_acc: 0.4216 test_loss: 1.9342, test_acc: 0.4278, best: 0.4278, time: 0:05:14
 Epoch: 16, lr: 1.0e-02, train_loss: 1.5536, train_acc: 0.4162 test_loss: 1.4789, test_acc: 0.4295, best: 0.4295, time: 0:05:14
 Epoch: 17, lr: 1.0e-02, train_loss: 1.5449, train_acc: 0.4240 test_loss: 1.9883, test_acc: 0.3857, best: 0.4295, time: 0:05:14
 Epoch: 18, lr: 1.0e-02, train_loss: 1.4898, train_acc: 0.4454 test_loss: 1.4892, test_acc: 0.4617, best: 0.4617, time: 0:05:14
 Epoch: 19, lr: 1.0e-02, train_loss: 1.4636, train_acc: 0.4512 test_loss: 1.5812, test_acc: 0.4506, best: 0.4617, time: 0:05:18
 Epoch: 20, lr: 1.0e-02, train_loss: 1.4512, train_acc: 0.4680 test_loss: 1.4913, test_acc: 0.4627, best: 0.4627, time: 0:05:14
 Epoch: 21, lr: 1.0e-02, train_loss: 1.3990, train_acc: 0.4798 test_loss: 1.5568, test_acc: 0.4925, best: 0.4925, time: 0:05:17
 Epoch: 22, lr: 1.0e-02, train_loss: 1.3894, train_acc: 0.4836 test_loss: 2.9213, test_acc: 0.4993, best: 0.4993, time: 0:05:14
 Epoch: 23, lr: 1.0e-02, train_loss: 1.3363, train_acc: 0.5014 test_loss: 1.3987, test_acc: 0.5179, best: 0.5179, time: 0:05:15
 Epoch: 24, lr: 1.0e-02, train_loss: 1.3077, train_acc: 0.5130 test_loss: 1.4952, test_acc: 0.4989, best: 0.5179, time: 0:05:15
 Epoch: 25, lr: 1.0e-02, train_loss: 1.3131, train_acc: 0.5124 test_loss: 2.7936, test_acc: 0.4903, best: 0.5179, time: 0:05:12
 Epoch: 26, lr: 1.0e-02, train_loss: 1.2754, train_acc: 0.5302 test_loss: 1.4908, test_acc: 0.5353, best: 0.5353, time: 0:05:14
 Epoch: 27, lr: 1.0e-02, train_loss: 1.2612, train_acc: 0.5370 test_loss: 1.3845, test_acc: 0.5359, best: 0.5359, time: 0:05:14
 Epoch: 28, lr: 1.0e-02, train_loss: 1.2685, train_acc: 0.5314 test_loss: 2.1909, test_acc: 0.4860, best: 0.5359, time: 0:05:14
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2331, train_acc: 0.5478 test_loss: 1.3280, test_acc: 0.5609, best: 0.5609, time: 0:05:16
 Epoch: 30, lr: 1.0e-02, train_loss: 1.2067, train_acc: 0.5534 test_loss: 1.9058, test_acc: 0.5148, best: 0.5609, time: 0:05:13
 Epoch: 31, lr: 1.0e-02, train_loss: 1.1908, train_acc: 0.5678 test_loss: 2.3031, test_acc: 0.5229, best: 0.5609, time: 0:05:12
 Epoch: 32, lr: 1.0e-02, train_loss: 1.1738, train_acc: 0.5724 test_loss: 1.8675, test_acc: 0.5064, best: 0.5609, time: 0:05:12
 Epoch: 33, lr: 1.0e-02, train_loss: 1.1730, train_acc: 0.5768 test_loss: 1.3612, test_acc: 0.5616, best: 0.5616, time: 0:05:16
 Epoch: 34, lr: 1.0e-02, train_loss: 1.1452, train_acc: 0.5828 test_loss: 1.9228, test_acc: 0.5533, best: 0.5616, time: 0:05:13
 Epoch: 35, lr: 1.0e-02, train_loss: 1.1298, train_acc: 0.5894 test_loss: 1.3050, test_acc: 0.5946, best: 0.5946, time: 0:05:16
 Epoch: 36, lr: 1.0e-02, train_loss: 1.1215, train_acc: 0.5928 test_loss: 1.5855, test_acc: 0.5520, best: 0.5946, time: 0:05:18
 Epoch: 37, lr: 1.0e-02, train_loss: 1.0985, train_acc: 0.6006 test_loss: 1.5882, test_acc: 0.5962, best: 0.5962, time: 0:05:16
 Epoch: 38, lr: 1.0e-02, train_loss: 1.0776, train_acc: 0.6114 test_loss: 1.7258, test_acc: 0.5766, best: 0.5962, time: 0:05:11
 Epoch: 39, lr: 1.0e-02, train_loss: 1.0489, train_acc: 0.6180 test_loss: 1.5432, test_acc: 0.5981, best: 0.5981, time: 0:05:15
 Epoch: 40, lr: 1.0e-02, train_loss: 1.0398, train_acc: 0.6200 test_loss: 1.3341, test_acc: 0.6186, best: 0.6186, time: 0:05:13
 Epoch: 41, lr: 1.0e-02, train_loss: 1.0187, train_acc: 0.6274 test_loss: 2.2826, test_acc: 0.5860, best: 0.6186, time: 0:05:12
 Epoch: 42, lr: 1.0e-02, train_loss: 1.0099, train_acc: 0.6324 test_loss: 1.1073, test_acc: 0.6302, best: 0.6302, time: 0:05:20
 Epoch: 43, lr: 1.0e-02, train_loss: 0.9795, train_acc: 0.6462 test_loss: 1.5512, test_acc: 0.6318, best: 0.6318, time: 0:05:15
 Epoch: 44, lr: 1.0e-02, train_loss: 1.0010, train_acc: 0.6394 test_loss: 1.5278, test_acc: 0.6228, best: 0.6318, time: 0:05:13
 Epoch: 45, lr: 1.0e-02, train_loss: 0.9954, train_acc: 0.6366 test_loss: 1.7763, test_acc: 0.6126, best: 0.6318, time: 0:05:12
 Epoch: 46, lr: 1.0e-02, train_loss: 0.9699, train_acc: 0.6556 test_loss: 2.3825, test_acc: 0.5735, best: 0.6318, time: 0:05:09
 Epoch: 47, lr: 1.0e-02, train_loss: 0.9525, train_acc: 0.6478 test_loss: 1.1624, test_acc: 0.6365, best: 0.6365, time: 0:05:11
 Epoch: 48, lr: 1.0e-02, train_loss: 0.9499, train_acc: 0.6504 test_loss: 1.5717, test_acc: 0.6401, best: 0.6401, time: 0:05:12
 Epoch: 49, lr: 1.0e-02, train_loss: 0.9144, train_acc: 0.6712 test_loss: 2.1103, test_acc: 0.6221, best: 0.6401, time: 0:05:09
 Epoch: 50, lr: 1.0e-02, train_loss: 0.9065, train_acc: 0.6694 test_loss: 1.4544, test_acc: 0.6570, best: 0.6570, time: 0:05:10
 Epoch: 51, lr: 1.0e-02, train_loss: 0.8791, train_acc: 0.6848 test_loss: 5.7487, test_acc: 0.6166, best: 0.6570, time: 0:05:08
 Epoch: 52, lr: 1.0e-02, train_loss: 0.9012, train_acc: 0.6706 test_loss: 1.3301, test_acc: 0.6764, best: 0.6764, time: 0:05:12
 Epoch: 53, lr: 1.0e-02, train_loss: 0.8726, train_acc: 0.6890 test_loss: 2.6701, test_acc: 0.6707, best: 0.6764, time: 0:05:09
 Epoch: 54, lr: 1.0e-02, train_loss: 0.8630, train_acc: 0.6936 test_loss: 4.1345, test_acc: 0.6011, best: 0.6764, time: 0:05:12
 Epoch: 55, lr: 1.0e-02, train_loss: 0.8523, train_acc: 0.7004 test_loss: 4.1552, test_acc: 0.6111, best: 0.6764, time: 0:05:08
 Epoch: 56, lr: 1.0e-02, train_loss: 0.8355, train_acc: 0.6994 test_loss: 1.8774, test_acc: 0.6644, best: 0.6764, time: 0:05:08
 Epoch: 57, lr: 1.0e-02, train_loss: 0.8184, train_acc: 0.7024 test_loss: 1.9138, test_acc: 0.6346, best: 0.6764, time: 0:05:09
 Epoch: 58, lr: 1.0e-02, train_loss: 0.8068, train_acc: 0.7102 test_loss: 2.5331, test_acc: 0.6561, best: 0.6764, time: 0:05:06
 Epoch: 59, lr: 1.0e-02, train_loss: 0.7771, train_acc: 0.7238 test_loss: 1.6495, test_acc: 0.6604, best: 0.6764, time: 0:05:09
 Epoch: 60, lr: 1.0e-02, train_loss: 0.7878, train_acc: 0.7148 test_loss: 1.5236, test_acc: 0.6793, best: 0.6793, time: 0:05:12
 Epoch: 61, lr: 1.0e-02, train_loss: 0.7860, train_acc: 0.7202 test_loss: 3.5465, test_acc: 0.6214, best: 0.6793, time: 0:05:09
 Epoch: 62, lr: 1.0e-02, train_loss: 0.7716, train_acc: 0.7256 test_loss: 2.1032, test_acc: 0.6695, best: 0.6793, time: 0:05:09
 Epoch: 63, lr: 1.0e-02, train_loss: 0.7771, train_acc: 0.7174 test_loss: 1.0275, test_acc: 0.6950, best: 0.6950, time: 0:05:10
 Epoch: 64, lr: 1.0e-02, train_loss: 0.7514, train_acc: 0.7332 test_loss: 0.8436, test_acc: 0.7290, best: 0.7290, time: 0:05:10
 Epoch: 65, lr: 1.0e-02, train_loss: 0.7584, train_acc: 0.7256 test_loss: 1.4991, test_acc: 0.6920, best: 0.7290, time: 0:05:10
 Epoch: 66, lr: 1.0e-02, train_loss: 0.7508, train_acc: 0.7286 test_loss: 1.9502, test_acc: 0.6442, best: 0.7290, time: 0:05:08
 Epoch: 67, lr: 1.0e-02, train_loss: 0.7342, train_acc: 0.7446 test_loss: 2.0529, test_acc: 0.6879, best: 0.7290, time: 0:05:09
 Epoch: 68, lr: 1.0e-02, train_loss: 0.7132, train_acc: 0.7466 test_loss: 3.4564, test_acc: 0.6659, best: 0.7290, time: 0:05:08
 Epoch: 69, lr: 1.0e-02, train_loss: 0.7096, train_acc: 0.7518 test_loss: 1.3931, test_acc: 0.7153, best: 0.7290, time: 0:05:07
 Epoch: 70, lr: 1.0e-02, train_loss: 0.6896, train_acc: 0.7516 test_loss: 18.6215, test_acc: 0.5753, best: 0.7290, time: 0:05:08
 Epoch: 71, lr: 1.0e-02, train_loss: 0.6873, train_acc: 0.7554 test_loss: 2.4379, test_acc: 0.6945, best: 0.7290, time: 0:05:08
 Epoch: 72, lr: 1.0e-02, train_loss: 0.6707, train_acc: 0.7668 test_loss: 3.5956, test_acc: 0.6796, best: 0.7290, time: 0:05:07
 Epoch: 73, lr: 1.0e-02, train_loss: 0.6539, train_acc: 0.7684 test_loss: 2.1714, test_acc: 0.7104, best: 0.7290, time: 0:05:08
 Epoch: 74, lr: 1.0e-02, train_loss: 0.6518, train_acc: 0.7724 test_loss: 1.6512, test_acc: 0.7089, best: 0.7290, time: 0:05:08
 Epoch: 75, lr: 1.0e-02, train_loss: 0.6333, train_acc: 0.7798 test_loss: 2.7833, test_acc: 0.6679, best: 0.7290, time: 0:05:07
 Epoch: 76, lr: 1.0e-02, train_loss: 0.6270, train_acc: 0.7760 test_loss: 3.6671, test_acc: 0.6794, best: 0.7290, time: 0:05:07
 Epoch: 77, lr: 1.0e-02, train_loss: 0.6265, train_acc: 0.7796 test_loss: 3.0440, test_acc: 0.6729, best: 0.7290, time: 0:05:13
 Epoch: 78, lr: 1.0e-02, train_loss: 0.6177, train_acc: 0.7830 test_loss: 2.0358, test_acc: 0.6976, best: 0.7290, time: 0:05:10
 Epoch: 79, lr: 1.0e-02, train_loss: 0.6212, train_acc: 0.7816 test_loss: 5.1711, test_acc: 0.6799, best: 0.7290, time: 0:05:08
 Epoch: 80, lr: 1.0e-02, train_loss: 0.5953, train_acc: 0.7854 test_loss: 4.3170, test_acc: 0.6757, best: 0.7290, time: 0:05:09
 Epoch: 81, lr: 1.0e-02, train_loss: 0.5876, train_acc: 0.7900 test_loss: 1.8544, test_acc: 0.7390, best: 0.7390, time: 0:05:11
 Epoch: 82, lr: 1.0e-02, train_loss: 0.5791, train_acc: 0.7940 test_loss: 3.1063, test_acc: 0.7029, best: 0.7390, time: 0:05:11
 Epoch: 83, lr: 1.0e-02, train_loss: 0.5763, train_acc: 0.7982 test_loss: 8.3783, test_acc: 0.6627, best: 0.7390, time: 0:05:11
 Epoch: 84, lr: 1.0e-02, train_loss: 0.5811, train_acc: 0.7978 test_loss: 2.1665, test_acc: 0.7106, best: 0.7390, time: 0:05:10
 Epoch: 85, lr: 1.0e-02, train_loss: 0.5609, train_acc: 0.8010 test_loss: 10.9414, test_acc: 0.6494, best: 0.7390, time: 0:05:09
 Epoch: 86, lr: 1.0e-02, train_loss: 0.5477, train_acc: 0.8076 test_loss: 6.1400, test_acc: 0.7173, best: 0.7390, time: 0:05:09
 Epoch: 87, lr: 1.0e-02, train_loss: 0.5407, train_acc: 0.8088 test_loss: 13.0496, test_acc: 0.6729, best: 0.7390, time: 0:05:09
 Epoch: 88, lr: 1.0e-02, train_loss: 0.5244, train_acc: 0.8174 test_loss: 2.5018, test_acc: 0.7301, best: 0.7390, time: 0:05:09
 Epoch: 89, lr: 1.0e-02, train_loss: 0.5432, train_acc: 0.8112 test_loss: 8.5814, test_acc: 0.6645, best: 0.7390, time: 0:05:11
 Epoch: 90, lr: 1.0e-02, train_loss: 0.5431, train_acc: 0.8064 test_loss: 6.8635, test_acc: 0.6820, best: 0.7390, time: 0:05:09
 Epoch: 91, lr: 1.0e-02, train_loss: 0.5197, train_acc: 0.8168 test_loss: 1.9536, test_acc: 0.7276, best: 0.7390, time: 0:05:08
 Epoch: 92, lr: 1.0e-02, train_loss: 0.5121, train_acc: 0.8188 test_loss: 3.0673, test_acc: 0.7086, best: 0.7390, time: 0:05:08
 Epoch: 93, lr: 1.0e-02, train_loss: 0.5029, train_acc: 0.8244 test_loss: 2.8279, test_acc: 0.7131, best: 0.7390, time: 0:05:09
 Epoch: 94, lr: 1.0e-02, train_loss: 0.5213, train_acc: 0.8152 test_loss: 3.7312, test_acc: 0.7055, best: 0.7390, time: 0:05:09
 Epoch: 95, lr: 1.0e-02, train_loss: 0.4918, train_acc: 0.8286 test_loss: 3.3691, test_acc: 0.7299, best: 0.7390, time: 0:05:09
 Epoch: 96, lr: 1.0e-02, train_loss: 0.4874, train_acc: 0.8280 test_loss: 4.3442, test_acc: 0.7368, best: 0.7390, time: 0:05:08
 Epoch: 97, lr: 1.0e-02, train_loss: 0.4670, train_acc: 0.8336 test_loss: 11.3396, test_acc: 0.6665, best: 0.7390, time: 0:05:08
 Epoch: 98, lr: 1.0e-02, train_loss: 0.4854, train_acc: 0.8248 test_loss: 3.6179, test_acc: 0.7348, best: 0.7390, time: 0:05:14
 Epoch: 99, lr: 1.0e-02, train_loss: 0.4671, train_acc: 0.8372 test_loss: 5.7778, test_acc: 0.6963, best: 0.7390, time: 0:05:11
 Epoch: 100, lr: 1.0e-02, train_loss: 0.4710, train_acc: 0.8308 test_loss: 3.7488, test_acc: 0.7045, best: 0.7390, time: 0:05:08
 Epoch: 101, lr: 1.0e-02, train_loss: 0.4675, train_acc: 0.8360 test_loss: 2.9308, test_acc: 0.7265, best: 0.7390, time: 0:05:09
 Epoch: 102, lr: 1.0e-02, train_loss: 0.4647, train_acc: 0.8394 test_loss: 2.9367, test_acc: 0.7350, best: 0.7390, time: 0:05:10
 Epoch: 103, lr: 1.0e-02, train_loss: 0.4509, train_acc: 0.8440 test_loss: 4.2333, test_acc: 0.7106, best: 0.7390, time: 0:05:10
 Epoch: 104, lr: 1.0e-02, train_loss: 0.4502, train_acc: 0.8424 test_loss: 12.6613, test_acc: 0.6675, best: 0.7390, time: 0:05:09
 Epoch: 105, lr: 1.0e-02, train_loss: 0.4211, train_acc: 0.8538 test_loss: 6.1226, test_acc: 0.7097, best: 0.7390, time: 0:05:10
 Epoch: 106, lr: 1.0e-02, train_loss: 0.4374, train_acc: 0.8474 test_loss: 7.0663, test_acc: 0.7035, best: 0.7390, time: 0:05:10
 Epoch: 107, lr: 1.0e-02, train_loss: 0.4383, train_acc: 0.8476 test_loss: 6.2749, test_acc: 0.7204, best: 0.7390, time: 0:05:08
 Epoch: 108, lr: 1.0e-02, train_loss: 0.4237, train_acc: 0.8512 test_loss: 6.4527, test_acc: 0.7115, best: 0.7390, time: 0:05:12
 Epoch: 109, lr: 1.0e-02, train_loss: 0.4204, train_acc: 0.8552 test_loss: 6.0959, test_acc: 0.6946, best: 0.7390, time: 0:05:08
 Epoch: 110, lr: 1.0e-02, train_loss: 0.4033, train_acc: 0.8570 test_loss: 8.8342, test_acc: 0.6845, best: 0.7390, time: 0:05:09
 Epoch: 111, lr: 1.0e-02, train_loss: 0.4279, train_acc: 0.8506 test_loss: 4.8794, test_acc: 0.7314, best: 0.7390, time: 0:05:08
 Epoch: 112, lr: 1.0e-02, train_loss: 0.4133, train_acc: 0.8538 test_loss: 5.4244, test_acc: 0.7188, best: 0.7390, time: 0:05:10
 Epoch: 113, lr: 1.0e-02, train_loss: 0.4019, train_acc: 0.8642 test_loss: 8.2054, test_acc: 0.6924, best: 0.7390, time: 0:05:14
 Epoch: 114, lr: 1.0e-02, train_loss: 0.3972, train_acc: 0.8684 test_loss: 12.3394, test_acc: 0.6941, best: 0.7390, time: 0:05:09
 Epoch: 115, lr: 1.0e-02, train_loss: 0.3902, train_acc: 0.8632 test_loss: 14.5598, test_acc: 0.6305, best: 0.7390, time: 0:05:07
 Epoch: 116, lr: 1.0e-02, train_loss: 0.3861, train_acc: 0.8610 test_loss: 2.6467, test_acc: 0.7542, best: 0.7542, time: 0:05:10
 Epoch: 117, lr: 1.0e-02, train_loss: 0.3686, train_acc: 0.8726 test_loss: 6.2962, test_acc: 0.7137, best: 0.7542, time: 0:05:11
 Epoch: 118, lr: 1.0e-02, train_loss: 0.3690, train_acc: 0.8748 test_loss: 4.0233, test_acc: 0.7490, best: 0.7542, time: 0:05:07
 Epoch: 119, lr: 1.0e-02, train_loss: 0.3955, train_acc: 0.8598 test_loss: 5.3913, test_acc: 0.7405, best: 0.7542, time: 0:05:07
 Epoch: 120, lr: 1.0e-02, train_loss: 0.3892, train_acc: 0.8652 test_loss: 1.9393, test_acc: 0.7684, best: 0.7684, time: 0:05:11
 Epoch: 121, lr: 1.0e-02, train_loss: 0.3825, train_acc: 0.8696 test_loss: 7.1039, test_acc: 0.6756, best: 0.7684, time: 0:05:08
 Epoch: 122, lr: 1.0e-02, train_loss: 0.3696, train_acc: 0.8776 test_loss: 3.4575, test_acc: 0.7250, best: 0.7684, time: 0:05:08
 Epoch: 123, lr: 1.0e-02, train_loss: 0.3941, train_acc: 0.8670 test_loss: 3.6953, test_acc: 0.7330, best: 0.7684, time: 0:05:09
 Epoch: 124, lr: 1.0e-02, train_loss: 0.3839, train_acc: 0.8672 test_loss: 0.7378, test_acc: 0.7845, best: 0.7845, time: 0:05:11
 Epoch: 125, lr: 1.0e-02, train_loss: 0.3572, train_acc: 0.8750 test_loss: 0.8307, test_acc: 0.7820, best: 0.7845, time: 0:05:10
 Epoch: 126, lr: 1.0e-02, train_loss: 0.3499, train_acc: 0.8774 test_loss: 0.8548, test_acc: 0.7711, best: 0.7845, time: 0:05:08
 Epoch: 127, lr: 1.0e-02, train_loss: 0.3746, train_acc: 0.8728 test_loss: 0.7700, test_acc: 0.7913, best: 0.7913, time: 0:05:11
 Epoch: 128, lr: 1.0e-02, train_loss: 0.3588, train_acc: 0.8724 test_loss: 0.8625, test_acc: 0.7622, best: 0.7913, time: 0:05:10
 Epoch: 129, lr: 1.0e-02, train_loss: 0.3600, train_acc: 0.8764 test_loss: 0.9470, test_acc: 0.7594, best: 0.7913, time: 0:05:08
 Epoch: 130, lr: 1.0e-02, train_loss: 0.3531, train_acc: 0.8784 test_loss: 5.9498, test_acc: 0.7030, best: 0.7913, time: 0:05:07
 Epoch: 131, lr: 1.0e-02, train_loss: 0.3543, train_acc: 0.8770 test_loss: 4.6060, test_acc: 0.7386, best: 0.7913, time: 0:05:09
 Epoch: 132, lr: 1.0e-02, train_loss: 0.3427, train_acc: 0.8804 test_loss: 4.2202, test_acc: 0.7252, best: 0.7913, time: 0:05:10
 Epoch: 133, lr: 1.0e-02, train_loss: 0.3528, train_acc: 0.8744 test_loss: 7.6649, test_acc: 0.7031, best: 0.7913, time: 0:05:08
 Epoch: 134, lr: 1.0e-02, train_loss: 0.3281, train_acc: 0.8878 test_loss: 4.3287, test_acc: 0.7456, best: 0.7913, time: 0:05:08
 Epoch: 135, lr: 1.0e-02, train_loss: 0.3327, train_acc: 0.8856 test_loss: 1.6454, test_acc: 0.7731, best: 0.7913, time: 0:05:10
 Epoch: 136, lr: 1.0e-02, train_loss: 0.3366, train_acc: 0.8762 test_loss: 2.4351, test_acc: 0.7804, best: 0.7913, time: 0:05:11
 Epoch: 137, lr: 1.0e-02, train_loss: 0.3109, train_acc: 0.8918 test_loss: 5.6682, test_acc: 0.7476, best: 0.7913, time: 0:05:12
 Epoch: 138, lr: 1.0e-02, train_loss: 0.3278, train_acc: 0.8888 test_loss: 3.4786, test_acc: 0.7107, best: 0.7913, time: 0:05:09
 Epoch: 139, lr: 1.0e-02, train_loss: 0.3230, train_acc: 0.8890 test_loss: 5.9468, test_acc: 0.7083, best: 0.7913, time: 0:05:11
 Epoch: 140, lr: 1.0e-02, train_loss: 0.3138, train_acc: 0.8914 test_loss: 3.3375, test_acc: 0.7334, best: 0.7913, time: 0:05:15
 Epoch: 141, lr: 1.0e-02, train_loss: 0.3196, train_acc: 0.8842 test_loss: 5.3657, test_acc: 0.7445, best: 0.7913, time: 0:05:12
 Epoch: 142, lr: 1.0e-02, train_loss: 0.3080, train_acc: 0.8920 test_loss: 8.3984, test_acc: 0.7150, best: 0.7913, time: 0:05:14
 Epoch: 143, lr: 1.0e-02, train_loss: 0.3190, train_acc: 0.8938 test_loss: 2.7090, test_acc: 0.7854, best: 0.7913, time: 0:05:11
 Epoch: 144, lr: 1.0e-02, train_loss: 0.3120, train_acc: 0.8954 test_loss: 4.2215, test_acc: 0.7308, best: 0.7913, time: 0:05:08
 Epoch: 145, lr: 1.0e-02, train_loss: 0.3303, train_acc: 0.8926 test_loss: 5.6573, test_acc: 0.7119, best: 0.7913, time: 0:05:07
 Epoch: 146, lr: 1.0e-02, train_loss: 0.2995, train_acc: 0.8974 test_loss: 2.5123, test_acc: 0.7808, best: 0.7913, time: 0:05:09
 Epoch: 147, lr: 1.0e-02, train_loss: 0.3141, train_acc: 0.8950 test_loss: 10.0987, test_acc: 0.7216, best: 0.7913, time: 0:05:08
 Epoch: 148, lr: 1.0e-02, train_loss: 0.2976, train_acc: 0.8982 test_loss: 3.5622, test_acc: 0.7636, best: 0.7913, time: 0:05:09
 Epoch: 149, lr: 1.0e-02, train_loss: 0.3038, train_acc: 0.8952 test_loss: 2.1401, test_acc: 0.7701, best: 0.7913, time: 0:05:07
 Epoch: 150, lr: 1.0e-02, train_loss: 0.2921, train_acc: 0.9014 test_loss: 6.8421, test_acc: 0.7300, best: 0.7913, time: 0:05:08
 Epoch: 151, lr: 1.0e-02, train_loss: 0.3109, train_acc: 0.8934 test_loss: 6.3376, test_acc: 0.7154, best: 0.7913, time: 0:05:09
 Epoch: 152, lr: 1.0e-02, train_loss: 0.2874, train_acc: 0.9020 test_loss: 18.6023, test_acc: 0.6981, best: 0.7913, time: 0:05:12
 Epoch: 153, lr: 1.0e-02, train_loss: 0.2937, train_acc: 0.9016 test_loss: 6.7301, test_acc: 0.7256, best: 0.7913, time: 0:05:09
 Epoch: 154, lr: 1.0e-02, train_loss: 0.2884, train_acc: 0.9018 test_loss: 10.9650, test_acc: 0.7125, best: 0.7913, time: 0:05:10
 Epoch: 155, lr: 1.0e-02, train_loss: 0.2764, train_acc: 0.9082 test_loss: 2.0903, test_acc: 0.7894, best: 0.7913, time: 0:05:09
 Epoch: 156, lr: 1.0e-02, train_loss: 0.2766, train_acc: 0.9058 test_loss: 7.0113, test_acc: 0.7202, best: 0.7913, time: 0:05:10
 Epoch: 157, lr: 1.0e-02, train_loss: 0.2925, train_acc: 0.9012 test_loss: 8.3088, test_acc: 0.7136, best: 0.7913, time: 0:05:09
 Epoch: 158, lr: 1.0e-02, train_loss: 0.2688, train_acc: 0.9064 test_loss: 4.9470, test_acc: 0.7409, best: 0.7913, time: 0:05:10
 Epoch: 159, lr: 1.0e-02, train_loss: 0.2841, train_acc: 0.9022 test_loss: 13.3154, test_acc: 0.6856, best: 0.7913, time: 0:05:10
 Epoch: 160, lr: 1.0e-02, train_loss: 0.2781, train_acc: 0.9064 test_loss: 5.7037, test_acc: 0.7190, best: 0.7913, time: 0:05:10
 Epoch: 161, lr: 1.0e-02, train_loss: 0.2837, train_acc: 0.9036 test_loss: 3.7095, test_acc: 0.7451, best: 0.7913, time: 0:05:10
 Epoch: 162, lr: 1.0e-02, train_loss: 0.2651, train_acc: 0.9098 test_loss: 2.6232, test_acc: 0.7606, best: 0.7913, time: 0:05:09
 Epoch: 163, lr: 1.0e-02, train_loss: 0.2737, train_acc: 0.9076 test_loss: 4.7372, test_acc: 0.7456, best: 0.7913, time: 0:05:12
 Epoch: 164, lr: 1.0e-02, train_loss: 0.2454, train_acc: 0.9182 test_loss: 5.5898, test_acc: 0.7601, best: 0.7913, time: 0:05:11
 Epoch: 165, lr: 1.0e-02, train_loss: 0.2506, train_acc: 0.9160 test_loss: 6.6022, test_acc: 0.7499, best: 0.7913, time: 0:05:08
 Epoch: 166, lr: 1.0e-02, train_loss: 0.2626, train_acc: 0.9124 test_loss: 3.3007, test_acc: 0.7626, best: 0.7913, time: 0:05:07
 Epoch: 167, lr: 1.0e-02, train_loss: 0.2612, train_acc: 0.9110 test_loss: 4.8352, test_acc: 0.7536, best: 0.7913, time: 0:05:07
 Epoch: 168, lr: 1.0e-02, train_loss: 0.2548, train_acc: 0.9146 test_loss: 4.3052, test_acc: 0.7588, best: 0.7913, time: 0:05:09
 Epoch: 169, lr: 1.0e-02, train_loss: 0.2596, train_acc: 0.9092 test_loss: 6.4806, test_acc: 0.7245, best: 0.7913, time: 0:05:10
 Epoch: 170, lr: 1.0e-02, train_loss: 0.2627, train_acc: 0.9092 test_loss: 6.3240, test_acc: 0.7115, best: 0.7913, time: 0:05:10
 Epoch: 171, lr: 1.0e-02, train_loss: 0.2539, train_acc: 0.9116 test_loss: 9.1778, test_acc: 0.7199, best: 0.7913, time: 0:05:11
 Epoch: 172, lr: 1.0e-02, train_loss: 0.2374, train_acc: 0.9180 test_loss: 11.3616, test_acc: 0.7097, best: 0.7913, time: 0:05:11
 Epoch: 173, lr: 1.0e-02, train_loss: 0.2676, train_acc: 0.9054 test_loss: 9.7472, test_acc: 0.7087, best: 0.7913, time: 0:05:08
 Epoch: 174, lr: 1.0e-02, train_loss: 0.2696, train_acc: 0.9050 test_loss: 0.7584, test_acc: 0.8113, best: 0.8113, time: 0:05:11
 Epoch: 175, lr: 1.0e-02, train_loss: 0.2671, train_acc: 0.9060 test_loss: 0.9373, test_acc: 0.7854, best: 0.8113, time: 0:05:10
 Epoch: 176, lr: 1.0e-02, train_loss: 0.2648, train_acc: 0.9104 test_loss: 0.7782, test_acc: 0.7999, best: 0.8113, time: 0:05:09
 Epoch: 177, lr: 1.0e-02, train_loss: 0.2655, train_acc: 0.9094 test_loss: 1.0684, test_acc: 0.7684, best: 0.8113, time: 0:05:09
 Epoch: 178, lr: 1.0e-02, train_loss: 0.2649, train_acc: 0.9100 test_loss: 1.0707, test_acc: 0.7856, best: 0.8113, time: 0:05:08
 Epoch: 179, lr: 1.0e-02, train_loss: 0.2483, train_acc: 0.9172 test_loss: 0.9614, test_acc: 0.7999, best: 0.8113, time: 0:05:09
 Epoch: 180, lr: 2.0e-03, train_loss: 0.1897, train_acc: 0.9360 test_loss: 0.7344, test_acc: 0.8299, best: 0.8299, time: 0:05:11
 Epoch: 181, lr: 2.0e-03, train_loss: 0.1850, train_acc: 0.9384 test_loss: 0.7680, test_acc: 0.8269, best: 0.8299, time: 0:05:09
 Epoch: 182, lr: 2.0e-03, train_loss: 0.1643, train_acc: 0.9426 test_loss: 0.9197, test_acc: 0.8159, best: 0.8299, time: 0:05:08
 Epoch: 183, lr: 2.0e-03, train_loss: 0.1622, train_acc: 0.9460 test_loss: 1.6023, test_acc: 0.7951, best: 0.8299, time: 0:05:08
 Epoch: 184, lr: 2.0e-03, train_loss: 0.1499, train_acc: 0.9492 test_loss: 1.1585, test_acc: 0.8093, best: 0.8299, time: 0:05:09
 Epoch: 185, lr: 2.0e-03, train_loss: 0.1604, train_acc: 0.9436 test_loss: 0.8934, test_acc: 0.8231, best: 0.8299, time: 0:05:08
 Epoch: 186, lr: 2.0e-03, train_loss: 0.1584, train_acc: 0.9452 test_loss: 0.9744, test_acc: 0.8254, best: 0.8299, time: 0:05:09
 Epoch: 187, lr: 2.0e-03, train_loss: 0.1528, train_acc: 0.9494 test_loss: 1.4751, test_acc: 0.8080, best: 0.8299, time: 0:05:09
 Epoch: 188, lr: 2.0e-03, train_loss: 0.1409, train_acc: 0.9530 test_loss: 3.0768, test_acc: 0.7886, best: 0.8299, time: 0:05:10
 Epoch: 189, lr: 2.0e-03, train_loss: 0.1617, train_acc: 0.9454 test_loss: 1.1446, test_acc: 0.8177, best: 0.8299, time: 0:05:12
 Epoch: 190, lr: 2.0e-03, train_loss: 0.1442, train_acc: 0.9524 test_loss: 1.7621, test_acc: 0.8026, best: 0.8299, time: 0:05:08
 Epoch: 191, lr: 2.0e-03, train_loss: 0.1565, train_acc: 0.9486 test_loss: 0.9378, test_acc: 0.8264, best: 0.8299, time: 0:05:09
 Epoch: 192, lr: 2.0e-03, train_loss: 0.1534, train_acc: 0.9482 test_loss: 0.9785, test_acc: 0.8235, best: 0.8299, time: 0:05:09
 Epoch: 193, lr: 2.0e-03, train_loss: 0.1392, train_acc: 0.9516 test_loss: 1.5599, test_acc: 0.8077, best: 0.8299, time: 0:05:09
 Epoch: 194, lr: 2.0e-03, train_loss: 0.1498, train_acc: 0.9498 test_loss: 1.1829, test_acc: 0.8130, best: 0.8299, time: 0:05:10
 Epoch: 195, lr: 2.0e-03, train_loss: 0.1482, train_acc: 0.9506 test_loss: 2.7363, test_acc: 0.7827, best: 0.8299, time: 0:05:09
 Epoch: 196, lr: 2.0e-03, train_loss: 0.1486, train_acc: 0.9492 test_loss: 1.8841, test_acc: 0.8090, best: 0.8299, time: 0:05:09
 Epoch: 197, lr: 2.0e-03, train_loss: 0.1308, train_acc: 0.9534 test_loss: 1.1479, test_acc: 0.8187, best: 0.8299, time: 0:05:11
 Epoch: 198, lr: 2.0e-03, train_loss: 0.1435, train_acc: 0.9504 test_loss: 2.2032, test_acc: 0.8064, best: 0.8299, time: 0:05:09
 Epoch: 199, lr: 2.0e-03, train_loss: 0.1485, train_acc: 0.9534 test_loss: 0.8946, test_acc: 0.8290, best: 0.8299, time: 0:05:10
 Epoch: 200, lr: 2.0e-03, train_loss: 0.1455, train_acc: 0.9504 test_loss: 6.4173, test_acc: 0.7700, best: 0.8299, time: 0:05:09
 Epoch: 201, lr: 2.0e-03, train_loss: 0.1284, train_acc: 0.9562 test_loss: 1.6886, test_acc: 0.7894, best: 0.8299, time: 0:05:10
 Epoch: 202, lr: 2.0e-03, train_loss: 0.1362, train_acc: 0.9534 test_loss: 3.2971, test_acc: 0.7879, best: 0.8299, time: 0:05:10
 Epoch: 203, lr: 2.0e-03, train_loss: 0.1409, train_acc: 0.9534 test_loss: 2.4350, test_acc: 0.7985, best: 0.8299, time: 0:05:08
 Epoch: 204, lr: 2.0e-03, train_loss: 0.1317, train_acc: 0.9528 test_loss: 2.3691, test_acc: 0.7991, best: 0.8299, time: 0:05:09
 Epoch: 205, lr: 2.0e-03, train_loss: 0.1439, train_acc: 0.9530 test_loss: 0.9639, test_acc: 0.8154, best: 0.8299, time: 0:05:08
 Epoch: 206, lr: 2.0e-03, train_loss: 0.1336, train_acc: 0.9540 test_loss: 1.5023, test_acc: 0.8089, best: 0.8299, time: 0:05:09
 Epoch: 207, lr: 2.0e-03, train_loss: 0.1317, train_acc: 0.9536 test_loss: 1.8949, test_acc: 0.8074, best: 0.8299, time: 0:05:09
 Epoch: 208, lr: 2.0e-03, train_loss: 0.1350, train_acc: 0.9540 test_loss: 2.1256, test_acc: 0.8109, best: 0.8299, time: 0:05:10
 Epoch: 209, lr: 2.0e-03, train_loss: 0.1284, train_acc: 0.9532 test_loss: 1.1032, test_acc: 0.8205, best: 0.8299, time: 0:05:09
 Epoch: 210, lr: 2.0e-03, train_loss: 0.1357, train_acc: 0.9508 test_loss: 5.7249, test_acc: 0.7768, best: 0.8299, time: 0:05:09
 Epoch: 211, lr: 2.0e-03, train_loss: 0.1285, train_acc: 0.9556 test_loss: 8.3245, test_acc: 0.7720, best: 0.8299, time: 0:05:10
 Epoch: 212, lr: 2.0e-03, train_loss: 0.1293, train_acc: 0.9546 test_loss: 6.9329, test_acc: 0.7735, best: 0.8299, time: 0:05:10
 Epoch: 213, lr: 2.0e-03, train_loss: 0.1250, train_acc: 0.9564 test_loss: 3.8272, test_acc: 0.7853, best: 0.8299, time: 0:05:08
 Epoch: 214, lr: 2.0e-03, train_loss: 0.1232, train_acc: 0.9568 test_loss: 3.2957, test_acc: 0.7999, best: 0.8299, time: 0:05:12
 Epoch: 215, lr: 2.0e-03, train_loss: 0.1291, train_acc: 0.9558 test_loss: 6.8322, test_acc: 0.7738, best: 0.8299, time: 0:05:09
 Epoch: 216, lr: 2.0e-03, train_loss: 0.1348, train_acc: 0.9546 test_loss: 4.4540, test_acc: 0.7925, best: 0.8299, time: 0:05:09
 Epoch: 217, lr: 2.0e-03, train_loss: 0.1246, train_acc: 0.9562 test_loss: 7.7615, test_acc: 0.7690, best: 0.8299, time: 0:05:09
 Epoch: 218, lr: 2.0e-03, train_loss: 0.1325, train_acc: 0.9556 test_loss: 5.6078, test_acc: 0.7788, best: 0.8299, time: 0:05:09
 Epoch: 219, lr: 2.0e-03, train_loss: 0.1290, train_acc: 0.9574 test_loss: 8.3718, test_acc: 0.7601, best: 0.8299, time: 0:05:08
 Epoch: 220, lr: 2.0e-03, train_loss: 0.1529, train_acc: 0.9480 test_loss: 23.3528, test_acc: 0.7255, best: 0.8299, time: 0:05:09
 Epoch: 221, lr: 2.0e-03, train_loss: 0.1146, train_acc: 0.9600 test_loss: 8.5752, test_acc: 0.7761, best: 0.8299, time: 0:05:10
 Epoch: 222, lr: 2.0e-03, train_loss: 0.1260, train_acc: 0.9550 test_loss: 4.0691, test_acc: 0.7941, best: 0.8299, time: 0:05:11
 Epoch: 223, lr: 2.0e-03, train_loss: 0.1280, train_acc: 0.9570 test_loss: 12.0047, test_acc: 0.7554, best: 0.8299, time: 0:05:08
 Epoch: 224, lr: 2.0e-03, train_loss: 0.1263, train_acc: 0.9578 test_loss: 15.4424, test_acc: 0.7560, best: 0.8299, time: 0:05:09
 Epoch: 225, lr: 2.0e-03, train_loss: 0.1224, train_acc: 0.9622 test_loss: 13.8111, test_acc: 0.7529, best: 0.8299, time: 0:05:08
 Epoch: 226, lr: 2.0e-03, train_loss: 0.1391, train_acc: 0.9528 test_loss: 9.4670, test_acc: 0.7622, best: 0.8299, time: 0:05:10
 Epoch: 227, lr: 2.0e-03, train_loss: 0.1262, train_acc: 0.9552 test_loss: 13.2448, test_acc: 0.7536, best: 0.8299, time: 0:05:09
 Epoch: 228, lr: 2.0e-03, train_loss: 0.1219, train_acc: 0.9588 test_loss: 8.2922, test_acc: 0.7829, best: 0.8299, time: 0:05:09
 Epoch: 229, lr: 2.0e-03, train_loss: 0.1324, train_acc: 0.9550 test_loss: 9.4279, test_acc: 0.7732, best: 0.8299, time: 0:05:08
 Epoch: 230, lr: 2.0e-03, train_loss: 0.1338, train_acc: 0.9550 test_loss: 7.2968, test_acc: 0.7799, best: 0.8299, time: 0:05:08
 Epoch: 231, lr: 2.0e-03, train_loss: 0.1303, train_acc: 0.9544 test_loss: 9.7459, test_acc: 0.7779, best: 0.8299, time: 0:05:08
 Epoch: 232, lr: 2.0e-03, train_loss: 0.1274, train_acc: 0.9546 test_loss: 11.0217, test_acc: 0.7658, best: 0.8299, time: 0:05:09
 Epoch: 233, lr: 2.0e-03, train_loss: 0.1144, train_acc: 0.9580 test_loss: 4.1985, test_acc: 0.8014, best: 0.8299, time: 0:05:09
 Epoch: 234, lr: 2.0e-03, train_loss: 0.1372, train_acc: 0.9508 test_loss: 8.0374, test_acc: 0.7750, best: 0.8299, time: 0:05:09
 Epoch: 235, lr: 2.0e-03, train_loss: 0.1291, train_acc: 0.9572 test_loss: 11.6476, test_acc: 0.7682, best: 0.8299, time: 0:05:08
 Epoch: 236, lr: 2.0e-03, train_loss: 0.1291, train_acc: 0.9584 test_loss: 10.9122, test_acc: 0.7611, best: 0.8299, time: 0:05:08
 Epoch: 237, lr: 2.0e-03, train_loss: 0.1233, train_acc: 0.9568 test_loss: 6.9515, test_acc: 0.7784, best: 0.8299, time: 0:05:09
 Epoch: 238, lr: 2.0e-03, train_loss: 0.1117, train_acc: 0.9640 test_loss: 2.3228, test_acc: 0.8123, best: 0.8299, time: 0:05:08
 Epoch: 239, lr: 2.0e-03, train_loss: 0.1262, train_acc: 0.9582 test_loss: 2.2819, test_acc: 0.8076, best: 0.8299, time: 0:05:07
 Epoch: 240, lr: 4.0e-04, train_loss: 0.1237, train_acc: 0.9594 test_loss: 7.2506, test_acc: 0.7730, best: 0.8299, time: 0:05:08
 Epoch: 241, lr: 4.0e-04, train_loss: 0.1058, train_acc: 0.9628 test_loss: 3.4333, test_acc: 0.7981, best: 0.8299, time: 0:05:07
 Epoch: 242, lr: 4.0e-04, train_loss: 0.1150, train_acc: 0.9616 test_loss: 2.2812, test_acc: 0.8123, best: 0.8299, time: 0:05:07
 Epoch: 243, lr: 4.0e-04, train_loss: 0.1014, train_acc: 0.9650 test_loss: 4.7484, test_acc: 0.7963, best: 0.8299, time: 0:05:08
 Epoch: 244, lr: 4.0e-04, train_loss: 0.1189, train_acc: 0.9572 test_loss: 3.0494, test_acc: 0.8037, best: 0.8299, time: 0:05:07
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1220, train_acc: 0.9568 test_loss: 3.8830, test_acc: 0.7904, best: 0.8299, time: 0:05:09
 Epoch: 246, lr: 4.0e-04, train_loss: 0.1208, train_acc: 0.9584 test_loss: 4.3294, test_acc: 0.7977, best: 0.8299, time: 0:05:07
 Epoch: 247, lr: 4.0e-04, train_loss: 0.1063, train_acc: 0.9634 test_loss: 5.1356, test_acc: 0.7869, best: 0.8299, time: 0:05:09
 Epoch: 248, lr: 4.0e-04, train_loss: 0.1098, train_acc: 0.9604 test_loss: 9.9408, test_acc: 0.7679, best: 0.8299, time: 0:05:08
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1110, train_acc: 0.9604 test_loss: 3.0677, test_acc: 0.8085, best: 0.8299, time: 0:05:08
 Epoch: 250, lr: 4.0e-04, train_loss: 0.1227, train_acc: 0.9584 test_loss: 11.8619, test_acc: 0.7552, best: 0.8299, time: 0:05:08
 Epoch: 251, lr: 4.0e-04, train_loss: 0.1239, train_acc: 0.9600 test_loss: 6.2708, test_acc: 0.7884, best: 0.8299, time: 0:05:09
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1179, train_acc: 0.9586 test_loss: 10.8164, test_acc: 0.7714, best: 0.8299, time: 0:05:08
 Epoch: 253, lr: 4.0e-04, train_loss: 0.1132, train_acc: 0.9602 test_loss: 10.0151, test_acc: 0.7823, best: 0.8299, time: 0:05:09
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1065, train_acc: 0.9660 test_loss: 3.3365, test_acc: 0.8039, best: 0.8299, time: 0:05:07
 Epoch: 255, lr: 4.0e-04, train_loss: 0.1064, train_acc: 0.9644 test_loss: 15.2811, test_acc: 0.7565, best: 0.8299, time: 0:05:08
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1074, train_acc: 0.9634 test_loss: 11.8358, test_acc: 0.7630, best: 0.8299, time: 0:05:08
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1183, train_acc: 0.9602 test_loss: 4.0906, test_acc: 0.7971, best: 0.8299, time: 0:05:08
 Epoch: 258, lr: 4.0e-04, train_loss: 0.0998, train_acc: 0.9680 test_loss: 14.0157, test_acc: 0.7631, best: 0.8299, time: 0:05:08
 Epoch: 259, lr: 4.0e-04, train_loss: 0.1204, train_acc: 0.9588 test_loss: 20.0378, test_acc: 0.7539, best: 0.8299, time: 0:05:07
 Epoch: 260, lr: 4.0e-04, train_loss: 0.1082, train_acc: 0.9626 test_loss: 7.7018, test_acc: 0.7851, best: 0.8299, time: 0:05:07
 Epoch: 261, lr: 4.0e-04, train_loss: 0.1164, train_acc: 0.9622 test_loss: 3.0129, test_acc: 0.8134, best: 0.8299, time: 0:05:08
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1102, train_acc: 0.9640 test_loss: 14.8915, test_acc: 0.7512, best: 0.8299, time: 0:05:09
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1077, train_acc: 0.9650 test_loss: 9.8596, test_acc: 0.7748, best: 0.8299, time: 0:05:08
 Epoch: 264, lr: 4.0e-04, train_loss: 0.1086, train_acc: 0.9616 test_loss: 9.6849, test_acc: 0.7639, best: 0.8299, time: 0:05:08
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1085, train_acc: 0.9646 test_loss: 8.3993, test_acc: 0.7690, best: 0.8299, time: 0:05:09
 Epoch: 266, lr: 4.0e-04, train_loss: 0.1072, train_acc: 0.9664 test_loss: 5.1643, test_acc: 0.7964, best: 0.8299, time: 0:05:10
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1161, train_acc: 0.9600 test_loss: 8.5358, test_acc: 0.7879, best: 0.8299, time: 0:05:08
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1040, train_acc: 0.9656 test_loss: 5.5300, test_acc: 0.8021, best: 0.8299, time: 0:05:07
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1062, train_acc: 0.9640 test_loss: 7.2413, test_acc: 0.7925, best: 0.8299, time: 0:05:11
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1144, train_acc: 0.9628 test_loss: 2.7358, test_acc: 0.8114, best: 0.8299, time: 0:05:11
 Epoch: 271, lr: 8.0e-05, train_loss: 0.1100, train_acc: 0.9642 test_loss: 19.7271, test_acc: 0.7415, best: 0.8299, time: 0:05:11
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1041, train_acc: 0.9662 test_loss: 21.5039, test_acc: 0.7459, best: 0.8299, time: 0:05:16
 Epoch: 273, lr: 8.0e-05, train_loss: 0.0983, train_acc: 0.9686 test_loss: 10.1085, test_acc: 0.7720, best: 0.8299, time: 0:05:19
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1052, train_acc: 0.9656 test_loss: 6.8253, test_acc: 0.7883, best: 0.8299, time: 0:05:19
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1120, train_acc: 0.9618 test_loss: 4.1193, test_acc: 0.7995, best: 0.8299, time: 0:05:18
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1031, train_acc: 0.9634 test_loss: 5.9965, test_acc: 0.7891, best: 0.8299, time: 0:05:11
 Epoch: 277, lr: 8.0e-05, train_loss: 0.0989, train_acc: 0.9660 test_loss: 9.5077, test_acc: 0.7741, best: 0.8299, time: 0:05:08
 Epoch: 278, lr: 8.0e-05, train_loss: 0.0998, train_acc: 0.9640 test_loss: 8.7007, test_acc: 0.7735, best: 0.8299, time: 0:05:10
 Epoch: 279, lr: 8.0e-05, train_loss: 0.1131, train_acc: 0.9620 test_loss: 7.1465, test_acc: 0.7870, best: 0.8299, time: 0:05:09
 Epoch: 280, lr: 8.0e-05, train_loss: 0.0975, train_acc: 0.9666 test_loss: 12.1393, test_acc: 0.7700, best: 0.8299, time: 0:05:13
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1141, train_acc: 0.9604 test_loss: 4.4839, test_acc: 0.8029, best: 0.8299, time: 0:05:10
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1068, train_acc: 0.9632 test_loss: 6.9548, test_acc: 0.7877, best: 0.8299, time: 0:05:10
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1100, train_acc: 0.9640 test_loss: 7.9835, test_acc: 0.7772, best: 0.8299, time: 0:05:09
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1062, train_acc: 0.9636 test_loss: 5.2349, test_acc: 0.7970, best: 0.8299, time: 0:05:11
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1216, train_acc: 0.9624 test_loss: 9.0731, test_acc: 0.7870, best: 0.8299, time: 0:05:10
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1212, train_acc: 0.9554 test_loss: 8.4663, test_acc: 0.7881, best: 0.8299, time: 0:05:10
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1034, train_acc: 0.9634 test_loss: 17.5535, test_acc: 0.7609, best: 0.8299, time: 0:05:10
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1177, train_acc: 0.9582 test_loss: 6.1279, test_acc: 0.7906, best: 0.8299, time: 0:05:09
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1091, train_acc: 0.9606 test_loss: 12.9524, test_acc: 0.7645, best: 0.8299, time: 0:05:08
 Epoch: 290, lr: 8.0e-05, train_loss: 0.1047, train_acc: 0.9654 test_loss: 19.1879, test_acc: 0.7514, best: 0.8299, time: 0:05:10
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1025, train_acc: 0.9680 test_loss: 18.3437, test_acc: 0.7532, best: 0.8299, time: 0:05:09
 Epoch: 292, lr: 8.0e-05, train_loss: 0.1015, train_acc: 0.9664 test_loss: 9.2615, test_acc: 0.7744, best: 0.8299, time: 0:05:11
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1312, train_acc: 0.9584 test_loss: 9.5533, test_acc: 0.7754, best: 0.8299, time: 0:05:10
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1074, train_acc: 0.9646 test_loss: 7.6622, test_acc: 0.7796, best: 0.8299, time: 0:05:13
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1073, train_acc: 0.9652 test_loss: 9.1187, test_acc: 0.7880, best: 0.8299, time: 0:05:13
 Epoch: 296, lr: 8.0e-05, train_loss: 0.0993, train_acc: 0.9658 test_loss: 14.1431, test_acc: 0.7668, best: 0.8299, time: 0:05:10
 Epoch: 297, lr: 8.0e-05, train_loss: 0.1065, train_acc: 0.9610 test_loss: 13.3665, test_acc: 0.7614, best: 0.8299, time: 0:05:11
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1054, train_acc: 0.9626 test_loss: 7.8369, test_acc: 0.7891, best: 0.8299, time: 0:05:11
 Epoch: 299, lr: 8.0e-05, train_loss: 0.0962, train_acc: 0.9678 test_loss: 13.2021, test_acc: 0.7622, best: 0.8299, time: 0:05:09
 Highest accuracy: 0.8299