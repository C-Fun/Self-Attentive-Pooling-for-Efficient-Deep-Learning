
 Run on time: 2022-05-26 03:25:12.811597

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50
	 im_size              : 224
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.7711, train_acc: 0.1584 test_loss: 2.0113, test_acc: 0.2374, best: 0.2374, time: 0:02:37
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0759, train_acc: 0.2110 test_loss: 2.2137, test_acc: 0.2699, best: 0.2699, time: 0:02:36
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9669, train_acc: 0.2356 test_loss: 2.1535, test_acc: 0.2991, best: 0.2991, time: 0:02:38
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9144, train_acc: 0.2586 test_loss: 2.1003, test_acc: 0.3262, best: 0.3262, time: 0:02:37
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8465, train_acc: 0.2808 test_loss: 1.6922, test_acc: 0.3459, best: 0.3459, time: 0:02:37
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8164, train_acc: 0.2974 test_loss: 1.7923, test_acc: 0.3289, best: 0.3459, time: 0:02:35
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7775, train_acc: 0.3180 test_loss: 1.7074, test_acc: 0.3570, best: 0.3570, time: 0:02:35
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7403, train_acc: 0.3360 test_loss: 1.8060, test_acc: 0.3694, best: 0.3694, time: 0:02:34
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7096, train_acc: 0.3422 test_loss: 1.9711, test_acc: 0.3929, best: 0.3929, time: 0:02:36
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6659, train_acc: 0.3676 test_loss: 2.1456, test_acc: 0.3628, best: 0.3929, time: 0:02:37
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6351, train_acc: 0.3828 test_loss: 1.5810, test_acc: 0.4024, best: 0.4024, time: 0:02:36
 Epoch: 12, lr: 1.0e-02, train_loss: 1.6065, train_acc: 0.3954 test_loss: 1.5416, test_acc: 0.4429, best: 0.4429, time: 0:02:35
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5918, train_acc: 0.3996 test_loss: 1.4969, test_acc: 0.4485, best: 0.4485, time: 0:02:36
 Epoch: 14, lr: 1.0e-02, train_loss: 1.5600, train_acc: 0.4160 test_loss: 1.5670, test_acc: 0.4542, best: 0.4542, time: 0:02:35
 Epoch: 15, lr: 1.0e-02, train_loss: 1.5130, train_acc: 0.4406 test_loss: 1.7632, test_acc: 0.4239, best: 0.4542, time: 0:02:35
 Epoch: 16, lr: 1.0e-02, train_loss: 1.4770, train_acc: 0.4452 test_loss: 2.1155, test_acc: 0.4354, best: 0.4542, time: 0:02:36
 Epoch: 17, lr: 1.0e-02, train_loss: 1.4447, train_acc: 0.4614 test_loss: 1.7326, test_acc: 0.4701, best: 0.4701, time: 0:02:35
 Epoch: 18, lr: 1.0e-02, train_loss: 1.4478, train_acc: 0.4610 test_loss: 1.3404, test_acc: 0.5258, best: 0.5258, time: 0:02:35
 Epoch: 19, lr: 1.0e-02, train_loss: 1.4191, train_acc: 0.4794 test_loss: 1.3732, test_acc: 0.4921, best: 0.5258, time: 0:02:35
 Epoch: 20, lr: 1.0e-02, train_loss: 1.3971, train_acc: 0.4848 test_loss: 1.2911, test_acc: 0.5261, best: 0.5261, time: 0:02:36
 Epoch: 21, lr: 1.0e-02, train_loss: 1.3753, train_acc: 0.5018 test_loss: 1.6817, test_acc: 0.5014, best: 0.5261, time: 0:02:34
 Epoch: 22, lr: 1.0e-02, train_loss: 1.3554, train_acc: 0.5042 test_loss: 1.4399, test_acc: 0.4873, best: 0.5261, time: 0:02:35
 Epoch: 23, lr: 1.0e-02, train_loss: 1.3263, train_acc: 0.5162 test_loss: 1.2243, test_acc: 0.5677, best: 0.5677, time: 0:02:35
 Epoch: 24, lr: 1.0e-02, train_loss: 1.2979, train_acc: 0.5220 test_loss: 1.6343, test_acc: 0.5190, best: 0.5677, time: 0:02:34
 Epoch: 25, lr: 1.0e-02, train_loss: 1.3167, train_acc: 0.5150 test_loss: 1.4110, test_acc: 0.5018, best: 0.5677, time: 0:02:35
 Epoch: 26, lr: 1.0e-02, train_loss: 1.3268, train_acc: 0.5144 test_loss: 1.2912, test_acc: 0.5252, best: 0.5677, time: 0:02:35
 Epoch: 27, lr: 1.0e-02, train_loss: 1.3103, train_acc: 0.5292 test_loss: 2.0065, test_acc: 0.5011, best: 0.5677, time: 0:02:35
 Epoch: 28, lr: 1.0e-02, train_loss: 1.2694, train_acc: 0.5326 test_loss: 1.6127, test_acc: 0.4948, best: 0.5677, time: 0:02:37
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2344, train_acc: 0.5462 test_loss: 1.4933, test_acc: 0.5464, best: 0.5677, time: 0:02:34
 Epoch: 30, lr: 1.0e-02, train_loss: 1.2008, train_acc: 0.5598 test_loss: 1.1201, test_acc: 0.5824, best: 0.5824, time: 0:02:35
 Epoch: 31, lr: 1.0e-02, train_loss: 1.2064, train_acc: 0.5570 test_loss: 1.4024, test_acc: 0.5109, best: 0.5824, time: 0:02:34
 Epoch: 32, lr: 1.0e-02, train_loss: 1.1760, train_acc: 0.5740 test_loss: 1.2381, test_acc: 0.5613, best: 0.5824, time: 0:02:34
 Epoch: 33, lr: 1.0e-02, train_loss: 1.1606, train_acc: 0.5748 test_loss: 1.2256, test_acc: 0.5680, best: 0.5824, time: 0:02:34
 Epoch: 34, lr: 1.0e-02, train_loss: 1.1444, train_acc: 0.5804 test_loss: 1.0968, test_acc: 0.5965, best: 0.5965, time: 0:02:36
 Epoch: 35, lr: 1.0e-02, train_loss: 1.1379, train_acc: 0.5854 test_loss: 1.1494, test_acc: 0.5857, best: 0.5965, time: 0:02:36
 Epoch: 36, lr: 1.0e-02, train_loss: 1.1153, train_acc: 0.6004 test_loss: 1.1274, test_acc: 0.6000, best: 0.6000, time: 0:02:35
 Epoch: 37, lr: 1.0e-02, train_loss: 1.1466, train_acc: 0.5792 test_loss: 1.1567, test_acc: 0.5850, best: 0.6000, time: 0:02:36
 Epoch: 38, lr: 1.0e-02, train_loss: 1.1275, train_acc: 0.5956 test_loss: 1.0516, test_acc: 0.6304, best: 0.6304, time: 0:02:35
 Epoch: 39, lr: 1.0e-02, train_loss: 1.1231, train_acc: 0.5928 test_loss: 1.0644, test_acc: 0.6292, best: 0.6304, time: 0:02:35
 Epoch: 40, lr: 1.0e-02, train_loss: 1.0838, train_acc: 0.5978 test_loss: 1.2004, test_acc: 0.5886, best: 0.6304, time: 0:02:36
 Epoch: 41, lr: 1.0e-02, train_loss: 1.0550, train_acc: 0.6088 test_loss: 1.0054, test_acc: 0.6418, best: 0.6418, time: 0:02:35
 Epoch: 42, lr: 1.0e-02, train_loss: 1.0762, train_acc: 0.6122 test_loss: 1.1042, test_acc: 0.6086, best: 0.6418, time: 0:02:36
 Epoch: 43, lr: 1.0e-02, train_loss: 1.0446, train_acc: 0.6212 test_loss: 0.9948, test_acc: 0.6436, best: 0.6436, time: 0:02:36
 Epoch: 44, lr: 1.0e-02, train_loss: 1.0387, train_acc: 0.6242 test_loss: 1.1992, test_acc: 0.6046, best: 0.6436, time: 0:02:34
 Epoch: 45, lr: 1.0e-02, train_loss: 1.0310, train_acc: 0.6278 test_loss: 1.0529, test_acc: 0.6298, best: 0.6436, time: 0:02:34
 Epoch: 46, lr: 1.0e-02, train_loss: 1.0005, train_acc: 0.6404 test_loss: 1.0485, test_acc: 0.6369, best: 0.6436, time: 0:02:34
 Epoch: 47, lr: 1.0e-02, train_loss: 0.9895, train_acc: 0.6428 test_loss: 0.9836, test_acc: 0.6454, best: 0.6454, time: 0:02:35
 Epoch: 48, lr: 1.0e-02, train_loss: 0.9802, train_acc: 0.6468 test_loss: 0.9595, test_acc: 0.6569, best: 0.6569, time: 0:02:12
 Epoch: 49, lr: 1.0e-02, train_loss: 0.9702, train_acc: 0.6534 test_loss: 1.0616, test_acc: 0.6362, best: 0.6569, time: 0:02:24
 Epoch: 50, lr: 1.0e-02, train_loss: 0.9483, train_acc: 0.6562 test_loss: 1.0944, test_acc: 0.6330, best: 0.6569, time: 0:02:26
 Epoch: 51, lr: 1.0e-02, train_loss: 0.9471, train_acc: 0.6600 test_loss: 1.0483, test_acc: 0.6390, best: 0.6569, time: 0:02:01
 Epoch: 52, lr: 1.0e-02, train_loss: 0.9442, train_acc: 0.6664 test_loss: 1.0653, test_acc: 0.6348, best: 0.6569, time: 0:02:27
 Epoch: 53, lr: 1.0e-02, train_loss: 0.9205, train_acc: 0.6714 test_loss: 0.9943, test_acc: 0.6541, best: 0.6569, time: 0:02:35
 Epoch: 54, lr: 1.0e-02, train_loss: 0.9270, train_acc: 0.6590 test_loss: 1.0470, test_acc: 0.6376, best: 0.6569, time: 0:02:36
 Epoch: 55, lr: 1.0e-02, train_loss: 0.9086, train_acc: 0.6730 test_loss: 0.9528, test_acc: 0.6716, best: 0.6716, time: 0:02:36
 Epoch: 56, lr: 1.0e-02, train_loss: 0.8642, train_acc: 0.6902 test_loss: 0.9225, test_acc: 0.6735, best: 0.6735, time: 0:02:34
 Epoch: 57, lr: 1.0e-02, train_loss: 0.8747, train_acc: 0.6844 test_loss: 0.9323, test_acc: 0.6769, best: 0.6769, time: 0:02:35
 Epoch: 58, lr: 1.0e-02, train_loss: 0.8636, train_acc: 0.6916 test_loss: 0.9116, test_acc: 0.6813, best: 0.6813, time: 0:02:36
 Epoch: 59, lr: 1.0e-02, train_loss: 0.8558, train_acc: 0.6970 test_loss: 1.0103, test_acc: 0.6633, best: 0.6813, time: 0:02:34
 Epoch: 60, lr: 1.0e-02, train_loss: 0.8653, train_acc: 0.6886 test_loss: 0.9806, test_acc: 0.6707, best: 0.6813, time: 0:02:33
 Epoch: 61, lr: 1.0e-02, train_loss: 0.8491, train_acc: 0.6898 test_loss: 1.0103, test_acc: 0.6637, best: 0.6813, time: 0:02:35
 Epoch: 62, lr: 1.0e-02, train_loss: 0.8315, train_acc: 0.7018 test_loss: 0.9254, test_acc: 0.6847, best: 0.6847, time: 0:02:35
 Epoch: 63, lr: 1.0e-02, train_loss: 0.8304, train_acc: 0.7110 test_loss: 0.9008, test_acc: 0.6887, best: 0.6887, time: 0:02:34
 Epoch: 64, lr: 1.0e-02, train_loss: 0.8194, train_acc: 0.7076 test_loss: 1.0657, test_acc: 0.6597, best: 0.6887, time: 0:02:34
 Epoch: 65, lr: 1.0e-02, train_loss: 0.8264, train_acc: 0.7008 test_loss: 1.2698, test_acc: 0.6296, best: 0.6887, time: 0:02:35
 Epoch: 66, lr: 1.0e-02, train_loss: 0.7997, train_acc: 0.7158 test_loss: 1.0363, test_acc: 0.6617, best: 0.6887, time: 0:02:35
 Epoch: 67, lr: 1.0e-02, train_loss: 0.7879, train_acc: 0.7206 test_loss: 0.9020, test_acc: 0.6923, best: 0.6923, time: 0:02:34
 Epoch: 68, lr: 1.0e-02, train_loss: 0.7986, train_acc: 0.7100 test_loss: 0.9713, test_acc: 0.6743, best: 0.6923, time: 0:02:37
 Epoch: 69, lr: 1.0e-02, train_loss: 0.7879, train_acc: 0.7218 test_loss: 0.9327, test_acc: 0.6846, best: 0.6923, time: 0:02:36
 Epoch: 70, lr: 1.0e-02, train_loss: 0.7832, train_acc: 0.7210 test_loss: 0.8612, test_acc: 0.7064, best: 0.7064, time: 0:02:36
 Epoch: 71, lr: 1.0e-02, train_loss: 0.7453, train_acc: 0.7358 test_loss: 0.9478, test_acc: 0.6937, best: 0.7064, time: 0:02:33
 Epoch: 72, lr: 1.0e-02, train_loss: 0.7436, train_acc: 0.7300 test_loss: 0.9172, test_acc: 0.6907, best: 0.7064, time: 0:02:34
 Epoch: 73, lr: 1.0e-02, train_loss: 0.7496, train_acc: 0.7304 test_loss: 0.8768, test_acc: 0.7081, best: 0.7081, time: 0:02:35
 Epoch: 74, lr: 1.0e-02, train_loss: 0.7371, train_acc: 0.7328 test_loss: 0.9310, test_acc: 0.6910, best: 0.7081, time: 0:02:34
 Epoch: 75, lr: 1.0e-02, train_loss: 0.7336, train_acc: 0.7450 test_loss: 0.8554, test_acc: 0.7096, best: 0.7096, time: 0:02:37
 Epoch: 76, lr: 1.0e-02, train_loss: 0.7199, train_acc: 0.7410 test_loss: 0.8956, test_acc: 0.7001, best: 0.7096, time: 0:02:35
 Epoch: 77, lr: 1.0e-02, train_loss: 0.7105, train_acc: 0.7452 test_loss: 0.8197, test_acc: 0.7281, best: 0.7281, time: 0:02:35
 Epoch: 78, lr: 1.0e-02, train_loss: 0.7003, train_acc: 0.7532 test_loss: 0.9267, test_acc: 0.7005, best: 0.7281, time: 0:02:34
 Epoch: 79, lr: 1.0e-02, train_loss: 0.7100, train_acc: 0.7434 test_loss: 0.8992, test_acc: 0.7001, best: 0.7281, time: 0:02:35
 Epoch: 80, lr: 1.0e-02, train_loss: 0.6940, train_acc: 0.7546 test_loss: 1.0942, test_acc: 0.6673, best: 0.7281, time: 0:02:32
 Epoch: 81, lr: 1.0e-02, train_loss: 0.6841, train_acc: 0.7550 test_loss: 0.8008, test_acc: 0.7274, best: 0.7281, time: 0:02:33
 Epoch: 82, lr: 1.0e-02, train_loss: 0.6578, train_acc: 0.7702 test_loss: 0.9018, test_acc: 0.7117, best: 0.7281, time: 0:02:35
 Epoch: 83, lr: 1.0e-02, train_loss: 0.6725, train_acc: 0.7634 test_loss: 0.9268, test_acc: 0.7294, best: 0.7294, time: 0:02:34
 Epoch: 84, lr: 1.0e-02, train_loss: 0.6609, train_acc: 0.7584 test_loss: 0.8056, test_acc: 0.7315, best: 0.7315, time: 0:02:35
 Epoch: 85, lr: 1.0e-02, train_loss: 0.6710, train_acc: 0.7652 test_loss: 1.0002, test_acc: 0.6867, best: 0.7315, time: 0:02:35
 Epoch: 86, lr: 1.0e-02, train_loss: 0.6414, train_acc: 0.7700 test_loss: 0.7980, test_acc: 0.7309, best: 0.7315, time: 0:02:34
 Epoch: 87, lr: 1.0e-02, train_loss: 0.6375, train_acc: 0.7710 test_loss: 1.0256, test_acc: 0.6786, best: 0.7315, time: 0:02:34
 Epoch: 88, lr: 1.0e-02, train_loss: 0.6497, train_acc: 0.7648 test_loss: 0.8944, test_acc: 0.7086, best: 0.7315, time: 0:02:35
 Epoch: 89, lr: 1.0e-02, train_loss: 0.6225, train_acc: 0.7766 test_loss: 0.8539, test_acc: 0.7198, best: 0.7315, time: 0:02:34
 Epoch: 90, lr: 1.0e-02, train_loss: 0.6244, train_acc: 0.7822 test_loss: 0.9905, test_acc: 0.6840, best: 0.7315, time: 0:02:33
 Epoch: 91, lr: 1.0e-02, train_loss: 0.6082, train_acc: 0.7876 test_loss: 0.8203, test_acc: 0.7304, best: 0.7315, time: 0:02:36
 Epoch: 92, lr: 1.0e-02, train_loss: 0.6137, train_acc: 0.7822 test_loss: 0.8257, test_acc: 0.7192, best: 0.7315, time: 0:02:34
 Epoch: 93, lr: 1.0e-02, train_loss: 0.6109, train_acc: 0.7814 test_loss: 0.8416, test_acc: 0.7245, best: 0.7315, time: 0:02:33
 Epoch: 94, lr: 1.0e-02, train_loss: 0.5866, train_acc: 0.7880 test_loss: 0.9128, test_acc: 0.7176, best: 0.7315, time: 0:02:35
 Epoch: 95, lr: 1.0e-02, train_loss: 0.5816, train_acc: 0.7956 test_loss: 0.8303, test_acc: 0.7414, best: 0.7414, time: 0:02:35
 Epoch: 96, lr: 1.0e-02, train_loss: 0.5798, train_acc: 0.7946 test_loss: 0.8637, test_acc: 0.7361, best: 0.7414, time: 0:02:34
 Epoch: 97, lr: 1.0e-02, train_loss: 0.5636, train_acc: 0.8042 test_loss: 0.9656, test_acc: 0.7202, best: 0.7414, time: 0:02:34
 Epoch: 98, lr: 1.0e-02, train_loss: 0.5816, train_acc: 0.7940 test_loss: 0.8155, test_acc: 0.7352, best: 0.7414, time: 0:02:35
 Epoch: 99, lr: 1.0e-02, train_loss: 0.5423, train_acc: 0.8068 test_loss: 0.8412, test_acc: 0.7316, best: 0.7414, time: 0:02:35
 Epoch: 100, lr: 1.0e-02, train_loss: 0.5642, train_acc: 0.8006 test_loss: 0.8995, test_acc: 0.7376, best: 0.7414, time: 0:02:35
 Epoch: 101, lr: 1.0e-02, train_loss: 0.5581, train_acc: 0.8058 test_loss: 0.8842, test_acc: 0.7356, best: 0.7414, time: 0:02:36
 Epoch: 102, lr: 1.0e-02, train_loss: 0.5476, train_acc: 0.8134 test_loss: 0.7962, test_acc: 0.7428, best: 0.7428, time: 0:02:35
 Epoch: 103, lr: 1.0e-02, train_loss: 0.5314, train_acc: 0.8152 test_loss: 0.8512, test_acc: 0.7414, best: 0.7428, time: 0:02:35
 Epoch: 104, lr: 1.0e-02, train_loss: 0.5355, train_acc: 0.8122 test_loss: 0.8714, test_acc: 0.7442, best: 0.7442, time: 0:02:34
 Epoch: 105, lr: 1.0e-02, train_loss: 0.5359, train_acc: 0.8142 test_loss: 0.9287, test_acc: 0.7308, best: 0.7442, time: 0:02:34
 Epoch: 106, lr: 1.0e-02, train_loss: 0.5374, train_acc: 0.8098 test_loss: 1.0782, test_acc: 0.6980, best: 0.7442, time: 0:02:34
 Epoch: 107, lr: 1.0e-02, train_loss: 0.5355, train_acc: 0.8150 test_loss: 1.0061, test_acc: 0.6985, best: 0.7442, time: 0:02:35
 Epoch: 108, lr: 1.0e-02, train_loss: 0.5212, train_acc: 0.8138 test_loss: 0.8181, test_acc: 0.7409, best: 0.7442, time: 0:02:34
 Epoch: 109, lr: 1.0e-02, train_loss: 0.5046, train_acc: 0.8248 test_loss: 0.9495, test_acc: 0.7392, best: 0.7442, time: 0:02:34
 Epoch: 110, lr: 1.0e-02, train_loss: 0.5246, train_acc: 0.8170 test_loss: 1.0523, test_acc: 0.7169, best: 0.7442, time: 0:02:35
 Epoch: 111, lr: 1.0e-02, train_loss: 0.4887, train_acc: 0.8274 test_loss: 0.9501, test_acc: 0.7295, best: 0.7442, time: 0:02:34
 Epoch: 112, lr: 1.0e-02, train_loss: 0.4981, train_acc: 0.8280 test_loss: 0.7795, test_acc: 0.7691, best: 0.7691, time: 0:02:36
 Epoch: 113, lr: 1.0e-02, train_loss: 0.4910, train_acc: 0.8238 test_loss: 0.8703, test_acc: 0.7379, best: 0.7691, time: 0:02:33
 Epoch: 114, lr: 1.0e-02, train_loss: 0.5022, train_acc: 0.8276 test_loss: 0.7626, test_acc: 0.7625, best: 0.7691, time: 0:02:34
 Epoch: 115, lr: 1.0e-02, train_loss: 0.4962, train_acc: 0.8234 test_loss: 0.9738, test_acc: 0.7255, best: 0.7691, time: 0:02:34
 Epoch: 116, lr: 1.0e-02, train_loss: 0.4840, train_acc: 0.8310 test_loss: 0.7961, test_acc: 0.7531, best: 0.7691, time: 0:02:34
 Epoch: 117, lr: 1.0e-02, train_loss: 0.4934, train_acc: 0.8278 test_loss: 0.8582, test_acc: 0.7380, best: 0.7691, time: 0:02:34
 Epoch: 118, lr: 1.0e-02, train_loss: 0.4718, train_acc: 0.8338 test_loss: 0.9433, test_acc: 0.7319, best: 0.7691, time: 0:02:34
 Epoch: 119, lr: 1.0e-02, train_loss: 0.4656, train_acc: 0.8396 test_loss: 0.8087, test_acc: 0.7635, best: 0.7691, time: 0:02:34
 Epoch: 120, lr: 1.0e-02, train_loss: 0.4717, train_acc: 0.8330 test_loss: 0.8015, test_acc: 0.7580, best: 0.7691, time: 0:02:37
 Epoch: 121, lr: 1.0e-02, train_loss: 0.4741, train_acc: 0.8376 test_loss: 0.8312, test_acc: 0.7454, best: 0.7691, time: 0:02:35
 Epoch: 122, lr: 1.0e-02, train_loss: 0.4768, train_acc: 0.8330 test_loss: 0.8252, test_acc: 0.7482, best: 0.7691, time: 0:02:35
 Epoch: 123, lr: 1.0e-02, train_loss: 0.4449, train_acc: 0.8454 test_loss: 0.8339, test_acc: 0.7484, best: 0.7691, time: 0:02:34
 Epoch: 124, lr: 1.0e-02, train_loss: 0.4537, train_acc: 0.8426 test_loss: 0.8382, test_acc: 0.7559, best: 0.7691, time: 0:02:33
 Epoch: 125, lr: 1.0e-02, train_loss: 0.4432, train_acc: 0.8492 test_loss: 0.8351, test_acc: 0.7618, best: 0.7691, time: 0:02:35
 Epoch: 126, lr: 1.0e-02, train_loss: 0.4348, train_acc: 0.8454 test_loss: 0.7861, test_acc: 0.7714, best: 0.7714, time: 0:02:35
 Epoch: 127, lr: 1.0e-02, train_loss: 0.4573, train_acc: 0.8414 test_loss: 0.7728, test_acc: 0.7768, best: 0.7768, time: 0:02:35
 Epoch: 128, lr: 1.0e-02, train_loss: 0.4327, train_acc: 0.8500 test_loss: 0.8385, test_acc: 0.7688, best: 0.7768, time: 0:02:35
 Epoch: 129, lr: 1.0e-02, train_loss: 0.4415, train_acc: 0.8472 test_loss: 0.8309, test_acc: 0.7651, best: 0.7768, time: 0:02:34
 Epoch: 130, lr: 1.0e-02, train_loss: 0.4297, train_acc: 0.8508 test_loss: 0.8353, test_acc: 0.7638, best: 0.7768, time: 0:02:36
 Epoch: 131, lr: 1.0e-02, train_loss: 0.4242, train_acc: 0.8546 test_loss: 0.8269, test_acc: 0.7579, best: 0.7768, time: 0:02:34
 Epoch: 132, lr: 1.0e-02, train_loss: 0.4241, train_acc: 0.8476 test_loss: 0.8324, test_acc: 0.7646, best: 0.7768, time: 0:02:35
 Epoch: 133, lr: 1.0e-02, train_loss: 0.4309, train_acc: 0.8472 test_loss: 0.7770, test_acc: 0.7732, best: 0.7768, time: 0:02:35
 Epoch: 134, lr: 1.0e-02, train_loss: 0.4208, train_acc: 0.8534 test_loss: 0.8631, test_acc: 0.7522, best: 0.7768, time: 0:02:34
 Epoch: 135, lr: 1.0e-02, train_loss: 0.4316, train_acc: 0.8492 test_loss: 0.7094, test_acc: 0.7931, best: 0.7931, time: 0:02:35
 Epoch: 136, lr: 1.0e-02, train_loss: 0.3985, train_acc: 0.8600 test_loss: 0.8432, test_acc: 0.7641, best: 0.7931, time: 0:02:34
 Epoch: 137, lr: 1.0e-02, train_loss: 0.4171, train_acc: 0.8562 test_loss: 0.8720, test_acc: 0.7559, best: 0.7931, time: 0:02:35
 Epoch: 138, lr: 1.0e-02, train_loss: 0.4058, train_acc: 0.8574 test_loss: 0.7445, test_acc: 0.7711, best: 0.7931, time: 0:02:35
 Epoch: 139, lr: 1.0e-02, train_loss: 0.3945, train_acc: 0.8634 test_loss: 0.8228, test_acc: 0.7638, best: 0.7931, time: 0:02:36
 Epoch: 140, lr: 1.0e-02, train_loss: 0.4111, train_acc: 0.8552 test_loss: 0.7995, test_acc: 0.7644, best: 0.7931, time: 0:02:35
 Epoch: 141, lr: 1.0e-02, train_loss: 0.3961, train_acc: 0.8594 test_loss: 0.8489, test_acc: 0.7632, best: 0.7931, time: 0:02:35
 Epoch: 142, lr: 1.0e-02, train_loss: 0.4014, train_acc: 0.8572 test_loss: 0.8078, test_acc: 0.7685, best: 0.7931, time: 0:02:34
 Epoch: 143, lr: 1.0e-02, train_loss: 0.3987, train_acc: 0.8618 test_loss: 0.7927, test_acc: 0.7752, best: 0.7931, time: 0:02:33
 Epoch: 144, lr: 1.0e-02, train_loss: 0.3932, train_acc: 0.8596 test_loss: 0.7601, test_acc: 0.7780, best: 0.7931, time: 0:02:34
 Epoch: 145, lr: 1.0e-02, train_loss: 0.3671, train_acc: 0.8772 test_loss: 0.8844, test_acc: 0.7576, best: 0.7931, time: 0:02:34
 Epoch: 146, lr: 1.0e-02, train_loss: 0.3682, train_acc: 0.8706 test_loss: 0.8132, test_acc: 0.7685, best: 0.7931, time: 0:02:34
 Epoch: 147, lr: 1.0e-02, train_loss: 0.3667, train_acc: 0.8770 test_loss: 0.8247, test_acc: 0.7766, best: 0.7931, time: 0:02:35
 Epoch: 148, lr: 1.0e-02, train_loss: 0.3739, train_acc: 0.8706 test_loss: 0.8321, test_acc: 0.7686, best: 0.7931, time: 0:02:35
 Epoch: 149, lr: 1.0e-02, train_loss: 0.3679, train_acc: 0.8750 test_loss: 0.8352, test_acc: 0.7652, best: 0.7931, time: 0:02:35
 Epoch: 150, lr: 1.0e-02, train_loss: 0.3682, train_acc: 0.8784 test_loss: 0.8143, test_acc: 0.7629, best: 0.7931, time: 0:02:34
 Epoch: 151, lr: 1.0e-02, train_loss: 0.3866, train_acc: 0.8648 test_loss: 0.9615, test_acc: 0.7524, best: 0.7931, time: 0:02:35
 Epoch: 152, lr: 1.0e-02, train_loss: 0.3690, train_acc: 0.8644 test_loss: 0.8796, test_acc: 0.7582, best: 0.7931, time: 0:02:35
 Epoch: 153, lr: 1.0e-02, train_loss: 0.3444, train_acc: 0.8810 test_loss: 0.8081, test_acc: 0.7756, best: 0.7931, time: 0:02:34
 Epoch: 154, lr: 1.0e-02, train_loss: 0.3662, train_acc: 0.8682 test_loss: 0.8922, test_acc: 0.7671, best: 0.7931, time: 0:02:36
 Epoch: 155, lr: 1.0e-02, train_loss: 0.3656, train_acc: 0.8754 test_loss: 0.8102, test_acc: 0.7744, best: 0.7931, time: 0:02:37
 Epoch: 156, lr: 1.0e-02, train_loss: 0.3381, train_acc: 0.8834 test_loss: 0.9854, test_acc: 0.7540, best: 0.7931, time: 0:02:37
 Epoch: 157, lr: 1.0e-02, train_loss: 0.3674, train_acc: 0.8758 test_loss: 1.7604, test_acc: 0.6706, best: 0.7931, time: 0:02:35
 Epoch: 158, lr: 1.0e-02, train_loss: 0.3576, train_acc: 0.8722 test_loss: 0.8413, test_acc: 0.7676, best: 0.7931, time: 0:02:34
 Epoch: 159, lr: 1.0e-02, train_loss: 0.3405, train_acc: 0.8824 test_loss: 1.1232, test_acc: 0.7208, best: 0.7931, time: 0:02:34
 Epoch: 160, lr: 1.0e-02, train_loss: 0.3451, train_acc: 0.8810 test_loss: 0.7643, test_acc: 0.7786, best: 0.7931, time: 0:02:33
 Epoch: 161, lr: 1.0e-02, train_loss: 0.3438, train_acc: 0.8838 test_loss: 0.9304, test_acc: 0.7622, best: 0.7931, time: 0:02:14
 Epoch: 162, lr: 1.0e-02, train_loss: 0.3330, train_acc: 0.8814 test_loss: 0.9959, test_acc: 0.7476, best: 0.7931, time: 0:02:23
 Epoch: 163, lr: 1.0e-02, train_loss: 0.3409, train_acc: 0.8840 test_loss: 0.9783, test_acc: 0.7468, best: 0.7931, time: 0:02:29
 Epoch: 164, lr: 1.0e-02, train_loss: 0.3433, train_acc: 0.8816 test_loss: 0.8757, test_acc: 0.7599, best: 0.7931, time: 0:01:51
 Epoch: 165, lr: 1.0e-02, train_loss: 0.3504, train_acc: 0.8764 test_loss: 0.7711, test_acc: 0.7863, best: 0.7931, time: 0:02:36
 Epoch: 166, lr: 1.0e-02, train_loss: 0.3280, train_acc: 0.8874 test_loss: 0.8510, test_acc: 0.7624, best: 0.7931, time: 0:02:37
 Epoch: 167, lr: 1.0e-02, train_loss: 0.3482, train_acc: 0.8766 test_loss: 0.9344, test_acc: 0.7401, best: 0.7931, time: 0:02:35
 Epoch: 168, lr: 1.0e-02, train_loss: 0.3320, train_acc: 0.8820 test_loss: 0.9266, test_acc: 0.7612, best: 0.7931, time: 0:02:35
 Epoch: 169, lr: 1.0e-02, train_loss: 0.3141, train_acc: 0.8892 test_loss: 1.0283, test_acc: 0.7475, best: 0.7931, time: 0:02:36
 Epoch: 170, lr: 1.0e-02, train_loss: 0.3282, train_acc: 0.8896 test_loss: 0.7884, test_acc: 0.7800, best: 0.7931, time: 0:02:34
 Epoch: 171, lr: 1.0e-02, train_loss: 0.3226, train_acc: 0.8928 test_loss: 0.8035, test_acc: 0.7815, best: 0.7931, time: 0:02:33
 Epoch: 172, lr: 1.0e-02, train_loss: 0.3143, train_acc: 0.8936 test_loss: 1.0133, test_acc: 0.7415, best: 0.7931, time: 0:02:35
 Epoch: 173, lr: 1.0e-02, train_loss: 0.3284, train_acc: 0.8856 test_loss: 0.7746, test_acc: 0.7857, best: 0.7931, time: 0:02:34
 Epoch: 174, lr: 1.0e-02, train_loss: 0.3279, train_acc: 0.8876 test_loss: 0.9122, test_acc: 0.7698, best: 0.7931, time: 0:02:34
 Epoch: 175, lr: 1.0e-02, train_loss: 0.3104, train_acc: 0.8942 test_loss: 0.7472, test_acc: 0.7913, best: 0.7931, time: 0:02:34
 Epoch: 176, lr: 1.0e-02, train_loss: 0.3131, train_acc: 0.8896 test_loss: 0.9098, test_acc: 0.7708, best: 0.7931, time: 0:02:33
 Epoch: 177, lr: 1.0e-02, train_loss: 0.3044, train_acc: 0.8942 test_loss: 0.8973, test_acc: 0.7632, best: 0.7931, time: 0:02:34
 Epoch: 178, lr: 1.0e-02, train_loss: 0.3161, train_acc: 0.8912 test_loss: 0.7306, test_acc: 0.7966, best: 0.7966, time: 0:02:34
 Epoch: 179, lr: 1.0e-02, train_loss: 0.2925, train_acc: 0.9026 test_loss: 0.9088, test_acc: 0.7731, best: 0.7966, time: 0:02:34
 Epoch: 180, lr: 2.0e-03, train_loss: 0.2675, train_acc: 0.9118 test_loss: 0.7493, test_acc: 0.8089, best: 0.8089, time: 0:02:34
 Epoch: 181, lr: 2.0e-03, train_loss: 0.2185, train_acc: 0.9254 test_loss: 0.7341, test_acc: 0.8103, best: 0.8103, time: 0:02:34
 Epoch: 182, lr: 2.0e-03, train_loss: 0.1983, train_acc: 0.9304 test_loss: 0.7827, test_acc: 0.8059, best: 0.8103, time: 0:02:34
 Epoch: 183, lr: 2.0e-03, train_loss: 0.2061, train_acc: 0.9312 test_loss: 0.8936, test_acc: 0.7875, best: 0.8103, time: 0:02:35
 Epoch: 184, lr: 2.0e-03, train_loss: 0.2250, train_acc: 0.9212 test_loss: 0.7617, test_acc: 0.8023, best: 0.8103, time: 0:02:38
 Epoch: 185, lr: 2.0e-03, train_loss: 0.1890, train_acc: 0.9354 test_loss: 0.7571, test_acc: 0.8057, best: 0.8103, time: 0:02:35
 Epoch: 186, lr: 2.0e-03, train_loss: 0.1972, train_acc: 0.9310 test_loss: 0.7520, test_acc: 0.8077, best: 0.8103, time: 0:02:36
 Epoch: 187, lr: 2.0e-03, train_loss: 0.1934, train_acc: 0.9340 test_loss: 0.7748, test_acc: 0.8071, best: 0.8103, time: 0:02:35
 Epoch: 188, lr: 2.0e-03, train_loss: 0.1883, train_acc: 0.9372 test_loss: 0.8226, test_acc: 0.7984, best: 0.8103, time: 0:02:35
 Epoch: 189, lr: 2.0e-03, train_loss: 0.2118, train_acc: 0.9298 test_loss: 0.7878, test_acc: 0.8016, best: 0.8103, time: 0:02:36
 Epoch: 190, lr: 2.0e-03, train_loss: 0.1884, train_acc: 0.9340 test_loss: 0.8496, test_acc: 0.7979, best: 0.8103, time: 0:02:34
 Epoch: 191, lr: 2.0e-03, train_loss: 0.2047, train_acc: 0.9306 test_loss: 0.8153, test_acc: 0.8034, best: 0.8103, time: 0:02:32
 Epoch: 192, lr: 2.0e-03, train_loss: 0.2011, train_acc: 0.9334 test_loss: 0.7751, test_acc: 0.8083, best: 0.8103, time: 0:02:35
 Epoch: 193, lr: 2.0e-03, train_loss: 0.1819, train_acc: 0.9386 test_loss: 0.7828, test_acc: 0.8063, best: 0.8103, time: 0:02:35
 Epoch: 194, lr: 2.0e-03, train_loss: 0.1897, train_acc: 0.9360 test_loss: 0.7589, test_acc: 0.8136, best: 0.8136, time: 0:02:34
 Epoch: 195, lr: 2.0e-03, train_loss: 0.1813, train_acc: 0.9376 test_loss: 0.7830, test_acc: 0.8069, best: 0.8136, time: 0:02:33
 Epoch: 196, lr: 2.0e-03, train_loss: 0.1849, train_acc: 0.9348 test_loss: 0.8053, test_acc: 0.8093, best: 0.8136, time: 0:02:36
 Epoch: 197, lr: 2.0e-03, train_loss: 0.2008, train_acc: 0.9288 test_loss: 0.8121, test_acc: 0.7987, best: 0.8136, time: 0:02:36
 Epoch: 198, lr: 2.0e-03, train_loss: 0.1934, train_acc: 0.9342 test_loss: 0.7818, test_acc: 0.8090, best: 0.8136, time: 0:02:35
 Epoch: 199, lr: 2.0e-03, train_loss: 0.1751, train_acc: 0.9416 test_loss: 0.7886, test_acc: 0.8076, best: 0.8136, time: 0:02:34
 Epoch: 200, lr: 2.0e-03, train_loss: 0.1929, train_acc: 0.9356 test_loss: 0.8201, test_acc: 0.8066, best: 0.8136, time: 0:02:34
 Epoch: 201, lr: 2.0e-03, train_loss: 0.1818, train_acc: 0.9402 test_loss: 0.7849, test_acc: 0.8036, best: 0.8136, time: 0:02:33
 Epoch: 202, lr: 2.0e-03, train_loss: 0.1918, train_acc: 0.9336 test_loss: 0.8099, test_acc: 0.8049, best: 0.8136, time: 0:02:34
 Epoch: 203, lr: 2.0e-03, train_loss: 0.1820, train_acc: 0.9374 test_loss: 0.8064, test_acc: 0.8026, best: 0.8136, time: 0:02:35
 Epoch: 204, lr: 2.0e-03, train_loss: 0.1711, train_acc: 0.9404 test_loss: 0.7511, test_acc: 0.8085, best: 0.8136, time: 0:02:34
 Epoch: 205, lr: 2.0e-03, train_loss: 0.1832, train_acc: 0.9386 test_loss: 0.7848, test_acc: 0.8073, best: 0.8136, time: 0:02:35
 Epoch: 206, lr: 2.0e-03, train_loss: 0.1768, train_acc: 0.9416 test_loss: 0.7830, test_acc: 0.8073, best: 0.8136, time: 0:02:36
 Epoch: 207, lr: 2.0e-03, train_loss: 0.1764, train_acc: 0.9390 test_loss: 0.8402, test_acc: 0.8023, best: 0.8136, time: 0:02:36
 Epoch: 208, lr: 2.0e-03, train_loss: 0.1781, train_acc: 0.9432 test_loss: 0.8221, test_acc: 0.8064, best: 0.8136, time: 0:02:35
 Epoch: 209, lr: 2.0e-03, train_loss: 0.1731, train_acc: 0.9438 test_loss: 0.7933, test_acc: 0.8091, best: 0.8136, time: 0:02:33
 Epoch: 210, lr: 2.0e-03, train_loss: 0.2016, train_acc: 0.9308 test_loss: 0.7805, test_acc: 0.8081, best: 0.8136, time: 0:02:34
 Epoch: 211, lr: 2.0e-03, train_loss: 0.1766, train_acc: 0.9402 test_loss: 0.8118, test_acc: 0.8060, best: 0.8136, time: 0:02:34
 Epoch: 212, lr: 2.0e-03, train_loss: 0.1710, train_acc: 0.9458 test_loss: 0.8252, test_acc: 0.8009, best: 0.8136, time: 0:02:34
 Epoch: 213, lr: 2.0e-03, train_loss: 0.1665, train_acc: 0.9438 test_loss: 0.8609, test_acc: 0.8013, best: 0.8136, time: 0:02:33
 Epoch: 214, lr: 2.0e-03, train_loss: 0.1695, train_acc: 0.9398 test_loss: 0.8545, test_acc: 0.8005, best: 0.8136, time: 0:02:33
 Epoch: 215, lr: 2.0e-03, train_loss: 0.1942, train_acc: 0.9308 test_loss: 0.8124, test_acc: 0.8075, best: 0.8136, time: 0:02:33
 Epoch: 216, lr: 2.0e-03, train_loss: 0.1749, train_acc: 0.9374 test_loss: 0.8075, test_acc: 0.8023, best: 0.8136, time: 0:02:34
 Epoch: 217, lr: 2.0e-03, train_loss: 0.1766, train_acc: 0.9412 test_loss: 0.8225, test_acc: 0.7990, best: 0.8136, time: 0:02:35
 Epoch: 218, lr: 2.0e-03, train_loss: 0.1744, train_acc: 0.9398 test_loss: 0.8302, test_acc: 0.8024, best: 0.8136, time: 0:02:33
 Epoch: 219, lr: 2.0e-03, train_loss: 0.1812, train_acc: 0.9406 test_loss: 0.8284, test_acc: 0.8019, best: 0.8136, time: 0:02:34
 Epoch: 220, lr: 2.0e-03, train_loss: 0.1571, train_acc: 0.9492 test_loss: 0.8070, test_acc: 0.8073, best: 0.8136, time: 0:02:34
 Epoch: 221, lr: 2.0e-03, train_loss: 0.1607, train_acc: 0.9466 test_loss: 0.8258, test_acc: 0.8090, best: 0.8136, time: 0:02:36
 Epoch: 222, lr: 2.0e-03, train_loss: 0.1702, train_acc: 0.9450 test_loss: 0.8036, test_acc: 0.8045, best: 0.8136, time: 0:02:34
 Epoch: 223, lr: 2.0e-03, train_loss: 0.1775, train_acc: 0.9366 test_loss: 0.8203, test_acc: 0.8076, best: 0.8136, time: 0:02:36
 Epoch: 224, lr: 2.0e-03, train_loss: 0.1765, train_acc: 0.9386 test_loss: 0.7855, test_acc: 0.8100, best: 0.8136, time: 0:02:35
 Epoch: 225, lr: 2.0e-03, train_loss: 0.1643, train_acc: 0.9464 test_loss: 0.8018, test_acc: 0.8071, best: 0.8136, time: 0:02:35
 Epoch: 226, lr: 2.0e-03, train_loss: 0.1771, train_acc: 0.9378 test_loss: 0.8472, test_acc: 0.7999, best: 0.8136, time: 0:02:34
 Epoch: 227, lr: 2.0e-03, train_loss: 0.1641, train_acc: 0.9426 test_loss: 0.8145, test_acc: 0.7990, best: 0.8136, time: 0:02:34
 Epoch: 228, lr: 2.0e-03, train_loss: 0.1664, train_acc: 0.9430 test_loss: 0.7841, test_acc: 0.8085, best: 0.8136, time: 0:02:34
 Epoch: 229, lr: 2.0e-03, train_loss: 0.1587, train_acc: 0.9462 test_loss: 0.8143, test_acc: 0.8144, best: 0.8144, time: 0:02:36
 Epoch: 230, lr: 2.0e-03, train_loss: 0.1691, train_acc: 0.9428 test_loss: 0.7884, test_acc: 0.8087, best: 0.8144, time: 0:02:33
 Epoch: 231, lr: 2.0e-03, train_loss: 0.1561, train_acc: 0.9446 test_loss: 0.7949, test_acc: 0.8073, best: 0.8144, time: 0:02:33
 Epoch: 232, lr: 2.0e-03, train_loss: 0.1554, train_acc: 0.9454 test_loss: 0.8060, test_acc: 0.8131, best: 0.8144, time: 0:02:34
 Epoch: 233, lr: 2.0e-03, train_loss: 0.1533, train_acc: 0.9444 test_loss: 0.8753, test_acc: 0.7964, best: 0.8144, time: 0:02:33
 Epoch: 234, lr: 2.0e-03, train_loss: 0.1598, train_acc: 0.9450 test_loss: 0.8287, test_acc: 0.8093, best: 0.8144, time: 0:02:34
 Epoch: 235, lr: 2.0e-03, train_loss: 0.1723, train_acc: 0.9390 test_loss: 0.8581, test_acc: 0.7951, best: 0.8144, time: 0:02:33
 Epoch: 236, lr: 2.0e-03, train_loss: 0.1636, train_acc: 0.9434 test_loss: 0.8538, test_acc: 0.8051, best: 0.8144, time: 0:02:33
 Epoch: 237, lr: 2.0e-03, train_loss: 0.1704, train_acc: 0.9398 test_loss: 0.8667, test_acc: 0.7967, best: 0.8144, time: 0:02:33
 Epoch: 238, lr: 2.0e-03, train_loss: 0.1564, train_acc: 0.9494 test_loss: 0.8849, test_acc: 0.7931, best: 0.8144, time: 0:02:33
 Epoch: 239, lr: 2.0e-03, train_loss: 0.1597, train_acc: 0.9448 test_loss: 0.7874, test_acc: 0.8084, best: 0.8144, time: 0:02:34
 Epoch: 240, lr: 4.0e-04, train_loss: 0.1656, train_acc: 0.9480 test_loss: 0.9218, test_acc: 0.7857, best: 0.8144, time: 0:02:36
 Epoch: 241, lr: 4.0e-04, train_loss: 0.1579, train_acc: 0.9474 test_loss: 0.8127, test_acc: 0.8083, best: 0.8144, time: 0:02:36
 Epoch: 242, lr: 4.0e-04, train_loss: 0.1512, train_acc: 0.9464 test_loss: 0.8326, test_acc: 0.8090, best: 0.8144, time: 0:02:35
 Epoch: 243, lr: 4.0e-04, train_loss: 0.1464, train_acc: 0.9502 test_loss: 0.9610, test_acc: 0.7830, best: 0.8144, time: 0:02:34
 Epoch: 244, lr: 4.0e-04, train_loss: 0.1509, train_acc: 0.9504 test_loss: 0.8075, test_acc: 0.8079, best: 0.8144, time: 0:02:34
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1470, train_acc: 0.9498 test_loss: 0.8854, test_acc: 0.7995, best: 0.8144, time: 0:02:33
 Epoch: 246, lr: 4.0e-04, train_loss: 0.1579, train_acc: 0.9436 test_loss: 0.7944, test_acc: 0.8127, best: 0.8144, time: 0:02:33
 Epoch: 247, lr: 4.0e-04, train_loss: 0.1468, train_acc: 0.9482 test_loss: 0.8278, test_acc: 0.8095, best: 0.8144, time: 0:02:33
 Epoch: 248, lr: 4.0e-04, train_loss: 0.1500, train_acc: 0.9470 test_loss: 0.8158, test_acc: 0.8099, best: 0.8144, time: 0:02:34
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1366, train_acc: 0.9532 test_loss: 0.8016, test_acc: 0.8133, best: 0.8144, time: 0:02:34
 Epoch: 250, lr: 4.0e-04, train_loss: 0.1473, train_acc: 0.9478 test_loss: 0.7928, test_acc: 0.8147, best: 0.8147, time: 0:02:35
 Epoch: 251, lr: 4.0e-04, train_loss: 0.1502, train_acc: 0.9468 test_loss: 0.8052, test_acc: 0.8099, best: 0.8147, time: 0:02:34
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1464, train_acc: 0.9484 test_loss: 0.8396, test_acc: 0.8077, best: 0.8147, time: 0:02:33
 Epoch: 253, lr: 4.0e-04, train_loss: 0.1458, train_acc: 0.9472 test_loss: 0.8956, test_acc: 0.7984, best: 0.8147, time: 0:02:33
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1482, train_acc: 0.9494 test_loss: 0.7966, test_acc: 0.8136, best: 0.8147, time: 0:02:33
 Epoch: 255, lr: 4.0e-04, train_loss: 0.1431, train_acc: 0.9496 test_loss: 0.8520, test_acc: 0.8025, best: 0.8147, time: 0:02:33
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1446, train_acc: 0.9510 test_loss: 0.7876, test_acc: 0.8107, best: 0.8147, time: 0:02:32
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1345, train_acc: 0.9556 test_loss: 0.8647, test_acc: 0.7994, best: 0.8147, time: 0:02:34
 Epoch: 258, lr: 4.0e-04, train_loss: 0.1399, train_acc: 0.9500 test_loss: 0.8273, test_acc: 0.8093, best: 0.8147, time: 0:02:34
 Epoch: 259, lr: 4.0e-04, train_loss: 0.1358, train_acc: 0.9518 test_loss: 1.2828, test_acc: 0.7626, best: 0.8147, time: 0:02:33
 Epoch: 260, lr: 4.0e-04, train_loss: 0.1368, train_acc: 0.9536 test_loss: 0.8712, test_acc: 0.8025, best: 0.8147, time: 0:02:33
 Epoch: 261, lr: 4.0e-04, train_loss: 0.1500, train_acc: 0.9526 test_loss: 0.8790, test_acc: 0.8063, best: 0.8147, time: 0:02:34
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1471, train_acc: 0.9512 test_loss: 0.8167, test_acc: 0.8119, best: 0.8147, time: 0:02:34
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1490, train_acc: 0.9514 test_loss: 0.8959, test_acc: 0.7985, best: 0.8147, time: 0:02:35
 Epoch: 264, lr: 4.0e-04, train_loss: 0.1420, train_acc: 0.9524 test_loss: 0.8319, test_acc: 0.8069, best: 0.8147, time: 0:02:33
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1350, train_acc: 0.9546 test_loss: 0.7839, test_acc: 0.8141, best: 0.8147, time: 0:02:34
 Epoch: 266, lr: 4.0e-04, train_loss: 0.1435, train_acc: 0.9510 test_loss: 0.8635, test_acc: 0.8080, best: 0.8147, time: 0:02:36
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1351, train_acc: 0.9540 test_loss: 0.8511, test_acc: 0.8050, best: 0.8147, time: 0:02:35
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1536, train_acc: 0.9474 test_loss: 0.8110, test_acc: 0.8093, best: 0.8147, time: 0:02:32
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1364, train_acc: 0.9530 test_loss: 0.8267, test_acc: 0.8101, best: 0.8147, time: 0:02:33
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1407, train_acc: 0.9526 test_loss: 0.8636, test_acc: 0.8036, best: 0.8147, time: 0:02:34
 Epoch: 271, lr: 8.0e-05, train_loss: 0.1454, train_acc: 0.9502 test_loss: 0.8053, test_acc: 0.8159, best: 0.8159, time: 0:02:34
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1341, train_acc: 0.9548 test_loss: 0.7941, test_acc: 0.8169, best: 0.8169, time: 0:02:35
 Epoch: 273, lr: 8.0e-05, train_loss: 0.1344, train_acc: 0.9558 test_loss: 0.8321, test_acc: 0.8114, best: 0.8169, time: 0:02:36
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1264, train_acc: 0.9588 test_loss: 1.0247, test_acc: 0.7849, best: 0.8169, time: 0:02:11
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1369, train_acc: 0.9548 test_loss: 0.8242, test_acc: 0.8126, best: 0.8169, time: 0:02:25
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1481, train_acc: 0.9482 test_loss: 0.7956, test_acc: 0.8115, best: 0.8169, time: 0:02:27
 Epoch: 277, lr: 8.0e-05, train_loss: 0.1347, train_acc: 0.9532 test_loss: 0.8426, test_acc: 0.8114, best: 0.8169, time: 0:02:00
 Epoch: 278, lr: 8.0e-05, train_loss: 0.1367, train_acc: 0.9542 test_loss: 0.8039, test_acc: 0.8116, best: 0.8169, time: 0:02:29
 Epoch: 279, lr: 8.0e-05, train_loss: 0.1567, train_acc: 0.9446 test_loss: 0.8354, test_acc: 0.8114, best: 0.8169, time: 0:02:34
 Epoch: 280, lr: 8.0e-05, train_loss: 0.1275, train_acc: 0.9594 test_loss: 0.8474, test_acc: 0.8087, best: 0.8169, time: 0:02:33
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1374, train_acc: 0.9528 test_loss: 0.8000, test_acc: 0.8093, best: 0.8169, time: 0:02:34
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1326, train_acc: 0.9562 test_loss: 0.8271, test_acc: 0.8123, best: 0.8169, time: 0:02:32
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1405, train_acc: 0.9510 test_loss: 0.8078, test_acc: 0.8125, best: 0.8169, time: 0:02:34
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1358, train_acc: 0.9528 test_loss: 0.8472, test_acc: 0.8073, best: 0.8169, time: 0:02:35
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1335, train_acc: 0.9510 test_loss: 0.8566, test_acc: 0.8037, best: 0.8169, time: 0:02:33
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1523, train_acc: 0.9478 test_loss: 0.9402, test_acc: 0.7906, best: 0.8169, time: 0:02:33
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1366, train_acc: 0.9530 test_loss: 0.8193, test_acc: 0.8125, best: 0.8169, time: 0:02:32
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1489, train_acc: 0.9494 test_loss: 0.8486, test_acc: 0.8067, best: 0.8169, time: 0:02:32
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1329, train_acc: 0.9568 test_loss: 0.9235, test_acc: 0.7965, best: 0.8169, time: 0:02:34
 Epoch: 290, lr: 8.0e-05, train_loss: 0.1354, train_acc: 0.9538 test_loss: 0.8725, test_acc: 0.8027, best: 0.8169, time: 0:02:33
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1460, train_acc: 0.9496 test_loss: 0.8285, test_acc: 0.8075, best: 0.8169, time: 0:02:34
 Epoch: 292, lr: 8.0e-05, train_loss: 0.1451, train_acc: 0.9526 test_loss: 0.8280, test_acc: 0.8106, best: 0.8169, time: 0:02:34
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1469, train_acc: 0.9514 test_loss: 0.9074, test_acc: 0.7974, best: 0.8169, time: 0:02:34
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1377, train_acc: 0.9536 test_loss: 0.8946, test_acc: 0.7991, best: 0.8169, time: 0:02:32
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1343, train_acc: 0.9556 test_loss: 0.8263, test_acc: 0.8099, best: 0.8169, time: 0:02:33
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1372, train_acc: 0.9498 test_loss: 0.9883, test_acc: 0.7931, best: 0.8169, time: 0:02:33
 Epoch: 297, lr: 8.0e-05, train_loss: 0.1421, train_acc: 0.9506 test_loss: 0.7978, test_acc: 0.8130, best: 0.8169, time: 0:02:32
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1460, train_acc: 0.9480 test_loss: 0.8141, test_acc: 0.8096, best: 0.8169, time: 0:02:34
 Epoch: 299, lr: 8.0e-05, train_loss: 0.1370, train_acc: 0.9498 test_loss: 0.8146, test_acc: 0.8105, best: 0.8169, time: 0:02:32
 Highest accuracy: 0.8169