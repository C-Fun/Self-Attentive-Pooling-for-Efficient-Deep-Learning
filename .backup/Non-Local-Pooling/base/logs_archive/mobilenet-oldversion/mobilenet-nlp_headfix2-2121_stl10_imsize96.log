
 Run on time: 2022-07-01 02:50:27.784397

 Architecture: mobilenet-nlp_headfix2-2121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP_HEADFIX2-2121
	 im_size              : None
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (features): Sequential(
        (0): Sequential(
          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU6(inplace=True)
        )
        (1): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 16)
                (col_embed): Embedding(256, 16)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=96, out_features=96, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 48)
                (col_embed): Embedding(256, 48)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.3256, train_acc: 0.2008 test_loss: 1.7765, test_acc: 0.2948, best: 0.2948, time: 0:01:06
 Epoch: 2, lr: 1.0e-02, train_loss: 1.9155, train_acc: 0.2678 test_loss: 1.6566, test_acc: 0.3531, best: 0.3531, time: 0:01:06
 Epoch: 3, lr: 1.0e-02, train_loss: 1.8422, train_acc: 0.3018 test_loss: 1.5735, test_acc: 0.3777, best: 0.3777, time: 0:01:06
 Epoch: 4, lr: 1.0e-02, train_loss: 1.7667, train_acc: 0.3282 test_loss: 1.6014, test_acc: 0.3814, best: 0.3814, time: 0:01:06
 Epoch: 5, lr: 1.0e-02, train_loss: 1.6895, train_acc: 0.3712 test_loss: 1.6490, test_acc: 0.4114, best: 0.4114, time: 0:01:06
 Epoch: 6, lr: 1.0e-02, train_loss: 1.6262, train_acc: 0.3878 test_loss: 1.4061, test_acc: 0.4654, best: 0.4654, time: 0:01:06
 Epoch: 7, lr: 1.0e-02, train_loss: 1.6019, train_acc: 0.4070 test_loss: 1.3502, test_acc: 0.4838, best: 0.4838, time: 0:01:06
 Epoch: 8, lr: 1.0e-02, train_loss: 1.5621, train_acc: 0.4214 test_loss: 1.4185, test_acc: 0.4581, best: 0.4838, time: 0:01:06
 Epoch: 9, lr: 1.0e-02, train_loss: 1.5318, train_acc: 0.4334 test_loss: 1.3839, test_acc: 0.4858, best: 0.4858, time: 0:01:06
 Epoch: 10, lr: 1.0e-02, train_loss: 1.4916, train_acc: 0.4534 test_loss: 1.3004, test_acc: 0.5090, best: 0.5090, time: 0:01:06
 Epoch: 11, lr: 1.0e-02, train_loss: 1.4390, train_acc: 0.4772 test_loss: 1.2751, test_acc: 0.5306, best: 0.5306, time: 0:01:06
 Epoch: 12, lr: 1.0e-02, train_loss: 1.3907, train_acc: 0.4774 test_loss: 1.2702, test_acc: 0.5345, best: 0.5345, time: 0:01:06
 Epoch: 13, lr: 1.0e-02, train_loss: 1.3596, train_acc: 0.5052 test_loss: 1.2710, test_acc: 0.5354, best: 0.5354, time: 0:01:06
 Epoch: 14, lr: 1.0e-02, train_loss: 1.3353, train_acc: 0.5112 test_loss: 1.2672, test_acc: 0.5540, best: 0.5540, time: 0:01:06
 Epoch: 15, lr: 1.0e-02, train_loss: 1.3182, train_acc: 0.5198 test_loss: 1.2273, test_acc: 0.5533, best: 0.5540, time: 0:01:06
 Epoch: 16, lr: 1.0e-02, train_loss: 1.3130, train_acc: 0.5210 test_loss: 1.1480, test_acc: 0.5757, best: 0.5757, time: 0:01:06
 Epoch: 17, lr: 1.0e-02, train_loss: 1.2726, train_acc: 0.5320 test_loss: 1.1315, test_acc: 0.5859, best: 0.5859, time: 0:01:06
 Epoch: 18, lr: 1.0e-02, train_loss: 1.2618, train_acc: 0.5490 test_loss: 1.0724, test_acc: 0.6134, best: 0.6134, time: 0:01:06
 Epoch: 19, lr: 1.0e-02, train_loss: 1.2361, train_acc: 0.5502 test_loss: 1.1273, test_acc: 0.5880, best: 0.6134, time: 0:01:06
 Epoch: 20, lr: 1.0e-02, train_loss: 1.2268, train_acc: 0.5550 test_loss: 1.2153, test_acc: 0.5645, best: 0.6134, time: 0:01:06
 Epoch: 21, lr: 1.0e-02, train_loss: 1.1866, train_acc: 0.5684 test_loss: 1.0522, test_acc: 0.6270, best: 0.6270, time: 0:01:06
 Epoch: 22, lr: 1.0e-02, train_loss: 1.1732, train_acc: 0.5722 test_loss: 1.0576, test_acc: 0.6236, best: 0.6270, time: 0:01:06
 Epoch: 23, lr: 1.0e-02, train_loss: 1.1521, train_acc: 0.5856 test_loss: 1.0593, test_acc: 0.6226, best: 0.6270, time: 0:01:06
 Epoch: 24, lr: 1.0e-02, train_loss: 1.1620, train_acc: 0.5814 test_loss: 1.0984, test_acc: 0.6000, best: 0.6270, time: 0:01:06
 Epoch: 25, lr: 1.0e-02, train_loss: 1.1345, train_acc: 0.5824 test_loss: 0.9801, test_acc: 0.6481, best: 0.6481, time: 0:01:06
 Epoch: 26, lr: 1.0e-02, train_loss: 1.1050, train_acc: 0.6060 test_loss: 1.0952, test_acc: 0.6245, best: 0.6481, time: 0:01:06
 Epoch: 27, lr: 1.0e-02, train_loss: 1.0771, train_acc: 0.6166 test_loss: 1.0030, test_acc: 0.6391, best: 0.6481, time: 0:01:06
 Epoch: 28, lr: 1.0e-02, train_loss: 1.0932, train_acc: 0.6188 test_loss: 1.0493, test_acc: 0.6261, best: 0.6481, time: 0:01:06
 Epoch: 29, lr: 1.0e-02, train_loss: 1.0785, train_acc: 0.6110 test_loss: 0.9315, test_acc: 0.6643, best: 0.6643, time: 0:01:06
 Epoch: 30, lr: 1.0e-02, train_loss: 1.0580, train_acc: 0.6204 test_loss: 0.9480, test_acc: 0.6623, best: 0.6643, time: 0:01:06
 Epoch: 31, lr: 1.0e-02, train_loss: 1.0136, train_acc: 0.6390 test_loss: 0.8886, test_acc: 0.6774, best: 0.6774, time: 0:01:06
 Epoch: 32, lr: 1.0e-02, train_loss: 1.0081, train_acc: 0.6418 test_loss: 0.9650, test_acc: 0.6552, best: 0.6774, time: 0:01:06
 Epoch: 33, lr: 1.0e-02, train_loss: 1.0090, train_acc: 0.6392 test_loss: 0.9269, test_acc: 0.6714, best: 0.6774, time: 0:01:06
 Epoch: 34, lr: 1.0e-02, train_loss: 1.0043, train_acc: 0.6424 test_loss: 1.0651, test_acc: 0.6335, best: 0.6774, time: 0:01:06
 Epoch: 35, lr: 1.0e-02, train_loss: 0.9760, train_acc: 0.6458 test_loss: 0.9302, test_acc: 0.6699, best: 0.6774, time: 0:01:06
 Epoch: 36, lr: 1.0e-02, train_loss: 0.9582, train_acc: 0.6628 test_loss: 0.9359, test_acc: 0.6669, best: 0.6774, time: 0:01:06
 Epoch: 37, lr: 1.0e-02, train_loss: 0.9734, train_acc: 0.6554 test_loss: 0.9685, test_acc: 0.6617, best: 0.6774, time: 0:01:06
 Epoch: 38, lr: 1.0e-02, train_loss: 0.9397, train_acc: 0.6624 test_loss: 0.9845, test_acc: 0.6583, best: 0.6774, time: 0:01:06
 Epoch: 39, lr: 1.0e-02, train_loss: 0.9310, train_acc: 0.6656 test_loss: 0.8632, test_acc: 0.6973, best: 0.6973, time: 0:01:06
 Epoch: 40, lr: 1.0e-02, train_loss: 0.9306, train_acc: 0.6670 test_loss: 0.8750, test_acc: 0.6954, best: 0.6973, time: 0:01:06
 Epoch: 41, lr: 1.0e-02, train_loss: 0.9135, train_acc: 0.6746 test_loss: 0.9205, test_acc: 0.6740, best: 0.6973, time: 0:01:06
 Epoch: 42, lr: 1.0e-02, train_loss: 0.9092, train_acc: 0.6716 test_loss: 0.8400, test_acc: 0.7035, best: 0.7035, time: 0:01:06
 Epoch: 43, lr: 1.0e-02, train_loss: 0.8977, train_acc: 0.6776 test_loss: 0.8570, test_acc: 0.6974, best: 0.7035, time: 0:01:06
 Epoch: 44, lr: 1.0e-02, train_loss: 0.8710, train_acc: 0.6880 test_loss: 0.8468, test_acc: 0.7043, best: 0.7043, time: 0:01:06
 Epoch: 45, lr: 1.0e-02, train_loss: 0.8601, train_acc: 0.6922 test_loss: 0.8654, test_acc: 0.6915, best: 0.7043, time: 0:01:06
 Epoch: 46, lr: 1.0e-02, train_loss: 0.8464, train_acc: 0.6978 test_loss: 0.9008, test_acc: 0.6859, best: 0.7043, time: 0:01:06
 Epoch: 47, lr: 1.0e-02, train_loss: 0.8517, train_acc: 0.6972 test_loss: 0.9345, test_acc: 0.6743, best: 0.7043, time: 0:01:06
 Epoch: 48, lr: 1.0e-02, train_loss: 0.8495, train_acc: 0.6960 test_loss: 0.9662, test_acc: 0.6704, best: 0.7043, time: 0:01:06
 Epoch: 49, lr: 1.0e-02, train_loss: 0.8397, train_acc: 0.7112 test_loss: 0.8674, test_acc: 0.6963, best: 0.7043, time: 0:01:06
 Epoch: 50, lr: 1.0e-02, train_loss: 0.8111, train_acc: 0.7128 test_loss: 0.8954, test_acc: 0.6963, best: 0.7043, time: 0:01:06
 Epoch: 51, lr: 1.0e-02, train_loss: 0.8071, train_acc: 0.7098 test_loss: 0.8569, test_acc: 0.7144, best: 0.7144, time: 0:01:06
 Epoch: 52, lr: 1.0e-02, train_loss: 0.8382, train_acc: 0.7034 test_loss: 0.8165, test_acc: 0.7170, best: 0.7170, time: 0:01:06
 Epoch: 53, lr: 1.0e-02, train_loss: 0.7769, train_acc: 0.7306 test_loss: 0.8012, test_acc: 0.7320, best: 0.7320, time: 0:01:06
 Epoch: 54, lr: 1.0e-02, train_loss: 0.7966, train_acc: 0.7174 test_loss: 0.8593, test_acc: 0.7056, best: 0.7320, time: 0:01:06
 Epoch: 55, lr: 1.0e-02, train_loss: 0.7878, train_acc: 0.7258 test_loss: 0.8535, test_acc: 0.7209, best: 0.7320, time: 0:01:06
 Epoch: 56, lr: 1.0e-02, train_loss: 0.7829, train_acc: 0.7258 test_loss: 0.7749, test_acc: 0.7230, best: 0.7320, time: 0:01:06
 Epoch: 57, lr: 1.0e-02, train_loss: 0.7869, train_acc: 0.7234 test_loss: 0.8208, test_acc: 0.7210, best: 0.7320, time: 0:01:06
 Epoch: 58, lr: 1.0e-02, train_loss: 0.7585, train_acc: 0.7330 test_loss: 0.7830, test_acc: 0.7324, best: 0.7324, time: 0:01:06
 Epoch: 59, lr: 1.0e-02, train_loss: 0.7553, train_acc: 0.7342 test_loss: 0.7535, test_acc: 0.7365, best: 0.7365, time: 0:01:06
 Epoch: 60, lr: 1.0e-02, train_loss: 0.7336, train_acc: 0.7416 test_loss: 0.9187, test_acc: 0.7010, best: 0.7365, time: 0:01:06
 Epoch: 61, lr: 1.0e-02, train_loss: 0.7457, train_acc: 0.7366 test_loss: 0.7793, test_acc: 0.7352, best: 0.7365, time: 0:01:06
 Epoch: 62, lr: 1.0e-02, train_loss: 0.7316, train_acc: 0.7442 test_loss: 0.8051, test_acc: 0.7319, best: 0.7365, time: 0:01:06
 Epoch: 63, lr: 1.0e-02, train_loss: 0.7350, train_acc: 0.7374 test_loss: 0.7953, test_acc: 0.7304, best: 0.7365, time: 0:01:06
 Epoch: 64, lr: 1.0e-02, train_loss: 0.7274, train_acc: 0.7470 test_loss: 0.7588, test_acc: 0.7428, best: 0.7428, time: 0:01:06
 Epoch: 65, lr: 1.0e-02, train_loss: 0.7069, train_acc: 0.7490 test_loss: 0.8344, test_acc: 0.7229, best: 0.7428, time: 0:01:06
 Epoch: 66, lr: 1.0e-02, train_loss: 0.6891, train_acc: 0.7576 test_loss: 0.7959, test_acc: 0.7292, best: 0.7428, time: 0:01:06
 Epoch: 67, lr: 1.0e-02, train_loss: 0.7143, train_acc: 0.7450 test_loss: 0.7679, test_acc: 0.7364, best: 0.7428, time: 0:01:06
 Epoch: 68, lr: 1.0e-02, train_loss: 0.7017, train_acc: 0.7502 test_loss: 0.8098, test_acc: 0.7316, best: 0.7428, time: 0:01:06
 Epoch: 69, lr: 1.0e-02, train_loss: 0.7056, train_acc: 0.7554 test_loss: 0.7785, test_acc: 0.7386, best: 0.7428, time: 0:01:06
 Epoch: 70, lr: 1.0e-02, train_loss: 0.6684, train_acc: 0.7654 test_loss: 0.7497, test_acc: 0.7454, best: 0.7454, time: 0:01:06
 Epoch: 71, lr: 1.0e-02, train_loss: 0.6662, train_acc: 0.7666 test_loss: 0.8587, test_acc: 0.7143, best: 0.7454, time: 0:01:06
 Epoch: 72, lr: 1.0e-02, train_loss: 0.6791, train_acc: 0.7656 test_loss: 0.7998, test_acc: 0.7306, best: 0.7454, time: 0:01:06
 Epoch: 73, lr: 1.0e-02, train_loss: 0.6608, train_acc: 0.7718 test_loss: 0.8244, test_acc: 0.7209, best: 0.7454, time: 0:01:06
 Epoch: 74, lr: 1.0e-02, train_loss: 0.6758, train_acc: 0.7602 test_loss: 0.7423, test_acc: 0.7429, best: 0.7454, time: 0:01:06
 Epoch: 75, lr: 1.0e-02, train_loss: 0.6267, train_acc: 0.7776 test_loss: 0.8074, test_acc: 0.7350, best: 0.7454, time: 0:01:06
 Epoch: 76, lr: 1.0e-02, train_loss: 0.6375, train_acc: 0.7732 test_loss: 0.7532, test_acc: 0.7445, best: 0.7454, time: 0:01:06
 Epoch: 77, lr: 1.0e-02, train_loss: 0.6239, train_acc: 0.7770 test_loss: 0.8225, test_acc: 0.7334, best: 0.7454, time: 0:01:06
 Epoch: 78, lr: 1.0e-02, train_loss: 0.6471, train_acc: 0.7726 test_loss: 0.8137, test_acc: 0.7351, best: 0.7454, time: 0:01:06
 Epoch: 79, lr: 1.0e-02, train_loss: 0.6198, train_acc: 0.7830 test_loss: 0.7203, test_acc: 0.7506, best: 0.7506, time: 0:01:06
 Epoch: 80, lr: 1.0e-02, train_loss: 0.6069, train_acc: 0.7892 test_loss: 0.7115, test_acc: 0.7570, best: 0.7570, time: 0:01:06
 Epoch: 81, lr: 1.0e-02, train_loss: 0.6126, train_acc: 0.7816 test_loss: 0.7899, test_acc: 0.7394, best: 0.7570, time: 0:01:06
 Epoch: 82, lr: 1.0e-02, train_loss: 0.5998, train_acc: 0.7892 test_loss: 0.7145, test_acc: 0.7594, best: 0.7594, time: 0:01:07
 Epoch: 83, lr: 1.0e-02, train_loss: 0.6239, train_acc: 0.7806 test_loss: 0.7182, test_acc: 0.7524, best: 0.7594, time: 0:01:06
 Epoch: 84, lr: 1.0e-02, train_loss: 0.5981, train_acc: 0.7854 test_loss: 0.7921, test_acc: 0.7438, best: 0.7594, time: 0:01:06
 Epoch: 85, lr: 1.0e-02, train_loss: 0.5983, train_acc: 0.7952 test_loss: 0.7278, test_acc: 0.7576, best: 0.7594, time: 0:01:06
 Epoch: 86, lr: 1.0e-02, train_loss: 0.5795, train_acc: 0.7924 test_loss: 0.7780, test_acc: 0.7466, best: 0.7594, time: 0:01:06
 Epoch: 87, lr: 1.0e-02, train_loss: 0.5744, train_acc: 0.8042 test_loss: 0.8400, test_acc: 0.7346, best: 0.7594, time: 0:01:06
 Epoch: 88, lr: 1.0e-02, train_loss: 0.5920, train_acc: 0.7920 test_loss: 0.8088, test_acc: 0.7361, best: 0.7594, time: 0:01:06
 Epoch: 89, lr: 1.0e-02, train_loss: 0.5811, train_acc: 0.7992 test_loss: 0.8296, test_acc: 0.7332, best: 0.7594, time: 0:01:06
 Epoch: 90, lr: 1.0e-02, train_loss: 0.5724, train_acc: 0.8060 test_loss: 0.7822, test_acc: 0.7552, best: 0.7594, time: 0:01:06
 Epoch: 91, lr: 1.0e-02, train_loss: 0.5637, train_acc: 0.7992 test_loss: 0.8242, test_acc: 0.7280, best: 0.7594, time: 0:01:06
 Epoch: 92, lr: 1.0e-02, train_loss: 0.5567, train_acc: 0.8048 test_loss: 0.7411, test_acc: 0.7639, best: 0.7639, time: 0:01:06
 Epoch: 93, lr: 1.0e-02, train_loss: 0.5463, train_acc: 0.8126 test_loss: 0.8402, test_acc: 0.7375, best: 0.7639, time: 0:01:06
 Epoch: 94, lr: 1.0e-02, train_loss: 0.5610, train_acc: 0.8066 test_loss: 0.7462, test_acc: 0.7519, best: 0.7639, time: 0:01:06
 Epoch: 95, lr: 1.0e-02, train_loss: 0.5654, train_acc: 0.8050 test_loss: 0.8798, test_acc: 0.7345, best: 0.7639, time: 0:01:06
 Epoch: 96, lr: 1.0e-02, train_loss: 0.5549, train_acc: 0.8070 test_loss: 0.8747, test_acc: 0.7329, best: 0.7639, time: 0:01:06
 Epoch: 97, lr: 1.0e-02, train_loss: 0.5548, train_acc: 0.8048 test_loss: 0.7495, test_acc: 0.7535, best: 0.7639, time: 0:01:06
 Epoch: 98, lr: 1.0e-02, train_loss: 0.5269, train_acc: 0.8168 test_loss: 0.7945, test_acc: 0.7435, best: 0.7639, time: 0:01:06
 Epoch: 99, lr: 1.0e-02, train_loss: 0.5153, train_acc: 0.8280 test_loss: 0.7565, test_acc: 0.7635, best: 0.7639, time: 0:01:06
 Epoch: 100, lr: 1.0e-02, train_loss: 0.4962, train_acc: 0.8262 test_loss: 0.7387, test_acc: 0.7714, best: 0.7714, time: 0:01:06
 Epoch: 101, lr: 1.0e-02, train_loss: 0.5053, train_acc: 0.8218 test_loss: 0.7557, test_acc: 0.7610, best: 0.7714, time: 0:01:06
 Epoch: 102, lr: 1.0e-02, train_loss: 0.5233, train_acc: 0.8136 test_loss: 0.8480, test_acc: 0.7456, best: 0.7714, time: 0:01:06
 Epoch: 103, lr: 1.0e-02, train_loss: 0.5048, train_acc: 0.8268 test_loss: 0.8258, test_acc: 0.7510, best: 0.7714, time: 0:01:06
 Epoch: 104, lr: 1.0e-02, train_loss: 0.5198, train_acc: 0.8162 test_loss: 0.8886, test_acc: 0.7271, best: 0.7714, time: 0:01:06
 Epoch: 105, lr: 1.0e-02, train_loss: 0.5150, train_acc: 0.8176 test_loss: 0.7793, test_acc: 0.7534, best: 0.7714, time: 0:01:06
 Epoch: 106, lr: 1.0e-02, train_loss: 0.4838, train_acc: 0.8298 test_loss: 0.9036, test_acc: 0.7306, best: 0.7714, time: 0:01:06
 Epoch: 107, lr: 1.0e-02, train_loss: 0.5119, train_acc: 0.8190 test_loss: 0.7951, test_acc: 0.7561, best: 0.7714, time: 0:01:06
 Epoch: 108, lr: 1.0e-02, train_loss: 0.4918, train_acc: 0.8280 test_loss: 0.7379, test_acc: 0.7669, best: 0.7714, time: 0:01:06
 Epoch: 109, lr: 1.0e-02, train_loss: 0.4789, train_acc: 0.8330 test_loss: 0.7625, test_acc: 0.7580, best: 0.7714, time: 0:01:06
 Epoch: 110, lr: 1.0e-02, train_loss: 0.4825, train_acc: 0.8360 test_loss: 0.7721, test_acc: 0.7575, best: 0.7714, time: 0:01:06
 Epoch: 111, lr: 1.0e-02, train_loss: 0.4688, train_acc: 0.8344 test_loss: 0.7476, test_acc: 0.7575, best: 0.7714, time: 0:01:06
 Epoch: 112, lr: 1.0e-02, train_loss: 0.4860, train_acc: 0.8322 test_loss: 0.7495, test_acc: 0.7656, best: 0.7714, time: 0:01:06
 Epoch: 113, lr: 1.0e-02, train_loss: 0.4813, train_acc: 0.8380 test_loss: 0.7990, test_acc: 0.7614, best: 0.7714, time: 0:01:06
 Epoch: 114, lr: 1.0e-02, train_loss: 0.4650, train_acc: 0.8362 test_loss: 0.8741, test_acc: 0.7432, best: 0.7714, time: 0:01:06
 Epoch: 115, lr: 1.0e-02, train_loss: 0.4567, train_acc: 0.8398 test_loss: 0.8653, test_acc: 0.7464, best: 0.7714, time: 0:01:06
 Epoch: 116, lr: 1.0e-02, train_loss: 0.4591, train_acc: 0.8476 test_loss: 0.8043, test_acc: 0.7460, best: 0.7714, time: 0:01:06
 Epoch: 117, lr: 1.0e-02, train_loss: 0.4561, train_acc: 0.8450 test_loss: 0.8378, test_acc: 0.7560, best: 0.7714, time: 0:01:06
 Epoch: 118, lr: 1.0e-02, train_loss: 0.4733, train_acc: 0.8346 test_loss: 0.8219, test_acc: 0.7560, best: 0.7714, time: 0:01:06
 Epoch: 119, lr: 1.0e-02, train_loss: 0.4424, train_acc: 0.8454 test_loss: 0.7989, test_acc: 0.7610, best: 0.7714, time: 0:01:06
 Epoch: 120, lr: 1.0e-02, train_loss: 0.4621, train_acc: 0.8452 test_loss: 0.7934, test_acc: 0.7554, best: 0.7714, time: 0:01:06
 Epoch: 121, lr: 1.0e-02, train_loss: 0.4394, train_acc: 0.8462 test_loss: 0.7825, test_acc: 0.7562, best: 0.7714, time: 0:01:06
 Epoch: 122, lr: 1.0e-02, train_loss: 0.4382, train_acc: 0.8480 test_loss: 0.8152, test_acc: 0.7582, best: 0.7714, time: 0:01:06
 Epoch: 123, lr: 1.0e-02, train_loss: 0.4489, train_acc: 0.8512 test_loss: 0.8413, test_acc: 0.7416, best: 0.7714, time: 0:01:06
 Epoch: 124, lr: 1.0e-02, train_loss: 0.4567, train_acc: 0.8398 test_loss: 0.7560, test_acc: 0.7690, best: 0.7714, time: 0:01:06
 Epoch: 125, lr: 1.0e-02, train_loss: 0.4193, train_acc: 0.8566 test_loss: 0.8046, test_acc: 0.7634, best: 0.7714, time: 0:01:06
 Epoch: 126, lr: 1.0e-02, train_loss: 0.4291, train_acc: 0.8514 test_loss: 0.8443, test_acc: 0.7574, best: 0.7714, time: 0:01:06
 Epoch: 127, lr: 1.0e-02, train_loss: 0.4565, train_acc: 0.8440 test_loss: 0.7994, test_acc: 0.7594, best: 0.7714, time: 0:01:06
 Epoch: 128, lr: 1.0e-02, train_loss: 0.4325, train_acc: 0.8554 test_loss: 0.7905, test_acc: 0.7460, best: 0.7714, time: 0:01:06
 Epoch: 129, lr: 1.0e-02, train_loss: 0.4225, train_acc: 0.8588 test_loss: 0.7818, test_acc: 0.7676, best: 0.7714, time: 0:01:06
 Epoch: 130, lr: 1.0e-02, train_loss: 0.4280, train_acc: 0.8532 test_loss: 0.7703, test_acc: 0.7650, best: 0.7714, time: 0:01:06
 Epoch: 131, lr: 1.0e-02, train_loss: 0.4427, train_acc: 0.8460 test_loss: 0.8764, test_acc: 0.7358, best: 0.7714, time: 0:01:06
 Epoch: 132, lr: 1.0e-02, train_loss: 0.4229, train_acc: 0.8592 test_loss: 0.8371, test_acc: 0.7446, best: 0.7714, time: 0:01:06
 Epoch: 133, lr: 1.0e-02, train_loss: 0.4176, train_acc: 0.8582 test_loss: 0.7451, test_acc: 0.7710, best: 0.7714, time: 0:01:06
 Epoch: 134, lr: 1.0e-02, train_loss: 0.4076, train_acc: 0.8584 test_loss: 0.8012, test_acc: 0.7691, best: 0.7714, time: 0:01:06
 Epoch: 135, lr: 1.0e-02, train_loss: 0.4335, train_acc: 0.8498 test_loss: 0.7579, test_acc: 0.7676, best: 0.7714, time: 0:01:06
 Epoch: 136, lr: 1.0e-02, train_loss: 0.4019, train_acc: 0.8612 test_loss: 0.8109, test_acc: 0.7628, best: 0.7714, time: 0:01:06
 Epoch: 137, lr: 1.0e-02, train_loss: 0.4149, train_acc: 0.8574 test_loss: 0.8261, test_acc: 0.7516, best: 0.7714, time: 0:01:06
 Epoch: 138, lr: 1.0e-02, train_loss: 0.3871, train_acc: 0.8678 test_loss: 0.9447, test_acc: 0.7376, best: 0.7714, time: 0:01:06
 Epoch: 139, lr: 1.0e-02, train_loss: 0.4064, train_acc: 0.8598 test_loss: 0.8226, test_acc: 0.7659, best: 0.7714, time: 0:01:06
 Epoch: 140, lr: 1.0e-02, train_loss: 0.3869, train_acc: 0.8674 test_loss: 0.7867, test_acc: 0.7742, best: 0.7742, time: 0:01:06
 Epoch: 141, lr: 1.0e-02, train_loss: 0.4050, train_acc: 0.8608 test_loss: 0.8066, test_acc: 0.7608, best: 0.7742, time: 0:01:06
 Epoch: 142, lr: 1.0e-02, train_loss: 0.3811, train_acc: 0.8692 test_loss: 0.8038, test_acc: 0.7696, best: 0.7742, time: 0:01:06
 Epoch: 143, lr: 1.0e-02, train_loss: 0.3852, train_acc: 0.8700 test_loss: 0.8564, test_acc: 0.7564, best: 0.7742, time: 0:01:06
 Epoch: 144, lr: 1.0e-02, train_loss: 0.4012, train_acc: 0.8604 test_loss: 0.7861, test_acc: 0.7615, best: 0.7742, time: 0:01:06
 Epoch: 145, lr: 1.0e-02, train_loss: 0.3967, train_acc: 0.8594 test_loss: 0.8001, test_acc: 0.7678, best: 0.7742, time: 0:01:06
 Epoch: 146, lr: 1.0e-02, train_loss: 0.3921, train_acc: 0.8664 test_loss: 0.8376, test_acc: 0.7680, best: 0.7742, time: 0:01:06
 Epoch: 147, lr: 1.0e-02, train_loss: 0.3705, train_acc: 0.8712 test_loss: 0.8862, test_acc: 0.7446, best: 0.7742, time: 0:01:06
 Epoch: 148, lr: 1.0e-02, train_loss: 0.4037, train_acc: 0.8584 test_loss: 0.8109, test_acc: 0.7574, best: 0.7742, time: 0:01:06
 Epoch: 149, lr: 1.0e-02, train_loss: 0.3804, train_acc: 0.8694 test_loss: 0.7666, test_acc: 0.7700, best: 0.7742, time: 0:01:06
 Epoch: 150, lr: 1.0e-02, train_loss: 0.3949, train_acc: 0.8696 test_loss: 0.7729, test_acc: 0.7682, best: 0.7742, time: 0:01:06
 Epoch: 151, lr: 1.0e-02, train_loss: 0.3858, train_acc: 0.8694 test_loss: 0.7932, test_acc: 0.7738, best: 0.7742, time: 0:01:06
 Epoch: 152, lr: 1.0e-02, train_loss: 0.3762, train_acc: 0.8724 test_loss: 0.7862, test_acc: 0.7742, best: 0.7742, time: 0:01:06
 Epoch: 153, lr: 1.0e-02, train_loss: 0.3627, train_acc: 0.8776 test_loss: 0.8247, test_acc: 0.7741, best: 0.7742, time: 0:01:06
 Epoch: 154, lr: 1.0e-02, train_loss: 0.3611, train_acc: 0.8738 test_loss: 0.7978, test_acc: 0.7749, best: 0.7749, time: 0:01:06
 Epoch: 155, lr: 1.0e-02, train_loss: 0.3693, train_acc: 0.8744 test_loss: 0.8108, test_acc: 0.7668, best: 0.7749, time: 0:01:06
 Epoch: 156, lr: 1.0e-02, train_loss: 0.3813, train_acc: 0.8660 test_loss: 0.8210, test_acc: 0.7644, best: 0.7749, time: 0:01:06
 Epoch: 157, lr: 1.0e-02, train_loss: 0.3641, train_acc: 0.8708 test_loss: 0.7938, test_acc: 0.7732, best: 0.7749, time: 0:01:06
 Epoch: 158, lr: 1.0e-02, train_loss: 0.3508, train_acc: 0.8822 test_loss: 0.8567, test_acc: 0.7610, best: 0.7749, time: 0:01:06
 Epoch: 159, lr: 1.0e-02, train_loss: 0.3718, train_acc: 0.8712 test_loss: 0.7499, test_acc: 0.7785, best: 0.7785, time: 0:01:06
 Epoch: 160, lr: 1.0e-02, train_loss: 0.3689, train_acc: 0.8794 test_loss: 0.7706, test_acc: 0.7681, best: 0.7785, time: 0:01:06
 Epoch: 161, lr: 1.0e-02, train_loss: 0.3640, train_acc: 0.8774 test_loss: 0.7573, test_acc: 0.7769, best: 0.7785, time: 0:01:06
 Epoch: 162, lr: 1.0e-02, train_loss: 0.3582, train_acc: 0.8762 test_loss: 0.7961, test_acc: 0.7810, best: 0.7810, time: 0:01:06
 Epoch: 163, lr: 1.0e-02, train_loss: 0.3397, train_acc: 0.8826 test_loss: 0.8124, test_acc: 0.7636, best: 0.7810, time: 0:01:06
 Epoch: 164, lr: 1.0e-02, train_loss: 0.3594, train_acc: 0.8704 test_loss: 0.8390, test_acc: 0.7591, best: 0.7810, time: 0:01:06
 Epoch: 165, lr: 1.0e-02, train_loss: 0.3556, train_acc: 0.8792 test_loss: 0.8603, test_acc: 0.7725, best: 0.7810, time: 0:01:06
 Epoch: 166, lr: 1.0e-02, train_loss: 0.3411, train_acc: 0.8814 test_loss: 0.8476, test_acc: 0.7708, best: 0.7810, time: 0:01:06
 Epoch: 167, lr: 1.0e-02, train_loss: 0.3629, train_acc: 0.8760 test_loss: 0.7732, test_acc: 0.7689, best: 0.7810, time: 0:01:06
 Epoch: 168, lr: 1.0e-02, train_loss: 0.3348, train_acc: 0.8804 test_loss: 0.8363, test_acc: 0.7642, best: 0.7810, time: 0:01:06
 Epoch: 169, lr: 1.0e-02, train_loss: 0.3293, train_acc: 0.8884 test_loss: 0.8214, test_acc: 0.7766, best: 0.7810, time: 0:01:06
 Epoch: 170, lr: 1.0e-02, train_loss: 0.3630, train_acc: 0.8734 test_loss: 0.7955, test_acc: 0.7738, best: 0.7810, time: 0:01:06
 Epoch: 171, lr: 1.0e-02, train_loss: 0.3450, train_acc: 0.8822 test_loss: 0.7775, test_acc: 0.7779, best: 0.7810, time: 0:01:06
 Epoch: 172, lr: 1.0e-02, train_loss: 0.3391, train_acc: 0.8810 test_loss: 0.8533, test_acc: 0.7585, best: 0.7810, time: 0:01:06
 Epoch: 173, lr: 1.0e-02, train_loss: 0.3423, train_acc: 0.8876 test_loss: 0.8907, test_acc: 0.7578, best: 0.7810, time: 0:01:06
 Epoch: 174, lr: 1.0e-02, train_loss: 0.3398, train_acc: 0.8862 test_loss: 0.8022, test_acc: 0.7729, best: 0.7810, time: 0:01:06
 Epoch: 175, lr: 1.0e-02, train_loss: 0.3299, train_acc: 0.8876 test_loss: 0.8337, test_acc: 0.7675, best: 0.7810, time: 0:01:06
 Epoch: 176, lr: 1.0e-02, train_loss: 0.3540, train_acc: 0.8816 test_loss: 0.7263, test_acc: 0.7826, best: 0.7826, time: 0:01:06
 Epoch: 177, lr: 1.0e-02, train_loss: 0.3143, train_acc: 0.8888 test_loss: 0.9497, test_acc: 0.7608, best: 0.7826, time: 0:01:06
 Epoch: 178, lr: 1.0e-02, train_loss: 0.3267, train_acc: 0.8866 test_loss: 0.8984, test_acc: 0.7529, best: 0.7826, time: 0:01:06
 Epoch: 179, lr: 1.0e-02, train_loss: 0.3343, train_acc: 0.8856 test_loss: 0.8469, test_acc: 0.7735, best: 0.7826, time: 0:01:06
 Epoch: 180, lr: 2.0e-03, train_loss: 0.2843, train_acc: 0.9050 test_loss: 0.7921, test_acc: 0.7854, best: 0.7854, time: 0:01:06
 Epoch: 181, lr: 2.0e-03, train_loss: 0.2552, train_acc: 0.9156 test_loss: 0.7560, test_acc: 0.7899, best: 0.7899, time: 0:01:06
 Epoch: 182, lr: 2.0e-03, train_loss: 0.2368, train_acc: 0.9190 test_loss: 0.7836, test_acc: 0.7850, best: 0.7899, time: 0:01:06
 Epoch: 183, lr: 2.0e-03, train_loss: 0.2227, train_acc: 0.9280 test_loss: 0.7417, test_acc: 0.7923, best: 0.7923, time: 0:01:06
 Epoch: 184, lr: 2.0e-03, train_loss: 0.2410, train_acc: 0.9188 test_loss: 0.7685, test_acc: 0.7853, best: 0.7923, time: 0:01:06
 Epoch: 185, lr: 2.0e-03, train_loss: 0.2189, train_acc: 0.9256 test_loss: 0.7674, test_acc: 0.7926, best: 0.7926, time: 0:01:06
 Epoch: 186, lr: 2.0e-03, train_loss: 0.2203, train_acc: 0.9248 test_loss: 0.7588, test_acc: 0.7950, best: 0.7950, time: 0:01:06
 Epoch: 187, lr: 2.0e-03, train_loss: 0.2402, train_acc: 0.9204 test_loss: 0.7688, test_acc: 0.7900, best: 0.7950, time: 0:01:06
 Epoch: 188, lr: 2.0e-03, train_loss: 0.2159, train_acc: 0.9256 test_loss: 0.7556, test_acc: 0.7925, best: 0.7950, time: 0:01:06
 Epoch: 189, lr: 2.0e-03, train_loss: 0.2208, train_acc: 0.9260 test_loss: 0.7517, test_acc: 0.7913, best: 0.7950, time: 0:01:06
 Epoch: 190, lr: 2.0e-03, train_loss: 0.2348, train_acc: 0.9226 test_loss: 0.7523, test_acc: 0.7889, best: 0.7950, time: 0:01:06
 Epoch: 191, lr: 2.0e-03, train_loss: 0.2251, train_acc: 0.9262 test_loss: 0.7547, test_acc: 0.7910, best: 0.7950, time: 0:01:06
 Epoch: 192, lr: 2.0e-03, train_loss: 0.2084, train_acc: 0.9298 test_loss: 0.7703, test_acc: 0.7929, best: 0.7950, time: 0:01:05
 Epoch: 193, lr: 2.0e-03, train_loss: 0.2233, train_acc: 0.9266 test_loss: 0.7805, test_acc: 0.7895, best: 0.7950, time: 0:01:05
 Epoch: 194, lr: 2.0e-03, train_loss: 0.2191, train_acc: 0.9270 test_loss: 0.7867, test_acc: 0.7920, best: 0.7950, time: 0:01:05
 Epoch: 195, lr: 2.0e-03, train_loss: 0.2097, train_acc: 0.9330 test_loss: 0.7649, test_acc: 0.7913, best: 0.7950, time: 0:01:05
 Epoch: 196, lr: 2.0e-03, train_loss: 0.2087, train_acc: 0.9320 test_loss: 0.7731, test_acc: 0.7884, best: 0.7950, time: 0:01:06
 Epoch: 197, lr: 2.0e-03, train_loss: 0.2094, train_acc: 0.9298 test_loss: 0.7985, test_acc: 0.7889, best: 0.7950, time: 0:01:05
 Epoch: 198, lr: 2.0e-03, train_loss: 0.2078, train_acc: 0.9268 test_loss: 0.7702, test_acc: 0.7896, best: 0.7950, time: 0:01:06
 Epoch: 199, lr: 2.0e-03, train_loss: 0.2213, train_acc: 0.9238 test_loss: 0.7552, test_acc: 0.7949, best: 0.7950, time: 0:01:05
 Epoch: 200, lr: 2.0e-03, train_loss: 0.2097, train_acc: 0.9296 test_loss: 0.7873, test_acc: 0.7923, best: 0.7950, time: 0:01:05
 Epoch: 201, lr: 2.0e-03, train_loss: 0.2090, train_acc: 0.9312 test_loss: 0.8003, test_acc: 0.7887, best: 0.7950, time: 0:01:05
 Epoch: 202, lr: 2.0e-03, train_loss: 0.1927, train_acc: 0.9374 test_loss: 0.8048, test_acc: 0.7899, best: 0.7950, time: 0:01:05
 Epoch: 203, lr: 2.0e-03, train_loss: 0.1929, train_acc: 0.9348 test_loss: 0.7816, test_acc: 0.7914, best: 0.7950, time: 0:01:05
 Epoch: 204, lr: 2.0e-03, train_loss: 0.2022, train_acc: 0.9348 test_loss: 0.7889, test_acc: 0.7936, best: 0.7950, time: 0:01:05
 Epoch: 205, lr: 2.0e-03, train_loss: 0.1849, train_acc: 0.9378 test_loss: 0.8058, test_acc: 0.7910, best: 0.7950, time: 0:01:05
 Epoch: 206, lr: 2.0e-03, train_loss: 0.2122, train_acc: 0.9306 test_loss: 0.8040, test_acc: 0.7860, best: 0.7950, time: 0:01:05
 Epoch: 207, lr: 2.0e-03, train_loss: 0.1866, train_acc: 0.9362 test_loss: 0.7946, test_acc: 0.7953, best: 0.7953, time: 0:01:05
 Epoch: 208, lr: 2.0e-03, train_loss: 0.1915, train_acc: 0.9370 test_loss: 0.7800, test_acc: 0.7939, best: 0.7953, time: 0:01:05
 Epoch: 209, lr: 2.0e-03, train_loss: 0.1880, train_acc: 0.9374 test_loss: 0.7987, test_acc: 0.7940, best: 0.7953, time: 0:01:05
 Epoch: 210, lr: 2.0e-03, train_loss: 0.1881, train_acc: 0.9370 test_loss: 0.8157, test_acc: 0.7900, best: 0.7953, time: 0:01:05
 Epoch: 211, lr: 2.0e-03, train_loss: 0.1914, train_acc: 0.9354 test_loss: 0.8167, test_acc: 0.7860, best: 0.7953, time: 0:01:05
 Epoch: 212, lr: 2.0e-03, train_loss: 0.1899, train_acc: 0.9354 test_loss: 0.7948, test_acc: 0.7921, best: 0.7953, time: 0:01:05
 Epoch: 213, lr: 2.0e-03, train_loss: 0.1755, train_acc: 0.9418 test_loss: 0.7982, test_acc: 0.7941, best: 0.7953, time: 0:01:05
 Epoch: 214, lr: 2.0e-03, train_loss: 0.2030, train_acc: 0.9308 test_loss: 0.7731, test_acc: 0.7921, best: 0.7953, time: 0:01:05
 Epoch: 215, lr: 2.0e-03, train_loss: 0.1929, train_acc: 0.9372 test_loss: 0.8012, test_acc: 0.7879, best: 0.7953, time: 0:01:05
 Epoch: 216, lr: 2.0e-03, train_loss: 0.1868, train_acc: 0.9362 test_loss: 0.7931, test_acc: 0.7925, best: 0.7953, time: 0:01:05
 Epoch: 217, lr: 2.0e-03, train_loss: 0.2004, train_acc: 0.9320 test_loss: 0.7843, test_acc: 0.7876, best: 0.7953, time: 0:01:05
 Epoch: 218, lr: 2.0e-03, train_loss: 0.1867, train_acc: 0.9364 test_loss: 0.7733, test_acc: 0.7915, best: 0.7953, time: 0:01:05
 Epoch: 219, lr: 2.0e-03, train_loss: 0.1949, train_acc: 0.9330 test_loss: 0.7940, test_acc: 0.7881, best: 0.7953, time: 0:01:05
 Epoch: 220, lr: 2.0e-03, train_loss: 0.1812, train_acc: 0.9400 test_loss: 0.8187, test_acc: 0.7921, best: 0.7953, time: 0:01:05
 Epoch: 221, lr: 2.0e-03, train_loss: 0.1937, train_acc: 0.9352 test_loss: 0.8106, test_acc: 0.7909, best: 0.7953, time: 0:01:05
 Epoch: 222, lr: 2.0e-03, train_loss: 0.1927, train_acc: 0.9360 test_loss: 0.7961, test_acc: 0.7911, best: 0.7953, time: 0:01:05
 Epoch: 223, lr: 2.0e-03, train_loss: 0.1796, train_acc: 0.9398 test_loss: 0.7955, test_acc: 0.7926, best: 0.7953, time: 0:01:05
 Epoch: 224, lr: 2.0e-03, train_loss: 0.1959, train_acc: 0.9316 test_loss: 0.8020, test_acc: 0.7936, best: 0.7953, time: 0:01:05
 Epoch: 225, lr: 2.0e-03, train_loss: 0.2023, train_acc: 0.9296 test_loss: 0.7943, test_acc: 0.7844, best: 0.7953, time: 0:01:05
 Epoch: 226, lr: 2.0e-03, train_loss: 0.2042, train_acc: 0.9302 test_loss: 0.7608, test_acc: 0.7897, best: 0.7953, time: 0:01:05
 Epoch: 227, lr: 2.0e-03, train_loss: 0.1893, train_acc: 0.9372 test_loss: 0.8097, test_acc: 0.7869, best: 0.7953, time: 0:01:05
 Epoch: 228, lr: 2.0e-03, train_loss: 0.1880, train_acc: 0.9398 test_loss: 0.7881, test_acc: 0.7927, best: 0.7953, time: 0:01:06
 Epoch: 229, lr: 2.0e-03, train_loss: 0.2056, train_acc: 0.9288 test_loss: 0.8166, test_acc: 0.7833, best: 0.7953, time: 0:01:05
 Epoch: 230, lr: 2.0e-03, train_loss: 0.1928, train_acc: 0.9366 test_loss: 0.7875, test_acc: 0.7911, best: 0.7953, time: 0:01:06
 Epoch: 231, lr: 2.0e-03, train_loss: 0.1876, train_acc: 0.9352 test_loss: 0.7807, test_acc: 0.7869, best: 0.7953, time: 0:01:05
 Epoch: 232, lr: 2.0e-03, train_loss: 0.1903, train_acc: 0.9346 test_loss: 0.7811, test_acc: 0.7927, best: 0.7953, time: 0:01:05
 Epoch: 233, lr: 2.0e-03, train_loss: 0.1971, train_acc: 0.9322 test_loss: 0.7892, test_acc: 0.7931, best: 0.7953, time: 0:01:05
 Epoch: 234, lr: 2.0e-03, train_loss: 0.1763, train_acc: 0.9414 test_loss: 0.7953, test_acc: 0.7941, best: 0.7953, time: 0:01:05
 Epoch: 235, lr: 2.0e-03, train_loss: 0.1850, train_acc: 0.9362 test_loss: 0.8226, test_acc: 0.7890, best: 0.7953, time: 0:01:05
 Epoch: 236, lr: 2.0e-03, train_loss: 0.1811, train_acc: 0.9404 test_loss: 0.8061, test_acc: 0.7885, best: 0.7953, time: 0:01:05
 Epoch: 237, lr: 2.0e-03, train_loss: 0.1709, train_acc: 0.9408 test_loss: 0.8270, test_acc: 0.7843, best: 0.7953, time: 0:01:05
 Epoch: 238, lr: 2.0e-03, train_loss: 0.1688, train_acc: 0.9440 test_loss: 0.8075, test_acc: 0.7900, best: 0.7953, time: 0:01:05
 Epoch: 239, lr: 2.0e-03, train_loss: 0.1739, train_acc: 0.9392 test_loss: 0.8328, test_acc: 0.7843, best: 0.7953, time: 0:01:05
 Epoch: 240, lr: 4.0e-04, train_loss: 0.1834, train_acc: 0.9412 test_loss: 0.8073, test_acc: 0.7911, best: 0.7953, time: 0:01:05
 Epoch: 241, lr: 4.0e-04, train_loss: 0.1749, train_acc: 0.9420 test_loss: 0.8477, test_acc: 0.7865, best: 0.7953, time: 0:01:05
 Epoch: 242, lr: 4.0e-04, train_loss: 0.1661, train_acc: 0.9452 test_loss: 0.7903, test_acc: 0.7909, best: 0.7953, time: 0:01:05
 Epoch: 243, lr: 4.0e-04, train_loss: 0.1782, train_acc: 0.9422 test_loss: 0.8326, test_acc: 0.7903, best: 0.7953, time: 0:01:05
 Epoch: 244, lr: 4.0e-04, train_loss: 0.1800, train_acc: 0.9392 test_loss: 0.8037, test_acc: 0.7907, best: 0.7953, time: 0:01:05
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1728, train_acc: 0.9416 test_loss: 0.7965, test_acc: 0.7874, best: 0.7953, time: 0:01:05
 Epoch: 246, lr: 4.0e-04, train_loss: 0.1511, train_acc: 0.9482 test_loss: 0.8125, test_acc: 0.7896, best: 0.7953, time: 0:01:05
 Epoch: 247, lr: 4.0e-04, train_loss: 0.1734, train_acc: 0.9432 test_loss: 0.8117, test_acc: 0.7903, best: 0.7953, time: 0:01:05
 Epoch: 248, lr: 4.0e-04, train_loss: 0.1788, train_acc: 0.9408 test_loss: 0.8078, test_acc: 0.7923, best: 0.7953, time: 0:01:05
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1760, train_acc: 0.9424 test_loss: 0.7988, test_acc: 0.7934, best: 0.7953, time: 0:01:06
 Epoch: 250, lr: 4.0e-04, train_loss: 0.1861, train_acc: 0.9410 test_loss: 0.8169, test_acc: 0.7905, best: 0.7953, time: 0:01:05
 Epoch: 251, lr: 4.0e-04, train_loss: 0.1705, train_acc: 0.9466 test_loss: 0.7925, test_acc: 0.7884, best: 0.7953, time: 0:01:05
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1568, train_acc: 0.9478 test_loss: 0.8243, test_acc: 0.7866, best: 0.7953, time: 0:01:05
 Epoch: 253, lr: 4.0e-04, train_loss: 0.1617, train_acc: 0.9436 test_loss: 0.8108, test_acc: 0.7911, best: 0.7953, time: 0:01:05
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1689, train_acc: 0.9420 test_loss: 0.8124, test_acc: 0.7907, best: 0.7953, time: 0:01:05
 Epoch: 255, lr: 4.0e-04, train_loss: 0.1753, train_acc: 0.9430 test_loss: 0.8215, test_acc: 0.7903, best: 0.7953, time: 0:01:05
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1749, train_acc: 0.9414 test_loss: 0.8186, test_acc: 0.7881, best: 0.7953, time: 0:01:05
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1832, train_acc: 0.9382 test_loss: 0.7907, test_acc: 0.7920, best: 0.7953, time: 0:01:05
 Epoch: 258, lr: 4.0e-04, train_loss: 0.1757, train_acc: 0.9412 test_loss: 0.7974, test_acc: 0.7913, best: 0.7953, time: 0:01:05
 Epoch: 259, lr: 4.0e-04, train_loss: 0.1652, train_acc: 0.9432 test_loss: 0.7911, test_acc: 0.7916, best: 0.7953, time: 0:01:05
 Epoch: 260, lr: 4.0e-04, train_loss: 0.1502, train_acc: 0.9526 test_loss: 0.7841, test_acc: 0.7937, best: 0.7953, time: 0:01:05
 Epoch: 261, lr: 4.0e-04, train_loss: 0.1630, train_acc: 0.9424 test_loss: 0.8391, test_acc: 0.7887, best: 0.7953, time: 0:01:05
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1562, train_acc: 0.9456 test_loss: 0.8053, test_acc: 0.7910, best: 0.7953, time: 0:01:05
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1481, train_acc: 0.9516 test_loss: 0.8313, test_acc: 0.7909, best: 0.7953, time: 0:01:05
 Epoch: 264, lr: 4.0e-04, train_loss: 0.1703, train_acc: 0.9438 test_loss: 0.8402, test_acc: 0.7880, best: 0.7953, time: 0:01:05
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1481, train_acc: 0.9502 test_loss: 0.8217, test_acc: 0.7929, best: 0.7953, time: 0:01:05
 Epoch: 266, lr: 4.0e-04, train_loss: 0.1597, train_acc: 0.9464 test_loss: 0.8219, test_acc: 0.7935, best: 0.7953, time: 0:01:05
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1638, train_acc: 0.9464 test_loss: 0.8140, test_acc: 0.7931, best: 0.7953, time: 0:01:05
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1460, train_acc: 0.9526 test_loss: 0.7898, test_acc: 0.7943, best: 0.7953, time: 0:01:05
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1663, train_acc: 0.9442 test_loss: 0.8213, test_acc: 0.7927, best: 0.7953, time: 0:01:05
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1668, train_acc: 0.9454 test_loss: 0.8183, test_acc: 0.7953, best: 0.7953, time: 0:01:05
 Epoch: 271, lr: 8.0e-05, train_loss: 0.1480, train_acc: 0.9468 test_loss: 0.8114, test_acc: 0.7940, best: 0.7953, time: 0:01:05
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1763, train_acc: 0.9422 test_loss: 0.8175, test_acc: 0.7951, best: 0.7953, time: 0:01:05
 Epoch: 273, lr: 8.0e-05, train_loss: 0.1655, train_acc: 0.9452 test_loss: 0.8057, test_acc: 0.7903, best: 0.7953, time: 0:01:05
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1602, train_acc: 0.9428 test_loss: 0.8289, test_acc: 0.7919, best: 0.7953, time: 0:01:05
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1581, train_acc: 0.9480 test_loss: 0.8230, test_acc: 0.7909, best: 0.7953, time: 0:01:05
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1798, train_acc: 0.9372 test_loss: 0.8012, test_acc: 0.7946, best: 0.7953, time: 0:01:05
 Epoch: 277, lr: 8.0e-05, train_loss: 0.1764, train_acc: 0.9372 test_loss: 0.8005, test_acc: 0.7911, best: 0.7953, time: 0:01:05
 Epoch: 278, lr: 8.0e-05, train_loss: 0.1756, train_acc: 0.9426 test_loss: 0.7930, test_acc: 0.7939, best: 0.7953, time: 0:01:05
 Epoch: 279, lr: 8.0e-05, train_loss: 0.1607, train_acc: 0.9460 test_loss: 0.8061, test_acc: 0.7931, best: 0.7953, time: 0:01:05
 Epoch: 280, lr: 8.0e-05, train_loss: 0.1531, train_acc: 0.9500 test_loss: 0.7908, test_acc: 0.7939, best: 0.7953, time: 0:01:05
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1608, train_acc: 0.9444 test_loss: 0.7875, test_acc: 0.7936, best: 0.7953, time: 0:01:05
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1556, train_acc: 0.9474 test_loss: 0.7958, test_acc: 0.7907, best: 0.7953, time: 0:01:05
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1498, train_acc: 0.9498 test_loss: 0.7974, test_acc: 0.7936, best: 0.7953, time: 0:01:05
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1665, train_acc: 0.9470 test_loss: 0.8011, test_acc: 0.7916, best: 0.7953, time: 0:01:05
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1568, train_acc: 0.9462 test_loss: 0.8036, test_acc: 0.7953, best: 0.7953, time: 0:01:05
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1742, train_acc: 0.9434 test_loss: 0.7956, test_acc: 0.7911, best: 0.7953, time: 0:01:06
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1646, train_acc: 0.9420 test_loss: 0.8157, test_acc: 0.7930, best: 0.7953, time: 0:01:05
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1679, train_acc: 0.9420 test_loss: 0.7986, test_acc: 0.7924, best: 0.7953, time: 0:01:06
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1718, train_acc: 0.9402 test_loss: 0.8058, test_acc: 0.7913, best: 0.7953, time: 0:01:05
 Epoch: 290, lr: 8.0e-05, train_loss: 0.1601, train_acc: 0.9472 test_loss: 0.8229, test_acc: 0.7914, best: 0.7953, time: 0:01:05
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1685, train_acc: 0.9462 test_loss: 0.7783, test_acc: 0.7943, best: 0.7953, time: 0:01:05
 Epoch: 292, lr: 8.0e-05, train_loss: 0.1659, train_acc: 0.9442 test_loss: 0.8067, test_acc: 0.7903, best: 0.7953, time: 0:01:05
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1718, train_acc: 0.9396 test_loss: 0.8220, test_acc: 0.7914, best: 0.7953, time: 0:01:05
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1703, train_acc: 0.9406 test_loss: 0.8020, test_acc: 0.7937, best: 0.7953, time: 0:01:05
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1733, train_acc: 0.9400 test_loss: 0.7845, test_acc: 0.7957, best: 0.7957, time: 0:01:05
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1631, train_acc: 0.9424 test_loss: 0.7916, test_acc: 0.7905, best: 0.7957, time: 0:01:05
 Epoch: 297, lr: 8.0e-05, train_loss: 0.1536, train_acc: 0.9502 test_loss: 0.8032, test_acc: 0.7940, best: 0.7957, time: 0:01:05
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1630, train_acc: 0.9454 test_loss: 0.7990, test_acc: 0.7937, best: 0.7957, time: 0:01:05
 Epoch: 299, lr: 8.0e-05, train_loss: 0.1598, train_acc: 0.9444 test_loss: 0.8164, test_acc: 0.7926, best: 0.7957, time: 0:01:05
 Highest accuracy: 0.7957