
 Run on time: 2022-07-03 01:02:12.211692

 Architecture: mobilenet-lip-1222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-LIP-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.4941, train_acc: 0.1688 test_loss: 1.8258, test_acc: 0.2861, best: 0.2861, time: 0:01:32
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0258, train_acc: 0.2340 test_loss: 1.7783, test_acc: 0.2960, best: 0.2960, time: 0:01:35
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9550, train_acc: 0.2550 test_loss: 1.6907, test_acc: 0.3593, best: 0.3593, time: 0:01:49
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8977, train_acc: 0.2726 test_loss: 1.7039, test_acc: 0.3311, best: 0.3593, time: 0:02:08
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8550, train_acc: 0.2836 test_loss: 1.6247, test_acc: 0.3575, best: 0.3593, time: 0:02:30
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8292, train_acc: 0.3028 test_loss: 1.6184, test_acc: 0.3664, best: 0.3664, time: 0:02:22
 Epoch: 7, lr: 1.0e-02, train_loss: 1.8130, train_acc: 0.3114 test_loss: 1.6233, test_acc: 0.3829, best: 0.3829, time: 0:01:49
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7753, train_acc: 0.3230 test_loss: 1.5619, test_acc: 0.3999, best: 0.3999, time: 0:01:58
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7334, train_acc: 0.3436 test_loss: 1.5023, test_acc: 0.4145, best: 0.4145, time: 0:01:42
 Epoch: 10, lr: 1.0e-02, train_loss: 1.7028, train_acc: 0.3492 test_loss: 1.5202, test_acc: 0.4291, best: 0.4291, time: 0:01:58
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6650, train_acc: 0.3714 test_loss: 1.4730, test_acc: 0.4343, best: 0.4343, time: 0:01:36
 Epoch: 12, lr: 1.0e-02, train_loss: 1.6785, train_acc: 0.3682 test_loss: 1.6294, test_acc: 0.3986, best: 0.4343, time: 0:01:43
 Epoch: 13, lr: 1.0e-02, train_loss: 1.6405, train_acc: 0.3898 test_loss: 1.4193, test_acc: 0.4661, best: 0.4661, time: 0:01:57
 Epoch: 14, lr: 1.0e-02, train_loss: 1.5784, train_acc: 0.4072 test_loss: 1.3845, test_acc: 0.4844, best: 0.4844, time: 0:01:49
 Epoch: 15, lr: 1.0e-02, train_loss: 1.5497, train_acc: 0.4326 test_loss: 1.3922, test_acc: 0.4758, best: 0.4844, time: 0:01:56
 Epoch: 16, lr: 1.0e-02, train_loss: 1.5290, train_acc: 0.4258 test_loss: 1.3365, test_acc: 0.5129, best: 0.5129, time: 0:01:38
 Epoch: 17, lr: 1.0e-02, train_loss: 1.5011, train_acc: 0.4466 test_loss: 1.3070, test_acc: 0.5148, best: 0.5148, time: 0:01:39
 Epoch: 18, lr: 1.0e-02, train_loss: 1.4879, train_acc: 0.4582 test_loss: 1.2888, test_acc: 0.5294, best: 0.5294, time: 0:01:39
 Epoch: 19, lr: 1.0e-02, train_loss: 1.4608, train_acc: 0.4628 test_loss: 1.3350, test_acc: 0.5182, best: 0.5294, time: 0:01:39
 Epoch: 20, lr: 1.0e-02, train_loss: 1.4322, train_acc: 0.4748 test_loss: 1.2304, test_acc: 0.5485, best: 0.5485, time: 0:01:37
 Epoch: 21, lr: 1.0e-02, train_loss: 1.4192, train_acc: 0.4668 test_loss: 1.1958, test_acc: 0.5609, best: 0.5609, time: 0:01:41
 Epoch: 22, lr: 1.0e-02, train_loss: 1.4064, train_acc: 0.4892 test_loss: 1.2412, test_acc: 0.5414, best: 0.5609, time: 0:01:51
 Epoch: 23, lr: 1.0e-02, train_loss: 1.3936, train_acc: 0.4882 test_loss: 1.1947, test_acc: 0.5625, best: 0.5625, time: 0:01:34
 Epoch: 24, lr: 1.0e-02, train_loss: 1.3641, train_acc: 0.4942 test_loss: 1.1864, test_acc: 0.5705, best: 0.5705, time: 0:01:33
 Epoch: 25, lr: 1.0e-02, train_loss: 1.3575, train_acc: 0.4948 test_loss: 1.1640, test_acc: 0.5763, best: 0.5763, time: 0:01:36
 Epoch: 26, lr: 1.0e-02, train_loss: 1.3518, train_acc: 0.5014 test_loss: 1.1359, test_acc: 0.5941, best: 0.5941, time: 0:01:36
 Epoch: 27, lr: 1.0e-02, train_loss: 1.3154, train_acc: 0.5160 test_loss: 1.0866, test_acc: 0.6076, best: 0.6076, time: 0:01:38
 Epoch: 28, lr: 1.0e-02, train_loss: 1.3005, train_acc: 0.5212 test_loss: 1.2262, test_acc: 0.5594, best: 0.6076, time: 0:01:33
 Epoch: 29, lr: 1.0e-02, train_loss: 1.3035, train_acc: 0.5244 test_loss: 1.0979, test_acc: 0.6011, best: 0.6076, time: 0:01:33
 Epoch: 30, lr: 1.0e-02, train_loss: 1.2586, train_acc: 0.5360 test_loss: 1.1373, test_acc: 0.5880, best: 0.6076, time: 0:01:44
 Epoch: 31, lr: 1.0e-02, train_loss: 1.2801, train_acc: 0.5370 test_loss: 1.1688, test_acc: 0.5813, best: 0.6076, time: 0:01:37
 Epoch: 32, lr: 1.0e-02, train_loss: 1.2527, train_acc: 0.5400 test_loss: 1.0999, test_acc: 0.5999, best: 0.6076, time: 0:01:40
 Epoch: 33, lr: 1.0e-02, train_loss: 1.2379, train_acc: 0.5514 test_loss: 1.1626, test_acc: 0.5824, best: 0.6076, time: 0:01:36
 Epoch: 34, lr: 1.0e-02, train_loss: 1.2317, train_acc: 0.5568 test_loss: 1.0777, test_acc: 0.6080, best: 0.6080, time: 0:01:59
 Epoch: 35, lr: 1.0e-02, train_loss: 1.2074, train_acc: 0.5554 test_loss: 1.0893, test_acc: 0.6164, best: 0.6164, time: 0:01:40
 Epoch: 36, lr: 1.0e-02, train_loss: 1.2171, train_acc: 0.5580 test_loss: 1.0274, test_acc: 0.6254, best: 0.6254, time: 0:01:36
 Epoch: 37, lr: 1.0e-02, train_loss: 1.2016, train_acc: 0.5622 test_loss: 1.1810, test_acc: 0.5671, best: 0.6254, time: 0:01:35
 Epoch: 38, lr: 1.0e-02, train_loss: 1.1905, train_acc: 0.5652 test_loss: 1.0659, test_acc: 0.6106, best: 0.6254, time: 0:01:35
 Epoch: 39, lr: 1.0e-02, train_loss: 1.1793, train_acc: 0.5730 test_loss: 1.0647, test_acc: 0.6179, best: 0.6254, time: 0:01:38
 Epoch: 40, lr: 1.0e-02, train_loss: 1.1575, train_acc: 0.5704 test_loss: 1.0320, test_acc: 0.6228, best: 0.6254, time: 0:01:35
 Epoch: 41, lr: 1.0e-02, train_loss: 1.1505, train_acc: 0.5812 test_loss: 0.9785, test_acc: 0.6510, best: 0.6510, time: 0:01:32
 Epoch: 42, lr: 1.0e-02, train_loss: 1.1442, train_acc: 0.5836 test_loss: 0.9641, test_acc: 0.6502, best: 0.6510, time: 0:01:36
 Epoch: 43, lr: 1.0e-02, train_loss: 1.1275, train_acc: 0.5940 test_loss: 0.9935, test_acc: 0.6498, best: 0.6510, time: 0:01:37
 Epoch: 44, lr: 1.0e-02, train_loss: 1.1310, train_acc: 0.5908 test_loss: 0.9883, test_acc: 0.6466, best: 0.6510, time: 0:01:36
 Epoch: 45, lr: 1.0e-02, train_loss: 1.1313, train_acc: 0.5908 test_loss: 0.9746, test_acc: 0.6516, best: 0.6516, time: 0:01:40
 Epoch: 46, lr: 1.0e-02, train_loss: 1.1226, train_acc: 0.5928 test_loss: 0.9693, test_acc: 0.6426, best: 0.6516, time: 0:01:36
 Epoch: 47, lr: 1.0e-02, train_loss: 1.0891, train_acc: 0.6070 test_loss: 0.9317, test_acc: 0.6683, best: 0.6683, time: 0:01:40
 Epoch: 48, lr: 1.0e-02, train_loss: 1.0879, train_acc: 0.6016 test_loss: 0.9142, test_acc: 0.6773, best: 0.6773, time: 0:01:39
 Epoch: 49, lr: 1.0e-02, train_loss: 1.0746, train_acc: 0.6152 test_loss: 0.9703, test_acc: 0.6522, best: 0.6773, time: 0:01:44
 Epoch: 50, lr: 1.0e-02, train_loss: 1.0631, train_acc: 0.6220 test_loss: 0.9945, test_acc: 0.6400, best: 0.6773, time: 0:01:36
 Epoch: 51, lr: 1.0e-02, train_loss: 1.0597, train_acc: 0.6166 test_loss: 1.0353, test_acc: 0.6312, best: 0.6773, time: 0:01:39
 Epoch: 52, lr: 1.0e-02, train_loss: 1.0395, train_acc: 0.6260 test_loss: 0.9731, test_acc: 0.6530, best: 0.6773, time: 0:01:31
 Epoch: 53, lr: 1.0e-02, train_loss: 1.0591, train_acc: 0.6166 test_loss: 1.0449, test_acc: 0.6340, best: 0.6773, time: 0:01:30
 Epoch: 54, lr: 1.0e-02, train_loss: 1.0730, train_acc: 0.6182 test_loss: 0.9758, test_acc: 0.6575, best: 0.6773, time: 0:01:31
 Epoch: 55, lr: 1.0e-02, train_loss: 1.0306, train_acc: 0.6394 test_loss: 0.9221, test_acc: 0.6744, best: 0.6773, time: 0:01:25
 Epoch: 56, lr: 1.0e-02, train_loss: 1.0337, train_acc: 0.6298 test_loss: 0.9934, test_acc: 0.6544, best: 0.6773, time: 0:01:29
 Epoch: 57, lr: 1.0e-02, train_loss: 1.0254, train_acc: 0.6304 test_loss: 0.9817, test_acc: 0.6651, best: 0.6773, time: 0:01:25
 Epoch: 58, lr: 1.0e-02, train_loss: 1.0046, train_acc: 0.6430 test_loss: 0.9036, test_acc: 0.6837, best: 0.6837, time: 0:01:23
 Epoch: 59, lr: 1.0e-02, train_loss: 0.9781, train_acc: 0.6564 test_loss: 0.9000, test_acc: 0.6856, best: 0.6856, time: 0:01:23
 Epoch: 60, lr: 1.0e-02, train_loss: 1.0015, train_acc: 0.6380 test_loss: 0.9454, test_acc: 0.6599, best: 0.6856, time: 0:01:23
 Epoch: 61, lr: 1.0e-02, train_loss: 0.9979, train_acc: 0.6430 test_loss: 0.8896, test_acc: 0.6796, best: 0.6856, time: 0:01:25
 Epoch: 62, lr: 1.0e-02, train_loss: 0.9934, train_acc: 0.6408 test_loss: 0.8920, test_acc: 0.6833, best: 0.6856, time: 0:01:26
 Epoch: 63, lr: 1.0e-02, train_loss: 0.9807, train_acc: 0.6468 test_loss: 0.9002, test_acc: 0.6849, best: 0.6856, time: 0:01:24
 Epoch: 64, lr: 1.0e-02, train_loss: 0.9742, train_acc: 0.6466 test_loss: 0.8799, test_acc: 0.6924, best: 0.6924, time: 0:01:22
 Epoch: 65, lr: 1.0e-02, train_loss: 0.9631, train_acc: 0.6548 test_loss: 0.8362, test_acc: 0.7070, best: 0.7070, time: 0:01:24
 Epoch: 66, lr: 1.0e-02, train_loss: 0.9562, train_acc: 0.6598 test_loss: 0.8780, test_acc: 0.6959, best: 0.7070, time: 0:01:24
 Epoch: 67, lr: 1.0e-02, train_loss: 0.9485, train_acc: 0.6616 test_loss: 0.8436, test_acc: 0.7040, best: 0.7070, time: 0:01:24
 Epoch: 68, lr: 1.0e-02, train_loss: 0.9764, train_acc: 0.6402 test_loss: 0.8736, test_acc: 0.6931, best: 0.7070, time: 0:01:23
 Epoch: 69, lr: 1.0e-02, train_loss: 0.9545, train_acc: 0.6550 test_loss: 0.9064, test_acc: 0.6847, best: 0.7070, time: 0:01:26
 Epoch: 70, lr: 1.0e-02, train_loss: 0.9684, train_acc: 0.6532 test_loss: 0.9878, test_acc: 0.6591, best: 0.7070, time: 0:01:23
 Epoch: 71, lr: 1.0e-02, train_loss: 0.9503, train_acc: 0.6606 test_loss: 0.9434, test_acc: 0.6674, best: 0.7070, time: 0:01:25
 Epoch: 72, lr: 1.0e-02, train_loss: 0.9320, train_acc: 0.6638 test_loss: 0.9227, test_acc: 0.6786, best: 0.7070, time: 0:01:30
 Epoch: 73, lr: 1.0e-02, train_loss: 0.9186, train_acc: 0.6678 test_loss: 0.8366, test_acc: 0.6990, best: 0.7070, time: 0:01:23
 Epoch: 74, lr: 1.0e-02, train_loss: 0.9044, train_acc: 0.6722 test_loss: 0.8498, test_acc: 0.6985, best: 0.7070, time: 0:01:25
 Epoch: 75, lr: 1.0e-02, train_loss: 0.9258, train_acc: 0.6734 test_loss: 0.8348, test_acc: 0.7050, best: 0.7070, time: 0:01:25
 Epoch: 76, lr: 1.0e-02, train_loss: 0.8924, train_acc: 0.6720 test_loss: 0.8391, test_acc: 0.7039, best: 0.7070, time: 0:01:25
 Epoch: 77, lr: 1.0e-02, train_loss: 0.9122, train_acc: 0.6718 test_loss: 0.8059, test_acc: 0.7205, best: 0.7205, time: 0:01:23
 Epoch: 78, lr: 1.0e-02, train_loss: 0.8857, train_acc: 0.6882 test_loss: 0.8422, test_acc: 0.7090, best: 0.7205, time: 0:01:21
 Epoch: 79, lr: 1.0e-02, train_loss: 0.8833, train_acc: 0.6880 test_loss: 0.8139, test_acc: 0.7133, best: 0.7205, time: 0:01:28
 Epoch: 80, lr: 1.0e-02, train_loss: 0.8783, train_acc: 0.6844 test_loss: 0.7976, test_acc: 0.7195, best: 0.7205, time: 0:01:32
 Epoch: 81, lr: 1.0e-02, train_loss: 0.8883, train_acc: 0.6806 test_loss: 0.8091, test_acc: 0.7160, best: 0.7205, time: 0:01:37
 Epoch: 82, lr: 1.0e-02, train_loss: 0.8715, train_acc: 0.6852 test_loss: 0.7816, test_acc: 0.7183, best: 0.7205, time: 0:01:37
 Epoch: 83, lr: 1.0e-02, train_loss: 0.8662, train_acc: 0.6876 test_loss: 0.7984, test_acc: 0.7126, best: 0.7205, time: 0:01:32
 Epoch: 84, lr: 1.0e-02, train_loss: 0.8414, train_acc: 0.6958 test_loss: 0.8739, test_acc: 0.6970, best: 0.7205, time: 0:01:35
 Epoch: 85, lr: 1.0e-02, train_loss: 0.8570, train_acc: 0.6916 test_loss: 0.8478, test_acc: 0.6973, best: 0.7205, time: 0:01:34
 Epoch: 86, lr: 1.0e-02, train_loss: 0.8473, train_acc: 0.6996 test_loss: 0.8183, test_acc: 0.7150, best: 0.7205, time: 0:01:39
 Epoch: 87, lr: 1.0e-02, train_loss: 0.8605, train_acc: 0.6974 test_loss: 0.8227, test_acc: 0.7129, best: 0.7205, time: 0:01:33
 Epoch: 88, lr: 1.0e-02, train_loss: 0.8255, train_acc: 0.7030 test_loss: 0.7932, test_acc: 0.7225, best: 0.7225, time: 0:01:32
 Epoch: 89, lr: 1.0e-02, train_loss: 0.8574, train_acc: 0.6890 test_loss: 0.7872, test_acc: 0.7234, best: 0.7234, time: 0:01:35
 Epoch: 90, lr: 1.0e-02, train_loss: 0.8436, train_acc: 0.6982 test_loss: 0.9064, test_acc: 0.6975, best: 0.7234, time: 0:01:36
 Epoch: 91, lr: 1.0e-02, train_loss: 0.8297, train_acc: 0.7048 test_loss: 0.8243, test_acc: 0.7131, best: 0.7234, time: 0:01:33
 Epoch: 92, lr: 1.0e-02, train_loss: 0.8207, train_acc: 0.7080 test_loss: 0.8750, test_acc: 0.7111, best: 0.7234, time: 0:01:40
 Epoch: 93, lr: 1.0e-02, train_loss: 0.8074, train_acc: 0.7098 test_loss: 0.8396, test_acc: 0.7101, best: 0.7234, time: 0:01:45
 Epoch: 94, lr: 1.0e-02, train_loss: 0.8161, train_acc: 0.7100 test_loss: 0.7788, test_acc: 0.7318, best: 0.7318, time: 0:01:36
 Epoch: 95, lr: 1.0e-02, train_loss: 0.8045, train_acc: 0.7190 test_loss: 0.7728, test_acc: 0.7288, best: 0.7318, time: 0:01:35
 Epoch: 96, lr: 1.0e-02, train_loss: 0.7931, train_acc: 0.7132 test_loss: 0.8629, test_acc: 0.7089, best: 0.7318, time: 0:01:40
 Epoch: 97, lr: 1.0e-02, train_loss: 0.8049, train_acc: 0.7132 test_loss: 0.8042, test_acc: 0.7258, best: 0.7318, time: 0:01:42
 Epoch: 98, lr: 1.0e-02, train_loss: 0.8051, train_acc: 0.7186 test_loss: 0.7926, test_acc: 0.7260, best: 0.7318, time: 0:01:40
 Epoch: 99, lr: 1.0e-02, train_loss: 0.7918, train_acc: 0.7186 test_loss: 0.7733, test_acc: 0.7335, best: 0.7335, time: 0:01:41
 Epoch: 100, lr: 1.0e-02, train_loss: 0.7827, train_acc: 0.7238 test_loss: 0.7605, test_acc: 0.7402, best: 0.7402, time: 0:01:38
 Epoch: 101, lr: 1.0e-02, train_loss: 0.7734, train_acc: 0.7280 test_loss: 0.7547, test_acc: 0.7454, best: 0.7454, time: 0:01:36
 Epoch: 102, lr: 1.0e-02, train_loss: 0.7949, train_acc: 0.7160 test_loss: 0.7685, test_acc: 0.7345, best: 0.7454, time: 0:01:33
 Epoch: 103, lr: 1.0e-02, train_loss: 0.7875, train_acc: 0.7214 test_loss: 0.7988, test_acc: 0.7231, best: 0.7454, time: 0:01:33
 Epoch: 104, lr: 1.0e-02, train_loss: 0.7710, train_acc: 0.7262 test_loss: 0.7554, test_acc: 0.7366, best: 0.7454, time: 0:01:35
 Epoch: 105, lr: 1.0e-02, train_loss: 0.7692, train_acc: 0.7218 test_loss: 0.9019, test_acc: 0.7017, best: 0.7454, time: 0:01:37
 Epoch: 106, lr: 1.0e-02, train_loss: 0.7618, train_acc: 0.7270 test_loss: 0.7753, test_acc: 0.7334, best: 0.7454, time: 0:01:40
 Epoch: 107, lr: 1.0e-02, train_loss: 0.7597, train_acc: 0.7314 test_loss: 0.8309, test_acc: 0.7218, best: 0.7454, time: 0:01:53
 Epoch: 108, lr: 1.0e-02, train_loss: 0.7609, train_acc: 0.7268 test_loss: 0.7897, test_acc: 0.7228, best: 0.7454, time: 0:01:50
 Epoch: 109, lr: 1.0e-02, train_loss: 0.7605, train_acc: 0.7272 test_loss: 0.7356, test_acc: 0.7408, best: 0.7454, time: 0:01:34
 Epoch: 110, lr: 1.0e-02, train_loss: 0.7417, train_acc: 0.7274 test_loss: 0.8229, test_acc: 0.7221, best: 0.7454, time: 0:01:34
 Epoch: 111, lr: 1.0e-02, train_loss: 0.7384, train_acc: 0.7442 test_loss: 0.8353, test_acc: 0.7236, best: 0.7454, time: 0:01:44
 Epoch: 112, lr: 1.0e-02, train_loss: 0.7389, train_acc: 0.7434 test_loss: 0.7839, test_acc: 0.7322, best: 0.7454, time: 0:01:45
 Epoch: 113, lr: 1.0e-02, train_loss: 0.7464, train_acc: 0.7310 test_loss: 0.8100, test_acc: 0.7239, best: 0.7454, time: 0:01:36
 Epoch: 114, lr: 1.0e-02, train_loss: 0.7242, train_acc: 0.7426 test_loss: 0.7780, test_acc: 0.7359, best: 0.7454, time: 0:01:29
 Epoch: 115, lr: 1.0e-02, train_loss: 0.7460, train_acc: 0.7378 test_loss: 0.7451, test_acc: 0.7390, best: 0.7454, time: 0:01:40
 Epoch: 116, lr: 1.0e-02, train_loss: 0.7358, train_acc: 0.7442 test_loss: 0.7714, test_acc: 0.7318, best: 0.7454, time: 0:01:37
 Epoch: 117, lr: 1.0e-02, train_loss: 0.7475, train_acc: 0.7360 test_loss: 0.7732, test_acc: 0.7395, best: 0.7454, time: 0:01:40
 Epoch: 118, lr: 1.0e-02, train_loss: 0.7169, train_acc: 0.7436 test_loss: 0.7357, test_acc: 0.7494, best: 0.7494, time: 0:01:34
 Epoch: 119, lr: 1.0e-02, train_loss: 0.7091, train_acc: 0.7502 test_loss: 0.7759, test_acc: 0.7415, best: 0.7494, time: 0:01:40
 Epoch: 120, lr: 1.0e-02, train_loss: 0.7135, train_acc: 0.7516 test_loss: 0.8234, test_acc: 0.7185, best: 0.7494, time: 0:01:38
 Epoch: 121, lr: 1.0e-02, train_loss: 0.7084, train_acc: 0.7470 test_loss: 0.7981, test_acc: 0.7340, best: 0.7494, time: 0:01:38
 Epoch: 122, lr: 1.0e-02, train_loss: 0.7172, train_acc: 0.7446 test_loss: 0.7890, test_acc: 0.7369, best: 0.7494, time: 0:01:36
 Epoch: 123, lr: 1.0e-02, train_loss: 0.7070, train_acc: 0.7556 test_loss: 0.7774, test_acc: 0.7342, best: 0.7494, time: 0:01:50
 Epoch: 124, lr: 1.0e-02, train_loss: 0.7029, train_acc: 0.7464 test_loss: 0.7582, test_acc: 0.7361, best: 0.7494, time: 0:01:35
 Epoch: 125, lr: 1.0e-02, train_loss: 0.6865, train_acc: 0.7554 test_loss: 0.7514, test_acc: 0.7454, best: 0.7494, time: 0:01:32
 Epoch: 126, lr: 1.0e-02, train_loss: 0.7079, train_acc: 0.7486 test_loss: 0.8084, test_acc: 0.7319, best: 0.7494, time: 0:01:31
 Epoch: 127, lr: 1.0e-02, train_loss: 0.6837, train_acc: 0.7608 test_loss: 0.7902, test_acc: 0.7472, best: 0.7494, time: 0:01:34
 Epoch: 128, lr: 1.0e-02, train_loss: 0.7005, train_acc: 0.7488 test_loss: 0.7914, test_acc: 0.7340, best: 0.7494, time: 0:01:32
 Epoch: 129, lr: 1.0e-02, train_loss: 0.6895, train_acc: 0.7586 test_loss: 0.7725, test_acc: 0.7365, best: 0.7494, time: 0:01:32
 Epoch: 130, lr: 1.0e-02, train_loss: 0.6801, train_acc: 0.7598 test_loss: 0.8372, test_acc: 0.7254, best: 0.7494, time: 0:01:33
 Epoch: 131, lr: 1.0e-02, train_loss: 0.6806, train_acc: 0.7654 test_loss: 0.7869, test_acc: 0.7371, best: 0.7494, time: 0:01:33
 Epoch: 132, lr: 1.0e-02, train_loss: 0.6965, train_acc: 0.7450 test_loss: 0.7344, test_acc: 0.7594, best: 0.7594, time: 0:01:32
 Epoch: 133, lr: 1.0e-02, train_loss: 0.6667, train_acc: 0.7664 test_loss: 0.7815, test_acc: 0.7426, best: 0.7594, time: 0:01:32
 Epoch: 134, lr: 1.0e-02, train_loss: 0.6748, train_acc: 0.7636 test_loss: 0.8274, test_acc: 0.7294, best: 0.7594, time: 0:01:34
 Epoch: 135, lr: 1.0e-02, train_loss: 0.6630, train_acc: 0.7678 test_loss: 0.7387, test_acc: 0.7654, best: 0.7654, time: 0:01:34
 Epoch: 136, lr: 1.0e-02, train_loss: 0.6791, train_acc: 0.7576 test_loss: 0.8147, test_acc: 0.7398, best: 0.7654, time: 0:01:38
 Epoch: 137, lr: 1.0e-02, train_loss: 0.6748, train_acc: 0.7670 test_loss: 0.7727, test_acc: 0.7432, best: 0.7654, time: 0:01:41
 Epoch: 138, lr: 1.0e-02, train_loss: 0.6676, train_acc: 0.7650 test_loss: 0.7788, test_acc: 0.7426, best: 0.7654, time: 0:01:35
 Epoch: 139, lr: 1.0e-02, train_loss: 0.6533, train_acc: 0.7644 test_loss: 0.7660, test_acc: 0.7376, best: 0.7654, time: 0:01:43
 Epoch: 140, lr: 1.0e-02, train_loss: 0.6522, train_acc: 0.7698 test_loss: 0.7712, test_acc: 0.7520, best: 0.7654, time: 0:01:41
 Epoch: 141, lr: 1.0e-02, train_loss: 0.6597, train_acc: 0.7650 test_loss: 0.7256, test_acc: 0.7549, best: 0.7654, time: 0:01:36
 Epoch: 142, lr: 1.0e-02, train_loss: 0.6596, train_acc: 0.7722 test_loss: 0.7367, test_acc: 0.7612, best: 0.7654, time: 0:01:42
 Epoch: 143, lr: 1.0e-02, train_loss: 0.6480, train_acc: 0.7726 test_loss: 0.8064, test_acc: 0.7349, best: 0.7654, time: 0:01:37
 Epoch: 144, lr: 1.0e-02, train_loss: 0.6447, train_acc: 0.7732 test_loss: 0.7863, test_acc: 0.7499, best: 0.7654, time: 0:01:39
 Epoch: 145, lr: 1.0e-02, train_loss: 0.6593, train_acc: 0.7694 test_loss: 0.7827, test_acc: 0.7471, best: 0.7654, time: 0:01:32
 Epoch: 146, lr: 1.0e-02, train_loss: 0.6531, train_acc: 0.7670 test_loss: 0.7501, test_acc: 0.7516, best: 0.7654, time: 0:01:36
 Epoch: 147, lr: 1.0e-02, train_loss: 0.6415, train_acc: 0.7724 test_loss: 0.8134, test_acc: 0.7430, best: 0.7654, time: 0:01:33
 Epoch: 148, lr: 1.0e-02, train_loss: 0.6224, train_acc: 0.7818 test_loss: 0.7317, test_acc: 0.7670, best: 0.7670, time: 0:01:35
 Epoch: 149, lr: 1.0e-02, train_loss: 0.6333, train_acc: 0.7736 test_loss: 0.7971, test_acc: 0.7436, best: 0.7670, time: 0:01:41
 Epoch: 150, lr: 1.0e-02, train_loss: 0.6253, train_acc: 0.7752 test_loss: 0.7616, test_acc: 0.7500, best: 0.7670, time: 0:01:33
 Epoch: 151, lr: 1.0e-02, train_loss: 0.6313, train_acc: 0.7788 test_loss: 0.7384, test_acc: 0.7564, best: 0.7670, time: 0:01:38
 Epoch: 152, lr: 1.0e-02, train_loss: 0.6350, train_acc: 0.7750 test_loss: 0.7709, test_acc: 0.7585, best: 0.7670, time: 0:01:50
 Epoch: 153, lr: 1.0e-02, train_loss: 0.6314, train_acc: 0.7766 test_loss: 0.7936, test_acc: 0.7379, best: 0.7670, time: 0:01:35
 Epoch: 154, lr: 1.0e-02, train_loss: 0.6074, train_acc: 0.7822 test_loss: 0.8589, test_acc: 0.7432, best: 0.7670, time: 0:01:36
 Epoch: 155, lr: 1.0e-02, train_loss: 0.6055, train_acc: 0.7828 test_loss: 0.8059, test_acc: 0.7500, best: 0.7670, time: 0:01:34
 Epoch: 156, lr: 1.0e-02, train_loss: 0.6111, train_acc: 0.7830 test_loss: 0.7823, test_acc: 0.7551, best: 0.7670, time: 0:01:42
 Epoch: 157, lr: 1.0e-02, train_loss: 0.6294, train_acc: 0.7720 test_loss: 0.8662, test_acc: 0.7354, best: 0.7670, time: 0:01:35
 Epoch: 158, lr: 1.0e-02, train_loss: 0.6153, train_acc: 0.7798 test_loss: 0.7851, test_acc: 0.7535, best: 0.7670, time: 0:01:36
 Epoch: 159, lr: 1.0e-02, train_loss: 0.5954, train_acc: 0.7958 test_loss: 0.7483, test_acc: 0.7601, best: 0.7670, time: 0:01:35
 Epoch: 160, lr: 1.0e-02, train_loss: 0.6176, train_acc: 0.7774 test_loss: 0.7529, test_acc: 0.7515, best: 0.7670, time: 0:01:27
 Epoch: 161, lr: 1.0e-02, train_loss: 0.5896, train_acc: 0.7906 test_loss: 0.7442, test_acc: 0.7686, best: 0.7686, time: 0:01:33
 Epoch: 162, lr: 1.0e-02, train_loss: 0.5938, train_acc: 0.7916 test_loss: 0.7855, test_acc: 0.7580, best: 0.7686, time: 0:01:34
 Epoch: 163, lr: 1.0e-02, train_loss: 0.5989, train_acc: 0.7914 test_loss: 0.7639, test_acc: 0.7650, best: 0.7686, time: 0:01:37
 Epoch: 164, lr: 1.0e-02, train_loss: 0.5920, train_acc: 0.7946 test_loss: 0.7285, test_acc: 0.7656, best: 0.7686, time: 0:01:36
 Epoch: 165, lr: 1.0e-02, train_loss: 0.6012, train_acc: 0.7886 test_loss: 0.8014, test_acc: 0.7546, best: 0.7686, time: 0:01:40
 Epoch: 166, lr: 1.0e-02, train_loss: 0.5796, train_acc: 0.7940 test_loss: 0.7791, test_acc: 0.7554, best: 0.7686, time: 0:01:41
 Epoch: 167, lr: 1.0e-02, train_loss: 0.5905, train_acc: 0.7908 test_loss: 0.7624, test_acc: 0.7650, best: 0.7686, time: 0:01:45
 Epoch: 168, lr: 1.0e-02, train_loss: 0.5834, train_acc: 0.7974 test_loss: 0.7945, test_acc: 0.7566, best: 0.7686, time: 0:01:38
 Epoch: 169, lr: 1.0e-02, train_loss: 0.5609, train_acc: 0.8038 test_loss: 0.7416, test_acc: 0.7540, best: 0.7686, time: 0:01:44
 Epoch: 170, lr: 1.0e-02, train_loss: 0.5778, train_acc: 0.7926 test_loss: 0.8108, test_acc: 0.7546, best: 0.7686, time: 0:01:39
 Epoch: 171, lr: 1.0e-02, train_loss: 0.5777, train_acc: 0.8052 test_loss: 0.7656, test_acc: 0.7602, best: 0.7686, time: 0:01:37
 Epoch: 172, lr: 1.0e-02, train_loss: 0.5812, train_acc: 0.7888 test_loss: 0.7399, test_acc: 0.7602, best: 0.7686, time: 0:01:37
 Epoch: 173, lr: 1.0e-02, train_loss: 0.5842, train_acc: 0.7942 test_loss: 0.8131, test_acc: 0.7418, best: 0.7686, time: 0:01:39
 Epoch: 174, lr: 1.0e-02, train_loss: 0.5594, train_acc: 0.7986 test_loss: 0.7816, test_acc: 0.7595, best: 0.7686, time: 0:01:34
 Epoch: 175, lr: 1.0e-02, train_loss: 0.5497, train_acc: 0.8046 test_loss: 0.8245, test_acc: 0.7518, best: 0.7686, time: 0:01:45
 Epoch: 176, lr: 1.0e-02, train_loss: 0.5591, train_acc: 0.8004 test_loss: 0.7121, test_acc: 0.7760, best: 0.7760, time: 0:01:36
 Epoch: 177, lr: 1.0e-02, train_loss: 0.5696, train_acc: 0.7998 test_loss: 0.7759, test_acc: 0.7521, best: 0.7760, time: 0:01:34
 Epoch: 178, lr: 1.0e-02, train_loss: 0.5690, train_acc: 0.8022 test_loss: 0.7484, test_acc: 0.7621, best: 0.7760, time: 0:01:34
 Epoch: 179, lr: 1.0e-02, train_loss: 0.5550, train_acc: 0.8022 test_loss: 0.7666, test_acc: 0.7621, best: 0.7760, time: 0:01:39
 Epoch: 180, lr: 2.0e-03, train_loss: 0.4885, train_acc: 0.8316 test_loss: 0.7512, test_acc: 0.7751, best: 0.7760, time: 0:01:50
 Epoch: 181, lr: 2.0e-03, train_loss: 0.4588, train_acc: 0.8374 test_loss: 0.7553, test_acc: 0.7745, best: 0.7760, time: 0:01:32
 Epoch: 182, lr: 2.0e-03, train_loss: 0.4557, train_acc: 0.8436 test_loss: 0.7226, test_acc: 0.7811, best: 0.7811, time: 0:01:38
 Epoch: 183, lr: 2.0e-03, train_loss: 0.4452, train_acc: 0.8460 test_loss: 0.7644, test_acc: 0.7700, best: 0.7811, time: 0:01:30
 Epoch: 184, lr: 2.0e-03, train_loss: 0.4156, train_acc: 0.8536 test_loss: 0.7508, test_acc: 0.7745, best: 0.7811, time: 0:01:31
 Epoch: 185, lr: 2.0e-03, train_loss: 0.4425, train_acc: 0.8420 test_loss: 0.7469, test_acc: 0.7798, best: 0.7811, time: 0:01:27
 Epoch: 186, lr: 2.0e-03, train_loss: 0.4090, train_acc: 0.8596 test_loss: 0.7422, test_acc: 0.7817, best: 0.7817, time: 0:01:33
 Epoch: 187, lr: 2.0e-03, train_loss: 0.4245, train_acc: 0.8494 test_loss: 0.7571, test_acc: 0.7810, best: 0.7817, time: 0:01:37
 Epoch: 188, lr: 2.0e-03, train_loss: 0.4104, train_acc: 0.8538 test_loss: 0.7506, test_acc: 0.7833, best: 0.7833, time: 0:01:28
 Epoch: 189, lr: 2.0e-03, train_loss: 0.4181, train_acc: 0.8546 test_loss: 0.7332, test_acc: 0.7874, best: 0.7874, time: 0:01:31
 Epoch: 190, lr: 2.0e-03, train_loss: 0.4270, train_acc: 0.8464 test_loss: 0.7466, test_acc: 0.7844, best: 0.7874, time: 0:01:28
 Epoch: 191, lr: 2.0e-03, train_loss: 0.4044, train_acc: 0.8570 test_loss: 0.7807, test_acc: 0.7815, best: 0.7874, time: 0:01:31
 Epoch: 192, lr: 2.0e-03, train_loss: 0.4188, train_acc: 0.8540 test_loss: 0.7475, test_acc: 0.7823, best: 0.7874, time: 0:01:40
 Epoch: 193, lr: 2.0e-03, train_loss: 0.3988, train_acc: 0.8624 test_loss: 0.7590, test_acc: 0.7790, best: 0.7874, time: 0:01:33
 Epoch: 194, lr: 2.0e-03, train_loss: 0.4151, train_acc: 0.8592 test_loss: 0.7715, test_acc: 0.7810, best: 0.7874, time: 0:01:43
 Epoch: 195, lr: 2.0e-03, train_loss: 0.4103, train_acc: 0.8526 test_loss: 0.7618, test_acc: 0.7826, best: 0.7874, time: 0:01:46
 Epoch: 196, lr: 2.0e-03, train_loss: 0.3970, train_acc: 0.8616 test_loss: 0.7867, test_acc: 0.7776, best: 0.7874, time: 0:01:32
 Epoch: 197, lr: 2.0e-03, train_loss: 0.4006, train_acc: 0.8628 test_loss: 0.7848, test_acc: 0.7796, best: 0.7874, time: 0:01:28
 Epoch: 198, lr: 2.0e-03, train_loss: 0.3752, train_acc: 0.8698 test_loss: 0.8119, test_acc: 0.7776, best: 0.7874, time: 0:01:40
 Epoch: 199, lr: 2.0e-03, train_loss: 0.4111, train_acc: 0.8568 test_loss: 0.7677, test_acc: 0.7790, best: 0.7874, time: 0:01:33
 Epoch: 200, lr: 2.0e-03, train_loss: 0.3928, train_acc: 0.8602 test_loss: 0.7590, test_acc: 0.7854, best: 0.7874, time: 0:01:34
 Epoch: 201, lr: 2.0e-03, train_loss: 0.3967, train_acc: 0.8644 test_loss: 0.7712, test_acc: 0.7817, best: 0.7874, time: 0:01:39
 Epoch: 202, lr: 2.0e-03, train_loss: 0.3929, train_acc: 0.8634 test_loss: 0.7953, test_acc: 0.7784, best: 0.7874, time: 0:01:35
 Epoch: 203, lr: 2.0e-03, train_loss: 0.3953, train_acc: 0.8620 test_loss: 0.7958, test_acc: 0.7789, best: 0.7874, time: 0:01:39
 Epoch: 204, lr: 2.0e-03, train_loss: 0.3839, train_acc: 0.8654 test_loss: 0.7663, test_acc: 0.7844, best: 0.7874, time: 0:01:29
 Epoch: 205, lr: 2.0e-03, train_loss: 0.3925, train_acc: 0.8644 test_loss: 0.7571, test_acc: 0.7824, best: 0.7874, time: 0:01:34
 Epoch: 206, lr: 2.0e-03, train_loss: 0.3653, train_acc: 0.8740 test_loss: 0.7587, test_acc: 0.7840, best: 0.7874, time: 0:01:45
 Epoch: 207, lr: 2.0e-03, train_loss: 0.3978, train_acc: 0.8608 test_loss: 0.8057, test_acc: 0.7740, best: 0.7874, time: 0:01:58
 Epoch: 208, lr: 2.0e-03, train_loss: 0.3876, train_acc: 0.8684 test_loss: 0.7628, test_acc: 0.7817, best: 0.7874, time: 0:01:41
 Epoch: 209, lr: 2.0e-03, train_loss: 0.3846, train_acc: 0.8612 test_loss: 0.7913, test_acc: 0.7781, best: 0.7874, time: 0:01:42
 Epoch: 210, lr: 2.0e-03, train_loss: 0.3773, train_acc: 0.8710 test_loss: 0.7669, test_acc: 0.7799, best: 0.7874, time: 0:01:58
 Epoch: 211, lr: 2.0e-03, train_loss: 0.4047, train_acc: 0.8600 test_loss: 0.7810, test_acc: 0.7812, best: 0.7874, time: 0:01:35
 Epoch: 212, lr: 2.0e-03, train_loss: 0.3695, train_acc: 0.8728 test_loss: 0.7911, test_acc: 0.7800, best: 0.7874, time: 0:01:35
 Epoch: 213, lr: 2.0e-03, train_loss: 0.3901, train_acc: 0.8646 test_loss: 0.7700, test_acc: 0.7799, best: 0.7874, time: 0:01:35
 Epoch: 214, lr: 2.0e-03, train_loss: 0.3762, train_acc: 0.8718 test_loss: 0.7834, test_acc: 0.7801, best: 0.7874, time: 0:01:39
 Epoch: 215, lr: 2.0e-03, train_loss: 0.3911, train_acc: 0.8668 test_loss: 0.7732, test_acc: 0.7789, best: 0.7874, time: 0:01:35
 Epoch: 216, lr: 2.0e-03, train_loss: 0.3531, train_acc: 0.8782 test_loss: 0.7977, test_acc: 0.7790, best: 0.7874, time: 0:01:35
 Epoch: 217, lr: 2.0e-03, train_loss: 0.3617, train_acc: 0.8724 test_loss: 0.8045, test_acc: 0.7790, best: 0.7874, time: 0:01:33
 Epoch: 218, lr: 2.0e-03, train_loss: 0.3711, train_acc: 0.8716 test_loss: 0.8338, test_acc: 0.7734, best: 0.7874, time: 0:01:36
 Epoch: 219, lr: 2.0e-03, train_loss: 0.3595, train_acc: 0.8742 test_loss: 0.8111, test_acc: 0.7778, best: 0.7874, time: 0:01:29
 Epoch: 220, lr: 2.0e-03, train_loss: 0.3597, train_acc: 0.8734 test_loss: 0.7800, test_acc: 0.7781, best: 0.7874, time: 0:01:46
 Epoch: 221, lr: 2.0e-03, train_loss: 0.3795, train_acc: 0.8678 test_loss: 0.7856, test_acc: 0.7824, best: 0.7874, time: 0:01:55
 Epoch: 222, lr: 2.0e-03, train_loss: 0.3744, train_acc: 0.8748 test_loss: 0.8083, test_acc: 0.7808, best: 0.7874, time: 0:01:41
 Epoch: 223, lr: 2.0e-03, train_loss: 0.3557, train_acc: 0.8766 test_loss: 0.7882, test_acc: 0.7820, best: 0.7874, time: 0:01:35
 Epoch: 224, lr: 2.0e-03, train_loss: 0.3725, train_acc: 0.8710 test_loss: 0.7765, test_acc: 0.7841, best: 0.7874, time: 0:01:43
 Epoch: 225, lr: 2.0e-03, train_loss: 0.3662, train_acc: 0.8736 test_loss: 0.8016, test_acc: 0.7798, best: 0.7874, time: 0:01:34
 Epoch: 226, lr: 2.0e-03, train_loss: 0.3675, train_acc: 0.8722 test_loss: 0.7981, test_acc: 0.7836, best: 0.7874, time: 0:01:34
 Epoch: 227, lr: 2.0e-03, train_loss: 0.3850, train_acc: 0.8654 test_loss: 0.8139, test_acc: 0.7812, best: 0.7874, time: 0:01:31
 Epoch: 228, lr: 2.0e-03, train_loss: 0.3911, train_acc: 0.8602 test_loss: 0.7927, test_acc: 0.7802, best: 0.7874, time: 0:01:38
 Epoch: 229, lr: 2.0e-03, train_loss: 0.3690, train_acc: 0.8764 test_loss: 0.7670, test_acc: 0.7826, best: 0.7874, time: 0:01:26
 Epoch: 230, lr: 2.0e-03, train_loss: 0.3756, train_acc: 0.8686 test_loss: 0.8491, test_acc: 0.7759, best: 0.7874, time: 0:01:32
 Epoch: 231, lr: 2.0e-03, train_loss: 0.3805, train_acc: 0.8678 test_loss: 0.7753, test_acc: 0.7812, best: 0.7874, time: 0:01:29
 Epoch: 232, lr: 2.0e-03, train_loss: 0.3632, train_acc: 0.8774 test_loss: 0.7745, test_acc: 0.7833, best: 0.7874, time: 0:01:31
 Epoch: 233, lr: 2.0e-03, train_loss: 0.3592, train_acc: 0.8758 test_loss: 0.7809, test_acc: 0.7874, best: 0.7874, time: 0:01:36
 Epoch: 234, lr: 2.0e-03, train_loss: 0.3646, train_acc: 0.8654 test_loss: 0.7891, test_acc: 0.7840, best: 0.7874, time: 0:01:33
 Epoch: 235, lr: 2.0e-03, train_loss: 0.3680, train_acc: 0.8694 test_loss: 0.7759, test_acc: 0.7864, best: 0.7874, time: 0:01:37
 Epoch: 236, lr: 2.0e-03, train_loss: 0.3591, train_acc: 0.8792 test_loss: 0.7888, test_acc: 0.7845, best: 0.7874, time: 0:01:40
 Epoch: 237, lr: 2.0e-03, train_loss: 0.3759, train_acc: 0.8716 test_loss: 0.7853, test_acc: 0.7814, best: 0.7874, time: 0:01:41
 Epoch: 238, lr: 2.0e-03, train_loss: 0.3521, train_acc: 0.8736 test_loss: 0.7580, test_acc: 0.7895, best: 0.7895, time: 0:01:42
 Epoch: 239, lr: 2.0e-03, train_loss: 0.3574, train_acc: 0.8760 test_loss: 0.8210, test_acc: 0.7749, best: 0.7895, time: 0:01:34
 Epoch: 240, lr: 4.0e-04, train_loss: 0.3520, train_acc: 0.8782 test_loss: 0.7778, test_acc: 0.7833, best: 0.7895, time: 0:01:36
 Epoch: 241, lr: 4.0e-04, train_loss: 0.3282, train_acc: 0.8862 test_loss: 0.7831, test_acc: 0.7827, best: 0.7895, time: 0:01:40
 Epoch: 242, lr: 4.0e-04, train_loss: 0.3449, train_acc: 0.8836 test_loss: 0.8080, test_acc: 0.7879, best: 0.7895, time: 0:01:31
 Epoch: 243, lr: 4.0e-04, train_loss: 0.3435, train_acc: 0.8854 test_loss: 0.7962, test_acc: 0.7869, best: 0.7895, time: 0:01:34
 Epoch: 244, lr: 4.0e-04, train_loss: 0.3312, train_acc: 0.8806 test_loss: 0.7884, test_acc: 0.7864, best: 0.7895, time: 0:01:36
 Epoch: 245, lr: 4.0e-04, train_loss: 0.3637, train_acc: 0.8732 test_loss: 0.8076, test_acc: 0.7836, best: 0.7895, time: 0:01:32
 Epoch: 246, lr: 4.0e-04, train_loss: 0.3574, train_acc: 0.8768 test_loss: 0.7720, test_acc: 0.7894, best: 0.7895, time: 0:01:30
 Epoch: 247, lr: 4.0e-04, train_loss: 0.3324, train_acc: 0.8812 test_loss: 0.7844, test_acc: 0.7839, best: 0.7895, time: 0:01:30
 Epoch: 248, lr: 4.0e-04, train_loss: 0.3350, train_acc: 0.8830 test_loss: 0.7891, test_acc: 0.7885, best: 0.7895, time: 0:01:36
 Epoch: 249, lr: 4.0e-04, train_loss: 0.3299, train_acc: 0.8864 test_loss: 0.8046, test_acc: 0.7819, best: 0.7895, time: 0:01:30
 Epoch: 250, lr: 4.0e-04, train_loss: 0.3156, train_acc: 0.8874 test_loss: 0.8124, test_acc: 0.7863, best: 0.7895, time: 0:01:35
 Epoch: 251, lr: 4.0e-04, train_loss: 0.3363, train_acc: 0.8804 test_loss: 0.7914, test_acc: 0.7856, best: 0.7895, time: 0:01:38
 Epoch: 252, lr: 4.0e-04, train_loss: 0.3212, train_acc: 0.8890 test_loss: 0.8110, test_acc: 0.7821, best: 0.7895, time: 0:01:33
 Epoch: 253, lr: 4.0e-04, train_loss: 0.3401, train_acc: 0.8864 test_loss: 0.8161, test_acc: 0.7817, best: 0.7895, time: 0:01:40
 Epoch: 254, lr: 4.0e-04, train_loss: 0.3236, train_acc: 0.8856 test_loss: 0.8147, test_acc: 0.7815, best: 0.7895, time: 0:01:32
 Epoch: 255, lr: 4.0e-04, train_loss: 0.3294, train_acc: 0.8840 test_loss: 0.8038, test_acc: 0.7847, best: 0.7895, time: 0:01:36
 Epoch: 256, lr: 4.0e-04, train_loss: 0.3167, train_acc: 0.8890 test_loss: 0.8028, test_acc: 0.7865, best: 0.7895, time: 0:01:31
 Epoch: 257, lr: 4.0e-04, train_loss: 0.3402, train_acc: 0.8832 test_loss: 0.8285, test_acc: 0.7835, best: 0.7895, time: 0:01:31
 Epoch: 258, lr: 4.0e-04, train_loss: 0.3390, train_acc: 0.8826 test_loss: 0.7960, test_acc: 0.7824, best: 0.7895, time: 0:01:31
 Epoch: 259, lr: 4.0e-04, train_loss: 0.3293, train_acc: 0.8856 test_loss: 0.8022, test_acc: 0.7864, best: 0.7895, time: 0:01:32
 Epoch: 260, lr: 4.0e-04, train_loss: 0.3248, train_acc: 0.8852 test_loss: 0.8144, test_acc: 0.7851, best: 0.7895, time: 0:01:34
 Epoch: 261, lr: 4.0e-04, train_loss: 0.3329, train_acc: 0.8864 test_loss: 0.7915, test_acc: 0.7856, best: 0.7895, time: 0:01:33
 Epoch: 262, lr: 4.0e-04, train_loss: 0.3002, train_acc: 0.8904 test_loss: 0.7998, test_acc: 0.7843, best: 0.7895, time: 0:01:32
 Epoch: 263, lr: 4.0e-04, train_loss: 0.3483, train_acc: 0.8780 test_loss: 0.8073, test_acc: 0.7847, best: 0.7895, time: 0:01:31
 Epoch: 264, lr: 4.0e-04, train_loss: 0.3194, train_acc: 0.8892 test_loss: 0.8041, test_acc: 0.7853, best: 0.7895, time: 0:01:32
 Epoch: 265, lr: 4.0e-04, train_loss: 0.3428, train_acc: 0.8852 test_loss: 0.7975, test_acc: 0.7886, best: 0.7895, time: 0:01:32
 Epoch: 266, lr: 4.0e-04, train_loss: 0.3312, train_acc: 0.8852 test_loss: 0.8123, test_acc: 0.7844, best: 0.7895, time: 0:01:31
 Epoch: 267, lr: 4.0e-04, train_loss: 0.3083, train_acc: 0.8902 test_loss: 0.7833, test_acc: 0.7886, best: 0.7895, time: 0:01:32
 Epoch: 268, lr: 4.0e-04, train_loss: 0.3101, train_acc: 0.8934 test_loss: 0.8251, test_acc: 0.7834, best: 0.7895, time: 0:01:31
 Epoch: 269, lr: 4.0e-04, train_loss: 0.3340, train_acc: 0.8872 test_loss: 0.7856, test_acc: 0.7860, best: 0.7895, time: 0:01:31
 Epoch: 270, lr: 8.0e-05, train_loss: 0.3148, train_acc: 0.8896 test_loss: 0.7960, test_acc: 0.7866, best: 0.7895, time: 0:01:32
 Epoch: 271, lr: 8.0e-05, train_loss: 0.3252, train_acc: 0.8862 test_loss: 0.7959, test_acc: 0.7876, best: 0.7895, time: 0:01:35
 Epoch: 272, lr: 8.0e-05, train_loss: 0.3153, train_acc: 0.8870 test_loss: 0.7998, test_acc: 0.7879, best: 0.7895, time: 0:01:34
 Epoch: 273, lr: 8.0e-05, train_loss: 0.3371, train_acc: 0.8842 test_loss: 0.8059, test_acc: 0.7874, best: 0.7895, time: 0:01:33
 Epoch: 274, lr: 8.0e-05, train_loss: 0.3324, train_acc: 0.8844 test_loss: 0.8033, test_acc: 0.7889, best: 0.7895, time: 0:01:33
 Epoch: 275, lr: 8.0e-05, train_loss: 0.3184, train_acc: 0.8896 test_loss: 0.7907, test_acc: 0.7883, best: 0.7895, time: 0:01:34
 Epoch: 276, lr: 8.0e-05, train_loss: 0.3274, train_acc: 0.8860 test_loss: 0.8033, test_acc: 0.7879, best: 0.7895, time: 0:01:33
 Epoch: 277, lr: 8.0e-05, train_loss: 0.3368, train_acc: 0.8804 test_loss: 0.7934, test_acc: 0.7869, best: 0.7895, time: 0:01:34
 Epoch: 278, lr: 8.0e-05, train_loss: 0.3254, train_acc: 0.8912 test_loss: 0.7928, test_acc: 0.7857, best: 0.7895, time: 0:01:34
 Epoch: 279, lr: 8.0e-05, train_loss: 0.3337, train_acc: 0.8854 test_loss: 0.7920, test_acc: 0.7845, best: 0.7895, time: 0:01:34
 Epoch: 280, lr: 8.0e-05, train_loss: 0.3087, train_acc: 0.8966 test_loss: 0.7907, test_acc: 0.7876, best: 0.7895, time: 0:01:34
 Epoch: 281, lr: 8.0e-05, train_loss: 0.3182, train_acc: 0.8882 test_loss: 0.7910, test_acc: 0.7870, best: 0.7895, time: 0:01:34
 Epoch: 282, lr: 8.0e-05, train_loss: 0.3019, train_acc: 0.8922 test_loss: 0.7903, test_acc: 0.7874, best: 0.7895, time: 0:01:34
 Epoch: 283, lr: 8.0e-05, train_loss: 0.3188, train_acc: 0.8890 test_loss: 0.7909, test_acc: 0.7864, best: 0.7895, time: 0:01:33
 Epoch: 284, lr: 8.0e-05, train_loss: 0.3114, train_acc: 0.8908 test_loss: 0.8043, test_acc: 0.7844, best: 0.7895, time: 0:01:36
 Epoch: 285, lr: 8.0e-05, train_loss: 0.3260, train_acc: 0.8916 test_loss: 0.7909, test_acc: 0.7875, best: 0.7895, time: 0:01:36
 Epoch: 286, lr: 8.0e-05, train_loss: 0.3335, train_acc: 0.8856 test_loss: 0.7946, test_acc: 0.7881, best: 0.7895, time: 0:01:34
 Epoch: 287, lr: 8.0e-05, train_loss: 0.3144, train_acc: 0.8954 test_loss: 0.8003, test_acc: 0.7851, best: 0.7895, time: 0:01:32
 Epoch: 288, lr: 8.0e-05, train_loss: 0.3084, train_acc: 0.8884 test_loss: 0.7968, test_acc: 0.7870, best: 0.7895, time: 0:01:35
 Epoch: 289, lr: 8.0e-05, train_loss: 0.3195, train_acc: 0.8908 test_loss: 0.7925, test_acc: 0.7876, best: 0.7895, time: 0:01:36
 Epoch: 290, lr: 8.0e-05, train_loss: 0.3229, train_acc: 0.8886 test_loss: 0.8093, test_acc: 0.7849, best: 0.7895, time: 0:01:34
 Epoch: 291, lr: 8.0e-05, train_loss: 0.3173, train_acc: 0.8920 test_loss: 0.7907, test_acc: 0.7885, best: 0.7895, time: 0:01:36
 Epoch: 292, lr: 8.0e-05, train_loss: 0.3164, train_acc: 0.8924 test_loss: 0.7890, test_acc: 0.7887, best: 0.7895, time: 0:01:34
 Epoch: 293, lr: 8.0e-05, train_loss: 0.3213, train_acc: 0.8876 test_loss: 0.7828, test_acc: 0.7876, best: 0.7895, time: 0:01:35
 Epoch: 294, lr: 8.0e-05, train_loss: 0.3250, train_acc: 0.8856 test_loss: 0.8009, test_acc: 0.7897, best: 0.7897, time: 0:01:34
 Epoch: 295, lr: 8.0e-05, train_loss: 0.3336, train_acc: 0.8834 test_loss: 0.7941, test_acc: 0.7910, best: 0.7910, time: 0:01:32
 Epoch: 296, lr: 8.0e-05, train_loss: 0.3204, train_acc: 0.8902 test_loss: 0.7890, test_acc: 0.7885, best: 0.7910, time: 0:01:35
 Epoch: 297, lr: 8.0e-05, train_loss: 0.3209, train_acc: 0.8878 test_loss: 0.7977, test_acc: 0.7916, best: 0.7916, time: 0:01:34
 Epoch: 298, lr: 8.0e-05, train_loss: 0.3082, train_acc: 0.8958 test_loss: 0.8040, test_acc: 0.7874, best: 0.7916, time: 0:01:35
 Epoch: 299, lr: 8.0e-05, train_loss: 0.3046, train_acc: 0.8968 test_loss: 0.8023, test_acc: 0.7895, best: 0.7916, time: 0:01:35
 Highest accuracy: 0.7916