
 Run on time: 2022-07-03 01:02:19.838588

 Architecture: mobilenet-lip-2222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-LIP-2222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5819, train_acc: 0.1520 test_loss: 2.1495, test_acc: 0.1891, best: 0.1891, time: 0:01:29
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1210, train_acc: 0.1882 test_loss: 1.8971, test_acc: 0.2744, best: 0.2744, time: 0:01:28
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0325, train_acc: 0.2080 test_loss: 1.7967, test_acc: 0.2844, best: 0.2844, time: 0:01:26
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9915, train_acc: 0.2296 test_loss: 1.8162, test_acc: 0.2719, best: 0.2844, time: 0:01:31
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9624, train_acc: 0.2502 test_loss: 1.7061, test_acc: 0.3426, best: 0.3426, time: 0:01:36
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9525, train_acc: 0.2580 test_loss: 1.7751, test_acc: 0.3121, best: 0.3426, time: 0:01:40
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9678, train_acc: 0.2382 test_loss: 1.7286, test_acc: 0.3359, best: 0.3426, time: 0:01:29
 Epoch: 8, lr: 1.0e-02, train_loss: 1.9193, train_acc: 0.2694 test_loss: 1.7017, test_acc: 0.3416, best: 0.3426, time: 0:01:44
 Epoch: 9, lr: 1.0e-02, train_loss: 1.9224, train_acc: 0.2696 test_loss: 1.6699, test_acc: 0.3606, best: 0.3606, time: 0:01:19
 Epoch: 10, lr: 1.0e-02, train_loss: 1.9014, train_acc: 0.2800 test_loss: 1.7363, test_acc: 0.3361, best: 0.3606, time: 0:01:31
 Epoch: 11, lr: 1.0e-02, train_loss: 1.8969, train_acc: 0.2806 test_loss: 1.6980, test_acc: 0.3484, best: 0.3606, time: 0:01:28
 Epoch: 12, lr: 1.0e-02, train_loss: 1.8770, train_acc: 0.2846 test_loss: 1.6824, test_acc: 0.3420, best: 0.3606, time: 0:01:38
 Epoch: 13, lr: 1.0e-02, train_loss: 1.8528, train_acc: 0.3008 test_loss: 1.6201, test_acc: 0.3875, best: 0.3875, time: 0:01:36
 Epoch: 14, lr: 1.0e-02, train_loss: 1.8491, train_acc: 0.2976 test_loss: 1.7101, test_acc: 0.3495, best: 0.3875, time: 0:01:23
 Epoch: 15, lr: 1.0e-02, train_loss: 1.8504, train_acc: 0.2972 test_loss: 1.6921, test_acc: 0.3549, best: 0.3875, time: 0:01:36
 Epoch: 16, lr: 1.0e-02, train_loss: 1.8494, train_acc: 0.2970 test_loss: 1.8165, test_acc: 0.3142, best: 0.3875, time: 0:01:28
 Epoch: 17, lr: 1.0e-02, train_loss: 1.8315, train_acc: 0.3024 test_loss: 1.7349, test_acc: 0.3277, best: 0.3875, time: 0:01:44
 Epoch: 18, lr: 1.0e-02, train_loss: 1.8712, train_acc: 0.2910 test_loss: 1.6520, test_acc: 0.3643, best: 0.3875, time: 0:01:30
 Epoch: 19, lr: 1.0e-02, train_loss: 1.8164, train_acc: 0.3154 test_loss: 1.6631, test_acc: 0.3626, best: 0.3875, time: 0:01:30
 Epoch: 20, lr: 1.0e-02, train_loss: 1.8194, train_acc: 0.3064 test_loss: 1.6003, test_acc: 0.3919, best: 0.3919, time: 0:01:30
 Epoch: 21, lr: 1.0e-02, train_loss: 1.7633, train_acc: 0.3284 test_loss: 1.6209, test_acc: 0.3845, best: 0.3919, time: 0:01:26
 Epoch: 22, lr: 1.0e-02, train_loss: 1.7863, train_acc: 0.3168 test_loss: 1.6162, test_acc: 0.3710, best: 0.3919, time: 0:01:32
 Epoch: 23, lr: 1.0e-02, train_loss: 1.7705, train_acc: 0.3262 test_loss: 1.5837, test_acc: 0.4055, best: 0.4055, time: 0:01:29
 Epoch: 24, lr: 1.0e-02, train_loss: 1.7388, train_acc: 0.3380 test_loss: 1.5675, test_acc: 0.3985, best: 0.4055, time: 0:01:26
 Epoch: 25, lr: 1.0e-02, train_loss: 1.8293, train_acc: 0.2994 test_loss: 1.6068, test_acc: 0.3972, best: 0.4055, time: 0:01:30
 Epoch: 26, lr: 1.0e-02, train_loss: 1.7805, train_acc: 0.3152 test_loss: 1.6077, test_acc: 0.3915, best: 0.4055, time: 0:01:25
 Epoch: 27, lr: 1.0e-02, train_loss: 1.7672, train_acc: 0.3304 test_loss: 1.6018, test_acc: 0.3826, best: 0.4055, time: 0:01:26
 Epoch: 28, lr: 1.0e-02, train_loss: 1.7887, train_acc: 0.3218 test_loss: 1.6609, test_acc: 0.3771, best: 0.4055, time: 0:01:26
 Epoch: 29, lr: 1.0e-02, train_loss: 1.7624, train_acc: 0.3228 test_loss: 1.5853, test_acc: 0.4090, best: 0.4090, time: 0:01:25
 Epoch: 30, lr: 1.0e-02, train_loss: 1.7556, train_acc: 0.3302 test_loss: 1.6179, test_acc: 0.3839, best: 0.4090, time: 0:01:26
 Epoch: 31, lr: 1.0e-02, train_loss: 1.7346, train_acc: 0.3400 test_loss: 1.5958, test_acc: 0.3997, best: 0.4090, time: 0:01:26
 Epoch: 32, lr: 1.0e-02, train_loss: 1.7421, train_acc: 0.3336 test_loss: 1.6094, test_acc: 0.3904, best: 0.4090, time: 0:01:24
 Epoch: 33, lr: 1.0e-02, train_loss: 1.8087, train_acc: 0.3112 test_loss: 1.6208, test_acc: 0.3867, best: 0.4090, time: 0:01:25
 Epoch: 34, lr: 1.0e-02, train_loss: 1.7401, train_acc: 0.3370 test_loss: 1.6235, test_acc: 0.3806, best: 0.4090, time: 0:01:25
 Epoch: 35, lr: 1.0e-02, train_loss: 1.7238, train_acc: 0.3422 test_loss: 1.6011, test_acc: 0.3967, best: 0.4090, time: 0:01:29
 Epoch: 36, lr: 1.0e-02, train_loss: 1.7015, train_acc: 0.3518 test_loss: 1.5299, test_acc: 0.4184, best: 0.4184, time: 0:01:25
 Epoch: 37, lr: 1.0e-02, train_loss: 1.7461, train_acc: 0.3394 test_loss: 1.5551, test_acc: 0.4125, best: 0.4184, time: 0:01:27
 Epoch: 38, lr: 1.0e-02, train_loss: 1.7192, train_acc: 0.3492 test_loss: 1.5121, test_acc: 0.4394, best: 0.4394, time: 0:01:26
 Epoch: 39, lr: 1.0e-02, train_loss: 1.6648, train_acc: 0.3624 test_loss: 1.4928, test_acc: 0.4424, best: 0.4424, time: 0:01:48
 Epoch: 40, lr: 1.0e-02, train_loss: 1.6558, train_acc: 0.3700 test_loss: 1.4936, test_acc: 0.4255, best: 0.4424, time: 0:01:46
 Epoch: 41, lr: 1.0e-02, train_loss: 1.6458, train_acc: 0.3796 test_loss: 1.5060, test_acc: 0.4236, best: 0.4424, time: 0:01:26
 Epoch: 42, lr: 1.0e-02, train_loss: 1.6742, train_acc: 0.3604 test_loss: 1.5412, test_acc: 0.4144, best: 0.4424, time: 0:01:27
 Epoch: 43, lr: 1.0e-02, train_loss: 1.6513, train_acc: 0.3758 test_loss: 1.4520, test_acc: 0.4496, best: 0.4496, time: 0:01:25
 Epoch: 44, lr: 1.0e-02, train_loss: 1.6170, train_acc: 0.3832 test_loss: 1.4050, test_acc: 0.4670, best: 0.4670, time: 0:01:25
 Epoch: 45, lr: 1.0e-02, train_loss: 1.6122, train_acc: 0.3912 test_loss: 1.4691, test_acc: 0.4506, best: 0.4670, time: 0:01:26
 Epoch: 46, lr: 1.0e-02, train_loss: 1.6115, train_acc: 0.3910 test_loss: 1.4293, test_acc: 0.4541, best: 0.4670, time: 0:01:25
 Epoch: 47, lr: 1.0e-02, train_loss: 1.6029, train_acc: 0.3948 test_loss: 1.4371, test_acc: 0.4580, best: 0.4670, time: 0:01:26
 Epoch: 48, lr: 1.0e-02, train_loss: 1.5824, train_acc: 0.4020 test_loss: 1.3825, test_acc: 0.4811, best: 0.4811, time: 0:01:26
 Epoch: 49, lr: 1.0e-02, train_loss: 1.5559, train_acc: 0.4110 test_loss: 1.4544, test_acc: 0.4521, best: 0.4811, time: 0:01:28
 Epoch: 50, lr: 1.0e-02, train_loss: 1.5749, train_acc: 0.4072 test_loss: 1.4220, test_acc: 0.4659, best: 0.4811, time: 0:01:26
 Epoch: 51, lr: 1.0e-02, train_loss: 1.5399, train_acc: 0.4202 test_loss: 1.4248, test_acc: 0.4624, best: 0.4811, time: 0:01:24
 Epoch: 52, lr: 1.0e-02, train_loss: 1.5421, train_acc: 0.4166 test_loss: 1.3661, test_acc: 0.4925, best: 0.4925, time: 0:01:28
 Epoch: 53, lr: 1.0e-02, train_loss: 1.5454, train_acc: 0.4162 test_loss: 1.3686, test_acc: 0.4799, best: 0.4925, time: 0:01:25
 Epoch: 54, lr: 1.0e-02, train_loss: 1.5183, train_acc: 0.4374 test_loss: 1.3437, test_acc: 0.4924, best: 0.4925, time: 0:01:25
 Epoch: 55, lr: 1.0e-02, train_loss: 1.4936, train_acc: 0.4382 test_loss: 1.3742, test_acc: 0.4864, best: 0.4925, time: 0:01:25
 Epoch: 56, lr: 1.0e-02, train_loss: 1.4802, train_acc: 0.4398 test_loss: 1.3506, test_acc: 0.4966, best: 0.4966, time: 0:01:24
 Epoch: 57, lr: 1.0e-02, train_loss: 1.4879, train_acc: 0.4414 test_loss: 1.3498, test_acc: 0.5046, best: 0.5046, time: 0:01:27
 Epoch: 58, lr: 1.0e-02, train_loss: 1.4657, train_acc: 0.4478 test_loss: 1.3365, test_acc: 0.4950, best: 0.5046, time: 0:01:24
 Epoch: 59, lr: 1.0e-02, train_loss: 1.4748, train_acc: 0.4482 test_loss: 1.3074, test_acc: 0.5065, best: 0.5065, time: 0:01:29
 Epoch: 60, lr: 1.0e-02, train_loss: 1.4566, train_acc: 0.4570 test_loss: 1.2695, test_acc: 0.5485, best: 0.5485, time: 0:01:24
 Epoch: 61, lr: 1.0e-02, train_loss: 1.4582, train_acc: 0.4600 test_loss: 1.3353, test_acc: 0.4978, best: 0.5485, time: 0:01:23
 Epoch: 62, lr: 1.0e-02, train_loss: 1.4538, train_acc: 0.4570 test_loss: 1.3053, test_acc: 0.5206, best: 0.5485, time: 0:01:27
 Epoch: 63, lr: 1.0e-02, train_loss: 1.4468, train_acc: 0.4652 test_loss: 1.3036, test_acc: 0.5139, best: 0.5485, time: 0:01:29
 Epoch: 64, lr: 1.0e-02, train_loss: 1.4321, train_acc: 0.4638 test_loss: 1.3178, test_acc: 0.5195, best: 0.5485, time: 0:01:24
 Epoch: 65, lr: 1.0e-02, train_loss: 1.4173, train_acc: 0.4742 test_loss: 1.2584, test_acc: 0.5317, best: 0.5485, time: 0:01:22
 Epoch: 66, lr: 1.0e-02, train_loss: 1.4162, train_acc: 0.4678 test_loss: 1.2792, test_acc: 0.5266, best: 0.5485, time: 0:01:24
 Epoch: 67, lr: 1.0e-02, train_loss: 1.4152, train_acc: 0.4768 test_loss: 1.2780, test_acc: 0.5395, best: 0.5485, time: 0:01:20
 Epoch: 68, lr: 1.0e-02, train_loss: 1.4473, train_acc: 0.4614 test_loss: 1.2921, test_acc: 0.5315, best: 0.5485, time: 0:01:22
 Epoch: 69, lr: 1.0e-02, train_loss: 1.4248, train_acc: 0.4670 test_loss: 1.2779, test_acc: 0.5265, best: 0.5485, time: 0:01:22
 Epoch: 70, lr: 1.0e-02, train_loss: 1.4166, train_acc: 0.4772 test_loss: 1.2866, test_acc: 0.5255, best: 0.5485, time: 0:01:24
 Epoch: 71, lr: 1.0e-02, train_loss: 1.4044, train_acc: 0.4824 test_loss: 1.2504, test_acc: 0.5370, best: 0.5485, time: 0:01:20
 Epoch: 72, lr: 1.0e-02, train_loss: 1.4088, train_acc: 0.4748 test_loss: 1.2473, test_acc: 0.5470, best: 0.5485, time: 0:01:21
 Epoch: 73, lr: 1.0e-02, train_loss: 1.4009, train_acc: 0.4748 test_loss: 1.1892, test_acc: 0.5599, best: 0.5599, time: 0:01:21
 Epoch: 74, lr: 1.0e-02, train_loss: 1.3950, train_acc: 0.4842 test_loss: 1.2217, test_acc: 0.5625, best: 0.5625, time: 0:01:21
 Epoch: 75, lr: 1.0e-02, train_loss: 1.3672, train_acc: 0.4940 test_loss: 1.2378, test_acc: 0.5385, best: 0.5625, time: 0:01:20
 Epoch: 76, lr: 1.0e-02, train_loss: 1.3455, train_acc: 0.5024 test_loss: 1.2581, test_acc: 0.5431, best: 0.5625, time: 0:01:20
 Epoch: 77, lr: 1.0e-02, train_loss: 1.3696, train_acc: 0.4990 test_loss: 1.2349, test_acc: 0.5416, best: 0.5625, time: 0:01:24
 Epoch: 78, lr: 1.0e-02, train_loss: 1.3701, train_acc: 0.4906 test_loss: 1.2330, test_acc: 0.5463, best: 0.5625, time: 0:01:20
 Epoch: 79, lr: 1.0e-02, train_loss: 1.3270, train_acc: 0.5090 test_loss: 1.2334, test_acc: 0.5433, best: 0.5625, time: 0:01:21
 Epoch: 80, lr: 1.0e-02, train_loss: 1.3392, train_acc: 0.5100 test_loss: 1.1927, test_acc: 0.5605, best: 0.5625, time: 0:01:26
 Epoch: 81, lr: 1.0e-02, train_loss: 1.3753, train_acc: 0.4892 test_loss: 1.2488, test_acc: 0.5390, best: 0.5625, time: 0:01:24
 Epoch: 82, lr: 1.0e-02, train_loss: 1.3425, train_acc: 0.5042 test_loss: 1.1810, test_acc: 0.5725, best: 0.5725, time: 0:01:22
 Epoch: 83, lr: 1.0e-02, train_loss: 1.3107, train_acc: 0.5194 test_loss: 1.2090, test_acc: 0.5575, best: 0.5725, time: 0:01:21
 Epoch: 84, lr: 1.0e-02, train_loss: 1.3219, train_acc: 0.5068 test_loss: 1.1512, test_acc: 0.5814, best: 0.5814, time: 0:01:20
 Epoch: 85, lr: 1.0e-02, train_loss: 1.3151, train_acc: 0.5208 test_loss: 1.1521, test_acc: 0.5787, best: 0.5814, time: 0:01:21
 Epoch: 86, lr: 1.0e-02, train_loss: 1.3368, train_acc: 0.5184 test_loss: 1.2376, test_acc: 0.5441, best: 0.5814, time: 0:01:18
 Epoch: 87, lr: 1.0e-02, train_loss: 1.3213, train_acc: 0.5184 test_loss: 1.1973, test_acc: 0.5623, best: 0.5814, time: 0:01:19
 Epoch: 88, lr: 1.0e-02, train_loss: 1.3048, train_acc: 0.5246 test_loss: 1.1796, test_acc: 0.5736, best: 0.5814, time: 0:01:27
 Epoch: 89, lr: 1.0e-02, train_loss: 1.3221, train_acc: 0.5150 test_loss: 1.1827, test_acc: 0.5681, best: 0.5814, time: 0:01:25
 Epoch: 90, lr: 1.0e-02, train_loss: 1.3048, train_acc: 0.5188 test_loss: 1.1788, test_acc: 0.5780, best: 0.5814, time: 0:01:24
 Epoch: 91, lr: 1.0e-02, train_loss: 1.3050, train_acc: 0.5262 test_loss: 1.2016, test_acc: 0.5633, best: 0.5814, time: 0:01:26
 Epoch: 92, lr: 1.0e-02, train_loss: 1.3253, train_acc: 0.5206 test_loss: 1.1514, test_acc: 0.5851, best: 0.5851, time: 0:01:23
 Epoch: 93, lr: 1.0e-02, train_loss: 1.3158, train_acc: 0.5166 test_loss: 1.1858, test_acc: 0.5637, best: 0.5851, time: 0:01:28
 Epoch: 94, lr: 1.0e-02, train_loss: 1.3161, train_acc: 0.5212 test_loss: 1.1713, test_acc: 0.5736, best: 0.5851, time: 0:01:26
 Epoch: 95, lr: 1.0e-02, train_loss: 1.2879, train_acc: 0.5302 test_loss: 1.1778, test_acc: 0.5674, best: 0.5851, time: 0:01:27
 Epoch: 96, lr: 1.0e-02, train_loss: 1.2953, train_acc: 0.5226 test_loss: 1.1875, test_acc: 0.5665, best: 0.5851, time: 0:01:25
 Epoch: 97, lr: 1.0e-02, train_loss: 1.3027, train_acc: 0.5308 test_loss: 1.2092, test_acc: 0.5633, best: 0.5851, time: 0:01:25
 Epoch: 98, lr: 1.0e-02, train_loss: 1.3033, train_acc: 0.5234 test_loss: 1.1757, test_acc: 0.5769, best: 0.5851, time: 0:01:25
 Epoch: 99, lr: 1.0e-02, train_loss: 1.2603, train_acc: 0.5400 test_loss: 1.1933, test_acc: 0.5611, best: 0.5851, time: 0:01:28
 Epoch: 100, lr: 1.0e-02, train_loss: 1.2772, train_acc: 0.5328 test_loss: 1.1539, test_acc: 0.5785, best: 0.5851, time: 0:01:24
 Epoch: 101, lr: 1.0e-02, train_loss: 1.2775, train_acc: 0.5312 test_loss: 1.1071, test_acc: 0.5951, best: 0.5951, time: 0:01:26
 Epoch: 102, lr: 1.0e-02, train_loss: 1.2556, train_acc: 0.5426 test_loss: 1.1649, test_acc: 0.5715, best: 0.5951, time: 0:01:26
 Epoch: 103, lr: 1.0e-02, train_loss: 1.2783, train_acc: 0.5334 test_loss: 1.1254, test_acc: 0.5948, best: 0.5951, time: 0:01:24
 Epoch: 104, lr: 1.0e-02, train_loss: 1.2788, train_acc: 0.5314 test_loss: 1.1662, test_acc: 0.5811, best: 0.5951, time: 0:01:27
 Epoch: 105, lr: 1.0e-02, train_loss: 1.2568, train_acc: 0.5384 test_loss: 1.1927, test_acc: 0.5673, best: 0.5951, time: 0:01:26
 Epoch: 106, lr: 1.0e-02, train_loss: 1.2746, train_acc: 0.5310 test_loss: 1.1668, test_acc: 0.5813, best: 0.5951, time: 0:01:26
 Epoch: 107, lr: 1.0e-02, train_loss: 1.2506, train_acc: 0.5388 test_loss: 1.1238, test_acc: 0.5864, best: 0.5951, time: 0:01:26
 Epoch: 108, lr: 1.0e-02, train_loss: 1.2217, train_acc: 0.5530 test_loss: 1.1672, test_acc: 0.5800, best: 0.5951, time: 0:01:31
 Epoch: 109, lr: 1.0e-02, train_loss: 1.2553, train_acc: 0.5370 test_loss: 1.1223, test_acc: 0.5925, best: 0.5951, time: 0:01:24
 Epoch: 110, lr: 1.0e-02, train_loss: 1.2426, train_acc: 0.5522 test_loss: 1.1551, test_acc: 0.5769, best: 0.5951, time: 0:01:26
 Epoch: 111, lr: 1.0e-02, train_loss: 1.2214, train_acc: 0.5524 test_loss: 1.1104, test_acc: 0.5972, best: 0.5972, time: 0:01:28
 Epoch: 112, lr: 1.0e-02, train_loss: 1.2328, train_acc: 0.5550 test_loss: 1.1359, test_acc: 0.5791, best: 0.5972, time: 0:01:30
 Epoch: 113, lr: 1.0e-02, train_loss: 1.2154, train_acc: 0.5506 test_loss: 1.1061, test_acc: 0.6004, best: 0.6004, time: 0:01:24
 Epoch: 114, lr: 1.0e-02, train_loss: 1.1994, train_acc: 0.5674 test_loss: 1.1393, test_acc: 0.5895, best: 0.6004, time: 0:01:27
 Epoch: 115, lr: 1.0e-02, train_loss: 1.2243, train_acc: 0.5570 test_loss: 1.1225, test_acc: 0.5978, best: 0.6004, time: 0:01:31
 Epoch: 116, lr: 1.0e-02, train_loss: 1.2212, train_acc: 0.5580 test_loss: 1.0813, test_acc: 0.6036, best: 0.6036, time: 0:01:26
 Epoch: 117, lr: 1.0e-02, train_loss: 1.1968, train_acc: 0.5574 test_loss: 1.1214, test_acc: 0.5906, best: 0.6036, time: 0:01:26
 Epoch: 118, lr: 1.0e-02, train_loss: 1.1842, train_acc: 0.5568 test_loss: 1.1127, test_acc: 0.6030, best: 0.6036, time: 0:01:26
 Epoch: 119, lr: 1.0e-02, train_loss: 1.2015, train_acc: 0.5724 test_loss: 1.1008, test_acc: 0.5978, best: 0.6036, time: 0:01:30
 Epoch: 120, lr: 1.0e-02, train_loss: 1.1787, train_acc: 0.5776 test_loss: 1.0646, test_acc: 0.6125, best: 0.6125, time: 0:01:27
 Epoch: 121, lr: 1.0e-02, train_loss: 1.2114, train_acc: 0.5512 test_loss: 1.0910, test_acc: 0.6100, best: 0.6125, time: 0:01:28
 Epoch: 122, lr: 1.0e-02, train_loss: 1.1911, train_acc: 0.5698 test_loss: 1.1230, test_acc: 0.5913, best: 0.6125, time: 0:01:28
 Epoch: 123, lr: 1.0e-02, train_loss: 1.2035, train_acc: 0.5672 test_loss: 1.1468, test_acc: 0.5905, best: 0.6125, time: 0:01:27
 Epoch: 124, lr: 1.0e-02, train_loss: 1.1869, train_acc: 0.5596 test_loss: 1.1101, test_acc: 0.6005, best: 0.6125, time: 0:01:26
 Epoch: 125, lr: 1.0e-02, train_loss: 1.1676, train_acc: 0.5796 test_loss: 1.1080, test_acc: 0.5965, best: 0.6125, time: 0:01:25
 Epoch: 126, lr: 1.0e-02, train_loss: 1.3011, train_acc: 0.5258 test_loss: 1.1279, test_acc: 0.5896, best: 0.6125, time: 0:01:29
 Epoch: 127, lr: 1.0e-02, train_loss: 1.2452, train_acc: 0.5464 test_loss: 1.1230, test_acc: 0.5911, best: 0.6125, time: 0:01:28
 Epoch: 128, lr: 1.0e-02, train_loss: 1.2290, train_acc: 0.5530 test_loss: 1.1910, test_acc: 0.5631, best: 0.6125, time: 0:01:24
 Epoch: 129, lr: 1.0e-02, train_loss: 1.2122, train_acc: 0.5546 test_loss: 1.1355, test_acc: 0.5831, best: 0.6125, time: 0:01:28
 Epoch: 130, lr: 1.0e-02, train_loss: 1.1862, train_acc: 0.5682 test_loss: 1.0720, test_acc: 0.6164, best: 0.6164, time: 0:01:28
 Epoch: 131, lr: 1.0e-02, train_loss: 1.1542, train_acc: 0.5760 test_loss: 1.0733, test_acc: 0.6204, best: 0.6204, time: 0:01:30
 Epoch: 132, lr: 1.0e-02, train_loss: 1.1708, train_acc: 0.5788 test_loss: 1.0908, test_acc: 0.6011, best: 0.6204, time: 0:01:25
 Epoch: 133, lr: 1.0e-02, train_loss: 1.1550, train_acc: 0.5752 test_loss: 1.0796, test_acc: 0.6075, best: 0.6204, time: 0:01:26
 Epoch: 134, lr: 1.0e-02, train_loss: 1.1662, train_acc: 0.5758 test_loss: 1.0597, test_acc: 0.6174, best: 0.6204, time: 0:01:26
 Epoch: 135, lr: 1.0e-02, train_loss: 1.1598, train_acc: 0.5732 test_loss: 1.1252, test_acc: 0.5948, best: 0.6204, time: 0:01:26
 Epoch: 136, lr: 1.0e-02, train_loss: 1.1438, train_acc: 0.5790 test_loss: 1.0388, test_acc: 0.6254, best: 0.6254, time: 0:01:27
 Epoch: 137, lr: 1.0e-02, train_loss: 1.1416, train_acc: 0.5820 test_loss: 1.0920, test_acc: 0.6159, best: 0.6254, time: 0:01:24
 Epoch: 138, lr: 1.0e-02, train_loss: 1.1636, train_acc: 0.5742 test_loss: 1.0892, test_acc: 0.6084, best: 0.6254, time: 0:01:26
 Epoch: 139, lr: 1.0e-02, train_loss: 1.1532, train_acc: 0.5746 test_loss: 1.0648, test_acc: 0.6131, best: 0.6254, time: 0:01:25
 Epoch: 140, lr: 1.0e-02, train_loss: 1.1805, train_acc: 0.5756 test_loss: 1.0868, test_acc: 0.6106, best: 0.6254, time: 0:01:25
 Epoch: 141, lr: 1.0e-02, train_loss: 1.1268, train_acc: 0.5878 test_loss: 1.0482, test_acc: 0.6242, best: 0.6254, time: 0:01:27
 Epoch: 142, lr: 1.0e-02, train_loss: 1.1393, train_acc: 0.5902 test_loss: 1.1168, test_acc: 0.5954, best: 0.6254, time: 0:01:27
 Epoch: 143, lr: 1.0e-02, train_loss: 1.1460, train_acc: 0.5858 test_loss: 1.0364, test_acc: 0.6295, best: 0.6295, time: 0:01:26
 Epoch: 144, lr: 1.0e-02, train_loss: 1.1369, train_acc: 0.5916 test_loss: 1.0492, test_acc: 0.6230, best: 0.6295, time: 0:01:27
 Epoch: 145, lr: 1.0e-02, train_loss: 1.1325, train_acc: 0.5872 test_loss: 1.0487, test_acc: 0.6260, best: 0.6295, time: 0:01:27
 Epoch: 146, lr: 1.0e-02, train_loss: 1.1594, train_acc: 0.5840 test_loss: 1.0769, test_acc: 0.6192, best: 0.6295, time: 0:01:29
 Epoch: 147, lr: 1.0e-02, train_loss: 1.1145, train_acc: 0.5974 test_loss: 1.0578, test_acc: 0.6191, best: 0.6295, time: 0:01:25
 Epoch: 148, lr: 1.0e-02, train_loss: 1.1198, train_acc: 0.5850 test_loss: 1.0427, test_acc: 0.6226, best: 0.6295, time: 0:01:26
 Epoch: 149, lr: 1.0e-02, train_loss: 1.1136, train_acc: 0.6028 test_loss: 1.0517, test_acc: 0.6252, best: 0.6295, time: 0:01:25
 Epoch: 150, lr: 1.0e-02, train_loss: 1.1211, train_acc: 0.5944 test_loss: 1.0166, test_acc: 0.6345, best: 0.6345, time: 0:01:26
 Epoch: 151, lr: 1.0e-02, train_loss: 1.1134, train_acc: 0.6004 test_loss: 1.0297, test_acc: 0.6295, best: 0.6345, time: 0:01:26
 Epoch: 152, lr: 1.0e-02, train_loss: 1.1032, train_acc: 0.6020 test_loss: 1.0342, test_acc: 0.6271, best: 0.6345, time: 0:01:27
 Epoch: 153, lr: 1.0e-02, train_loss: 1.1127, train_acc: 0.5990 test_loss: 1.0641, test_acc: 0.6198, best: 0.6345, time: 0:01:25
 Epoch: 154, lr: 1.0e-02, train_loss: 1.1142, train_acc: 0.6004 test_loss: 1.0029, test_acc: 0.6400, best: 0.6400, time: 0:01:24
 Epoch: 155, lr: 1.0e-02, train_loss: 1.0981, train_acc: 0.6046 test_loss: 1.0362, test_acc: 0.6275, best: 0.6400, time: 0:01:26
 Epoch: 156, lr: 1.0e-02, train_loss: 1.0940, train_acc: 0.6002 test_loss: 1.0205, test_acc: 0.6355, best: 0.6400, time: 0:01:29
 Epoch: 157, lr: 1.0e-02, train_loss: 1.1029, train_acc: 0.6024 test_loss: 1.0827, test_acc: 0.6041, best: 0.6400, time: 0:01:25
 Epoch: 158, lr: 1.0e-02, train_loss: 1.1266, train_acc: 0.5982 test_loss: 1.0254, test_acc: 0.6258, best: 0.6400, time: 0:01:29
 Epoch: 159, lr: 1.0e-02, train_loss: 1.1031, train_acc: 0.5970 test_loss: 1.1335, test_acc: 0.6038, best: 0.6400, time: 0:01:27
 Epoch: 160, lr: 1.0e-02, train_loss: 1.1078, train_acc: 0.6000 test_loss: 1.0562, test_acc: 0.6164, best: 0.6400, time: 0:01:24
 Epoch: 161, lr: 1.0e-02, train_loss: 1.1061, train_acc: 0.5914 test_loss: 1.0046, test_acc: 0.6350, best: 0.6400, time: 0:01:27
 Epoch: 162, lr: 1.0e-02, train_loss: 1.0843, train_acc: 0.6058 test_loss: 1.0266, test_acc: 0.6310, best: 0.6400, time: 0:01:29
 Epoch: 163, lr: 1.0e-02, train_loss: 1.0964, train_acc: 0.6138 test_loss: 1.0659, test_acc: 0.6168, best: 0.6400, time: 0:01:25
 Epoch: 164, lr: 1.0e-02, train_loss: 1.0751, train_acc: 0.6106 test_loss: 1.0428, test_acc: 0.6268, best: 0.6400, time: 0:01:26
 Epoch: 165, lr: 1.0e-02, train_loss: 1.1170, train_acc: 0.5978 test_loss: 1.0288, test_acc: 0.6348, best: 0.6400, time: 0:01:28
 Epoch: 166, lr: 1.0e-02, train_loss: 1.0726, train_acc: 0.6166 test_loss: 1.0320, test_acc: 0.6294, best: 0.6400, time: 0:01:29
 Epoch: 167, lr: 1.0e-02, train_loss: 1.0743, train_acc: 0.6078 test_loss: 1.0595, test_acc: 0.6218, best: 0.6400, time: 0:01:29
 Epoch: 168, lr: 1.0e-02, train_loss: 1.0780, train_acc: 0.6046 test_loss: 1.0046, test_acc: 0.6369, best: 0.6400, time: 0:01:25
 Epoch: 169, lr: 1.0e-02, train_loss: 1.0787, train_acc: 0.6102 test_loss: 1.0213, test_acc: 0.6341, best: 0.6400, time: 0:01:40
 Epoch: 170, lr: 1.0e-02, train_loss: 1.0567, train_acc: 0.6132 test_loss: 1.0568, test_acc: 0.6138, best: 0.6400, time: 0:01:28
 Epoch: 171, lr: 1.0e-02, train_loss: 1.0508, train_acc: 0.6140 test_loss: 1.0381, test_acc: 0.6272, best: 0.6400, time: 0:01:28
 Epoch: 172, lr: 1.0e-02, train_loss: 1.0417, train_acc: 0.6222 test_loss: 1.0147, test_acc: 0.6331, best: 0.6400, time: 0:01:27
 Epoch: 173, lr: 1.0e-02, train_loss: 1.0569, train_acc: 0.6226 test_loss: 1.0382, test_acc: 0.6228, best: 0.6400, time: 0:01:24
 Epoch: 174, lr: 1.0e-02, train_loss: 1.0299, train_acc: 0.6230 test_loss: 1.0019, test_acc: 0.6358, best: 0.6400, time: 0:01:26
 Epoch: 175, lr: 1.0e-02, train_loss: 1.0568, train_acc: 0.6152 test_loss: 0.9819, test_acc: 0.6492, best: 0.6492, time: 0:01:23
 Epoch: 176, lr: 1.0e-02, train_loss: 1.0373, train_acc: 0.6246 test_loss: 1.0010, test_acc: 0.6421, best: 0.6492, time: 0:01:28
 Epoch: 177, lr: 1.0e-02, train_loss: 1.0528, train_acc: 0.6266 test_loss: 1.0455, test_acc: 0.6219, best: 0.6492, time: 0:01:25
 Epoch: 178, lr: 1.0e-02, train_loss: 1.0569, train_acc: 0.6142 test_loss: 1.0622, test_acc: 0.6179, best: 0.6492, time: 0:01:26
 Epoch: 179, lr: 1.0e-02, train_loss: 1.0315, train_acc: 0.6286 test_loss: 1.0235, test_acc: 0.6358, best: 0.6492, time: 0:01:28
 Epoch: 180, lr: 2.0e-03, train_loss: 0.9842, train_acc: 0.6422 test_loss: 0.9496, test_acc: 0.6604, best: 0.6604, time: 0:01:25
 Epoch: 181, lr: 2.0e-03, train_loss: 0.9487, train_acc: 0.6566 test_loss: 0.9562, test_acc: 0.6542, best: 0.6604, time: 0:01:27
 Epoch: 182, lr: 2.0e-03, train_loss: 0.9520, train_acc: 0.6568 test_loss: 0.9751, test_acc: 0.6534, best: 0.6604, time: 0:01:25
 Epoch: 183, lr: 2.0e-03, train_loss: 0.9368, train_acc: 0.6588 test_loss: 0.9443, test_acc: 0.6586, best: 0.6604, time: 0:01:28
 Epoch: 184, lr: 2.0e-03, train_loss: 0.9078, train_acc: 0.6686 test_loss: 0.9635, test_acc: 0.6567, best: 0.6604, time: 0:01:27
 Epoch: 185, lr: 2.0e-03, train_loss: 0.9355, train_acc: 0.6632 test_loss: 0.9398, test_acc: 0.6617, best: 0.6617, time: 0:01:27
 Epoch: 186, lr: 2.0e-03, train_loss: 0.9164, train_acc: 0.6652 test_loss: 0.9414, test_acc: 0.6617, best: 0.6617, time: 0:01:22
 Epoch: 187, lr: 2.0e-03, train_loss: 0.9054, train_acc: 0.6756 test_loss: 0.9379, test_acc: 0.6653, best: 0.6653, time: 0:01:25
 Epoch: 188, lr: 2.0e-03, train_loss: 0.9180, train_acc: 0.6728 test_loss: 0.9387, test_acc: 0.6611, best: 0.6653, time: 0:01:28
 Epoch: 189, lr: 2.0e-03, train_loss: 0.9028, train_acc: 0.6742 test_loss: 0.9464, test_acc: 0.6631, best: 0.6653, time: 0:01:29
 Epoch: 190, lr: 2.0e-03, train_loss: 0.8935, train_acc: 0.6768 test_loss: 0.9578, test_acc: 0.6601, best: 0.6653, time: 0:01:28
 Epoch: 191, lr: 2.0e-03, train_loss: 0.9049, train_acc: 0.6800 test_loss: 0.9492, test_acc: 0.6603, best: 0.6653, time: 0:01:26
 Epoch: 192, lr: 2.0e-03, train_loss: 0.9200, train_acc: 0.6722 test_loss: 0.9141, test_acc: 0.6729, best: 0.6729, time: 0:01:26
 Epoch: 193, lr: 2.0e-03, train_loss: 0.9015, train_acc: 0.6738 test_loss: 0.9506, test_acc: 0.6591, best: 0.6729, time: 0:01:29
 Epoch: 194, lr: 2.0e-03, train_loss: 0.9119, train_acc: 0.6712 test_loss: 0.9296, test_acc: 0.6647, best: 0.6729, time: 0:01:33
 Epoch: 195, lr: 2.0e-03, train_loss: 0.9225, train_acc: 0.6690 test_loss: 0.9361, test_acc: 0.6663, best: 0.6729, time: 0:01:24
 Epoch: 196, lr: 2.0e-03, train_loss: 0.8790, train_acc: 0.6842 test_loss: 0.9417, test_acc: 0.6665, best: 0.6729, time: 0:01:27
 Epoch: 197, lr: 2.0e-03, train_loss: 0.9068, train_acc: 0.6756 test_loss: 0.9181, test_acc: 0.6713, best: 0.6729, time: 0:01:28
 Epoch: 198, lr: 2.0e-03, train_loss: 0.8894, train_acc: 0.6818 test_loss: 0.9594, test_acc: 0.6606, best: 0.6729, time: 0:01:28
 Epoch: 199, lr: 2.0e-03, train_loss: 0.8765, train_acc: 0.6846 test_loss: 0.9634, test_acc: 0.6604, best: 0.6729, time: 0:01:25
 Epoch: 200, lr: 2.0e-03, train_loss: 0.9072, train_acc: 0.6798 test_loss: 0.9157, test_acc: 0.6755, best: 0.6755, time: 0:01:28
 Epoch: 201, lr: 2.0e-03, train_loss: 0.8779, train_acc: 0.6766 test_loss: 0.9355, test_acc: 0.6643, best: 0.6755, time: 0:01:26
 Epoch: 202, lr: 2.0e-03, train_loss: 0.8846, train_acc: 0.6834 test_loss: 0.9269, test_acc: 0.6705, best: 0.6755, time: 0:01:26
 Epoch: 203, lr: 2.0e-03, train_loss: 0.9022, train_acc: 0.6748 test_loss: 0.9342, test_acc: 0.6685, best: 0.6755, time: 0:01:24
 Epoch: 204, lr: 2.0e-03, train_loss: 0.8919, train_acc: 0.6816 test_loss: 0.9351, test_acc: 0.6724, best: 0.6755, time: 0:01:29
 Epoch: 205, lr: 2.0e-03, train_loss: 0.8788, train_acc: 0.6894 test_loss: 0.9282, test_acc: 0.6730, best: 0.6755, time: 0:01:27
 Epoch: 206, lr: 2.0e-03, train_loss: 0.8702, train_acc: 0.6854 test_loss: 0.9328, test_acc: 0.6700, best: 0.6755, time: 0:01:28
 Epoch: 207, lr: 2.0e-03, train_loss: 0.8734, train_acc: 0.6870 test_loss: 0.9353, test_acc: 0.6639, best: 0.6755, time: 0:01:28
 Epoch: 208, lr: 2.0e-03, train_loss: 0.8798, train_acc: 0.6844 test_loss: 0.9386, test_acc: 0.6636, best: 0.6755, time: 0:01:26
 Epoch: 209, lr: 2.0e-03, train_loss: 0.8648, train_acc: 0.6874 test_loss: 0.9376, test_acc: 0.6619, best: 0.6755, time: 0:01:25
 Epoch: 210, lr: 2.0e-03, train_loss: 0.8629, train_acc: 0.6942 test_loss: 0.9343, test_acc: 0.6627, best: 0.6755, time: 0:01:27
 Epoch: 211, lr: 2.0e-03, train_loss: 0.8576, train_acc: 0.6898 test_loss: 0.9514, test_acc: 0.6609, best: 0.6755, time: 0:01:26
 Epoch: 212, lr: 2.0e-03, train_loss: 0.8685, train_acc: 0.6820 test_loss: 0.9523, test_acc: 0.6644, best: 0.6755, time: 0:01:26
 Epoch: 213, lr: 2.0e-03, train_loss: 0.8683, train_acc: 0.6880 test_loss: 0.9315, test_acc: 0.6641, best: 0.6755, time: 0:01:26
 Epoch: 214, lr: 2.0e-03, train_loss: 0.8593, train_acc: 0.6908 test_loss: 0.9498, test_acc: 0.6621, best: 0.6755, time: 0:01:28
 Epoch: 215, lr: 2.0e-03, train_loss: 0.8468, train_acc: 0.6986 test_loss: 0.9803, test_acc: 0.6591, best: 0.6755, time: 0:01:26
 Epoch: 216, lr: 2.0e-03, train_loss: 0.8587, train_acc: 0.6864 test_loss: 0.9480, test_acc: 0.6639, best: 0.6755, time: 0:01:23
 Epoch: 217, lr: 2.0e-03, train_loss: 0.8671, train_acc: 0.6838 test_loss: 0.9353, test_acc: 0.6669, best: 0.6755, time: 0:01:28
 Epoch: 218, lr: 2.0e-03, train_loss: 0.8697, train_acc: 0.6852 test_loss: 0.9407, test_acc: 0.6649, best: 0.6755, time: 0:01:29
 Epoch: 219, lr: 2.0e-03, train_loss: 0.8468, train_acc: 0.7018 test_loss: 0.9447, test_acc: 0.6633, best: 0.6755, time: 0:01:27
 Epoch: 220, lr: 2.0e-03, train_loss: 0.8443, train_acc: 0.6980 test_loss: 0.9557, test_acc: 0.6634, best: 0.6755, time: 0:01:27
 Epoch: 221, lr: 2.0e-03, train_loss: 0.8510, train_acc: 0.6928 test_loss: 0.9413, test_acc: 0.6720, best: 0.6755, time: 0:01:28
 Epoch: 222, lr: 2.0e-03, train_loss: 0.8468, train_acc: 0.6978 test_loss: 0.9479, test_acc: 0.6690, best: 0.6755, time: 0:01:28
 Epoch: 223, lr: 2.0e-03, train_loss: 0.8646, train_acc: 0.6916 test_loss: 0.9269, test_acc: 0.6713, best: 0.6755, time: 0:01:26
 Epoch: 224, lr: 2.0e-03, train_loss: 0.8520, train_acc: 0.6924 test_loss: 0.9382, test_acc: 0.6727, best: 0.6755, time: 0:01:29
 Epoch: 225, lr: 2.0e-03, train_loss: 0.8408, train_acc: 0.6990 test_loss: 0.9468, test_acc: 0.6650, best: 0.6755, time: 0:01:31
 Epoch: 226, lr: 2.0e-03, train_loss: 0.8362, train_acc: 0.7046 test_loss: 0.9502, test_acc: 0.6634, best: 0.6755, time: 0:01:26
 Epoch: 227, lr: 2.0e-03, train_loss: 0.8501, train_acc: 0.7012 test_loss: 0.9366, test_acc: 0.6664, best: 0.6755, time: 0:01:29
 Epoch: 228, lr: 2.0e-03, train_loss: 0.8539, train_acc: 0.6984 test_loss: 0.9255, test_acc: 0.6751, best: 0.6755, time: 0:01:30
 Epoch: 229, lr: 2.0e-03, train_loss: 0.8496, train_acc: 0.6964 test_loss: 0.9579, test_acc: 0.6644, best: 0.6755, time: 0:01:26
 Epoch: 230, lr: 2.0e-03, train_loss: 0.8401, train_acc: 0.6976 test_loss: 0.9315, test_acc: 0.6725, best: 0.6755, time: 0:01:23
 Epoch: 231, lr: 2.0e-03, train_loss: 0.8462, train_acc: 0.6980 test_loss: 0.9545, test_acc: 0.6687, best: 0.6755, time: 0:01:35
 Epoch: 232, lr: 2.0e-03, train_loss: 0.8302, train_acc: 0.7034 test_loss: 0.9137, test_acc: 0.6720, best: 0.6755, time: 0:01:29
 Epoch: 233, lr: 2.0e-03, train_loss: 0.8303, train_acc: 0.6986 test_loss: 0.9307, test_acc: 0.6730, best: 0.6755, time: 0:01:23
 Epoch: 234, lr: 2.0e-03, train_loss: 0.8525, train_acc: 0.6910 test_loss: 0.9428, test_acc: 0.6655, best: 0.6755, time: 0:01:24
 Epoch: 235, lr: 2.0e-03, train_loss: 0.8265, train_acc: 0.7026 test_loss: 0.9713, test_acc: 0.6586, best: 0.6755, time: 0:01:30
 Epoch: 236, lr: 2.0e-03, train_loss: 0.8631, train_acc: 0.6878 test_loss: 0.9726, test_acc: 0.6585, best: 0.6755, time: 0:01:25
 Epoch: 237, lr: 2.0e-03, train_loss: 0.8331, train_acc: 0.7012 test_loss: 0.9451, test_acc: 0.6657, best: 0.6755, time: 0:01:26
 Epoch: 238, lr: 2.0e-03, train_loss: 0.8350, train_acc: 0.6996 test_loss: 0.9735, test_acc: 0.6600, best: 0.6755, time: 0:01:27
 Epoch: 239, lr: 2.0e-03, train_loss: 0.8204, train_acc: 0.7088 test_loss: 0.9301, test_acc: 0.6699, best: 0.6755, time: 0:01:32
 Epoch: 240, lr: 4.0e-04, train_loss: 0.8224, train_acc: 0.7038 test_loss: 0.9259, test_acc: 0.6733, best: 0.6755, time: 0:01:25
 Epoch: 241, lr: 4.0e-04, train_loss: 0.8007, train_acc: 0.7160 test_loss: 0.9235, test_acc: 0.6746, best: 0.6755, time: 0:01:27
 Epoch: 242, lr: 4.0e-04, train_loss: 0.8138, train_acc: 0.7064 test_loss: 0.9253, test_acc: 0.6736, best: 0.6755, time: 0:01:29
 Epoch: 243, lr: 4.0e-04, train_loss: 0.7935, train_acc: 0.7126 test_loss: 0.9429, test_acc: 0.6704, best: 0.6755, time: 0:01:28
 Epoch: 244, lr: 4.0e-04, train_loss: 0.8001, train_acc: 0.7102 test_loss: 0.9227, test_acc: 0.6763, best: 0.6763, time: 0:01:29
 Epoch: 245, lr: 4.0e-04, train_loss: 0.8317, train_acc: 0.7020 test_loss: 0.9237, test_acc: 0.6750, best: 0.6763, time: 0:01:30
 Epoch: 246, lr: 4.0e-04, train_loss: 0.7741, train_acc: 0.7288 test_loss: 0.9289, test_acc: 0.6740, best: 0.6763, time: 0:01:27
 Epoch: 247, lr: 4.0e-04, train_loss: 0.7706, train_acc: 0.7218 test_loss: 0.9283, test_acc: 0.6753, best: 0.6763, time: 0:01:28
 Epoch: 248, lr: 4.0e-04, train_loss: 0.8091, train_acc: 0.7060 test_loss: 0.9222, test_acc: 0.6763, best: 0.6763, time: 0:01:26
 Epoch: 249, lr: 4.0e-04, train_loss: 0.8044, train_acc: 0.7082 test_loss: 0.9261, test_acc: 0.6739, best: 0.6763, time: 0:01:25
 Epoch: 250, lr: 4.0e-04, train_loss: 0.7852, train_acc: 0.7180 test_loss: 0.9304, test_acc: 0.6731, best: 0.6763, time: 0:01:26
 Epoch: 251, lr: 4.0e-04, train_loss: 0.8046, train_acc: 0.7142 test_loss: 0.9144, test_acc: 0.6727, best: 0.6763, time: 0:01:25
 Epoch: 252, lr: 4.0e-04, train_loss: 0.7913, train_acc: 0.7150 test_loss: 0.9255, test_acc: 0.6730, best: 0.6763, time: 0:01:29
 Epoch: 253, lr: 4.0e-04, train_loss: 0.7925, train_acc: 0.7224 test_loss: 0.9325, test_acc: 0.6750, best: 0.6763, time: 0:01:32
 Epoch: 254, lr: 4.0e-04, train_loss: 0.7839, train_acc: 0.7236 test_loss: 0.9303, test_acc: 0.6746, best: 0.6763, time: 0:01:26
 Epoch: 255, lr: 4.0e-04, train_loss: 0.7913, train_acc: 0.7168 test_loss: 0.9174, test_acc: 0.6784, best: 0.6784, time: 0:01:28
 Epoch: 256, lr: 4.0e-04, train_loss: 0.7928, train_acc: 0.7224 test_loss: 0.9267, test_acc: 0.6751, best: 0.6784, time: 0:01:28
 Epoch: 257, lr: 4.0e-04, train_loss: 0.8051, train_acc: 0.7104 test_loss: 0.9177, test_acc: 0.6814, best: 0.6814, time: 0:01:25
 Epoch: 258, lr: 4.0e-04, train_loss: 0.7930, train_acc: 0.7168 test_loss: 0.9197, test_acc: 0.6763, best: 0.6814, time: 0:01:26
 Epoch: 259, lr: 4.0e-04, train_loss: 0.7891, train_acc: 0.7192 test_loss: 0.9191, test_acc: 0.6794, best: 0.6814, time: 0:01:26
 Epoch: 260, lr: 4.0e-04, train_loss: 0.7854, train_acc: 0.7170 test_loss: 0.9152, test_acc: 0.6805, best: 0.6814, time: 0:01:24
 Epoch: 261, lr: 4.0e-04, train_loss: 0.7785, train_acc: 0.7250 test_loss: 0.9181, test_acc: 0.6810, best: 0.6814, time: 0:01:23
 Epoch: 262, lr: 4.0e-04, train_loss: 0.7824, train_acc: 0.7238 test_loss: 0.9226, test_acc: 0.6757, best: 0.6814, time: 0:01:26
 Epoch: 263, lr: 4.0e-04, train_loss: 0.7903, train_acc: 0.7188 test_loss: 0.9208, test_acc: 0.6799, best: 0.6814, time: 0:01:25
 Epoch: 264, lr: 4.0e-04, train_loss: 0.7859, train_acc: 0.7208 test_loss: 0.9180, test_acc: 0.6757, best: 0.6814, time: 0:01:29
 Epoch: 265, lr: 4.0e-04, train_loss: 0.8065, train_acc: 0.7086 test_loss: 0.9269, test_acc: 0.6780, best: 0.6814, time: 0:01:26
 Epoch: 266, lr: 4.0e-04, train_loss: 0.8041, train_acc: 0.7156 test_loss: 0.9301, test_acc: 0.6793, best: 0.6814, time: 0:01:36
 Epoch: 267, lr: 4.0e-04, train_loss: 0.7573, train_acc: 0.7266 test_loss: 0.9170, test_acc: 0.6823, best: 0.6823, time: 0:01:27
 Epoch: 268, lr: 4.0e-04, train_loss: 0.7883, train_acc: 0.7184 test_loss: 0.9562, test_acc: 0.6724, best: 0.6823, time: 0:01:30
 Epoch: 269, lr: 4.0e-04, train_loss: 0.7865, train_acc: 0.7180 test_loss: 0.9294, test_acc: 0.6771, best: 0.6823, time: 0:01:27
 Epoch: 270, lr: 8.0e-05, train_loss: 0.7925, train_acc: 0.7162 test_loss: 0.9199, test_acc: 0.6799, best: 0.6823, time: 0:01:26
 Epoch: 271, lr: 8.0e-05, train_loss: 0.7847, train_acc: 0.7162 test_loss: 0.9196, test_acc: 0.6790, best: 0.6823, time: 0:01:26
 Epoch: 272, lr: 8.0e-05, train_loss: 0.7824, train_acc: 0.7250 test_loss: 0.9274, test_acc: 0.6775, best: 0.6823, time: 0:01:27
 Epoch: 273, lr: 8.0e-05, train_loss: 0.7936, train_acc: 0.7104 test_loss: 0.9229, test_acc: 0.6790, best: 0.6823, time: 0:01:26
 Epoch: 274, lr: 8.0e-05, train_loss: 0.7921, train_acc: 0.7164 test_loss: 0.9101, test_acc: 0.6823, best: 0.6823, time: 0:01:28
 Epoch: 275, lr: 8.0e-05, train_loss: 0.7691, train_acc: 0.7304 test_loss: 0.9184, test_acc: 0.6797, best: 0.6823, time: 0:01:26
 Epoch: 276, lr: 8.0e-05, train_loss: 0.7929, train_acc: 0.7162 test_loss: 0.9280, test_acc: 0.6746, best: 0.6823, time: 0:01:25
 Epoch: 277, lr: 8.0e-05, train_loss: 0.7779, train_acc: 0.7196 test_loss: 0.9220, test_acc: 0.6764, best: 0.6823, time: 0:01:25
 Epoch: 278, lr: 8.0e-05, train_loss: 0.7860, train_acc: 0.7224 test_loss: 0.9145, test_acc: 0.6777, best: 0.6823, time: 0:01:26
 Epoch: 279, lr: 8.0e-05, train_loss: 0.7680, train_acc: 0.7264 test_loss: 0.9168, test_acc: 0.6760, best: 0.6823, time: 0:01:23
 Epoch: 280, lr: 8.0e-05, train_loss: 0.7657, train_acc: 0.7288 test_loss: 0.9223, test_acc: 0.6785, best: 0.6823, time: 0:01:25
 Epoch: 281, lr: 8.0e-05, train_loss: 0.7856, train_acc: 0.7186 test_loss: 0.9169, test_acc: 0.6793, best: 0.6823, time: 0:01:26
 Epoch: 282, lr: 8.0e-05, train_loss: 0.7711, train_acc: 0.7262 test_loss: 0.9197, test_acc: 0.6796, best: 0.6823, time: 0:01:27
 Epoch: 283, lr: 8.0e-05, train_loss: 0.7891, train_acc: 0.7190 test_loss: 0.9193, test_acc: 0.6805, best: 0.6823, time: 0:01:26
 Epoch: 284, lr: 8.0e-05, train_loss: 0.7755, train_acc: 0.7218 test_loss: 0.9304, test_acc: 0.6754, best: 0.6823, time: 0:01:29
 Epoch: 285, lr: 8.0e-05, train_loss: 0.7838, train_acc: 0.7154 test_loss: 0.9294, test_acc: 0.6770, best: 0.6823, time: 0:01:26
 Epoch: 286, lr: 8.0e-05, train_loss: 0.7930, train_acc: 0.7220 test_loss: 0.9153, test_acc: 0.6799, best: 0.6823, time: 0:01:24
 Epoch: 287, lr: 8.0e-05, train_loss: 0.7837, train_acc: 0.7212 test_loss: 0.9132, test_acc: 0.6795, best: 0.6823, time: 0:01:27
 Epoch: 288, lr: 8.0e-05, train_loss: 0.7686, train_acc: 0.7254 test_loss: 0.9382, test_acc: 0.6764, best: 0.6823, time: 0:01:25
 Epoch: 289, lr: 8.0e-05, train_loss: 0.7754, train_acc: 0.7206 test_loss: 0.9271, test_acc: 0.6755, best: 0.6823, time: 0:01:28
 Epoch: 290, lr: 8.0e-05, train_loss: 0.7907, train_acc: 0.7076 test_loss: 0.9170, test_acc: 0.6805, best: 0.6823, time: 0:01:26
 Epoch: 291, lr: 8.0e-05, train_loss: 0.7730, train_acc: 0.7262 test_loss: 0.9303, test_acc: 0.6783, best: 0.6823, time: 0:01:29
 Epoch: 292, lr: 8.0e-05, train_loss: 0.7858, train_acc: 0.7192 test_loss: 0.9224, test_acc: 0.6775, best: 0.6823, time: 0:01:28
 Epoch: 293, lr: 8.0e-05, train_loss: 0.7739, train_acc: 0.7296 test_loss: 0.9270, test_acc: 0.6770, best: 0.6823, time: 0:01:27
 Epoch: 294, lr: 8.0e-05, train_loss: 0.7896, train_acc: 0.7166 test_loss: 0.9188, test_acc: 0.6789, best: 0.6823, time: 0:01:28
 Epoch: 295, lr: 8.0e-05, train_loss: 0.7920, train_acc: 0.7116 test_loss: 0.9171, test_acc: 0.6799, best: 0.6823, time: 0:01:26
 Epoch: 296, lr: 8.0e-05, train_loss: 0.7919, train_acc: 0.7154 test_loss: 0.9322, test_acc: 0.6780, best: 0.6823, time: 0:01:25
 Epoch: 297, lr: 8.0e-05, train_loss: 0.7674, train_acc: 0.7248 test_loss: 0.9145, test_acc: 0.6811, best: 0.6823, time: 0:01:26
 Epoch: 298, lr: 8.0e-05, train_loss: 0.7896, train_acc: 0.7132 test_loss: 0.9240, test_acc: 0.6774, best: 0.6823, time: 0:01:24
 Epoch: 299, lr: 8.0e-05, train_loss: 0.7693, train_acc: 0.7252 test_loss: 0.9233, test_acc: 0.6811, best: 0.6823, time: 0:01:25
 Highest accuracy: 0.6823