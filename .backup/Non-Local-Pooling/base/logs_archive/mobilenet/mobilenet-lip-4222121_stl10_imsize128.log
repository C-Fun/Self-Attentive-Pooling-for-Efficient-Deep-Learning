
 Run on time: 2022-07-03 01:02:42.031932

 Architecture: mobilenet-lip-4222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 4,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-LIP-4222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): LIP_BASE(
                (logit): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.1413, train_acc: 0.1218 test_loss: 2.4292, test_acc: 0.1544, best: 0.1544, time: 0:01:26
 Epoch: 2, lr: 1.0e-02, train_loss: 2.4500, train_acc: 0.1338 test_loss: 2.3568, test_acc: 0.1380, best: 0.1544, time: 0:01:20
 Epoch: 3, lr: 1.0e-02, train_loss: 2.3452, train_acc: 0.1398 test_loss: 2.2339, test_acc: 0.1762, best: 0.1762, time: 0:01:22
 Epoch: 4, lr: 1.0e-02, train_loss: 2.2979, train_acc: 0.1356 test_loss: 2.2945, test_acc: 0.1135, best: 0.1762, time: 0:01:23
 Epoch: 5, lr: 1.0e-02, train_loss: 2.2692, train_acc: 0.1432 test_loss: 2.2029, test_acc: 0.1452, best: 0.1762, time: 0:01:24
 Epoch: 6, lr: 1.0e-02, train_loss: 2.2435, train_acc: 0.1466 test_loss: 2.2472, test_acc: 0.1634, best: 0.1762, time: 0:01:31
 Epoch: 7, lr: 1.0e-02, train_loss: 2.2058, train_acc: 0.1644 test_loss: 2.1760, test_acc: 0.1913, best: 0.1913, time: 0:01:37
 Epoch: 8, lr: 1.0e-02, train_loss: 2.2022, train_acc: 0.1756 test_loss: 2.2211, test_acc: 0.1840, best: 0.1913, time: 0:01:21
 Epoch: 9, lr: 1.0e-02, train_loss: 2.1703, train_acc: 0.1912 test_loss: 2.1604, test_acc: 0.1870, best: 0.1913, time: 0:01:14
 Epoch: 10, lr: 1.0e-02, train_loss: 2.1776, train_acc: 0.1848 test_loss: 2.1884, test_acc: 0.2020, best: 0.2020, time: 0:01:15
 Epoch: 11, lr: 1.0e-02, train_loss: 2.2614, train_acc: 0.1434 test_loss: 2.2728, test_acc: 0.1409, best: 0.2020, time: 0:01:22
 Epoch: 12, lr: 1.0e-02, train_loss: 2.2608, train_acc: 0.1410 test_loss: 2.2918, test_acc: 0.1222, best: 0.2020, time: 0:01:27
 Epoch: 13, lr: 1.0e-02, train_loss: 2.2184, train_acc: 0.1718 test_loss: 2.2009, test_acc: 0.2101, best: 0.2101, time: 0:01:57
 Epoch: 14, lr: 1.0e-02, train_loss: 2.2430, train_acc: 0.1572 test_loss: 2.2338, test_acc: 0.1608, best: 0.2101, time: 0:01:17
 Epoch: 15, lr: 1.0e-02, train_loss: 2.2466, train_acc: 0.1486 test_loss: 2.2104, test_acc: 0.1789, best: 0.2101, time: 0:01:16
 Epoch: 16, lr: 1.0e-02, train_loss: 2.2267, train_acc: 0.1552 test_loss: 2.1805, test_acc: 0.2021, best: 0.2101, time: 0:01:23
 Epoch: 17, lr: 1.0e-02, train_loss: 2.2043, train_acc: 0.1692 test_loss: 2.1640, test_acc: 0.1951, best: 0.2101, time: 0:01:39
 Epoch: 18, lr: 1.0e-02, train_loss: 2.2156, train_acc: 0.1668 test_loss: 2.2651, test_acc: 0.1419, best: 0.2101, time: 0:01:18
 Epoch: 19, lr: 1.0e-02, train_loss: 2.2216, train_acc: 0.1616 test_loss: 2.2286, test_acc: 0.1561, best: 0.2101, time: 0:01:17
 Epoch: 20, lr: 1.0e-02, train_loss: 2.2123, train_acc: 0.1678 test_loss: 2.1885, test_acc: 0.1956, best: 0.2101, time: 0:01:49
 Epoch: 21, lr: 1.0e-02, train_loss: 2.1850, train_acc: 0.1702 test_loss: 2.2038, test_acc: 0.1745, best: 0.2101, time: 0:01:50
 Epoch: 22, lr: 1.0e-02, train_loss: 2.2096, train_acc: 0.1658 test_loss: 2.2070, test_acc: 0.1916, best: 0.2101, time: 0:02:54
 Epoch: 23, lr: 1.0e-02, train_loss: 2.2191, train_acc: 0.1678 test_loss: 2.2476, test_acc: 0.1562, best: 0.2101, time: 0:01:51
 Epoch: 24, lr: 1.0e-02, train_loss: 2.2145, train_acc: 0.1692 test_loss: 2.2397, test_acc: 0.1571, best: 0.2101, time: 0:02:29
 Epoch: 25, lr: 1.0e-02, train_loss: 2.2244, train_acc: 0.1576 test_loss: 2.2152, test_acc: 0.1714, best: 0.2101, time: 0:01:26
 Epoch: 26, lr: 1.0e-02, train_loss: 2.2121, train_acc: 0.1618 test_loss: 2.2105, test_acc: 0.1696, best: 0.2101, time: 0:01:21
 Epoch: 27, lr: 1.0e-02, train_loss: 2.2100, train_acc: 0.1668 test_loss: 2.3181, test_acc: 0.0864, best: 0.2101, time: 0:01:24
 Epoch: 28, lr: 1.0e-02, train_loss: 2.2488, train_acc: 0.1520 test_loss: 2.2103, test_acc: 0.1993, best: 0.2101, time: 0:01:23
 Epoch: 29, lr: 1.0e-02, train_loss: 2.1926, train_acc: 0.1726 test_loss: 2.2032, test_acc: 0.1869, best: 0.2101, time: 0:01:22
 Epoch: 30, lr: 1.0e-02, train_loss: 2.1915, train_acc: 0.1756 test_loss: 2.2488, test_acc: 0.1520, best: 0.2101, time: 0:01:21
 Epoch: 31, lr: 1.0e-02, train_loss: 2.2253, train_acc: 0.1612 test_loss: 2.2076, test_acc: 0.1925, best: 0.2101, time: 0:01:21
 Epoch: 32, lr: 1.0e-02, train_loss: 2.2387, train_acc: 0.1546 test_loss: 2.2195, test_acc: 0.1604, best: 0.2101, time: 0:01:22
 Epoch: 33, lr: 1.0e-02, train_loss: 2.2176, train_acc: 0.1686 test_loss: 2.1943, test_acc: 0.1613, best: 0.2101, time: 0:01:22
 Epoch: 34, lr: 1.0e-02, train_loss: 2.2071, train_acc: 0.1608 test_loss: 2.2127, test_acc: 0.1690, best: 0.2101, time: 0:01:21
 Epoch: 35, lr: 1.0e-02, train_loss: 2.1932, train_acc: 0.1696 test_loss: 2.1455, test_acc: 0.1875, best: 0.2101, time: 0:01:21
 Epoch: 36, lr: 1.0e-02, train_loss: 2.2412, train_acc: 0.1446 test_loss: 2.2753, test_acc: 0.1355, best: 0.2101, time: 0:01:24
 Epoch: 37, lr: 1.0e-02, train_loss: 2.2811, train_acc: 0.1336 test_loss: 2.2935, test_acc: 0.1104, best: 0.2101, time: 0:01:21
 Epoch: 38, lr: 1.0e-02, train_loss: 2.2747, train_acc: 0.1364 test_loss: 2.2811, test_acc: 0.1395, best: 0.2101, time: 0:01:26
 Epoch: 39, lr: 1.0e-02, train_loss: 2.2551, train_acc: 0.1466 test_loss: 2.2909, test_acc: 0.1187, best: 0.2101, time: 0:01:29
 Epoch: 40, lr: 1.0e-02, train_loss: 2.2698, train_acc: 0.1326 test_loss: 2.3120, test_acc: 0.0991, best: 0.2101, time: 0:01:28
 Epoch: 41, lr: 1.0e-02, train_loss: 2.2767, train_acc: 0.1318 test_loss: 2.2745, test_acc: 0.1417, best: 0.2101, time: 0:01:22
 Epoch: 42, lr: 1.0e-02, train_loss: 2.2587, train_acc: 0.1448 test_loss: 2.2340, test_acc: 0.1756, best: 0.2101, time: 0:01:21
 Epoch: 43, lr: 1.0e-02, train_loss: 2.2534, train_acc: 0.1556 test_loss: 2.2106, test_acc: 0.2016, best: 0.2101, time: 0:01:20
 Epoch: 44, lr: 1.0e-02, train_loss: 2.2212, train_acc: 0.1634 test_loss: 2.1873, test_acc: 0.1938, best: 0.2101, time: 0:01:21
 Epoch: 45, lr: 1.0e-02, train_loss: 2.2202, train_acc: 0.1628 test_loss: 2.2003, test_acc: 0.1688, best: 0.2101, time: 0:01:20
 Epoch: 46, lr: 1.0e-02, train_loss: 2.2133, train_acc: 0.1536 test_loss: 2.2385, test_acc: 0.1713, best: 0.2101, time: 0:01:19
 Epoch: 47, lr: 1.0e-02, train_loss: 2.2628, train_acc: 0.1386 test_loss: 2.2760, test_acc: 0.1209, best: 0.2101, time: 0:01:20
 Epoch: 48, lr: 1.0e-02, train_loss: 2.2600, train_acc: 0.1406 test_loss: 2.2669, test_acc: 0.1573, best: 0.2101, time: 0:01:19
 Epoch: 49, lr: 1.0e-02, train_loss: 2.2468, train_acc: 0.1486 test_loss: 2.2320, test_acc: 0.1560, best: 0.2101, time: 0:01:23
 Epoch: 50, lr: 1.0e-02, train_loss: 2.2342, train_acc: 0.1560 test_loss: 2.2245, test_acc: 0.1534, best: 0.2101, time: 0:01:20
 Epoch: 51, lr: 1.0e-02, train_loss: 2.2214, train_acc: 0.1620 test_loss: 2.2379, test_acc: 0.1331, best: 0.2101, time: 0:01:23
 Epoch: 52, lr: 1.0e-02, train_loss: 2.2168, train_acc: 0.1498 test_loss: 2.2025, test_acc: 0.1804, best: 0.2101, time: 0:01:21
 Epoch: 53, lr: 1.0e-02, train_loss: 2.1985, train_acc: 0.1626 test_loss: 2.1707, test_acc: 0.1939, best: 0.2101, time: 0:01:23
 Epoch: 54, lr: 1.0e-02, train_loss: 2.1908, train_acc: 0.1608 test_loss: 2.1665, test_acc: 0.1452, best: 0.2101, time: 0:01:20
 Epoch: 55, lr: 1.0e-02, train_loss: 2.1750, train_acc: 0.1630 test_loss: 2.1878, test_acc: 0.1674, best: 0.2101, time: 0:01:23
 Epoch: 56, lr: 1.0e-02, train_loss: 2.1742, train_acc: 0.1712 test_loss: 2.1420, test_acc: 0.1876, best: 0.2101, time: 0:01:22
 Epoch: 57, lr: 1.0e-02, train_loss: 2.1578, train_acc: 0.1616 test_loss: 2.1342, test_acc: 0.1688, best: 0.2101, time: 0:01:20
 Epoch: 58, lr: 1.0e-02, train_loss: 2.1486, train_acc: 0.1798 test_loss: 2.1341, test_acc: 0.2057, best: 0.2101, time: 0:01:24
 Epoch: 59, lr: 1.0e-02, train_loss: 2.1446, train_acc: 0.1890 test_loss: 2.2198, test_acc: 0.1837, best: 0.2101, time: 0:01:21
 Epoch: 60, lr: 1.0e-02, train_loss: 2.1874, train_acc: 0.1640 test_loss: 2.1522, test_acc: 0.2072, best: 0.2101, time: 0:01:22
 Epoch: 61, lr: 1.0e-02, train_loss: 2.1500, train_acc: 0.1760 test_loss: 2.0792, test_acc: 0.2076, best: 0.2101, time: 0:01:21
 Epoch: 62, lr: 1.0e-02, train_loss: 2.1566, train_acc: 0.1806 test_loss: 2.2630, test_acc: 0.1388, best: 0.2101, time: 0:01:29
 Epoch: 63, lr: 1.0e-02, train_loss: 2.2138, train_acc: 0.1588 test_loss: 2.1619, test_acc: 0.1928, best: 0.2101, time: 0:01:20
 Epoch: 64, lr: 1.0e-02, train_loss: 2.1763, train_acc: 0.1670 test_loss: 2.1290, test_acc: 0.1886, best: 0.2101, time: 0:01:21
 Epoch: 65, lr: 1.0e-02, train_loss: 2.1590, train_acc: 0.1722 test_loss: 2.1551, test_acc: 0.1775, best: 0.2101, time: 0:01:20
 Epoch: 66, lr: 1.0e-02, train_loss: 2.1815, train_acc: 0.1650 test_loss: 2.2234, test_acc: 0.1557, best: 0.2101, time: 0:01:15
 Epoch: 67, lr: 1.0e-02, train_loss: 2.1897, train_acc: 0.1730 test_loss: 2.2016, test_acc: 0.1588, best: 0.2101, time: 0:01:19
 Epoch: 68, lr: 1.0e-02, train_loss: 2.1612, train_acc: 0.1790 test_loss: 2.1552, test_acc: 0.1857, best: 0.2101, time: 0:01:18
 Epoch: 69, lr: 1.0e-02, train_loss: 2.1597, train_acc: 0.1850 test_loss: 2.1849, test_acc: 0.1603, best: 0.2101, time: 0:01:19
 Epoch: 70, lr: 1.0e-02, train_loss: 2.1475, train_acc: 0.1772 test_loss: 2.1616, test_acc: 0.1886, best: 0.2101, time: 0:01:18
 Epoch: 71, lr: 1.0e-02, train_loss: 2.1460, train_acc: 0.1756 test_loss: 2.1301, test_acc: 0.1911, best: 0.2101, time: 0:01:17
 Epoch: 72, lr: 1.0e-02, train_loss: 2.1315, train_acc: 0.1850 test_loss: 2.1033, test_acc: 0.1949, best: 0.2101, time: 0:01:19
 Epoch: 73, lr: 1.0e-02, train_loss: 2.1376, train_acc: 0.1764 test_loss: 2.1899, test_acc: 0.1560, best: 0.2101, time: 0:01:19
 Epoch: 74, lr: 1.0e-02, train_loss: 2.1517, train_acc: 0.1792 test_loss: 2.1115, test_acc: 0.2008, best: 0.2101, time: 0:01:16
 Epoch: 75, lr: 1.0e-02, train_loss: 2.1304, train_acc: 0.1894 test_loss: 2.1152, test_acc: 0.2045, best: 0.2101, time: 0:01:16
 Epoch: 76, lr: 1.0e-02, train_loss: 2.1371, train_acc: 0.1892 test_loss: 2.1197, test_acc: 0.2014, best: 0.2101, time: 0:01:17
 Epoch: 77, lr: 1.0e-02, train_loss: 2.1224, train_acc: 0.1940 test_loss: 2.0753, test_acc: 0.2130, best: 0.2130, time: 0:01:18
 Epoch: 78, lr: 1.0e-02, train_loss: 2.1198, train_acc: 0.1904 test_loss: 2.0896, test_acc: 0.2129, best: 0.2130, time: 0:01:16
 Epoch: 79, lr: 1.0e-02, train_loss: 2.1200, train_acc: 0.1964 test_loss: 2.1242, test_acc: 0.2221, best: 0.2221, time: 0:01:17
 Epoch: 80, lr: 1.0e-02, train_loss: 2.1065, train_acc: 0.2084 test_loss: 2.0877, test_acc: 0.2089, best: 0.2221, time: 0:01:17
 Epoch: 81, lr: 1.0e-02, train_loss: 2.1355, train_acc: 0.1858 test_loss: 2.0293, test_acc: 0.2328, best: 0.2328, time: 0:01:19
 Epoch: 82, lr: 1.0e-02, train_loss: 2.1141, train_acc: 0.1860 test_loss: 2.0863, test_acc: 0.2141, best: 0.2328, time: 0:01:18
 Epoch: 83, lr: 1.0e-02, train_loss: 2.1074, train_acc: 0.1964 test_loss: 2.0567, test_acc: 0.2335, best: 0.2335, time: 0:01:16
 Epoch: 84, lr: 1.0e-02, train_loss: 2.1143, train_acc: 0.1870 test_loss: 2.1106, test_acc: 0.2000, best: 0.2335, time: 0:01:17
 Epoch: 85, lr: 1.0e-02, train_loss: 2.1117, train_acc: 0.1880 test_loss: 2.0933, test_acc: 0.2081, best: 0.2335, time: 0:01:18
 Epoch: 86, lr: 1.0e-02, train_loss: 2.1008, train_acc: 0.1938 test_loss: 2.2169, test_acc: 0.1613, best: 0.2335, time: 0:01:18
 Epoch: 87, lr: 1.0e-02, train_loss: 2.0938, train_acc: 0.1964 test_loss: 2.0947, test_acc: 0.2245, best: 0.2335, time: 0:01:17
 Epoch: 88, lr: 1.0e-02, train_loss: 2.0805, train_acc: 0.1980 test_loss: 2.1093, test_acc: 0.1910, best: 0.2335, time: 0:02:12
 Epoch: 89, lr: 1.0e-02, train_loss: 2.0692, train_acc: 0.2012 test_loss: 2.0977, test_acc: 0.2049, best: 0.2335, time: 0:01:17
 Epoch: 90, lr: 1.0e-02, train_loss: 2.0961, train_acc: 0.2002 test_loss: 2.0784, test_acc: 0.2256, best: 0.2335, time: 0:01:24
 Epoch: 91, lr: 1.0e-02, train_loss: 2.0658, train_acc: 0.1990 test_loss: 2.1344, test_acc: 0.2228, best: 0.2335, time: 0:01:21
 Epoch: 92, lr: 1.0e-02, train_loss: 2.0580, train_acc: 0.2044 test_loss: 2.0646, test_acc: 0.1836, best: 0.2335, time: 0:01:21
 Epoch: 93, lr: 1.0e-02, train_loss: 2.0834, train_acc: 0.1916 test_loss: 2.0955, test_acc: 0.1708, best: 0.2335, time: 0:01:22
 Epoch: 94, lr: 1.0e-02, train_loss: 2.0628, train_acc: 0.1868 test_loss: 2.0430, test_acc: 0.2015, best: 0.2335, time: 0:01:19
 Epoch: 95, lr: 1.0e-02, train_loss: 2.0455, train_acc: 0.1994 test_loss: 2.0403, test_acc: 0.2096, best: 0.2335, time: 0:01:19
 Epoch: 96, lr: 1.0e-02, train_loss: 2.0529, train_acc: 0.1982 test_loss: 2.1142, test_acc: 0.2016, best: 0.2335, time: 0:01:21
 Epoch: 97, lr: 1.0e-02, train_loss: 2.0519, train_acc: 0.1992 test_loss: 2.0610, test_acc: 0.2304, best: 0.2335, time: 0:01:21
 Epoch: 98, lr: 1.0e-02, train_loss: 2.0353, train_acc: 0.2070 test_loss: 2.0468, test_acc: 0.2343, best: 0.2343, time: 0:01:19
 Epoch: 99, lr: 1.0e-02, train_loss: 2.0250, train_acc: 0.2140 test_loss: 2.0394, test_acc: 0.2531, best: 0.2531, time: 0:01:23
 Epoch: 100, lr: 1.0e-02, train_loss: 2.0230, train_acc: 0.2142 test_loss: 2.0136, test_acc: 0.2306, best: 0.2531, time: 0:01:20
 Epoch: 101, lr: 1.0e-02, train_loss: 2.0078, train_acc: 0.2204 test_loss: 2.0763, test_acc: 0.2235, best: 0.2531, time: 0:01:21
 Epoch: 102, lr: 1.0e-02, train_loss: 2.0270, train_acc: 0.2062 test_loss: 1.9932, test_acc: 0.2150, best: 0.2531, time: 0:01:22
 Epoch: 103, lr: 1.0e-02, train_loss: 2.0081, train_acc: 0.2164 test_loss: 1.9771, test_acc: 0.2376, best: 0.2531, time: 0:01:19
 Epoch: 104, lr: 1.0e-02, train_loss: 2.0092, train_acc: 0.2278 test_loss: 2.0169, test_acc: 0.2370, best: 0.2531, time: 0:01:23
 Epoch: 105, lr: 1.0e-02, train_loss: 2.0237, train_acc: 0.2224 test_loss: 1.9930, test_acc: 0.2464, best: 0.2531, time: 0:01:23
 Epoch: 106, lr: 1.0e-02, train_loss: 2.0119, train_acc: 0.2230 test_loss: 2.0207, test_acc: 0.2364, best: 0.2531, time: 0:01:22
 Epoch: 107, lr: 1.0e-02, train_loss: 2.0033, train_acc: 0.2252 test_loss: 2.0404, test_acc: 0.2171, best: 0.2531, time: 0:01:27
 Epoch: 108, lr: 1.0e-02, train_loss: 2.0006, train_acc: 0.2200 test_loss: 1.9445, test_acc: 0.2276, best: 0.2531, time: 0:01:20
 Epoch: 109, lr: 1.0e-02, train_loss: 1.9985, train_acc: 0.2182 test_loss: 1.9557, test_acc: 0.2580, best: 0.2580, time: 0:01:23
 Epoch: 110, lr: 1.0e-02, train_loss: 2.0419, train_acc: 0.1994 test_loss: 2.1682, test_acc: 0.1625, best: 0.2580, time: 0:01:24
 Epoch: 111, lr: 1.0e-02, train_loss: 2.0388, train_acc: 0.2090 test_loss: 1.9785, test_acc: 0.2391, best: 0.2580, time: 0:01:26
 Epoch: 112, lr: 1.0e-02, train_loss: 2.0177, train_acc: 0.2228 test_loss: 1.9448, test_acc: 0.2720, best: 0.2720, time: 0:01:25
 Epoch: 113, lr: 1.0e-02, train_loss: 1.9918, train_acc: 0.2288 test_loss: 2.0252, test_acc: 0.2215, best: 0.2720, time: 0:01:21
 Epoch: 114, lr: 1.0e-02, train_loss: 2.0148, train_acc: 0.2238 test_loss: 2.0568, test_acc: 0.2349, best: 0.2720, time: 0:01:20
 Epoch: 115, lr: 1.0e-02, train_loss: 1.9992, train_acc: 0.2200 test_loss: 1.9900, test_acc: 0.2360, best: 0.2720, time: 0:01:22
 Epoch: 116, lr: 1.0e-02, train_loss: 2.0182, train_acc: 0.2104 test_loss: 1.9994, test_acc: 0.2557, best: 0.2720, time: 0:01:23
 Epoch: 117, lr: 1.0e-02, train_loss: 2.0078, train_acc: 0.2228 test_loss: 1.9235, test_acc: 0.2732, best: 0.2732, time: 0:01:21
 Epoch: 118, lr: 1.0e-02, train_loss: 2.0011, train_acc: 0.2364 test_loss: 1.9633, test_acc: 0.2652, best: 0.2732, time: 0:01:23
 Epoch: 119, lr: 1.0e-02, train_loss: 2.0013, train_acc: 0.2168 test_loss: 2.0076, test_acc: 0.2695, best: 0.2732, time: 0:01:21
 Epoch: 120, lr: 1.0e-02, train_loss: 1.9908, train_acc: 0.2342 test_loss: 2.0234, test_acc: 0.2434, best: 0.2732, time: 0:01:21
 Epoch: 121, lr: 1.0e-02, train_loss: 1.9861, train_acc: 0.2290 test_loss: 2.0096, test_acc: 0.2376, best: 0.2732, time: 0:01:19
 Epoch: 122, lr: 1.0e-02, train_loss: 1.9639, train_acc: 0.2470 test_loss: 1.9981, test_acc: 0.2394, best: 0.2732, time: 0:01:19
 Epoch: 123, lr: 1.0e-02, train_loss: 1.9828, train_acc: 0.2284 test_loss: 2.0061, test_acc: 0.2289, best: 0.2732, time: 0:01:20
 Epoch: 124, lr: 1.0e-02, train_loss: 1.9495, train_acc: 0.2420 test_loss: 1.9701, test_acc: 0.2724, best: 0.2732, time: 0:01:24
 Epoch: 125, lr: 1.0e-02, train_loss: 1.9714, train_acc: 0.2376 test_loss: 1.9666, test_acc: 0.2465, best: 0.2732, time: 0:01:21
 Epoch: 126, lr: 1.0e-02, train_loss: 1.9640, train_acc: 0.2366 test_loss: 1.9432, test_acc: 0.2616, best: 0.2732, time: 0:01:25
 Epoch: 127, lr: 1.0e-02, train_loss: 1.9640, train_acc: 0.2392 test_loss: 1.9210, test_acc: 0.2841, best: 0.2841, time: 0:01:23
 Epoch: 128, lr: 1.0e-02, train_loss: 1.9658, train_acc: 0.2422 test_loss: 2.0135, test_acc: 0.2594, best: 0.2841, time: 0:01:22
 Epoch: 129, lr: 1.0e-02, train_loss: 1.9501, train_acc: 0.2410 test_loss: 1.9658, test_acc: 0.2392, best: 0.2841, time: 0:01:20
 Epoch: 130, lr: 1.0e-02, train_loss: 1.9424, train_acc: 0.2380 test_loss: 1.8786, test_acc: 0.2516, best: 0.2841, time: 0:01:22
 Epoch: 131, lr: 1.0e-02, train_loss: 1.9368, train_acc: 0.2418 test_loss: 1.9571, test_acc: 0.2755, best: 0.2841, time: 0:01:21
 Epoch: 132, lr: 1.0e-02, train_loss: 1.9460, train_acc: 0.2416 test_loss: 1.8963, test_acc: 0.2626, best: 0.2841, time: 0:01:22
 Epoch: 133, lr: 1.0e-02, train_loss: 1.9414, train_acc: 0.2484 test_loss: 1.8701, test_acc: 0.2480, best: 0.2841, time: 0:01:22
 Epoch: 134, lr: 1.0e-02, train_loss: 1.9414, train_acc: 0.2502 test_loss: 1.9691, test_acc: 0.2449, best: 0.2841, time: 0:01:21
 Epoch: 135, lr: 1.0e-02, train_loss: 1.9567, train_acc: 0.2432 test_loss: 1.9278, test_acc: 0.2779, best: 0.2841, time: 0:01:22
 Epoch: 136, lr: 1.0e-02, train_loss: 1.9581, train_acc: 0.2428 test_loss: 1.9200, test_acc: 0.2441, best: 0.2841, time: 0:01:21
 Epoch: 137, lr: 1.0e-02, train_loss: 1.9514, train_acc: 0.2410 test_loss: 1.8918, test_acc: 0.2756, best: 0.2841, time: 0:01:22
 Epoch: 138, lr: 1.0e-02, train_loss: 1.9560, train_acc: 0.2488 test_loss: 1.9343, test_acc: 0.2699, best: 0.2841, time: 0:01:28
 Epoch: 139, lr: 1.0e-02, train_loss: 1.9352, train_acc: 0.2482 test_loss: 1.9727, test_acc: 0.2617, best: 0.2841, time: 0:01:22
 Epoch: 140, lr: 1.0e-02, train_loss: 1.9337, train_acc: 0.2494 test_loss: 1.9959, test_acc: 0.2539, best: 0.2841, time: 0:01:20
 Epoch: 141, lr: 1.0e-02, train_loss: 1.9364, train_acc: 0.2450 test_loss: 1.9347, test_acc: 0.2737, best: 0.2841, time: 0:01:18
 Epoch: 142, lr: 1.0e-02, train_loss: 1.9328, train_acc: 0.2556 test_loss: 1.9190, test_acc: 0.2666, best: 0.2841, time: 0:01:27
 Epoch: 143, lr: 1.0e-02, train_loss: 1.9350, train_acc: 0.2468 test_loss: 1.8982, test_acc: 0.2981, best: 0.2981, time: 0:01:21
 Epoch: 144, lr: 1.0e-02, train_loss: 1.9293, train_acc: 0.2596 test_loss: 1.9453, test_acc: 0.2876, best: 0.2981, time: 0:01:22
 Epoch: 145, lr: 1.0e-02, train_loss: 1.9243, train_acc: 0.2486 test_loss: 1.9676, test_acc: 0.2395, best: 0.2981, time: 0:01:32
 Epoch: 146, lr: 1.0e-02, train_loss: 1.9271, train_acc: 0.2520 test_loss: 1.9630, test_acc: 0.2884, best: 0.2981, time: 0:01:25
 Epoch: 147, lr: 1.0e-02, train_loss: 1.9103, train_acc: 0.2562 test_loss: 1.9247, test_acc: 0.3130, best: 0.3130, time: 0:01:29
 Epoch: 148, lr: 1.0e-02, train_loss: 1.9142, train_acc: 0.2536 test_loss: 1.9090, test_acc: 0.2691, best: 0.3130, time: 0:01:20
 Epoch: 149, lr: 1.0e-02, train_loss: 1.9209, train_acc: 0.2508 test_loss: 1.9422, test_acc: 0.3086, best: 0.3130, time: 0:01:23
 Epoch: 150, lr: 1.0e-02, train_loss: 1.9463, train_acc: 0.2500 test_loss: 2.1157, test_acc: 0.1580, best: 0.3130, time: 0:01:52
 Epoch: 151, lr: 1.0e-02, train_loss: 2.0261, train_acc: 0.2132 test_loss: 1.9966, test_acc: 0.2224, best: 0.3130, time: 0:01:33
 Epoch: 152, lr: 1.0e-02, train_loss: 1.9603, train_acc: 0.2400 test_loss: 1.9729, test_acc: 0.2635, best: 0.3130, time: 0:01:19
 Epoch: 153, lr: 1.0e-02, train_loss: 1.9437, train_acc: 0.2528 test_loss: 1.9156, test_acc: 0.2806, best: 0.3130, time: 0:01:20
 Epoch: 154, lr: 1.0e-02, train_loss: 1.9355, train_acc: 0.2494 test_loss: 1.9782, test_acc: 0.2484, best: 0.3130, time: 0:01:22
 Epoch: 155, lr: 1.0e-02, train_loss: 1.9297, train_acc: 0.2534 test_loss: 1.9495, test_acc: 0.2600, best: 0.3130, time: 0:01:21
 Epoch: 156, lr: 1.0e-02, train_loss: 1.9250, train_acc: 0.2536 test_loss: 1.8905, test_acc: 0.2661, best: 0.3130, time: 0:01:26
 Epoch: 157, lr: 1.0e-02, train_loss: 1.9042, train_acc: 0.2614 test_loss: 1.8752, test_acc: 0.2964, best: 0.3130, time: 0:01:20
 Epoch: 158, lr: 1.0e-02, train_loss: 1.9150, train_acc: 0.2600 test_loss: 1.9214, test_acc: 0.2484, best: 0.3130, time: 0:01:15
 Epoch: 159, lr: 1.0e-02, train_loss: 1.9348, train_acc: 0.2444 test_loss: 1.9000, test_acc: 0.2665, best: 0.3130, time: 0:01:23
 Epoch: 160, lr: 1.0e-02, train_loss: 1.9110, train_acc: 0.2518 test_loss: 1.9546, test_acc: 0.2629, best: 0.3130, time: 0:01:21
 Epoch: 161, lr: 1.0e-02, train_loss: 1.9048, train_acc: 0.2734 test_loss: 1.9262, test_acc: 0.2898, best: 0.3130, time: 0:01:20
 Epoch: 162, lr: 1.0e-02, train_loss: 1.9077, train_acc: 0.2616 test_loss: 1.8657, test_acc: 0.3106, best: 0.3130, time: 0:01:19
 Epoch: 163, lr: 1.0e-02, train_loss: 1.9024, train_acc: 0.2632 test_loss: 1.8665, test_acc: 0.2860, best: 0.3130, time: 0:01:21
 Epoch: 164, lr: 1.0e-02, train_loss: 1.8956, train_acc: 0.2726 test_loss: 1.8714, test_acc: 0.3079, best: 0.3130, time: 0:01:21
 Epoch: 165, lr: 1.0e-02, train_loss: 1.9295, train_acc: 0.2640 test_loss: 1.8545, test_acc: 0.3069, best: 0.3130, time: 0:01:20
 Epoch: 166, lr: 1.0e-02, train_loss: 1.9057, train_acc: 0.2604 test_loss: 1.8591, test_acc: 0.3084, best: 0.3130, time: 0:01:22
 Epoch: 167, lr: 1.0e-02, train_loss: 1.9039, train_acc: 0.2712 test_loss: 1.8170, test_acc: 0.3121, best: 0.3130, time: 0:01:22
 Epoch: 168, lr: 1.0e-02, train_loss: 1.9306, train_acc: 0.2600 test_loss: 1.8967, test_acc: 0.2948, best: 0.3130, time: 0:01:25
 Epoch: 169, lr: 1.0e-02, train_loss: 1.9109, train_acc: 0.2656 test_loss: 1.8362, test_acc: 0.2941, best: 0.3130, time: 0:01:23
 Epoch: 170, lr: 1.0e-02, train_loss: 1.9220, train_acc: 0.2638 test_loss: 1.8225, test_acc: 0.3009, best: 0.3130, time: 0:01:21
 Epoch: 171, lr: 1.0e-02, train_loss: 1.9103, train_acc: 0.2710 test_loss: 1.9038, test_acc: 0.3137, best: 0.3137, time: 0:01:23
 Epoch: 172, lr: 1.0e-02, train_loss: 1.9200, train_acc: 0.2612 test_loss: 1.8627, test_acc: 0.3124, best: 0.3137, time: 0:01:19
 Epoch: 173, lr: 1.0e-02, train_loss: 1.9000, train_acc: 0.2712 test_loss: 1.8180, test_acc: 0.3182, best: 0.3182, time: 0:01:24
 Epoch: 174, lr: 1.0e-02, train_loss: 1.9104, train_acc: 0.2654 test_loss: 1.8753, test_acc: 0.2944, best: 0.3182, time: 0:01:21
 Epoch: 175, lr: 1.0e-02, train_loss: 1.8994, train_acc: 0.2594 test_loss: 1.8449, test_acc: 0.3026, best: 0.3182, time: 0:01:21
 Epoch: 176, lr: 1.0e-02, train_loss: 1.9138, train_acc: 0.2634 test_loss: 1.7982, test_acc: 0.3005, best: 0.3182, time: 0:01:19
 Epoch: 177, lr: 1.0e-02, train_loss: 1.8812, train_acc: 0.2706 test_loss: 1.8416, test_acc: 0.2913, best: 0.3182, time: 0:01:20
 Epoch: 178, lr: 1.0e-02, train_loss: 1.8860, train_acc: 0.2640 test_loss: 1.8029, test_acc: 0.2933, best: 0.3182, time: 0:01:19
 Epoch: 179, lr: 1.0e-02, train_loss: 1.8810, train_acc: 0.2688 test_loss: 1.8109, test_acc: 0.3035, best: 0.3182, time: 0:01:21
 Epoch: 180, lr: 2.0e-03, train_loss: 1.8513, train_acc: 0.2764 test_loss: 1.8134, test_acc: 0.3264, best: 0.3264, time: 0:01:20
 Epoch: 181, lr: 2.0e-03, train_loss: 1.8500, train_acc: 0.2768 test_loss: 1.8565, test_acc: 0.3045, best: 0.3264, time: 0:01:24
 Epoch: 182, lr: 2.0e-03, train_loss: 1.8615, train_acc: 0.2710 test_loss: 1.8347, test_acc: 0.3066, best: 0.3264, time: 0:01:22
 Epoch: 183, lr: 2.0e-03, train_loss: 1.8509, train_acc: 0.2726 test_loss: 1.8242, test_acc: 0.3177, best: 0.3264, time: 0:01:20
 Epoch: 184, lr: 2.0e-03, train_loss: 1.8543, train_acc: 0.2728 test_loss: 1.7972, test_acc: 0.3174, best: 0.3264, time: 0:01:18
 Epoch: 185, lr: 2.0e-03, train_loss: 1.8429, train_acc: 0.2878 test_loss: 1.7963, test_acc: 0.3285, best: 0.3285, time: 0:01:24
 Epoch: 186, lr: 2.0e-03, train_loss: 1.8479, train_acc: 0.2842 test_loss: 1.7753, test_acc: 0.3192, best: 0.3285, time: 0:01:24
 Epoch: 187, lr: 2.0e-03, train_loss: 1.8289, train_acc: 0.2920 test_loss: 1.7995, test_acc: 0.3236, best: 0.3285, time: 0:01:20
 Epoch: 188, lr: 2.0e-03, train_loss: 1.8570, train_acc: 0.2746 test_loss: 1.7835, test_acc: 0.3251, best: 0.3285, time: 0:01:19
 Epoch: 189, lr: 2.0e-03, train_loss: 1.8344, train_acc: 0.2898 test_loss: 1.7796, test_acc: 0.3232, best: 0.3285, time: 0:01:21
 Epoch: 190, lr: 2.0e-03, train_loss: 1.8568, train_acc: 0.2796 test_loss: 1.8379, test_acc: 0.2971, best: 0.3285, time: 0:01:22
 Epoch: 191, lr: 2.0e-03, train_loss: 1.8316, train_acc: 0.2928 test_loss: 1.8006, test_acc: 0.3134, best: 0.3285, time: 0:01:23
 Epoch: 192, lr: 2.0e-03, train_loss: 1.8438, train_acc: 0.2766 test_loss: 1.8172, test_acc: 0.3068, best: 0.3285, time: 0:01:18
 Epoch: 193, lr: 2.0e-03, train_loss: 1.8550, train_acc: 0.2830 test_loss: 1.8333, test_acc: 0.2998, best: 0.3285, time: 0:01:22
 Epoch: 194, lr: 2.0e-03, train_loss: 1.8566, train_acc: 0.2766 test_loss: 1.8135, test_acc: 0.3025, best: 0.3285, time: 0:01:21
 Epoch: 195, lr: 2.0e-03, train_loss: 1.8371, train_acc: 0.2924 test_loss: 1.8414, test_acc: 0.3109, best: 0.3285, time: 0:01:16
 Epoch: 196, lr: 2.0e-03, train_loss: 1.8230, train_acc: 0.2912 test_loss: 1.7596, test_acc: 0.3260, best: 0.3285, time: 0:01:22
 Epoch: 197, lr: 2.0e-03, train_loss: 1.8467, train_acc: 0.2730 test_loss: 1.8160, test_acc: 0.3050, best: 0.3285, time: 0:01:19
 Epoch: 198, lr: 2.0e-03, train_loss: 1.8257, train_acc: 0.2906 test_loss: 1.7865, test_acc: 0.3266, best: 0.3285, time: 0:01:24
 Epoch: 199, lr: 2.0e-03, train_loss: 1.8424, train_acc: 0.2846 test_loss: 1.7995, test_acc: 0.3043, best: 0.3285, time: 0:01:22
 Epoch: 200, lr: 2.0e-03, train_loss: 1.8328, train_acc: 0.2950 test_loss: 1.7794, test_acc: 0.3142, best: 0.3285, time: 0:01:24
 Epoch: 201, lr: 2.0e-03, train_loss: 1.8370, train_acc: 0.2826 test_loss: 1.7774, test_acc: 0.3240, best: 0.3285, time: 0:01:23
 Epoch: 202, lr: 2.0e-03, train_loss: 1.8427, train_acc: 0.2862 test_loss: 1.8226, test_acc: 0.3167, best: 0.3285, time: 0:01:20
 Epoch: 203, lr: 2.0e-03, train_loss: 1.8491, train_acc: 0.2836 test_loss: 1.8161, test_acc: 0.3071, best: 0.3285, time: 0:01:18
 Epoch: 204, lr: 2.0e-03, train_loss: 1.8198, train_acc: 0.2862 test_loss: 1.7667, test_acc: 0.3392, best: 0.3392, time: 0:01:18
 Epoch: 205, lr: 2.0e-03, train_loss: 1.8357, train_acc: 0.2872 test_loss: 1.7884, test_acc: 0.3265, best: 0.3392, time: 0:01:21
 Epoch: 206, lr: 2.0e-03, train_loss: 1.8473, train_acc: 0.2828 test_loss: 1.7519, test_acc: 0.3352, best: 0.3392, time: 0:01:20
 Epoch: 207, lr: 2.0e-03, train_loss: 1.8155, train_acc: 0.2936 test_loss: 1.7572, test_acc: 0.3281, best: 0.3392, time: 0:01:21
 Epoch: 208, lr: 2.0e-03, train_loss: 1.8316, train_acc: 0.2826 test_loss: 1.7787, test_acc: 0.3271, best: 0.3392, time: 0:01:18
 Epoch: 209, lr: 2.0e-03, train_loss: 1.8403, train_acc: 0.2884 test_loss: 1.7637, test_acc: 0.3319, best: 0.3392, time: 0:01:22
 Epoch: 210, lr: 2.0e-03, train_loss: 1.8296, train_acc: 0.2928 test_loss: 1.7748, test_acc: 0.3271, best: 0.3392, time: 0:01:16
 Epoch: 211, lr: 2.0e-03, train_loss: 1.8384, train_acc: 0.2826 test_loss: 1.7716, test_acc: 0.3395, best: 0.3395, time: 0:01:21
 Epoch: 212, lr: 2.0e-03, train_loss: 1.8276, train_acc: 0.2872 test_loss: 1.7546, test_acc: 0.3344, best: 0.3395, time: 0:01:22
 Epoch: 213, lr: 2.0e-03, train_loss: 1.8377, train_acc: 0.2824 test_loss: 1.7528, test_acc: 0.3357, best: 0.3395, time: 0:01:20
 Epoch: 214, lr: 2.0e-03, train_loss: 1.8199, train_acc: 0.2942 test_loss: 1.7553, test_acc: 0.3339, best: 0.3395, time: 0:01:24
 Epoch: 215, lr: 2.0e-03, train_loss: 1.8244, train_acc: 0.2918 test_loss: 1.7826, test_acc: 0.3241, best: 0.3395, time: 0:01:20
 Epoch: 216, lr: 2.0e-03, train_loss: 1.8198, train_acc: 0.2888 test_loss: 1.7501, test_acc: 0.3205, best: 0.3395, time: 0:01:21
 Epoch: 217, lr: 2.0e-03, train_loss: 1.7989, train_acc: 0.3066 test_loss: 1.7599, test_acc: 0.3287, best: 0.3395, time: 0:01:16
 Epoch: 218, lr: 2.0e-03, train_loss: 1.8434, train_acc: 0.2812 test_loss: 1.7617, test_acc: 0.3416, best: 0.3416, time: 0:01:20
 Epoch: 219, lr: 2.0e-03, train_loss: 1.8244, train_acc: 0.2946 test_loss: 1.7384, test_acc: 0.3448, best: 0.3448, time: 0:01:21
 Epoch: 220, lr: 2.0e-03, train_loss: 1.8209, train_acc: 0.2854 test_loss: 1.7227, test_acc: 0.3470, best: 0.3470, time: 0:01:21
 Epoch: 221, lr: 2.0e-03, train_loss: 1.8397, train_acc: 0.2968 test_loss: 1.7503, test_acc: 0.3386, best: 0.3470, time: 0:01:21
 Epoch: 222, lr: 2.0e-03, train_loss: 1.8356, train_acc: 0.2844 test_loss: 1.7536, test_acc: 0.3277, best: 0.3470, time: 0:01:21
 Epoch: 223, lr: 2.0e-03, train_loss: 1.8387, train_acc: 0.2882 test_loss: 1.7444, test_acc: 0.3365, best: 0.3470, time: 0:01:22
 Epoch: 224, lr: 2.0e-03, train_loss: 1.8298, train_acc: 0.2884 test_loss: 1.7585, test_acc: 0.3169, best: 0.3470, time: 0:01:20
 Epoch: 225, lr: 2.0e-03, train_loss: 1.8209, train_acc: 0.2916 test_loss: 1.7978, test_acc: 0.3249, best: 0.3470, time: 0:01:21
 Epoch: 226, lr: 2.0e-03, train_loss: 1.8343, train_acc: 0.2906 test_loss: 1.7560, test_acc: 0.3350, best: 0.3470, time: 0:01:19
 Epoch: 227, lr: 2.0e-03, train_loss: 1.8280, train_acc: 0.2964 test_loss: 1.7689, test_acc: 0.3249, best: 0.3470, time: 0:01:23
 Epoch: 228, lr: 2.0e-03, train_loss: 1.8251, train_acc: 0.2976 test_loss: 1.7694, test_acc: 0.3211, best: 0.3470, time: 0:01:19
 Epoch: 229, lr: 2.0e-03, train_loss: 1.8277, train_acc: 0.2980 test_loss: 1.7998, test_acc: 0.3340, best: 0.3470, time: 0:01:20
 Epoch: 230, lr: 2.0e-03, train_loss: 1.8235, train_acc: 0.2858 test_loss: 1.7479, test_acc: 0.3430, best: 0.3470, time: 0:01:18
 Epoch: 231, lr: 2.0e-03, train_loss: 1.8200, train_acc: 0.2944 test_loss: 1.7472, test_acc: 0.3387, best: 0.3470, time: 0:01:20
 Epoch: 232, lr: 2.0e-03, train_loss: 1.8207, train_acc: 0.2994 test_loss: 1.7902, test_acc: 0.3405, best: 0.3470, time: 0:01:15
 Epoch: 233, lr: 2.0e-03, train_loss: 1.8322, train_acc: 0.2934 test_loss: 1.7419, test_acc: 0.3441, best: 0.3470, time: 0:01:20
 Epoch: 234, lr: 2.0e-03, train_loss: 1.8247, train_acc: 0.2958 test_loss: 1.7450, test_acc: 0.3590, best: 0.3590, time: 0:01:19
 Epoch: 235, lr: 2.0e-03, train_loss: 1.8211, train_acc: 0.3010 test_loss: 1.7558, test_acc: 0.3292, best: 0.3590, time: 0:01:21
 Epoch: 236, lr: 2.0e-03, train_loss: 1.8136, train_acc: 0.2912 test_loss: 1.7419, test_acc: 0.3443, best: 0.3590, time: 0:01:18
 Epoch: 237, lr: 2.0e-03, train_loss: 1.8436, train_acc: 0.2814 test_loss: 1.7306, test_acc: 0.3350, best: 0.3590, time: 0:01:24
 Epoch: 238, lr: 2.0e-03, train_loss: 1.8292, train_acc: 0.2824 test_loss: 1.7943, test_acc: 0.3244, best: 0.3590, time: 0:01:22
 Epoch: 239, lr: 2.0e-03, train_loss: 1.8212, train_acc: 0.2912 test_loss: 1.7766, test_acc: 0.3307, best: 0.3590, time: 0:01:21
 Epoch: 240, lr: 4.0e-04, train_loss: 1.8137, train_acc: 0.3080 test_loss: 1.7288, test_acc: 0.3505, best: 0.3590, time: 0:01:21
 Epoch: 241, lr: 4.0e-04, train_loss: 1.8085, train_acc: 0.3042 test_loss: 1.7259, test_acc: 0.3397, best: 0.3590, time: 0:01:23
 Epoch: 242, lr: 4.0e-04, train_loss: 1.8059, train_acc: 0.2990 test_loss: 1.7187, test_acc: 0.3539, best: 0.3590, time: 0:01:20
 Epoch: 243, lr: 4.0e-04, train_loss: 1.8078, train_acc: 0.2956 test_loss: 1.7570, test_acc: 0.3499, best: 0.3590, time: 0:01:22
 Epoch: 244, lr: 4.0e-04, train_loss: 1.8005, train_acc: 0.2986 test_loss: 1.7256, test_acc: 0.3494, best: 0.3590, time: 0:01:25
 Epoch: 245, lr: 4.0e-04, train_loss: 1.8202, train_acc: 0.2950 test_loss: 1.7315, test_acc: 0.3484, best: 0.3590, time: 0:01:19
 Epoch: 246, lr: 4.0e-04, train_loss: 1.8136, train_acc: 0.3008 test_loss: 1.7162, test_acc: 0.3449, best: 0.3590, time: 0:01:26
 Epoch: 247, lr: 4.0e-04, train_loss: 1.7881, train_acc: 0.2980 test_loss: 1.7393, test_acc: 0.3416, best: 0.3590, time: 0:01:20
 Epoch: 248, lr: 4.0e-04, train_loss: 1.7812, train_acc: 0.3038 test_loss: 1.7093, test_acc: 0.3459, best: 0.3590, time: 0:01:22
 Epoch: 249, lr: 4.0e-04, train_loss: 1.7933, train_acc: 0.3032 test_loss: 1.7259, test_acc: 0.3486, best: 0.3590, time: 0:01:20
 Epoch: 250, lr: 4.0e-04, train_loss: 1.8001, train_acc: 0.3094 test_loss: 1.7549, test_acc: 0.3505, best: 0.3590, time: 0:01:20
 Epoch: 251, lr: 4.0e-04, train_loss: 1.7959, train_acc: 0.2946 test_loss: 1.7304, test_acc: 0.3500, best: 0.3590, time: 0:01:24
 Epoch: 252, lr: 4.0e-04, train_loss: 1.8124, train_acc: 0.2952 test_loss: 1.7190, test_acc: 0.3499, best: 0.3590, time: 0:01:23
 Epoch: 253, lr: 4.0e-04, train_loss: 1.7974, train_acc: 0.3140 test_loss: 1.7123, test_acc: 0.3504, best: 0.3590, time: 0:01:20
 Epoch: 254, lr: 4.0e-04, train_loss: 1.7780, train_acc: 0.3050 test_loss: 1.7443, test_acc: 0.3330, best: 0.3590, time: 0:01:27
 Epoch: 255, lr: 4.0e-04, train_loss: 1.7968, train_acc: 0.3034 test_loss: 1.7295, test_acc: 0.3590, best: 0.3590, time: 0:01:21
 Epoch: 256, lr: 4.0e-04, train_loss: 1.7841, train_acc: 0.2998 test_loss: 1.7045, test_acc: 0.3570, best: 0.3590, time: 0:01:20
 Epoch: 257, lr: 4.0e-04, train_loss: 1.7932, train_acc: 0.3002 test_loss: 1.7198, test_acc: 0.3650, best: 0.3650, time: 0:01:22
 Epoch: 258, lr: 4.0e-04, train_loss: 1.8122, train_acc: 0.2892 test_loss: 1.7310, test_acc: 0.3598, best: 0.3650, time: 0:01:20
 Epoch: 259, lr: 4.0e-04, train_loss: 1.7927, train_acc: 0.3056 test_loss: 1.7417, test_acc: 0.3448, best: 0.3650, time: 0:01:21
 Epoch: 260, lr: 4.0e-04, train_loss: 1.7972, train_acc: 0.3012 test_loss: 1.7228, test_acc: 0.3480, best: 0.3650, time: 0:01:20
 Epoch: 261, lr: 4.0e-04, train_loss: 1.8049, train_acc: 0.3024 test_loss: 1.7347, test_acc: 0.3499, best: 0.3650, time: 0:01:28
 Epoch: 262, lr: 4.0e-04, train_loss: 1.7838, train_acc: 0.3094 test_loss: 1.7142, test_acc: 0.3479, best: 0.3650, time: 0:01:20
 Epoch: 263, lr: 4.0e-04, train_loss: 1.7891, train_acc: 0.3084 test_loss: 1.7532, test_acc: 0.3474, best: 0.3650, time: 0:01:20
 Epoch: 264, lr: 4.0e-04, train_loss: 1.7829, train_acc: 0.3126 test_loss: 1.7410, test_acc: 0.3454, best: 0.3650, time: 0:01:21
 Epoch: 265, lr: 4.0e-04, train_loss: 1.8084, train_acc: 0.3046 test_loss: 1.7328, test_acc: 0.3414, best: 0.3650, time: 0:01:20
 Epoch: 266, lr: 4.0e-04, train_loss: 1.8153, train_acc: 0.2946 test_loss: 1.7247, test_acc: 0.3526, best: 0.3650, time: 0:01:22
 Epoch: 267, lr: 4.0e-04, train_loss: 1.7828, train_acc: 0.3110 test_loss: 1.7341, test_acc: 0.3451, best: 0.3650, time: 0:01:19
 Epoch: 268, lr: 4.0e-04, train_loss: 1.8086, train_acc: 0.2960 test_loss: 1.7170, test_acc: 0.3598, best: 0.3650, time: 0:01:22
 Epoch: 269, lr: 4.0e-04, train_loss: 1.7942, train_acc: 0.3060 test_loss: 1.7633, test_acc: 0.3455, best: 0.3650, time: 0:01:18
 Epoch: 270, lr: 8.0e-05, train_loss: 1.8013, train_acc: 0.3056 test_loss: 1.7423, test_acc: 0.3533, best: 0.3650, time: 0:01:21
 Epoch: 271, lr: 8.0e-05, train_loss: 1.7882, train_acc: 0.3058 test_loss: 1.7387, test_acc: 0.3616, best: 0.3650, time: 0:01:21
 Epoch: 272, lr: 8.0e-05, train_loss: 1.7974, train_acc: 0.3026 test_loss: 1.7548, test_acc: 0.3503, best: 0.3650, time: 0:01:21
 Epoch: 273, lr: 8.0e-05, train_loss: 1.7896, train_acc: 0.2964 test_loss: 1.7183, test_acc: 0.3535, best: 0.3650, time: 0:01:21
 Epoch: 274, lr: 8.0e-05, train_loss: 1.7968, train_acc: 0.3050 test_loss: 1.7101, test_acc: 0.3643, best: 0.3650, time: 0:01:23
 Epoch: 275, lr: 8.0e-05, train_loss: 1.7852, train_acc: 0.3120 test_loss: 1.7369, test_acc: 0.3569, best: 0.3650, time: 0:01:20
 Epoch: 276, lr: 8.0e-05, train_loss: 1.7922, train_acc: 0.3002 test_loss: 1.7420, test_acc: 0.3489, best: 0.3650, time: 0:01:20
 Epoch: 277, lr: 8.0e-05, train_loss: 1.7840, train_acc: 0.3170 test_loss: 1.7304, test_acc: 0.3446, best: 0.3650, time: 0:01:19
 Epoch: 278, lr: 8.0e-05, train_loss: 1.7949, train_acc: 0.3028 test_loss: 1.7109, test_acc: 0.3568, best: 0.3650, time: 0:01:20
 Epoch: 279, lr: 8.0e-05, train_loss: 1.7877, train_acc: 0.3108 test_loss: 1.7368, test_acc: 0.3616, best: 0.3650, time: 0:01:22
 Epoch: 280, lr: 8.0e-05, train_loss: 1.7870, train_acc: 0.3014 test_loss: 1.7426, test_acc: 0.3565, best: 0.3650, time: 0:01:20
 Epoch: 281, lr: 8.0e-05, train_loss: 1.7940, train_acc: 0.3072 test_loss: 1.7383, test_acc: 0.3593, best: 0.3650, time: 0:01:22
 Epoch: 282, lr: 8.0e-05, train_loss: 1.7942, train_acc: 0.2952 test_loss: 1.7199, test_acc: 0.3598, best: 0.3650, time: 0:01:22
 Epoch: 283, lr: 8.0e-05, train_loss: 1.8005, train_acc: 0.2984 test_loss: 1.7130, test_acc: 0.3629, best: 0.3650, time: 0:01:20
 Epoch: 284, lr: 8.0e-05, train_loss: 1.7793, train_acc: 0.3016 test_loss: 1.7342, test_acc: 0.3500, best: 0.3650, time: 0:01:20
 Epoch: 285, lr: 8.0e-05, train_loss: 1.8016, train_acc: 0.2964 test_loss: 1.7043, test_acc: 0.3485, best: 0.3650, time: 0:01:19
 Epoch: 286, lr: 8.0e-05, train_loss: 1.7988, train_acc: 0.2962 test_loss: 1.7312, test_acc: 0.3536, best: 0.3650, time: 0:01:24
 Epoch: 287, lr: 8.0e-05, train_loss: 1.7923, train_acc: 0.3008 test_loss: 1.7542, test_acc: 0.3504, best: 0.3650, time: 0:01:20
 Epoch: 288, lr: 8.0e-05, train_loss: 1.7886, train_acc: 0.3050 test_loss: 1.7196, test_acc: 0.3600, best: 0.3650, time: 0:01:22
 Epoch: 289, lr: 8.0e-05, train_loss: 1.8106, train_acc: 0.2952 test_loss: 1.7337, test_acc: 0.3569, best: 0.3650, time: 0:01:20
 Epoch: 290, lr: 8.0e-05, train_loss: 1.7997, train_acc: 0.3066 test_loss: 1.7210, test_acc: 0.3549, best: 0.3650, time: 0:01:19
 Epoch: 291, lr: 8.0e-05, train_loss: 1.8047, train_acc: 0.3056 test_loss: 1.7289, test_acc: 0.3590, best: 0.3650, time: 0:01:20
 Epoch: 292, lr: 8.0e-05, train_loss: 1.7953, train_acc: 0.3080 test_loss: 1.7235, test_acc: 0.3635, best: 0.3650, time: 0:01:20
 Epoch: 293, lr: 8.0e-05, train_loss: 1.7828, train_acc: 0.3058 test_loss: 1.7223, test_acc: 0.3505, best: 0.3650, time: 0:01:19
 Epoch: 294, lr: 8.0e-05, train_loss: 1.7988, train_acc: 0.3062 test_loss: 1.7498, test_acc: 0.3451, best: 0.3650, time: 0:01:23
 Epoch: 295, lr: 8.0e-05, train_loss: 1.7985, train_acc: 0.3106 test_loss: 1.7243, test_acc: 0.3574, best: 0.3650, time: 0:01:21
 Epoch: 296, lr: 8.0e-05, train_loss: 1.7738, train_acc: 0.3066 test_loss: 1.7321, test_acc: 0.3546, best: 0.3650, time: 0:01:19
 Epoch: 297, lr: 8.0e-05, train_loss: 1.7819, train_acc: 0.3134 test_loss: 1.7027, test_acc: 0.3555, best: 0.3650, time: 0:01:21
 Epoch: 298, lr: 8.0e-05, train_loss: 1.8079, train_acc: 0.3022 test_loss: 1.7607, test_acc: 0.3409, best: 0.3650, time: 0:01:22
 Epoch: 299, lr: 8.0e-05, train_loss: 1.7912, train_acc: 0.2998 test_loss: 1.7491, test_acc: 0.3538, best: 0.3650, time: 0:01:22
 Highest accuracy: 0.3650