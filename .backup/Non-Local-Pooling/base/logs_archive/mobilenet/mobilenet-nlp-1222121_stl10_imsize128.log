
 Run on time: 2022-07-03 01:02:45.113175

 Architecture: mobilenet-nlp-1222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 4,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 8,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 16,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 64,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(128, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 64)
                  (col_embed): Embedding(256, 64)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5399, train_acc: 0.1714 test_loss: 1.9957, test_acc: 0.2406, best: 0.2406, time: 0:04:01
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0217, train_acc: 0.2292 test_loss: 1.7833, test_acc: 0.3021, best: 0.3021, time: 0:04:00
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9330, train_acc: 0.2640 test_loss: 1.7731, test_acc: 0.2935, best: 0.3021, time: 0:04:00
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8664, train_acc: 0.2924 test_loss: 1.6957, test_acc: 0.3593, best: 0.3593, time: 0:04:00
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8390, train_acc: 0.3010 test_loss: 1.6038, test_acc: 0.3750, best: 0.3750, time: 0:04:00
 Epoch: 6, lr: 1.0e-02, train_loss: 1.7985, train_acc: 0.3190 test_loss: 1.5429, test_acc: 0.4206, best: 0.4206, time: 0:04:00
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7850, train_acc: 0.3246 test_loss: 1.5545, test_acc: 0.4128, best: 0.4206, time: 0:03:59
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7586, train_acc: 0.3396 test_loss: 1.5534, test_acc: 0.3937, best: 0.4206, time: 0:03:59
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7245, train_acc: 0.3518 test_loss: 1.5067, test_acc: 0.4231, best: 0.4231, time: 0:03:59
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6979, train_acc: 0.3612 test_loss: 1.4568, test_acc: 0.4239, best: 0.4239, time: 0:03:59
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6716, train_acc: 0.3734 test_loss: 1.4246, test_acc: 0.4507, best: 0.4507, time: 0:03:59
 Epoch: 12, lr: 1.0e-02, train_loss: 1.6280, train_acc: 0.4020 test_loss: 1.3610, test_acc: 0.4889, best: 0.4889, time: 0:03:59
 Epoch: 13, lr: 1.0e-02, train_loss: 1.6112, train_acc: 0.4050 test_loss: 1.3258, test_acc: 0.4939, best: 0.4939, time: 0:03:59
 Epoch: 14, lr: 1.0e-02, train_loss: 1.5894, train_acc: 0.4028 test_loss: 1.3105, test_acc: 0.5130, best: 0.5130, time: 0:03:59
 Epoch: 15, lr: 1.0e-02, train_loss: 1.5520, train_acc: 0.4312 test_loss: 1.3053, test_acc: 0.5188, best: 0.5188, time: 0:03:59
 Epoch: 16, lr: 1.0e-02, train_loss: 1.5196, train_acc: 0.4334 test_loss: 1.3794, test_acc: 0.4814, best: 0.5188, time: 0:03:59
 Epoch: 17, lr: 1.0e-02, train_loss: 1.5292, train_acc: 0.4358 test_loss: 1.2913, test_acc: 0.5134, best: 0.5188, time: 0:03:59
 Epoch: 18, lr: 1.0e-02, train_loss: 1.4818, train_acc: 0.4532 test_loss: 1.2999, test_acc: 0.5235, best: 0.5235, time: 0:03:59
 Epoch: 19, lr: 1.0e-02, train_loss: 1.4608, train_acc: 0.4598 test_loss: 1.2981, test_acc: 0.5208, best: 0.5235, time: 0:03:59
 Epoch: 20, lr: 1.0e-02, train_loss: 1.4452, train_acc: 0.4644 test_loss: 1.2292, test_acc: 0.5533, best: 0.5533, time: 0:03:59
 Epoch: 21, lr: 1.0e-02, train_loss: 1.4136, train_acc: 0.4792 test_loss: 1.2119, test_acc: 0.5459, best: 0.5533, time: 0:03:59
 Epoch: 22, lr: 1.0e-02, train_loss: 1.4210, train_acc: 0.4792 test_loss: 1.2506, test_acc: 0.5497, best: 0.5533, time: 0:03:59
 Epoch: 23, lr: 1.0e-02, train_loss: 1.3681, train_acc: 0.4860 test_loss: 1.2072, test_acc: 0.5664, best: 0.5664, time: 0:03:59
 Epoch: 24, lr: 1.0e-02, train_loss: 1.3729, train_acc: 0.5028 test_loss: 1.2890, test_acc: 0.5433, best: 0.5664, time: 0:03:59
 Epoch: 25, lr: 1.0e-02, train_loss: 1.3413, train_acc: 0.5210 test_loss: 1.1378, test_acc: 0.5797, best: 0.5797, time: 0:03:59
 Epoch: 26, lr: 1.0e-02, train_loss: 1.3244, train_acc: 0.5044 test_loss: 1.1683, test_acc: 0.5803, best: 0.5803, time: 0:03:59
 Epoch: 27, lr: 1.0e-02, train_loss: 1.3222, train_acc: 0.5180 test_loss: 1.1155, test_acc: 0.5867, best: 0.5867, time: 0:03:59
 Epoch: 28, lr: 1.0e-02, train_loss: 1.3051, train_acc: 0.5190 test_loss: 1.1600, test_acc: 0.5804, best: 0.5867, time: 0:03:59
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2945, train_acc: 0.5288 test_loss: 1.1570, test_acc: 0.5819, best: 0.5867, time: 0:03:59
 Epoch: 30, lr: 1.0e-02, train_loss: 1.2711, train_acc: 0.5258 test_loss: 1.1369, test_acc: 0.5880, best: 0.5880, time: 0:03:59
 Epoch: 31, lr: 1.0e-02, train_loss: 1.2725, train_acc: 0.5394 test_loss: 1.0546, test_acc: 0.6200, best: 0.6200, time: 0:03:59
 Epoch: 32, lr: 1.0e-02, train_loss: 1.2482, train_acc: 0.5498 test_loss: 1.1056, test_acc: 0.5984, best: 0.6200, time: 0:03:59
 Epoch: 33, lr: 1.0e-02, train_loss: 1.2398, train_acc: 0.5460 test_loss: 1.0624, test_acc: 0.6188, best: 0.6200, time: 0:03:59
 Epoch: 34, lr: 1.0e-02, train_loss: 1.2283, train_acc: 0.5512 test_loss: 1.0106, test_acc: 0.6358, best: 0.6358, time: 0:03:59
 Epoch: 35, lr: 1.0e-02, train_loss: 1.2263, train_acc: 0.5542 test_loss: 1.0852, test_acc: 0.6184, best: 0.6358, time: 0:03:59
 Epoch: 36, lr: 1.0e-02, train_loss: 1.2194, train_acc: 0.5540 test_loss: 1.0461, test_acc: 0.6242, best: 0.6358, time: 0:03:59
 Epoch: 37, lr: 1.0e-02, train_loss: 1.1761, train_acc: 0.5700 test_loss: 1.0192, test_acc: 0.6291, best: 0.6358, time: 0:03:59
 Epoch: 38, lr: 1.0e-02, train_loss: 1.1811, train_acc: 0.5712 test_loss: 1.0414, test_acc: 0.6280, best: 0.6358, time: 0:03:59
 Epoch: 39, lr: 1.0e-02, train_loss: 1.1665, train_acc: 0.5714 test_loss: 1.0099, test_acc: 0.6338, best: 0.6358, time: 0:03:59
 Epoch: 40, lr: 1.0e-02, train_loss: 1.1657, train_acc: 0.5826 test_loss: 1.1266, test_acc: 0.5954, best: 0.6358, time: 0:03:59
 Epoch: 41, lr: 1.0e-02, train_loss: 1.1685, train_acc: 0.5764 test_loss: 0.9515, test_acc: 0.6580, best: 0.6580, time: 0:03:59
 Epoch: 42, lr: 1.0e-02, train_loss: 1.1437, train_acc: 0.5902 test_loss: 1.0019, test_acc: 0.6440, best: 0.6580, time: 0:03:59
 Epoch: 43, lr: 1.0e-02, train_loss: 1.1377, train_acc: 0.5840 test_loss: 0.9752, test_acc: 0.6450, best: 0.6580, time: 0:03:59
 Epoch: 44, lr: 1.0e-02, train_loss: 1.1322, train_acc: 0.5902 test_loss: 0.9858, test_acc: 0.6494, best: 0.6580, time: 0:03:59
 Epoch: 45, lr: 1.0e-02, train_loss: 1.1255, train_acc: 0.5930 test_loss: 1.0198, test_acc: 0.6430, best: 0.6580, time: 0:03:59
 Epoch: 46, lr: 1.0e-02, train_loss: 1.0850, train_acc: 0.6100 test_loss: 0.9653, test_acc: 0.6552, best: 0.6580, time: 0:04:00
 Epoch: 47, lr: 1.0e-02, train_loss: 1.1104, train_acc: 0.6010 test_loss: 0.9458, test_acc: 0.6663, best: 0.6663, time: 0:03:59
 Epoch: 48, lr: 1.0e-02, train_loss: 1.0796, train_acc: 0.6068 test_loss: 0.9428, test_acc: 0.6600, best: 0.6663, time: 0:03:59
 Epoch: 49, lr: 1.0e-02, train_loss: 1.0769, train_acc: 0.6044 test_loss: 0.9217, test_acc: 0.6620, best: 0.6663, time: 0:03:59
 Epoch: 50, lr: 1.0e-02, train_loss: 1.0935, train_acc: 0.6036 test_loss: 0.9452, test_acc: 0.6634, best: 0.6663, time: 0:03:59
 Epoch: 51, lr: 1.0e-02, train_loss: 1.0546, train_acc: 0.6186 test_loss: 0.9733, test_acc: 0.6500, best: 0.6663, time: 0:03:59
 Epoch: 52, lr: 1.0e-02, train_loss: 1.0547, train_acc: 0.6158 test_loss: 0.9231, test_acc: 0.6623, best: 0.6663, time: 0:03:59
 Epoch: 53, lr: 1.0e-02, train_loss: 1.0484, train_acc: 0.6234 test_loss: 0.9145, test_acc: 0.6776, best: 0.6776, time: 0:03:59
 Epoch: 54, lr: 1.0e-02, train_loss: 1.0551, train_acc: 0.6114 test_loss: 0.9101, test_acc: 0.6765, best: 0.6776, time: 0:03:59
 Epoch: 55, lr: 1.0e-02, train_loss: 1.0426, train_acc: 0.6178 test_loss: 0.9874, test_acc: 0.6571, best: 0.6776, time: 0:04:00
 Epoch: 56, lr: 1.0e-02, train_loss: 1.0279, train_acc: 0.6340 test_loss: 0.9197, test_acc: 0.6689, best: 0.6776, time: 0:03:59
 Epoch: 57, lr: 1.0e-02, train_loss: 1.0004, train_acc: 0.6414 test_loss: 1.0055, test_acc: 0.6471, best: 0.6776, time: 0:03:59
 Epoch: 58, lr: 1.0e-02, train_loss: 1.0025, train_acc: 0.6414 test_loss: 0.8908, test_acc: 0.6867, best: 0.6867, time: 0:03:59
 Epoch: 59, lr: 1.0e-02, train_loss: 1.0073, train_acc: 0.6404 test_loss: 0.8537, test_acc: 0.6914, best: 0.6914, time: 0:03:59
 Epoch: 60, lr: 1.0e-02, train_loss: 0.9863, train_acc: 0.6574 test_loss: 0.8595, test_acc: 0.6927, best: 0.6927, time: 0:03:59
 Epoch: 61, lr: 1.0e-02, train_loss: 0.9998, train_acc: 0.6424 test_loss: 0.9342, test_acc: 0.6720, best: 0.6927, time: 0:03:59
 Epoch: 62, lr: 1.0e-02, train_loss: 0.9858, train_acc: 0.6476 test_loss: 0.9741, test_acc: 0.6614, best: 0.6927, time: 0:03:59
 Epoch: 63, lr: 1.0e-02, train_loss: 0.9790, train_acc: 0.6522 test_loss: 0.9177, test_acc: 0.6815, best: 0.6927, time: 0:03:59
 Epoch: 64, lr: 1.0e-02, train_loss: 0.9666, train_acc: 0.6598 test_loss: 0.8970, test_acc: 0.6793, best: 0.6927, time: 0:03:59
 Epoch: 65, lr: 1.0e-02, train_loss: 0.9626, train_acc: 0.6576 test_loss: 0.8707, test_acc: 0.6885, best: 0.6927, time: 0:03:59
 Epoch: 66, lr: 1.0e-02, train_loss: 0.9570, train_acc: 0.6552 test_loss: 0.8965, test_acc: 0.6877, best: 0.6927, time: 0:03:59
 Epoch: 67, lr: 1.0e-02, train_loss: 0.9383, train_acc: 0.6572 test_loss: 0.8708, test_acc: 0.6921, best: 0.6927, time: 0:03:59
 Epoch: 68, lr: 1.0e-02, train_loss: 0.9482, train_acc: 0.6574 test_loss: 0.8762, test_acc: 0.6911, best: 0.6927, time: 0:03:59
 Epoch: 69, lr: 1.0e-02, train_loss: 0.9043, train_acc: 0.6850 test_loss: 0.8509, test_acc: 0.7055, best: 0.7055, time: 0:03:59
 Epoch: 70, lr: 1.0e-02, train_loss: 0.9344, train_acc: 0.6704 test_loss: 0.8462, test_acc: 0.7000, best: 0.7055, time: 0:03:59
 Epoch: 71, lr: 1.0e-02, train_loss: 0.9258, train_acc: 0.6696 test_loss: 0.8208, test_acc: 0.7103, best: 0.7103, time: 0:03:59
 Epoch: 72, lr: 1.0e-02, train_loss: 0.9194, train_acc: 0.6718 test_loss: 0.8298, test_acc: 0.7084, best: 0.7103, time: 0:03:59
 Epoch: 73, lr: 1.0e-02, train_loss: 0.9169, train_acc: 0.6736 test_loss: 0.8641, test_acc: 0.6914, best: 0.7103, time: 0:03:59
 Epoch: 74, lr: 1.0e-02, train_loss: 0.8873, train_acc: 0.6792 test_loss: 0.8339, test_acc: 0.7124, best: 0.7124, time: 0:03:59
 Epoch: 75, lr: 1.0e-02, train_loss: 0.8835, train_acc: 0.6778 test_loss: 0.9114, test_acc: 0.6907, best: 0.7124, time: 0:03:59
 Epoch: 76, lr: 1.0e-02, train_loss: 0.8881, train_acc: 0.6888 test_loss: 0.8527, test_acc: 0.7056, best: 0.7124, time: 0:03:59
 Epoch: 77, lr: 1.0e-02, train_loss: 0.8776, train_acc: 0.6844 test_loss: 0.7921, test_acc: 0.7211, best: 0.7211, time: 0:03:59
 Epoch: 78, lr: 1.0e-02, train_loss: 0.9033, train_acc: 0.6790 test_loss: 0.8921, test_acc: 0.6907, best: 0.7211, time: 0:03:59
 Epoch: 79, lr: 1.0e-02, train_loss: 0.8798, train_acc: 0.6828 test_loss: 0.8369, test_acc: 0.7159, best: 0.7211, time: 0:03:59
 Epoch: 80, lr: 1.0e-02, train_loss: 0.8774, train_acc: 0.6846 test_loss: 0.8145, test_acc: 0.7179, best: 0.7211, time: 0:03:59
 Epoch: 81, lr: 1.0e-02, train_loss: 0.8651, train_acc: 0.6906 test_loss: 0.8297, test_acc: 0.7021, best: 0.7211, time: 0:03:59
 Epoch: 82, lr: 1.0e-02, train_loss: 0.8440, train_acc: 0.6980 test_loss: 0.8066, test_acc: 0.7145, best: 0.7211, time: 0:03:59
 Epoch: 83, lr: 1.0e-02, train_loss: 0.8612, train_acc: 0.6950 test_loss: 0.8198, test_acc: 0.7143, best: 0.7211, time: 0:03:59
 Epoch: 84, lr: 1.0e-02, train_loss: 0.8592, train_acc: 0.6900 test_loss: 0.7902, test_acc: 0.7258, best: 0.7258, time: 0:03:59
 Epoch: 85, lr: 1.0e-02, train_loss: 0.8359, train_acc: 0.6978 test_loss: 0.8035, test_acc: 0.7262, best: 0.7262, time: 0:03:59
 Epoch: 86, lr: 1.0e-02, train_loss: 0.8311, train_acc: 0.7058 test_loss: 0.8221, test_acc: 0.7165, best: 0.7262, time: 0:03:59
 Epoch: 87, lr: 1.0e-02, train_loss: 0.8431, train_acc: 0.6986 test_loss: 0.7830, test_acc: 0.7220, best: 0.7262, time: 0:03:59
 Epoch: 88, lr: 1.0e-02, train_loss: 0.8444, train_acc: 0.6992 test_loss: 0.8050, test_acc: 0.7196, best: 0.7262, time: 0:03:59
 Epoch: 89, lr: 1.0e-02, train_loss: 0.8465, train_acc: 0.6978 test_loss: 0.8850, test_acc: 0.7006, best: 0.7262, time: 0:03:59
 Epoch: 90, lr: 1.0e-02, train_loss: 0.8280, train_acc: 0.7098 test_loss: 0.7903, test_acc: 0.7265, best: 0.7265, time: 0:03:59
 Epoch: 91, lr: 1.0e-02, train_loss: 0.7930, train_acc: 0.7186 test_loss: 0.8012, test_acc: 0.7143, best: 0.7265, time: 0:03:59
 Epoch: 92, lr: 1.0e-02, train_loss: 0.8012, train_acc: 0.7084 test_loss: 0.8965, test_acc: 0.6970, best: 0.7265, time: 0:03:59
 Epoch: 93, lr: 1.0e-02, train_loss: 0.7682, train_acc: 0.7310 test_loss: 0.7645, test_acc: 0.7305, best: 0.7305, time: 0:03:59
 Epoch: 94, lr: 1.0e-02, train_loss: 0.8183, train_acc: 0.7064 test_loss: 0.7651, test_acc: 0.7345, best: 0.7345, time: 0:03:59
 Epoch: 95, lr: 1.0e-02, train_loss: 0.8043, train_acc: 0.7134 test_loss: 0.7981, test_acc: 0.7240, best: 0.7345, time: 0:03:59
 Epoch: 96, lr: 1.0e-02, train_loss: 0.7974, train_acc: 0.7178 test_loss: 0.7991, test_acc: 0.7246, best: 0.7345, time: 0:03:59
 Epoch: 97, lr: 1.0e-02, train_loss: 0.7933, train_acc: 0.7164 test_loss: 0.8231, test_acc: 0.7186, best: 0.7345, time: 0:03:59
 Epoch: 98, lr: 1.0e-02, train_loss: 0.7837, train_acc: 0.7106 test_loss: 0.7833, test_acc: 0.7309, best: 0.7345, time: 0:03:59
 Epoch: 99, lr: 1.0e-02, train_loss: 0.7926, train_acc: 0.7188 test_loss: 0.7646, test_acc: 0.7332, best: 0.7345, time: 0:03:59
 Epoch: 100, lr: 1.0e-02, train_loss: 0.7989, train_acc: 0.7088 test_loss: 0.7599, test_acc: 0.7376, best: 0.7376, time: 0:03:59
 Epoch: 101, lr: 1.0e-02, train_loss: 0.7720, train_acc: 0.7284 test_loss: 0.7860, test_acc: 0.7295, best: 0.7376, time: 0:03:59
 Epoch: 102, lr: 1.0e-02, train_loss: 0.7656, train_acc: 0.7260 test_loss: 0.8015, test_acc: 0.7274, best: 0.7376, time: 0:03:59
 Epoch: 103, lr: 1.0e-02, train_loss: 0.7729, train_acc: 0.7264 test_loss: 0.8060, test_acc: 0.7301, best: 0.7376, time: 0:03:59
 Epoch: 104, lr: 1.0e-02, train_loss: 0.7735, train_acc: 0.7260 test_loss: 0.8016, test_acc: 0.7179, best: 0.7376, time: 0:03:59
 Epoch: 105, lr: 1.0e-02, train_loss: 0.7383, train_acc: 0.7366 test_loss: 0.8045, test_acc: 0.7234, best: 0.7376, time: 0:03:59
 Epoch: 106, lr: 1.0e-02, train_loss: 0.7694, train_acc: 0.7252 test_loss: 0.7807, test_acc: 0.7298, best: 0.7376, time: 0:03:59
 Epoch: 107, lr: 1.0e-02, train_loss: 0.7530, train_acc: 0.7342 test_loss: 0.7552, test_acc: 0.7455, best: 0.7455, time: 0:03:59
 Epoch: 108, lr: 1.0e-02, train_loss: 0.7615, train_acc: 0.7272 test_loss: 0.7457, test_acc: 0.7411, best: 0.7455, time: 0:03:59
 Epoch: 109, lr: 1.0e-02, train_loss: 0.7613, train_acc: 0.7360 test_loss: 0.8286, test_acc: 0.7206, best: 0.7455, time: 0:03:59
 Epoch: 110, lr: 1.0e-02, train_loss: 0.7180, train_acc: 0.7464 test_loss: 0.8227, test_acc: 0.7301, best: 0.7455, time: 0:03:59
 Epoch: 111, lr: 1.0e-02, train_loss: 0.7141, train_acc: 0.7438 test_loss: 0.7238, test_acc: 0.7485, best: 0.7485, time: 0:03:59
 Epoch: 112, lr: 1.0e-02, train_loss: 0.7278, train_acc: 0.7392 test_loss: 0.8947, test_acc: 0.7027, best: 0.7485, time: 0:03:59
 Epoch: 113, lr: 1.0e-02, train_loss: 0.7284, train_acc: 0.7398 test_loss: 0.8000, test_acc: 0.7310, best: 0.7485, time: 0:03:59
 Epoch: 114, lr: 1.0e-02, train_loss: 0.7127, train_acc: 0.7418 test_loss: 0.7506, test_acc: 0.7440, best: 0.7485, time: 0:03:59
 Epoch: 115, lr: 1.0e-02, train_loss: 0.7127, train_acc: 0.7442 test_loss: 0.7692, test_acc: 0.7362, best: 0.7485, time: 0:03:59
 Epoch: 116, lr: 1.0e-02, train_loss: 0.7232, train_acc: 0.7484 test_loss: 0.7836, test_acc: 0.7348, best: 0.7485, time: 0:03:59
 Epoch: 117, lr: 1.0e-02, train_loss: 0.7069, train_acc: 0.7524 test_loss: 0.7424, test_acc: 0.7459, best: 0.7485, time: 0:03:59
 Epoch: 118, lr: 1.0e-02, train_loss: 0.7197, train_acc: 0.7446 test_loss: 0.8277, test_acc: 0.7306, best: 0.7485, time: 0:03:59
 Epoch: 119, lr: 1.0e-02, train_loss: 0.6975, train_acc: 0.7502 test_loss: 0.7964, test_acc: 0.7305, best: 0.7485, time: 0:03:59
 Epoch: 120, lr: 1.0e-02, train_loss: 0.7306, train_acc: 0.7390 test_loss: 0.7974, test_acc: 0.7316, best: 0.7485, time: 0:03:59
 Epoch: 121, lr: 1.0e-02, train_loss: 0.7214, train_acc: 0.7422 test_loss: 0.7682, test_acc: 0.7300, best: 0.7485, time: 0:03:59
 Epoch: 122, lr: 1.0e-02, train_loss: 0.7005, train_acc: 0.7540 test_loss: 0.7511, test_acc: 0.7436, best: 0.7485, time: 0:03:59
 Epoch: 123, lr: 1.0e-02, train_loss: 0.6962, train_acc: 0.7608 test_loss: 0.8408, test_acc: 0.7245, best: 0.7485, time: 0:03:59
 Epoch: 124, lr: 1.0e-02, train_loss: 0.6865, train_acc: 0.7576 test_loss: 0.8040, test_acc: 0.7280, best: 0.7485, time: 0:03:59
 Epoch: 125, lr: 1.0e-02, train_loss: 0.6861, train_acc: 0.7604 test_loss: 0.7962, test_acc: 0.7354, best: 0.7485, time: 0:03:59
 Epoch: 126, lr: 1.0e-02, train_loss: 0.6765, train_acc: 0.7610 test_loss: 0.7817, test_acc: 0.7319, best: 0.7485, time: 0:03:59
 Epoch: 127, lr: 1.0e-02, train_loss: 0.6947, train_acc: 0.7548 test_loss: 0.7447, test_acc: 0.7388, best: 0.7485, time: 0:03:59
 Epoch: 128, lr: 1.0e-02, train_loss: 0.6969, train_acc: 0.7512 test_loss: 0.7522, test_acc: 0.7422, best: 0.7485, time: 0:03:59
 Epoch: 129, lr: 1.0e-02, train_loss: 0.6791, train_acc: 0.7646 test_loss: 0.7828, test_acc: 0.7404, best: 0.7485, time: 0:03:59
 Epoch: 130, lr: 1.0e-02, train_loss: 0.6940, train_acc: 0.7592 test_loss: 0.7229, test_acc: 0.7500, best: 0.7500, time: 0:03:59
 Epoch: 131, lr: 1.0e-02, train_loss: 0.6506, train_acc: 0.7710 test_loss: 0.7503, test_acc: 0.7464, best: 0.7500, time: 0:03:59
 Epoch: 132, lr: 1.0e-02, train_loss: 0.6513, train_acc: 0.7712 test_loss: 0.7663, test_acc: 0.7480, best: 0.7500, time: 0:03:59
 Epoch: 133, lr: 1.0e-02, train_loss: 0.6635, train_acc: 0.7614 test_loss: 0.8334, test_acc: 0.7239, best: 0.7500, time: 0:03:59
 Epoch: 134, lr: 1.0e-02, train_loss: 0.6510, train_acc: 0.7716 test_loss: 0.8184, test_acc: 0.7189, best: 0.7500, time: 0:03:59
 Epoch: 135, lr: 1.0e-02, train_loss: 0.6651, train_acc: 0.7606 test_loss: 0.7561, test_acc: 0.7514, best: 0.7514, time: 0:03:59
 Epoch: 136, lr: 1.0e-02, train_loss: 0.6470, train_acc: 0.7742 test_loss: 0.7706, test_acc: 0.7385, best: 0.7514, time: 0:03:59
 Epoch: 137, lr: 1.0e-02, train_loss: 0.6416, train_acc: 0.7768 test_loss: 0.7865, test_acc: 0.7441, best: 0.7514, time: 0:03:59
 Epoch: 138, lr: 1.0e-02, train_loss: 0.6536, train_acc: 0.7764 test_loss: 0.7321, test_acc: 0.7494, best: 0.7514, time: 0:03:59
 Epoch: 139, lr: 1.0e-02, train_loss: 0.6451, train_acc: 0.7728 test_loss: 0.7796, test_acc: 0.7388, best: 0.7514, time: 0:03:59
 Epoch: 140, lr: 1.0e-02, train_loss: 0.6702, train_acc: 0.7614 test_loss: 0.7364, test_acc: 0.7454, best: 0.7514, time: 0:03:59
 Epoch: 141, lr: 1.0e-02, train_loss: 0.6566, train_acc: 0.7660 test_loss: 0.7203, test_acc: 0.7631, best: 0.7631, time: 0:03:59
 Epoch: 142, lr: 1.0e-02, train_loss: 0.6252, train_acc: 0.7806 test_loss: 0.7772, test_acc: 0.7444, best: 0.7631, time: 0:03:59
 Epoch: 143, lr: 1.0e-02, train_loss: 0.6296, train_acc: 0.7740 test_loss: 0.7301, test_acc: 0.7549, best: 0.7631, time: 0:03:59
 Epoch: 144, lr: 1.0e-02, train_loss: 0.6300, train_acc: 0.7800 test_loss: 0.7536, test_acc: 0.7569, best: 0.7631, time: 0:03:59
 Epoch: 145, lr: 1.0e-02, train_loss: 0.6276, train_acc: 0.7846 test_loss: 0.8025, test_acc: 0.7408, best: 0.7631, time: 0:03:59
 Epoch: 146, lr: 1.0e-02, train_loss: 0.6174, train_acc: 0.7808 test_loss: 0.7089, test_acc: 0.7600, best: 0.7631, time: 0:03:59
 Epoch: 147, lr: 1.0e-02, train_loss: 0.6165, train_acc: 0.7854 test_loss: 0.7066, test_acc: 0.7611, best: 0.7631, time: 0:03:59
 Epoch: 148, lr: 1.0e-02, train_loss: 0.6334, train_acc: 0.7818 test_loss: 0.7054, test_acc: 0.7656, best: 0.7656, time: 0:03:59
 Epoch: 149, lr: 1.0e-02, train_loss: 0.6422, train_acc: 0.7788 test_loss: 0.7322, test_acc: 0.7615, best: 0.7656, time: 0:03:59
 Epoch: 150, lr: 1.0e-02, train_loss: 0.6193, train_acc: 0.7866 test_loss: 0.7737, test_acc: 0.7490, best: 0.7656, time: 0:03:59
 Epoch: 151, lr: 1.0e-02, train_loss: 0.6317, train_acc: 0.7728 test_loss: 0.7221, test_acc: 0.7569, best: 0.7656, time: 0:03:59
 Epoch: 152, lr: 1.0e-02, train_loss: 0.6155, train_acc: 0.7822 test_loss: 0.7640, test_acc: 0.7544, best: 0.7656, time: 0:03:59
 Epoch: 153, lr: 1.0e-02, train_loss: 0.6273, train_acc: 0.7734 test_loss: 0.7901, test_acc: 0.7470, best: 0.7656, time: 0:03:59
 Epoch: 154, lr: 1.0e-02, train_loss: 0.6045, train_acc: 0.7908 test_loss: 0.7410, test_acc: 0.7580, best: 0.7656, time: 0:03:59
 Epoch: 155, lr: 1.0e-02, train_loss: 0.5855, train_acc: 0.7968 test_loss: 0.7457, test_acc: 0.7609, best: 0.7656, time: 0:03:59
 Epoch: 156, lr: 1.0e-02, train_loss: 0.5954, train_acc: 0.7902 test_loss: 0.7507, test_acc: 0.7594, best: 0.7656, time: 0:03:59
 Epoch: 157, lr: 1.0e-02, train_loss: 0.5937, train_acc: 0.7898 test_loss: 0.7826, test_acc: 0.7525, best: 0.7656, time: 0:03:59
 Epoch: 158, lr: 1.0e-02, train_loss: 0.6017, train_acc: 0.7908 test_loss: 0.7849, test_acc: 0.7421, best: 0.7656, time: 0:03:59
 Epoch: 159, lr: 1.0e-02, train_loss: 0.5863, train_acc: 0.7944 test_loss: 0.7632, test_acc: 0.7508, best: 0.7656, time: 0:03:59
 Epoch: 160, lr: 1.0e-02, train_loss: 0.5752, train_acc: 0.7998 test_loss: 0.8033, test_acc: 0.7469, best: 0.7656, time: 0:03:59
 Epoch: 161, lr: 1.0e-02, train_loss: 0.5813, train_acc: 0.7968 test_loss: 0.7803, test_acc: 0.7566, best: 0.7656, time: 0:03:59
 Epoch: 162, lr: 1.0e-02, train_loss: 0.5907, train_acc: 0.7884 test_loss: 0.7985, test_acc: 0.7481, best: 0.7656, time: 0:03:59
 Epoch: 163, lr: 1.0e-02, train_loss: 0.5720, train_acc: 0.7998 test_loss: 0.7624, test_acc: 0.7572, best: 0.7656, time: 0:03:59
 Epoch: 164, lr: 1.0e-02, train_loss: 0.5814, train_acc: 0.7906 test_loss: 0.7608, test_acc: 0.7469, best: 0.7656, time: 0:03:59
 Epoch: 165, lr: 1.0e-02, train_loss: 0.5734, train_acc: 0.7968 test_loss: 0.7550, test_acc: 0.7555, best: 0.7656, time: 0:03:59
 Epoch: 166, lr: 1.0e-02, train_loss: 0.5799, train_acc: 0.7976 test_loss: 0.7124, test_acc: 0.7708, best: 0.7708, time: 0:03:59
 Epoch: 167, lr: 1.0e-02, train_loss: 0.5563, train_acc: 0.8024 test_loss: 0.7563, test_acc: 0.7599, best: 0.7708, time: 0:03:59
 Epoch: 168, lr: 1.0e-02, train_loss: 0.5860, train_acc: 0.7954 test_loss: 0.7038, test_acc: 0.7721, best: 0.7721, time: 0:03:59
 Epoch: 169, lr: 1.0e-02, train_loss: 0.5585, train_acc: 0.8014 test_loss: 0.7409, test_acc: 0.7606, best: 0.7721, time: 0:03:59
 Epoch: 170, lr: 1.0e-02, train_loss: 0.5425, train_acc: 0.8128 test_loss: 0.7643, test_acc: 0.7556, best: 0.7721, time: 0:03:59
 Epoch: 171, lr: 1.0e-02, train_loss: 0.5839, train_acc: 0.7934 test_loss: 0.7105, test_acc: 0.7665, best: 0.7721, time: 0:03:59
 Epoch: 172, lr: 1.0e-02, train_loss: 0.5726, train_acc: 0.8016 test_loss: 0.8033, test_acc: 0.7416, best: 0.7721, time: 0:03:59
 Epoch: 173, lr: 1.0e-02, train_loss: 0.5661, train_acc: 0.8016 test_loss: 0.7657, test_acc: 0.7555, best: 0.7721, time: 0:03:59
 Epoch: 174, lr: 1.0e-02, train_loss: 0.5691, train_acc: 0.7950 test_loss: 0.7660, test_acc: 0.7664, best: 0.7721, time: 0:03:59
 Epoch: 175, lr: 1.0e-02, train_loss: 0.5406, train_acc: 0.8102 test_loss: 0.7903, test_acc: 0.7520, best: 0.7721, time: 0:03:59
 Epoch: 176, lr: 1.0e-02, train_loss: 0.5356, train_acc: 0.8076 test_loss: 0.8110, test_acc: 0.7476, best: 0.7721, time: 0:03:59
 Epoch: 177, lr: 1.0e-02, train_loss: 0.5356, train_acc: 0.8138 test_loss: 0.8275, test_acc: 0.7538, best: 0.7721, time: 0:03:59
 Epoch: 178, lr: 1.0e-02, train_loss: 0.5422, train_acc: 0.8138 test_loss: 0.8294, test_acc: 0.7441, best: 0.7721, time: 0:03:58
 Epoch: 179, lr: 1.0e-02, train_loss: 0.5533, train_acc: 0.8046 test_loss: 0.7784, test_acc: 0.7540, best: 0.7721, time: 0:03:58
 Epoch: 180, lr: 2.0e-03, train_loss: 0.4848, train_acc: 0.8334 test_loss: 0.7063, test_acc: 0.7760, best: 0.7760, time: 0:03:58
 Epoch: 181, lr: 2.0e-03, train_loss: 0.4467, train_acc: 0.8402 test_loss: 0.7158, test_acc: 0.7825, best: 0.7825, time: 0:03:58
 Epoch: 182, lr: 2.0e-03, train_loss: 0.4432, train_acc: 0.8476 test_loss: 0.7059, test_acc: 0.7785, best: 0.7825, time: 0:03:57
 Epoch: 183, lr: 2.0e-03, train_loss: 0.4399, train_acc: 0.8502 test_loss: 0.7033, test_acc: 0.7824, best: 0.7825, time: 0:03:57
 Epoch: 184, lr: 2.0e-03, train_loss: 0.4373, train_acc: 0.8434 test_loss: 0.7185, test_acc: 0.7845, best: 0.7845, time: 0:03:57
 Epoch: 185, lr: 2.0e-03, train_loss: 0.4213, train_acc: 0.8604 test_loss: 0.7047, test_acc: 0.7876, best: 0.7876, time: 0:03:57
 Epoch: 186, lr: 2.0e-03, train_loss: 0.4315, train_acc: 0.8474 test_loss: 0.7158, test_acc: 0.7843, best: 0.7876, time: 0:03:57
 Epoch: 187, lr: 2.0e-03, train_loss: 0.4016, train_acc: 0.8608 test_loss: 0.7015, test_acc: 0.7854, best: 0.7876, time: 0:03:57
 Epoch: 188, lr: 2.0e-03, train_loss: 0.4019, train_acc: 0.8600 test_loss: 0.7403, test_acc: 0.7835, best: 0.7876, time: 0:03:56
 Epoch: 189, lr: 2.0e-03, train_loss: 0.4094, train_acc: 0.8546 test_loss: 0.7238, test_acc: 0.7836, best: 0.7876, time: 0:03:56
 Epoch: 190, lr: 2.0e-03, train_loss: 0.3898, train_acc: 0.8572 test_loss: 0.7406, test_acc: 0.7778, best: 0.7876, time: 0:03:56
 Epoch: 191, lr: 2.0e-03, train_loss: 0.3850, train_acc: 0.8658 test_loss: 0.7223, test_acc: 0.7846, best: 0.7876, time: 0:03:56
 Epoch: 192, lr: 2.0e-03, train_loss: 0.3957, train_acc: 0.8658 test_loss: 0.7282, test_acc: 0.7847, best: 0.7876, time: 0:03:56
 Epoch: 193, lr: 2.0e-03, train_loss: 0.4144, train_acc: 0.8552 test_loss: 0.7127, test_acc: 0.7853, best: 0.7876, time: 0:03:56
 Epoch: 194, lr: 2.0e-03, train_loss: 0.3761, train_acc: 0.8700 test_loss: 0.7385, test_acc: 0.7840, best: 0.7876, time: 0:03:56
 Epoch: 195, lr: 2.0e-03, train_loss: 0.4011, train_acc: 0.8584 test_loss: 0.7305, test_acc: 0.7819, best: 0.7876, time: 0:03:56
 Epoch: 196, lr: 2.0e-03, train_loss: 0.3771, train_acc: 0.8708 test_loss: 0.7284, test_acc: 0.7875, best: 0.7876, time: 0:03:56
 Epoch: 197, lr: 2.0e-03, train_loss: 0.3724, train_acc: 0.8692 test_loss: 0.7962, test_acc: 0.7738, best: 0.7876, time: 0:03:56
 Epoch: 198, lr: 2.0e-03, train_loss: 0.3902, train_acc: 0.8580 test_loss: 0.7720, test_acc: 0.7784, best: 0.7876, time: 0:03:56
 Epoch: 199, lr: 2.0e-03, train_loss: 0.3947, train_acc: 0.8674 test_loss: 0.7492, test_acc: 0.7824, best: 0.7876, time: 0:03:56
 Epoch: 200, lr: 2.0e-03, train_loss: 0.3983, train_acc: 0.8626 test_loss: 0.7728, test_acc: 0.7790, best: 0.7876, time: 0:03:56
 Epoch: 201, lr: 2.0e-03, train_loss: 0.3703, train_acc: 0.8710 test_loss: 0.7487, test_acc: 0.7839, best: 0.7876, time: 0:03:56
 Epoch: 202, lr: 2.0e-03, train_loss: 0.3793, train_acc: 0.8696 test_loss: 0.7115, test_acc: 0.7900, best: 0.7900, time: 0:03:56
 Epoch: 203, lr: 2.0e-03, train_loss: 0.4095, train_acc: 0.8676 test_loss: 0.7430, test_acc: 0.7817, best: 0.7900, time: 0:03:56
 Epoch: 204, lr: 2.0e-03, train_loss: 0.3661, train_acc: 0.8706 test_loss: 0.7531, test_acc: 0.7847, best: 0.7900, time: 0:03:56
 Epoch: 205, lr: 2.0e-03, train_loss: 0.3837, train_acc: 0.8672 test_loss: 0.7288, test_acc: 0.7911, best: 0.7911, time: 0:03:56
 Epoch: 206, lr: 2.0e-03, train_loss: 0.3761, train_acc: 0.8650 test_loss: 0.7413, test_acc: 0.7823, best: 0.7911, time: 0:03:56
 Epoch: 207, lr: 2.0e-03, train_loss: 0.3811, train_acc: 0.8662 test_loss: 0.7409, test_acc: 0.7887, best: 0.7911, time: 0:03:56
 Epoch: 208, lr: 2.0e-03, train_loss: 0.3489, train_acc: 0.8758 test_loss: 0.7436, test_acc: 0.7893, best: 0.7911, time: 0:03:56
 Epoch: 209, lr: 2.0e-03, train_loss: 0.3717, train_acc: 0.8680 test_loss: 0.7663, test_acc: 0.7841, best: 0.7911, time: 0:03:56
 Epoch: 210, lr: 2.0e-03, train_loss: 0.3539, train_acc: 0.8780 test_loss: 0.7502, test_acc: 0.7850, best: 0.7911, time: 0:03:56
 Epoch: 211, lr: 2.0e-03, train_loss: 0.3586, train_acc: 0.8738 test_loss: 0.7846, test_acc: 0.7820, best: 0.7911, time: 0:03:56
 Epoch: 212, lr: 2.0e-03, train_loss: 0.3812, train_acc: 0.8668 test_loss: 0.7368, test_acc: 0.7881, best: 0.7911, time: 0:03:56
 Epoch: 213, lr: 2.0e-03, train_loss: 0.3716, train_acc: 0.8648 test_loss: 0.7222, test_acc: 0.7861, best: 0.7911, time: 0:03:56
 Epoch: 214, lr: 2.0e-03, train_loss: 0.3630, train_acc: 0.8744 test_loss: 0.7345, test_acc: 0.7927, best: 0.7927, time: 0:03:56
 Epoch: 215, lr: 2.0e-03, train_loss: 0.3764, train_acc: 0.8664 test_loss: 0.7253, test_acc: 0.7927, best: 0.7927, time: 0:03:56
 Epoch: 216, lr: 2.0e-03, train_loss: 0.3728, train_acc: 0.8674 test_loss: 0.7580, test_acc: 0.7820, best: 0.7927, time: 0:03:56
 Epoch: 217, lr: 2.0e-03, train_loss: 0.3620, train_acc: 0.8720 test_loss: 0.7551, test_acc: 0.7876, best: 0.7927, time: 0:03:56
 Epoch: 218, lr: 2.0e-03, train_loss: 0.3671, train_acc: 0.8730 test_loss: 0.7441, test_acc: 0.7860, best: 0.7927, time: 0:03:56
 Epoch: 219, lr: 2.0e-03, train_loss: 0.3931, train_acc: 0.8636 test_loss: 0.7514, test_acc: 0.7903, best: 0.7927, time: 0:03:56
 Epoch: 220, lr: 2.0e-03, train_loss: 0.3696, train_acc: 0.8704 test_loss: 0.7625, test_acc: 0.7840, best: 0.7927, time: 0:03:56
 Epoch: 221, lr: 2.0e-03, train_loss: 0.3475, train_acc: 0.8802 test_loss: 0.7757, test_acc: 0.7827, best: 0.7927, time: 0:03:56
 Epoch: 222, lr: 2.0e-03, train_loss: 0.3574, train_acc: 0.8722 test_loss: 0.7479, test_acc: 0.7903, best: 0.7927, time: 0:03:56
 Epoch: 223, lr: 2.0e-03, train_loss: 0.3479, train_acc: 0.8800 test_loss: 0.7588, test_acc: 0.7879, best: 0.7927, time: 0:03:56
 Epoch: 224, lr: 2.0e-03, train_loss: 0.3528, train_acc: 0.8764 test_loss: 0.7596, test_acc: 0.7879, best: 0.7927, time: 0:03:56
 Epoch: 225, lr: 2.0e-03, train_loss: 0.3676, train_acc: 0.8682 test_loss: 0.7721, test_acc: 0.7816, best: 0.7927, time: 0:03:56
 Epoch: 226, lr: 2.0e-03, train_loss: 0.3638, train_acc: 0.8764 test_loss: 0.7686, test_acc: 0.7785, best: 0.7927, time: 0:03:56
 Epoch: 227, lr: 2.0e-03, train_loss: 0.3621, train_acc: 0.8730 test_loss: 0.7329, test_acc: 0.7915, best: 0.7927, time: 0:03:56
 Epoch: 228, lr: 2.0e-03, train_loss: 0.3562, train_acc: 0.8768 test_loss: 0.7211, test_acc: 0.7913, best: 0.7927, time: 0:03:56
 Epoch: 229, lr: 2.0e-03, train_loss: 0.3501, train_acc: 0.8776 test_loss: 0.7396, test_acc: 0.7861, best: 0.7927, time: 0:03:56
 Epoch: 230, lr: 2.0e-03, train_loss: 0.3485, train_acc: 0.8786 test_loss: 0.7691, test_acc: 0.7781, best: 0.7927, time: 0:03:56
 Epoch: 231, lr: 2.0e-03, train_loss: 0.3403, train_acc: 0.8784 test_loss: 0.7264, test_acc: 0.7916, best: 0.7927, time: 0:03:56
 Epoch: 232, lr: 2.0e-03, train_loss: 0.3370, train_acc: 0.8850 test_loss: 0.7470, test_acc: 0.7877, best: 0.7927, time: 0:03:56
 Epoch: 233, lr: 2.0e-03, train_loss: 0.3521, train_acc: 0.8758 test_loss: 0.7456, test_acc: 0.7881, best: 0.7927, time: 0:03:56
 Epoch: 234, lr: 2.0e-03, train_loss: 0.3447, train_acc: 0.8816 test_loss: 0.8023, test_acc: 0.7799, best: 0.7927, time: 0:03:56
 Epoch: 235, lr: 2.0e-03, train_loss: 0.3659, train_acc: 0.8748 test_loss: 0.7474, test_acc: 0.7824, best: 0.7927, time: 0:03:56
 Epoch: 236, lr: 2.0e-03, train_loss: 0.3829, train_acc: 0.8674 test_loss: 0.7600, test_acc: 0.7839, best: 0.7927, time: 0:03:56
 Epoch: 237, lr: 2.0e-03, train_loss: 0.3507, train_acc: 0.8788 test_loss: 0.7500, test_acc: 0.7845, best: 0.7927, time: 0:03:56
 Epoch: 238, lr: 2.0e-03, train_loss: 0.3435, train_acc: 0.8822 test_loss: 0.7525, test_acc: 0.7817, best: 0.7927, time: 0:03:56
 Epoch: 239, lr: 2.0e-03, train_loss: 0.3332, train_acc: 0.8852 test_loss: 0.7711, test_acc: 0.7881, best: 0.7927, time: 0:03:56
 Epoch: 240, lr: 4.0e-04, train_loss: 0.3527, train_acc: 0.8822 test_loss: 0.7630, test_acc: 0.7901, best: 0.7927, time: 0:03:56
 Epoch: 241, lr: 4.0e-04, train_loss: 0.3238, train_acc: 0.8912 test_loss: 0.7575, test_acc: 0.7910, best: 0.7927, time: 0:03:56
 Epoch: 242, lr: 4.0e-04, train_loss: 0.3341, train_acc: 0.8848 test_loss: 0.7556, test_acc: 0.7929, best: 0.7929, time: 0:03:56
 Epoch: 243, lr: 4.0e-04, train_loss: 0.3381, train_acc: 0.8854 test_loss: 0.7599, test_acc: 0.7884, best: 0.7929, time: 0:03:56
 Epoch: 244, lr: 4.0e-04, train_loss: 0.3095, train_acc: 0.8966 test_loss: 0.7686, test_acc: 0.7886, best: 0.7929, time: 0:03:56
 Epoch: 245, lr: 4.0e-04, train_loss: 0.3330, train_acc: 0.8846 test_loss: 0.7537, test_acc: 0.7871, best: 0.7929, time: 0:03:56
 Epoch: 246, lr: 4.0e-04, train_loss: 0.3202, train_acc: 0.8886 test_loss: 0.7578, test_acc: 0.7899, best: 0.7929, time: 0:03:56
 Epoch: 247, lr: 4.0e-04, train_loss: 0.3351, train_acc: 0.8852 test_loss: 0.7856, test_acc: 0.7835, best: 0.7929, time: 0:03:56
 Epoch: 248, lr: 4.0e-04, train_loss: 0.3223, train_acc: 0.8928 test_loss: 0.7545, test_acc: 0.7871, best: 0.7929, time: 0:03:56
 Epoch: 249, lr: 4.0e-04, train_loss: 0.3357, train_acc: 0.8824 test_loss: 0.7751, test_acc: 0.7854, best: 0.7929, time: 0:03:56
 Epoch: 250, lr: 4.0e-04, train_loss: 0.3238, train_acc: 0.8876 test_loss: 0.7478, test_acc: 0.7904, best: 0.7929, time: 0:03:56
 Epoch: 251, lr: 4.0e-04, train_loss: 0.3069, train_acc: 0.8956 test_loss: 0.7553, test_acc: 0.7904, best: 0.7929, time: 0:03:56
 Epoch: 252, lr: 4.0e-04, train_loss: 0.3295, train_acc: 0.8896 test_loss: 0.7705, test_acc: 0.7894, best: 0.7929, time: 0:03:56
 Epoch: 253, lr: 4.0e-04, train_loss: 0.3372, train_acc: 0.8826 test_loss: 0.7464, test_acc: 0.7929, best: 0.7929, time: 0:03:56
 Epoch: 254, lr: 4.0e-04, train_loss: 0.3237, train_acc: 0.8876 test_loss: 0.7614, test_acc: 0.7865, best: 0.7929, time: 0:03:56
 Epoch: 255, lr: 4.0e-04, train_loss: 0.3175, train_acc: 0.8908 test_loss: 0.7405, test_acc: 0.7919, best: 0.7929, time: 0:03:56
 Epoch: 256, lr: 4.0e-04, train_loss: 0.3155, train_acc: 0.8940 test_loss: 0.7487, test_acc: 0.7933, best: 0.7933, time: 0:03:56
 Epoch: 257, lr: 4.0e-04, train_loss: 0.3161, train_acc: 0.8894 test_loss: 0.7539, test_acc: 0.7929, best: 0.7933, time: 0:03:56
 Epoch: 258, lr: 4.0e-04, train_loss: 0.3208, train_acc: 0.8876 test_loss: 0.7443, test_acc: 0.7941, best: 0.7941, time: 0:03:56
 Epoch: 259, lr: 4.0e-04, train_loss: 0.3098, train_acc: 0.8900 test_loss: 0.7491, test_acc: 0.7926, best: 0.7941, time: 0:03:56
 Epoch: 260, lr: 4.0e-04, train_loss: 0.3152, train_acc: 0.8868 test_loss: 0.7480, test_acc: 0.7923, best: 0.7941, time: 0:03:56
 Epoch: 261, lr: 4.0e-04, train_loss: 0.3400, train_acc: 0.8850 test_loss: 0.7496, test_acc: 0.7945, best: 0.7945, time: 0:03:56
 Epoch: 262, lr: 4.0e-04, train_loss: 0.3068, train_acc: 0.8958 test_loss: 0.7421, test_acc: 0.7890, best: 0.7945, time: 0:03:56
 Epoch: 263, lr: 4.0e-04, train_loss: 0.3361, train_acc: 0.8818 test_loss: 0.7498, test_acc: 0.7885, best: 0.7945, time: 0:03:56
 Epoch: 264, lr: 4.0e-04, train_loss: 0.3169, train_acc: 0.8928 test_loss: 0.7816, test_acc: 0.7845, best: 0.7945, time: 0:03:56
 Epoch: 265, lr: 4.0e-04, train_loss: 0.3180, train_acc: 0.8894 test_loss: 0.7643, test_acc: 0.7856, best: 0.7945, time: 0:03:56
 Epoch: 266, lr: 4.0e-04, train_loss: 0.3187, train_acc: 0.8904 test_loss: 0.7793, test_acc: 0.7884, best: 0.7945, time: 0:03:56
 Epoch: 267, lr: 4.0e-04, train_loss: 0.3210, train_acc: 0.8930 test_loss: 0.7755, test_acc: 0.7881, best: 0.7945, time: 0:03:56
 Epoch: 268, lr: 4.0e-04, train_loss: 0.3334, train_acc: 0.8794 test_loss: 0.7478, test_acc: 0.7941, best: 0.7945, time: 0:03:56
 Epoch: 269, lr: 4.0e-04, train_loss: 0.3342, train_acc: 0.8864 test_loss: 0.7610, test_acc: 0.7910, best: 0.7945, time: 0:03:56
 Epoch: 270, lr: 8.0e-05, train_loss: 0.3042, train_acc: 0.8918 test_loss: 0.7543, test_acc: 0.7919, best: 0.7945, time: 0:03:56
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2954, train_acc: 0.8952 test_loss: 0.7478, test_acc: 0.7859, best: 0.7945, time: 0:03:56
 Epoch: 272, lr: 8.0e-05, train_loss: 0.3207, train_acc: 0.8898 test_loss: 0.7711, test_acc: 0.7874, best: 0.7945, time: 0:03:56
 Epoch: 273, lr: 8.0e-05, train_loss: 0.3061, train_acc: 0.8904 test_loss: 0.7436, test_acc: 0.7915, best: 0.7945, time: 0:03:56
 Epoch: 274, lr: 8.0e-05, train_loss: 0.3004, train_acc: 0.9000 test_loss: 0.7563, test_acc: 0.7904, best: 0.7945, time: 0:03:56
 Epoch: 275, lr: 8.0e-05, train_loss: 0.3163, train_acc: 0.8914 test_loss: 0.7505, test_acc: 0.7910, best: 0.7945, time: 0:03:56
 Epoch: 276, lr: 8.0e-05, train_loss: 0.3088, train_acc: 0.8922 test_loss: 0.7647, test_acc: 0.7870, best: 0.7945, time: 0:03:56
 Epoch: 277, lr: 8.0e-05, train_loss: 0.3064, train_acc: 0.8984 test_loss: 0.7761, test_acc: 0.7897, best: 0.7945, time: 0:03:56
 Epoch: 278, lr: 8.0e-05, train_loss: 0.3036, train_acc: 0.8972 test_loss: 0.7704, test_acc: 0.7889, best: 0.7945, time: 0:03:56
 Epoch: 279, lr: 8.0e-05, train_loss: 0.3199, train_acc: 0.8878 test_loss: 0.7578, test_acc: 0.7861, best: 0.7945, time: 0:03:56
 Epoch: 280, lr: 8.0e-05, train_loss: 0.3027, train_acc: 0.8978 test_loss: 0.7647, test_acc: 0.7894, best: 0.7945, time: 0:03:56
 Epoch: 281, lr: 8.0e-05, train_loss: 0.2951, train_acc: 0.8974 test_loss: 0.7573, test_acc: 0.7887, best: 0.7945, time: 0:03:56
 Epoch: 282, lr: 8.0e-05, train_loss: 0.3134, train_acc: 0.8906 test_loss: 0.7545, test_acc: 0.7905, best: 0.7945, time: 0:03:56
 Epoch: 283, lr: 8.0e-05, train_loss: 0.3242, train_acc: 0.8896 test_loss: 0.7682, test_acc: 0.7907, best: 0.7945, time: 0:03:56
 Epoch: 284, lr: 8.0e-05, train_loss: 0.3186, train_acc: 0.8912 test_loss: 0.7587, test_acc: 0.7929, best: 0.7945, time: 0:03:56
 Epoch: 285, lr: 8.0e-05, train_loss: 0.3183, train_acc: 0.8882 test_loss: 0.7599, test_acc: 0.7887, best: 0.7945, time: 0:03:56
 Epoch: 286, lr: 8.0e-05, train_loss: 0.3346, train_acc: 0.8820 test_loss: 0.7639, test_acc: 0.7881, best: 0.7945, time: 0:03:56
 Epoch: 287, lr: 8.0e-05, train_loss: 0.3239, train_acc: 0.8876 test_loss: 0.7577, test_acc: 0.7920, best: 0.7945, time: 0:03:56
 Epoch: 288, lr: 8.0e-05, train_loss: 0.3037, train_acc: 0.8938 test_loss: 0.7561, test_acc: 0.7910, best: 0.7945, time: 0:03:56
 Epoch: 289, lr: 8.0e-05, train_loss: 0.3176, train_acc: 0.8894 test_loss: 0.7460, test_acc: 0.7917, best: 0.7945, time: 0:03:56
 Epoch: 290, lr: 8.0e-05, train_loss: 0.3154, train_acc: 0.8952 test_loss: 0.7497, test_acc: 0.7913, best: 0.7945, time: 0:03:56
 Epoch: 291, lr: 8.0e-05, train_loss: 0.2932, train_acc: 0.8974 test_loss: 0.7806, test_acc: 0.7865, best: 0.7945, time: 0:03:56
 Epoch: 292, lr: 8.0e-05, train_loss: 0.3121, train_acc: 0.8908 test_loss: 0.7601, test_acc: 0.7861, best: 0.7945, time: 0:03:56
 Epoch: 293, lr: 8.0e-05, train_loss: 0.3226, train_acc: 0.8884 test_loss: 0.7600, test_acc: 0.7936, best: 0.7945, time: 0:03:56
 Epoch: 294, lr: 8.0e-05, train_loss: 0.3118, train_acc: 0.8950 test_loss: 0.7621, test_acc: 0.7903, best: 0.7945, time: 0:03:56
 Epoch: 295, lr: 8.0e-05, train_loss: 0.2972, train_acc: 0.8996 test_loss: 0.7804, test_acc: 0.7900, best: 0.7945, time: 0:03:56
 Epoch: 296, lr: 8.0e-05, train_loss: 0.3047, train_acc: 0.8912 test_loss: 0.7516, test_acc: 0.7919, best: 0.7945, time: 0:03:56
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2846, train_acc: 0.9042 test_loss: 0.7718, test_acc: 0.7903, best: 0.7945, time: 0:03:56
 Epoch: 298, lr: 8.0e-05, train_loss: 0.3164, train_acc: 0.8896 test_loss: 0.7621, test_acc: 0.7915, best: 0.7945, time: 0:03:56
 Epoch: 299, lr: 8.0e-05, train_loss: 0.3278, train_acc: 0.8876 test_loss: 0.7547, test_acc: 0.7901, best: 0.7945, time: 0:03:56
 Highest accuracy: 0.7945