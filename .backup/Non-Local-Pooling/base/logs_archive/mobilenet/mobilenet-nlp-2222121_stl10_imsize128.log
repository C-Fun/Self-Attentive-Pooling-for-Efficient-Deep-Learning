
 Run on time: 2022-07-03 01:02:56.507656

 Architecture: mobilenet-nlp-2222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 4,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 8,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 16,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 64,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP-2222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(128, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 64)
                  (col_embed): Embedding(256, 64)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.6264, train_acc: 0.1472 test_loss: 2.1507, test_acc: 0.1851, best: 0.1851, time: 0:02:31
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1839, train_acc: 0.1858 test_loss: 2.2506, test_acc: 0.1376, best: 0.1851, time: 0:02:30
 Epoch: 3, lr: 1.0e-02, train_loss: 2.1024, train_acc: 0.1880 test_loss: 1.8852, test_acc: 0.2699, best: 0.2699, time: 0:02:31
 Epoch: 4, lr: 1.0e-02, train_loss: 2.0630, train_acc: 0.2008 test_loss: 1.9117, test_acc: 0.2491, best: 0.2699, time: 0:02:30
 Epoch: 5, lr: 1.0e-02, train_loss: 2.0223, train_acc: 0.2166 test_loss: 1.8554, test_acc: 0.2467, best: 0.2699, time: 0:02:30
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9898, train_acc: 0.2308 test_loss: 1.7753, test_acc: 0.2904, best: 0.2904, time: 0:02:30
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9694, train_acc: 0.2476 test_loss: 1.8016, test_acc: 0.3034, best: 0.3034, time: 0:02:30
 Epoch: 8, lr: 1.0e-02, train_loss: 1.9741, train_acc: 0.2356 test_loss: 1.7630, test_acc: 0.2993, best: 0.3034, time: 0:02:30
 Epoch: 9, lr: 1.0e-02, train_loss: 2.0132, train_acc: 0.2452 test_loss: 1.8433, test_acc: 0.2953, best: 0.3034, time: 0:02:30
 Epoch: 10, lr: 1.0e-02, train_loss: 2.0229, train_acc: 0.2356 test_loss: 1.8134, test_acc: 0.2684, best: 0.3034, time: 0:02:30
 Epoch: 11, lr: 1.0e-02, train_loss: 1.9500, train_acc: 0.2528 test_loss: 1.8969, test_acc: 0.2764, best: 0.3034, time: 0:02:30
 Epoch: 12, lr: 1.0e-02, train_loss: 2.0015, train_acc: 0.2352 test_loss: 1.8005, test_acc: 0.2945, best: 0.3034, time: 0:02:30
 Epoch: 13, lr: 1.0e-02, train_loss: 1.9705, train_acc: 0.2492 test_loss: 1.7905, test_acc: 0.2994, best: 0.3034, time: 0:02:30
 Epoch: 14, lr: 1.0e-02, train_loss: 1.9286, train_acc: 0.2644 test_loss: 1.7361, test_acc: 0.3212, best: 0.3212, time: 0:02:31
 Epoch: 15, lr: 1.0e-02, train_loss: 1.9198, train_acc: 0.2598 test_loss: 1.7161, test_acc: 0.3286, best: 0.3286, time: 0:02:30
 Epoch: 16, lr: 1.0e-02, train_loss: 1.9137, train_acc: 0.2760 test_loss: 1.6864, test_acc: 0.3554, best: 0.3554, time: 0:02:30
 Epoch: 17, lr: 1.0e-02, train_loss: 1.9065, train_acc: 0.2838 test_loss: 1.7172, test_acc: 0.3431, best: 0.3554, time: 0:02:30
 Epoch: 18, lr: 1.0e-02, train_loss: 1.8983, train_acc: 0.2852 test_loss: 1.7129, test_acc: 0.3200, best: 0.3554, time: 0:02:30
 Epoch: 19, lr: 1.0e-02, train_loss: 1.8953, train_acc: 0.2826 test_loss: 1.6948, test_acc: 0.3501, best: 0.3554, time: 0:02:30
 Epoch: 20, lr: 1.0e-02, train_loss: 1.8625, train_acc: 0.2808 test_loss: 1.7149, test_acc: 0.3279, best: 0.3554, time: 0:02:30
 Epoch: 21, lr: 1.0e-02, train_loss: 1.8702, train_acc: 0.2940 test_loss: 1.6463, test_acc: 0.3614, best: 0.3614, time: 0:02:30
 Epoch: 22, lr: 1.0e-02, train_loss: 1.8650, train_acc: 0.2866 test_loss: 1.7211, test_acc: 0.3139, best: 0.3614, time: 0:02:30
 Epoch: 23, lr: 1.0e-02, train_loss: 1.9140, train_acc: 0.2706 test_loss: 1.6958, test_acc: 0.3616, best: 0.3616, time: 0:02:30
 Epoch: 24, lr: 1.0e-02, train_loss: 1.8662, train_acc: 0.2894 test_loss: 1.7052, test_acc: 0.3227, best: 0.3616, time: 0:02:30
 Epoch: 25, lr: 1.0e-02, train_loss: 1.8664, train_acc: 0.2804 test_loss: 1.6838, test_acc: 0.3459, best: 0.3616, time: 0:02:30
 Epoch: 26, lr: 1.0e-02, train_loss: 1.8829, train_acc: 0.2798 test_loss: 1.6948, test_acc: 0.3431, best: 0.3616, time: 0:02:30
 Epoch: 27, lr: 1.0e-02, train_loss: 1.8303, train_acc: 0.2994 test_loss: 1.6591, test_acc: 0.3603, best: 0.3616, time: 0:02:30
 Epoch: 28, lr: 1.0e-02, train_loss: 1.8551, train_acc: 0.2894 test_loss: 1.6378, test_acc: 0.3678, best: 0.3678, time: 0:02:30
 Epoch: 29, lr: 1.0e-02, train_loss: 1.8565, train_acc: 0.2920 test_loss: 1.6318, test_acc: 0.3676, best: 0.3678, time: 0:02:30
 Epoch: 30, lr: 1.0e-02, train_loss: 1.8233, train_acc: 0.3026 test_loss: 1.5797, test_acc: 0.3837, best: 0.3837, time: 0:02:30
 Epoch: 31, lr: 1.0e-02, train_loss: 1.7804, train_acc: 0.3140 test_loss: 1.5800, test_acc: 0.3864, best: 0.3864, time: 0:02:30
 Epoch: 32, lr: 1.0e-02, train_loss: 1.7775, train_acc: 0.3088 test_loss: 1.5984, test_acc: 0.3706, best: 0.3864, time: 0:02:30
 Epoch: 33, lr: 1.0e-02, train_loss: 1.7849, train_acc: 0.3262 test_loss: 1.5650, test_acc: 0.4006, best: 0.4006, time: 0:02:30
 Epoch: 34, lr: 1.0e-02, train_loss: 1.7784, train_acc: 0.3240 test_loss: 1.5835, test_acc: 0.3889, best: 0.4006, time: 0:02:30
 Epoch: 35, lr: 1.0e-02, train_loss: 1.7444, train_acc: 0.3354 test_loss: 1.5608, test_acc: 0.3866, best: 0.4006, time: 0:02:30
 Epoch: 36, lr: 1.0e-02, train_loss: 1.7626, train_acc: 0.3240 test_loss: 1.5680, test_acc: 0.3734, best: 0.4006, time: 0:02:30
 Epoch: 37, lr: 1.0e-02, train_loss: 1.7620, train_acc: 0.3240 test_loss: 1.6435, test_acc: 0.3625, best: 0.4006, time: 0:02:30
 Epoch: 38, lr: 1.0e-02, train_loss: 1.7378, train_acc: 0.3348 test_loss: 1.6201, test_acc: 0.3920, best: 0.4006, time: 0:02:30
 Epoch: 39, lr: 1.0e-02, train_loss: 1.7207, train_acc: 0.3444 test_loss: 1.5476, test_acc: 0.4255, best: 0.4255, time: 0:02:30
 Epoch: 40, lr: 1.0e-02, train_loss: 1.7179, train_acc: 0.3468 test_loss: 1.5788, test_acc: 0.3975, best: 0.4255, time: 0:02:30
 Epoch: 41, lr: 1.0e-02, train_loss: 1.7007, train_acc: 0.3624 test_loss: 1.6148, test_acc: 0.3864, best: 0.4255, time: 0:02:30
 Epoch: 42, lr: 1.0e-02, train_loss: 1.7002, train_acc: 0.3566 test_loss: 1.5792, test_acc: 0.3754, best: 0.4255, time: 0:02:30
 Epoch: 43, lr: 1.0e-02, train_loss: 1.6783, train_acc: 0.3634 test_loss: 1.4962, test_acc: 0.4305, best: 0.4305, time: 0:02:30
 Epoch: 44, lr: 1.0e-02, train_loss: 1.6855, train_acc: 0.3606 test_loss: 1.5312, test_acc: 0.4188, best: 0.4305, time: 0:02:30
 Epoch: 45, lr: 1.0e-02, train_loss: 1.6737, train_acc: 0.3748 test_loss: 1.5506, test_acc: 0.4204, best: 0.4305, time: 0:02:30
 Epoch: 46, lr: 1.0e-02, train_loss: 1.6598, train_acc: 0.3652 test_loss: 1.4615, test_acc: 0.4646, best: 0.4646, time: 0:02:30
 Epoch: 47, lr: 1.0e-02, train_loss: 1.6712, train_acc: 0.3658 test_loss: 1.5077, test_acc: 0.4196, best: 0.4646, time: 0:02:30
 Epoch: 48, lr: 1.0e-02, train_loss: 1.6530, train_acc: 0.3688 test_loss: 1.4766, test_acc: 0.4411, best: 0.4646, time: 0:02:30
 Epoch: 49, lr: 1.0e-02, train_loss: 1.6498, train_acc: 0.3650 test_loss: 1.4908, test_acc: 0.4426, best: 0.4646, time: 0:02:30
 Epoch: 50, lr: 1.0e-02, train_loss: 1.6299, train_acc: 0.3806 test_loss: 1.4453, test_acc: 0.4666, best: 0.4666, time: 0:02:30
 Epoch: 51, lr: 1.0e-02, train_loss: 1.6209, train_acc: 0.3850 test_loss: 1.4496, test_acc: 0.4610, best: 0.4666, time: 0:02:30
 Epoch: 52, lr: 1.0e-02, train_loss: 1.6219, train_acc: 0.3932 test_loss: 1.5326, test_acc: 0.4201, best: 0.4666, time: 0:02:30
 Epoch: 53, lr: 1.0e-02, train_loss: 1.6295, train_acc: 0.3862 test_loss: 1.4829, test_acc: 0.4447, best: 0.4666, time: 0:02:30
 Epoch: 54, lr: 1.0e-02, train_loss: 1.6050, train_acc: 0.3998 test_loss: 1.4379, test_acc: 0.4591, best: 0.4666, time: 0:02:30
 Epoch: 55, lr: 1.0e-02, train_loss: 1.6105, train_acc: 0.3986 test_loss: 1.4794, test_acc: 0.4484, best: 0.4666, time: 0:02:30
 Epoch: 56, lr: 1.0e-02, train_loss: 1.6167, train_acc: 0.3920 test_loss: 1.4753, test_acc: 0.4475, best: 0.4666, time: 0:02:30
 Epoch: 57, lr: 1.0e-02, train_loss: 1.5774, train_acc: 0.4142 test_loss: 1.5216, test_acc: 0.4552, best: 0.4666, time: 0:02:30
 Epoch: 58, lr: 1.0e-02, train_loss: 1.6173, train_acc: 0.3952 test_loss: 1.4915, test_acc: 0.4770, best: 0.4770, time: 0:02:30
 Epoch: 59, lr: 1.0e-02, train_loss: 1.6258, train_acc: 0.3892 test_loss: 1.4542, test_acc: 0.4607, best: 0.4770, time: 0:02:30
 Epoch: 60, lr: 1.0e-02, train_loss: 1.6113, train_acc: 0.4020 test_loss: 1.5119, test_acc: 0.4259, best: 0.4770, time: 0:02:30
 Epoch: 61, lr: 1.0e-02, train_loss: 1.5805, train_acc: 0.4136 test_loss: 1.3783, test_acc: 0.4789, best: 0.4789, time: 0:02:30
 Epoch: 62, lr: 1.0e-02, train_loss: 1.5541, train_acc: 0.4146 test_loss: 1.3807, test_acc: 0.4826, best: 0.4826, time: 0:02:30
 Epoch: 63, lr: 1.0e-02, train_loss: 1.5471, train_acc: 0.4166 test_loss: 1.3730, test_acc: 0.4888, best: 0.4888, time: 0:02:30
 Epoch: 64, lr: 1.0e-02, train_loss: 1.5573, train_acc: 0.4154 test_loss: 1.4419, test_acc: 0.4676, best: 0.4888, time: 0:02:30
 Epoch: 65, lr: 1.0e-02, train_loss: 1.5443, train_acc: 0.4242 test_loss: 1.4256, test_acc: 0.4659, best: 0.4888, time: 0:02:30
 Epoch: 66, lr: 1.0e-02, train_loss: 1.5338, train_acc: 0.4290 test_loss: 1.3708, test_acc: 0.4899, best: 0.4899, time: 0:02:30
 Epoch: 67, lr: 1.0e-02, train_loss: 1.4772, train_acc: 0.4510 test_loss: 1.3303, test_acc: 0.5074, best: 0.5074, time: 0:02:30
 Epoch: 68, lr: 1.0e-02, train_loss: 1.5152, train_acc: 0.4354 test_loss: 1.3359, test_acc: 0.5196, best: 0.5196, time: 0:02:30
 Epoch: 69, lr: 1.0e-02, train_loss: 1.4988, train_acc: 0.4506 test_loss: 1.3334, test_acc: 0.4986, best: 0.5196, time: 0:02:30
 Epoch: 70, lr: 1.0e-02, train_loss: 1.4810, train_acc: 0.4382 test_loss: 1.3629, test_acc: 0.5055, best: 0.5196, time: 0:02:30
 Epoch: 71, lr: 1.0e-02, train_loss: 1.4746, train_acc: 0.4530 test_loss: 1.3232, test_acc: 0.5124, best: 0.5196, time: 0:02:30
 Epoch: 72, lr: 1.0e-02, train_loss: 1.4662, train_acc: 0.4648 test_loss: 1.3697, test_acc: 0.4864, best: 0.5196, time: 0:02:30
 Epoch: 73, lr: 1.0e-02, train_loss: 1.4664, train_acc: 0.4510 test_loss: 1.2955, test_acc: 0.5139, best: 0.5196, time: 0:02:30
 Epoch: 74, lr: 1.0e-02, train_loss: 1.4554, train_acc: 0.4584 test_loss: 1.3272, test_acc: 0.5169, best: 0.5196, time: 0:02:30
 Epoch: 75, lr: 1.0e-02, train_loss: 1.4480, train_acc: 0.4608 test_loss: 1.3778, test_acc: 0.5100, best: 0.5196, time: 0:02:30
 Epoch: 76, lr: 1.0e-02, train_loss: 1.4525, train_acc: 0.4608 test_loss: 1.2973, test_acc: 0.5202, best: 0.5202, time: 0:02:30
 Epoch: 77, lr: 1.0e-02, train_loss: 1.4365, train_acc: 0.4654 test_loss: 1.3543, test_acc: 0.5135, best: 0.5202, time: 0:02:30
 Epoch: 78, lr: 1.0e-02, train_loss: 1.4532, train_acc: 0.4634 test_loss: 1.3063, test_acc: 0.5363, best: 0.5363, time: 0:02:30
 Epoch: 79, lr: 1.0e-02, train_loss: 1.4298, train_acc: 0.4646 test_loss: 1.2750, test_acc: 0.5361, best: 0.5363, time: 0:02:30
 Epoch: 80, lr: 1.0e-02, train_loss: 1.4340, train_acc: 0.4702 test_loss: 1.3062, test_acc: 0.5234, best: 0.5363, time: 0:02:30
 Epoch: 81, lr: 1.0e-02, train_loss: 1.4125, train_acc: 0.4710 test_loss: 1.3078, test_acc: 0.5305, best: 0.5363, time: 0:02:30
 Epoch: 82, lr: 1.0e-02, train_loss: 1.4088, train_acc: 0.4850 test_loss: 1.2514, test_acc: 0.5370, best: 0.5370, time: 0:02:30
 Epoch: 83, lr: 1.0e-02, train_loss: 1.4007, train_acc: 0.4804 test_loss: 1.3903, test_acc: 0.4833, best: 0.5370, time: 0:02:30
 Epoch: 84, lr: 1.0e-02, train_loss: 1.4169, train_acc: 0.4792 test_loss: 1.2772, test_acc: 0.5391, best: 0.5391, time: 0:02:30
 Epoch: 85, lr: 1.0e-02, train_loss: 1.4185, train_acc: 0.4820 test_loss: 1.2606, test_acc: 0.5515, best: 0.5515, time: 0:02:30
 Epoch: 86, lr: 1.0e-02, train_loss: 1.3924, train_acc: 0.4900 test_loss: 1.2564, test_acc: 0.5493, best: 0.5515, time: 0:02:30
 Epoch: 87, lr: 1.0e-02, train_loss: 1.3709, train_acc: 0.4962 test_loss: 1.2825, test_acc: 0.5331, best: 0.5515, time: 0:02:30
 Epoch: 88, lr: 1.0e-02, train_loss: 1.3689, train_acc: 0.4978 test_loss: 1.2324, test_acc: 0.5455, best: 0.5515, time: 0:02:30
 Epoch: 89, lr: 1.0e-02, train_loss: 1.3973, train_acc: 0.4918 test_loss: 1.2668, test_acc: 0.5425, best: 0.5515, time: 0:02:30
 Epoch: 90, lr: 1.0e-02, train_loss: 1.3925, train_acc: 0.4868 test_loss: 1.2317, test_acc: 0.5505, best: 0.5515, time: 0:02:30
 Epoch: 91, lr: 1.0e-02, train_loss: 1.3732, train_acc: 0.4996 test_loss: 1.2228, test_acc: 0.5613, best: 0.5613, time: 0:02:30
 Epoch: 92, lr: 1.0e-02, train_loss: 1.3522, train_acc: 0.4962 test_loss: 1.2283, test_acc: 0.5487, best: 0.5613, time: 0:02:30
 Epoch: 93, lr: 1.0e-02, train_loss: 1.3557, train_acc: 0.4986 test_loss: 1.2224, test_acc: 0.5610, best: 0.5613, time: 0:02:30
 Epoch: 94, lr: 1.0e-02, train_loss: 1.3355, train_acc: 0.5098 test_loss: 1.2352, test_acc: 0.5499, best: 0.5613, time: 0:02:30
 Epoch: 95, lr: 1.0e-02, train_loss: 1.3336, train_acc: 0.5106 test_loss: 1.3219, test_acc: 0.5331, best: 0.5613, time: 0:02:30
 Epoch: 96, lr: 1.0e-02, train_loss: 1.3260, train_acc: 0.5190 test_loss: 1.1982, test_acc: 0.5597, best: 0.5613, time: 0:02:30
 Epoch: 97, lr: 1.0e-02, train_loss: 1.3242, train_acc: 0.5150 test_loss: 1.2302, test_acc: 0.5560, best: 0.5613, time: 0:02:30
 Epoch: 98, lr: 1.0e-02, train_loss: 1.3301, train_acc: 0.5230 test_loss: 1.2079, test_acc: 0.5737, best: 0.5737, time: 0:02:30
 Epoch: 99, lr: 1.0e-02, train_loss: 1.3264, train_acc: 0.5160 test_loss: 1.1816, test_acc: 0.5625, best: 0.5737, time: 0:02:30
 Epoch: 100, lr: 1.0e-02, train_loss: 1.3229, train_acc: 0.5116 test_loss: 1.1655, test_acc: 0.5819, best: 0.5819, time: 0:02:30
 Epoch: 101, lr: 1.0e-02, train_loss: 1.2975, train_acc: 0.5270 test_loss: 1.1982, test_acc: 0.5711, best: 0.5819, time: 0:02:30
 Epoch: 102, lr: 1.0e-02, train_loss: 1.2924, train_acc: 0.5304 test_loss: 1.2107, test_acc: 0.5696, best: 0.5819, time: 0:02:30
 Epoch: 103, lr: 1.0e-02, train_loss: 1.2953, train_acc: 0.5292 test_loss: 1.2002, test_acc: 0.5641, best: 0.5819, time: 0:02:30
 Epoch: 104, lr: 1.0e-02, train_loss: 1.2674, train_acc: 0.5334 test_loss: 1.1420, test_acc: 0.5945, best: 0.5945, time: 0:02:30
 Epoch: 105, lr: 1.0e-02, train_loss: 1.2927, train_acc: 0.5206 test_loss: 1.2116, test_acc: 0.5659, best: 0.5945, time: 0:02:30
 Epoch: 106, lr: 1.0e-02, train_loss: 1.3053, train_acc: 0.5202 test_loss: 1.1729, test_acc: 0.5948, best: 0.5948, time: 0:02:30
 Epoch: 107, lr: 1.0e-02, train_loss: 1.2697, train_acc: 0.5376 test_loss: 1.1704, test_acc: 0.5833, best: 0.5948, time: 0:02:30
 Epoch: 108, lr: 1.0e-02, train_loss: 1.2480, train_acc: 0.5356 test_loss: 1.1699, test_acc: 0.5840, best: 0.5948, time: 0:02:30
 Epoch: 109, lr: 1.0e-02, train_loss: 1.2605, train_acc: 0.5382 test_loss: 1.1962, test_acc: 0.5643, best: 0.5948, time: 0:02:30
 Epoch: 110, lr: 1.0e-02, train_loss: 1.2693, train_acc: 0.5392 test_loss: 1.2068, test_acc: 0.5625, best: 0.5948, time: 0:02:30
 Epoch: 111, lr: 1.0e-02, train_loss: 1.2861, train_acc: 0.5210 test_loss: 1.1841, test_acc: 0.5684, best: 0.5948, time: 0:02:30
 Epoch: 112, lr: 1.0e-02, train_loss: 1.2885, train_acc: 0.5250 test_loss: 1.1577, test_acc: 0.5869, best: 0.5948, time: 0:02:30
 Epoch: 113, lr: 1.0e-02, train_loss: 1.2541, train_acc: 0.5420 test_loss: 1.1554, test_acc: 0.5844, best: 0.5948, time: 0:02:30
 Epoch: 114, lr: 1.0e-02, train_loss: 1.2776, train_acc: 0.5278 test_loss: 1.1843, test_acc: 0.5694, best: 0.5948, time: 0:02:30
 Epoch: 115, lr: 1.0e-02, train_loss: 1.2566, train_acc: 0.5430 test_loss: 1.1897, test_acc: 0.5814, best: 0.5948, time: 0:02:30
 Epoch: 116, lr: 1.0e-02, train_loss: 1.2535, train_acc: 0.5434 test_loss: 1.1243, test_acc: 0.6010, best: 0.6010, time: 0:02:30
 Epoch: 117, lr: 1.0e-02, train_loss: 1.2554, train_acc: 0.5484 test_loss: 1.2426, test_acc: 0.5549, best: 0.6010, time: 0:02:30
 Epoch: 118, lr: 1.0e-02, train_loss: 1.2591, train_acc: 0.5436 test_loss: 1.1257, test_acc: 0.6004, best: 0.6010, time: 0:02:30
 Epoch: 119, lr: 1.0e-02, train_loss: 1.2673, train_acc: 0.5342 test_loss: 1.1338, test_acc: 0.5889, best: 0.6010, time: 0:02:30
 Epoch: 120, lr: 1.0e-02, train_loss: 1.2563, train_acc: 0.5486 test_loss: 1.1365, test_acc: 0.5835, best: 0.6010, time: 0:02:30
 Epoch: 121, lr: 1.0e-02, train_loss: 1.2226, train_acc: 0.5586 test_loss: 1.1133, test_acc: 0.6028, best: 0.6028, time: 0:02:30
 Epoch: 122, lr: 1.0e-02, train_loss: 1.2141, train_acc: 0.5566 test_loss: 1.1101, test_acc: 0.6040, best: 0.6040, time: 0:02:30
 Epoch: 123, lr: 1.0e-02, train_loss: 1.2378, train_acc: 0.5418 test_loss: 1.0913, test_acc: 0.6156, best: 0.6156, time: 0:02:30
 Epoch: 124, lr: 1.0e-02, train_loss: 1.2226, train_acc: 0.5618 test_loss: 1.1031, test_acc: 0.6041, best: 0.6156, time: 0:02:30
 Epoch: 125, lr: 1.0e-02, train_loss: 1.2192, train_acc: 0.5626 test_loss: 1.2163, test_acc: 0.5601, best: 0.6156, time: 0:02:30
 Epoch: 126, lr: 1.0e-02, train_loss: 1.2659, train_acc: 0.5344 test_loss: 1.1519, test_acc: 0.5833, best: 0.6156, time: 0:02:30
 Epoch: 127, lr: 1.0e-02, train_loss: 1.1998, train_acc: 0.5584 test_loss: 1.1100, test_acc: 0.6006, best: 0.6156, time: 0:02:30
 Epoch: 128, lr: 1.0e-02, train_loss: 1.2070, train_acc: 0.5586 test_loss: 1.1611, test_acc: 0.5777, best: 0.6156, time: 0:02:30
 Epoch: 129, lr: 1.0e-02, train_loss: 1.1968, train_acc: 0.5640 test_loss: 1.1384, test_acc: 0.5896, best: 0.6156, time: 0:02:30
 Epoch: 130, lr: 1.0e-02, train_loss: 1.1838, train_acc: 0.5740 test_loss: 1.1348, test_acc: 0.5924, best: 0.6156, time: 0:02:30
 Epoch: 131, lr: 1.0e-02, train_loss: 1.1765, train_acc: 0.5768 test_loss: 1.1212, test_acc: 0.5946, best: 0.6156, time: 0:02:30
 Epoch: 132, lr: 1.0e-02, train_loss: 1.2233, train_acc: 0.5478 test_loss: 1.1005, test_acc: 0.6042, best: 0.6156, time: 0:02:30
 Epoch: 133, lr: 1.0e-02, train_loss: 1.2111, train_acc: 0.5622 test_loss: 1.1075, test_acc: 0.6001, best: 0.6156, time: 0:02:30
 Epoch: 134, lr: 1.0e-02, train_loss: 1.1904, train_acc: 0.5670 test_loss: 1.0813, test_acc: 0.6132, best: 0.6156, time: 0:02:30
 Epoch: 135, lr: 1.0e-02, train_loss: 1.1853, train_acc: 0.5686 test_loss: 1.0892, test_acc: 0.6105, best: 0.6156, time: 0:02:30
 Epoch: 136, lr: 1.0e-02, train_loss: 1.1688, train_acc: 0.5742 test_loss: 1.0565, test_acc: 0.6181, best: 0.6181, time: 0:02:30
 Epoch: 137, lr: 1.0e-02, train_loss: 1.1930, train_acc: 0.5746 test_loss: 1.1054, test_acc: 0.6029, best: 0.6181, time: 0:02:30
 Epoch: 138, lr: 1.0e-02, train_loss: 1.1511, train_acc: 0.5810 test_loss: 1.0983, test_acc: 0.6059, best: 0.6181, time: 0:02:30
 Epoch: 139, lr: 1.0e-02, train_loss: 1.1773, train_acc: 0.5722 test_loss: 1.0813, test_acc: 0.6145, best: 0.6181, time: 0:02:30
 Epoch: 140, lr: 1.0e-02, train_loss: 1.1596, train_acc: 0.5868 test_loss: 1.1010, test_acc: 0.6078, best: 0.6181, time: 0:02:30
 Epoch: 141, lr: 1.0e-02, train_loss: 1.1547, train_acc: 0.5790 test_loss: 1.0462, test_acc: 0.6236, best: 0.6236, time: 0:02:30
 Epoch: 142, lr: 1.0e-02, train_loss: 1.1525, train_acc: 0.5756 test_loss: 1.1223, test_acc: 0.6008, best: 0.6236, time: 0:02:30
 Epoch: 143, lr: 1.0e-02, train_loss: 1.1678, train_acc: 0.5760 test_loss: 1.0483, test_acc: 0.6234, best: 0.6236, time: 0:02:30
 Epoch: 144, lr: 1.0e-02, train_loss: 1.1518, train_acc: 0.5816 test_loss: 1.0572, test_acc: 0.6140, best: 0.6236, time: 0:02:30
 Epoch: 145, lr: 1.0e-02, train_loss: 1.1399, train_acc: 0.5864 test_loss: 1.0577, test_acc: 0.6190, best: 0.6236, time: 0:02:30
 Epoch: 146, lr: 1.0e-02, train_loss: 1.1399, train_acc: 0.5920 test_loss: 1.0435, test_acc: 0.6291, best: 0.6291, time: 0:02:30
 Epoch: 147, lr: 1.0e-02, train_loss: 1.1493, train_acc: 0.5824 test_loss: 1.0588, test_acc: 0.6216, best: 0.6291, time: 0:02:30
 Epoch: 148, lr: 1.0e-02, train_loss: 1.1605, train_acc: 0.5784 test_loss: 1.1060, test_acc: 0.5971, best: 0.6291, time: 0:02:30
 Epoch: 149, lr: 1.0e-02, train_loss: 1.2962, train_acc: 0.5322 test_loss: 1.3617, test_acc: 0.4981, best: 0.6291, time: 0:02:30
 Epoch: 150, lr: 1.0e-02, train_loss: 1.3618, train_acc: 0.5048 test_loss: 1.2881, test_acc: 0.5366, best: 0.6291, time: 0:02:30
 Epoch: 151, lr: 1.0e-02, train_loss: 1.2440, train_acc: 0.5444 test_loss: 1.1410, test_acc: 0.5889, best: 0.6291, time: 0:02:30
 Epoch: 152, lr: 1.0e-02, train_loss: 1.1825, train_acc: 0.5676 test_loss: 1.1102, test_acc: 0.6026, best: 0.6291, time: 0:02:30
 Epoch: 153, lr: 1.0e-02, train_loss: 1.1818, train_acc: 0.5710 test_loss: 1.1001, test_acc: 0.6020, best: 0.6291, time: 0:02:30
 Epoch: 154, lr: 1.0e-02, train_loss: 1.1423, train_acc: 0.5936 test_loss: 1.0578, test_acc: 0.6234, best: 0.6291, time: 0:02:30
 Epoch: 155, lr: 1.0e-02, train_loss: 1.1436, train_acc: 0.5870 test_loss: 1.0971, test_acc: 0.6029, best: 0.6291, time: 0:02:30
 Epoch: 156, lr: 1.0e-02, train_loss: 1.1209, train_acc: 0.5946 test_loss: 1.0510, test_acc: 0.6234, best: 0.6291, time: 0:02:30
 Epoch: 157, lr: 1.0e-02, train_loss: 1.1267, train_acc: 0.5878 test_loss: 1.0743, test_acc: 0.6099, best: 0.6291, time: 0:02:30
 Epoch: 158, lr: 1.0e-02, train_loss: 1.1517, train_acc: 0.5724 test_loss: 1.0541, test_acc: 0.6200, best: 0.6291, time: 0:02:30
 Epoch: 159, lr: 1.0e-02, train_loss: 1.1301, train_acc: 0.5934 test_loss: 1.0755, test_acc: 0.6120, best: 0.6291, time: 0:02:30
 Epoch: 160, lr: 1.0e-02, train_loss: 1.0980, train_acc: 0.6022 test_loss: 1.0725, test_acc: 0.6218, best: 0.6291, time: 0:02:30
 Epoch: 161, lr: 1.0e-02, train_loss: 1.1222, train_acc: 0.5918 test_loss: 1.0516, test_acc: 0.6232, best: 0.6291, time: 0:02:30
 Epoch: 162, lr: 1.0e-02, train_loss: 1.1177, train_acc: 0.5978 test_loss: 1.0646, test_acc: 0.6178, best: 0.6291, time: 0:02:30
 Epoch: 163, lr: 1.0e-02, train_loss: 1.1202, train_acc: 0.5950 test_loss: 1.0206, test_acc: 0.6246, best: 0.6291, time: 0:02:30
 Epoch: 164, lr: 1.0e-02, train_loss: 1.1112, train_acc: 0.5920 test_loss: 1.0484, test_acc: 0.6228, best: 0.6291, time: 0:02:30
 Epoch: 165, lr: 1.0e-02, train_loss: 1.0788, train_acc: 0.6086 test_loss: 1.0256, test_acc: 0.6260, best: 0.6291, time: 0:02:30
 Epoch: 166, lr: 1.0e-02, train_loss: 1.0970, train_acc: 0.5956 test_loss: 1.0324, test_acc: 0.6334, best: 0.6334, time: 0:02:30
 Epoch: 167, lr: 1.0e-02, train_loss: 1.0840, train_acc: 0.6146 test_loss: 1.0498, test_acc: 0.6310, best: 0.6334, time: 0:02:30
 Epoch: 168, lr: 1.0e-02, train_loss: 1.0943, train_acc: 0.6086 test_loss: 1.0264, test_acc: 0.6394, best: 0.6394, time: 0:02:30
 Epoch: 169, lr: 1.0e-02, train_loss: 1.0702, train_acc: 0.6076 test_loss: 1.0485, test_acc: 0.6232, best: 0.6394, time: 0:02:30
 Epoch: 170, lr: 1.0e-02, train_loss: 1.0931, train_acc: 0.6136 test_loss: 1.0397, test_acc: 0.6201, best: 0.6394, time: 0:02:30
 Epoch: 171, lr: 1.0e-02, train_loss: 1.0873, train_acc: 0.6062 test_loss: 1.0294, test_acc: 0.6288, best: 0.6394, time: 0:02:30
 Epoch: 172, lr: 1.0e-02, train_loss: 1.0448, train_acc: 0.6196 test_loss: 1.0497, test_acc: 0.6186, best: 0.6394, time: 0:02:30
 Epoch: 173, lr: 1.0e-02, train_loss: 1.0658, train_acc: 0.6186 test_loss: 0.9872, test_acc: 0.6430, best: 0.6430, time: 0:02:30
 Epoch: 174, lr: 1.0e-02, train_loss: 1.0595, train_acc: 0.6256 test_loss: 1.0333, test_acc: 0.6256, best: 0.6430, time: 0:02:30
 Epoch: 175, lr: 1.0e-02, train_loss: 1.0778, train_acc: 0.6074 test_loss: 1.0452, test_acc: 0.6285, best: 0.6430, time: 0:02:30
 Epoch: 176, lr: 1.0e-02, train_loss: 1.0584, train_acc: 0.6246 test_loss: 1.0383, test_acc: 0.6261, best: 0.6430, time: 0:02:30
 Epoch: 177, lr: 1.0e-02, train_loss: 1.0618, train_acc: 0.6178 test_loss: 1.0014, test_acc: 0.6420, best: 0.6430, time: 0:02:30
 Epoch: 178, lr: 1.0e-02, train_loss: 1.0307, train_acc: 0.6286 test_loss: 1.0582, test_acc: 0.6205, best: 0.6430, time: 0:02:30
 Epoch: 179, lr: 1.0e-02, train_loss: 1.0444, train_acc: 0.6238 test_loss: 1.0026, test_acc: 0.6456, best: 0.6456, time: 0:02:30
 Epoch: 180, lr: 2.0e-03, train_loss: 0.9905, train_acc: 0.6432 test_loss: 0.9594, test_acc: 0.6562, best: 0.6562, time: 0:02:30
 Epoch: 181, lr: 2.0e-03, train_loss: 0.9505, train_acc: 0.6688 test_loss: 0.9500, test_acc: 0.6590, best: 0.6590, time: 0:02:30
 Epoch: 182, lr: 2.0e-03, train_loss: 0.9428, train_acc: 0.6550 test_loss: 0.9686, test_acc: 0.6525, best: 0.6590, time: 0:02:30
 Epoch: 183, lr: 2.0e-03, train_loss: 0.9527, train_acc: 0.6582 test_loss: 0.9569, test_acc: 0.6585, best: 0.6590, time: 0:02:30
 Epoch: 184, lr: 2.0e-03, train_loss: 0.9241, train_acc: 0.6730 test_loss: 0.9419, test_acc: 0.6631, best: 0.6631, time: 0:02:30
 Epoch: 185, lr: 2.0e-03, train_loss: 0.9583, train_acc: 0.6574 test_loss: 0.9440, test_acc: 0.6606, best: 0.6631, time: 0:02:30
 Epoch: 186, lr: 2.0e-03, train_loss: 0.9280, train_acc: 0.6650 test_loss: 0.9338, test_acc: 0.6664, best: 0.6664, time: 0:02:30
 Epoch: 187, lr: 2.0e-03, train_loss: 0.9144, train_acc: 0.6738 test_loss: 0.9350, test_acc: 0.6665, best: 0.6665, time: 0:02:30
 Epoch: 188, lr: 2.0e-03, train_loss: 0.9246, train_acc: 0.6744 test_loss: 0.9559, test_acc: 0.6559, best: 0.6665, time: 0:02:30
 Epoch: 189, lr: 2.0e-03, train_loss: 0.9125, train_acc: 0.6754 test_loss: 0.9468, test_acc: 0.6644, best: 0.6665, time: 0:02:30
 Epoch: 190, lr: 2.0e-03, train_loss: 0.9256, train_acc: 0.6700 test_loss: 0.9445, test_acc: 0.6596, best: 0.6665, time: 0:02:30
 Epoch: 191, lr: 2.0e-03, train_loss: 0.9289, train_acc: 0.6650 test_loss: 0.9323, test_acc: 0.6640, best: 0.6665, time: 0:02:30
 Epoch: 192, lr: 2.0e-03, train_loss: 0.9079, train_acc: 0.6730 test_loss: 0.9627, test_acc: 0.6594, best: 0.6665, time: 0:02:30
 Epoch: 193, lr: 2.0e-03, train_loss: 0.9075, train_acc: 0.6742 test_loss: 0.9616, test_acc: 0.6603, best: 0.6665, time: 0:02:30
 Epoch: 194, lr: 2.0e-03, train_loss: 0.8899, train_acc: 0.6864 test_loss: 0.9382, test_acc: 0.6687, best: 0.6687, time: 0:02:30
 Epoch: 195, lr: 2.0e-03, train_loss: 0.8972, train_acc: 0.6818 test_loss: 0.9378, test_acc: 0.6667, best: 0.6687, time: 0:02:30
 Epoch: 196, lr: 2.0e-03, train_loss: 0.9030, train_acc: 0.6750 test_loss: 0.9245, test_acc: 0.6675, best: 0.6687, time: 0:02:30
 Epoch: 197, lr: 2.0e-03, train_loss: 0.8958, train_acc: 0.6710 test_loss: 0.9373, test_acc: 0.6620, best: 0.6687, time: 0:02:30
 Epoch: 198, lr: 2.0e-03, train_loss: 0.8933, train_acc: 0.6722 test_loss: 0.9377, test_acc: 0.6661, best: 0.6687, time: 0:02:30
 Epoch: 199, lr: 2.0e-03, train_loss: 0.8984, train_acc: 0.6832 test_loss: 0.9417, test_acc: 0.6603, best: 0.6687, time: 0:02:30
 Epoch: 200, lr: 2.0e-03, train_loss: 0.8743, train_acc: 0.6850 test_loss: 0.9266, test_acc: 0.6679, best: 0.6687, time: 0:02:30
 Epoch: 201, lr: 2.0e-03, train_loss: 0.8917, train_acc: 0.6746 test_loss: 0.9629, test_acc: 0.6637, best: 0.6687, time: 0:02:30
 Epoch: 202, lr: 2.0e-03, train_loss: 0.8931, train_acc: 0.6796 test_loss: 0.9316, test_acc: 0.6650, best: 0.6687, time: 0:02:30
 Epoch: 203, lr: 2.0e-03, train_loss: 0.8717, train_acc: 0.6878 test_loss: 0.9421, test_acc: 0.6654, best: 0.6687, time: 0:02:30
 Epoch: 204, lr: 2.0e-03, train_loss: 0.8944, train_acc: 0.6766 test_loss: 0.9594, test_acc: 0.6595, best: 0.6687, time: 0:02:30
 Epoch: 205, lr: 2.0e-03, train_loss: 0.8953, train_acc: 0.6882 test_loss: 0.9543, test_acc: 0.6611, best: 0.6687, time: 0:02:30
 Epoch: 206, lr: 2.0e-03, train_loss: 0.8787, train_acc: 0.6852 test_loss: 0.9424, test_acc: 0.6673, best: 0.6687, time: 0:02:30
 Epoch: 207, lr: 2.0e-03, train_loss: 0.8806, train_acc: 0.6846 test_loss: 0.9451, test_acc: 0.6633, best: 0.6687, time: 0:02:30
 Epoch: 208, lr: 2.0e-03, train_loss: 0.8786, train_acc: 0.6796 test_loss: 0.9424, test_acc: 0.6630, best: 0.6687, time: 0:02:30
 Epoch: 209, lr: 2.0e-03, train_loss: 0.8735, train_acc: 0.6776 test_loss: 0.9329, test_acc: 0.6644, best: 0.6687, time: 0:02:30
 Epoch: 210, lr: 2.0e-03, train_loss: 0.8547, train_acc: 0.6896 test_loss: 0.9241, test_acc: 0.6703, best: 0.6703, time: 0:02:30
 Epoch: 211, lr: 2.0e-03, train_loss: 0.8772, train_acc: 0.6808 test_loss: 0.9313, test_acc: 0.6745, best: 0.6745, time: 0:02:30
 Epoch: 212, lr: 2.0e-03, train_loss: 0.8741, train_acc: 0.6866 test_loss: 0.9543, test_acc: 0.6637, best: 0.6745, time: 0:02:30
 Epoch: 213, lr: 2.0e-03, train_loss: 0.8492, train_acc: 0.6978 test_loss: 0.9567, test_acc: 0.6617, best: 0.6745, time: 0:02:30
 Epoch: 214, lr: 2.0e-03, train_loss: 0.8753, train_acc: 0.6868 test_loss: 0.9517, test_acc: 0.6664, best: 0.6745, time: 0:02:30
 Epoch: 215, lr: 2.0e-03, train_loss: 0.8666, train_acc: 0.6844 test_loss: 0.9478, test_acc: 0.6631, best: 0.6745, time: 0:02:30
 Epoch: 216, lr: 2.0e-03, train_loss: 0.8750, train_acc: 0.6818 test_loss: 0.9605, test_acc: 0.6639, best: 0.6745, time: 0:02:30
 Epoch: 217, lr: 2.0e-03, train_loss: 0.9149, train_acc: 0.6748 test_loss: 0.9385, test_acc: 0.6684, best: 0.6745, time: 0:02:30
 Epoch: 218, lr: 2.0e-03, train_loss: 0.8641, train_acc: 0.6884 test_loss: 0.9420, test_acc: 0.6643, best: 0.6745, time: 0:02:30
 Epoch: 219, lr: 2.0e-03, train_loss: 0.8854, train_acc: 0.6822 test_loss: 0.9288, test_acc: 0.6714, best: 0.6745, time: 0:02:30
 Epoch: 220, lr: 2.0e-03, train_loss: 0.8726, train_acc: 0.6924 test_loss: 0.9167, test_acc: 0.6743, best: 0.6745, time: 0:02:30
 Epoch: 221, lr: 2.0e-03, train_loss: 0.8684, train_acc: 0.6930 test_loss: 0.9310, test_acc: 0.6716, best: 0.6745, time: 0:02:30
 Epoch: 222, lr: 2.0e-03, train_loss: 0.8499, train_acc: 0.6930 test_loss: 0.9207, test_acc: 0.6754, best: 0.6754, time: 0:02:30
 Epoch: 223, lr: 2.0e-03, train_loss: 0.8571, train_acc: 0.6858 test_loss: 0.9432, test_acc: 0.6697, best: 0.6754, time: 0:02:30
 Epoch: 224, lr: 2.0e-03, train_loss: 0.8716, train_acc: 0.6814 test_loss: 0.9423, test_acc: 0.6741, best: 0.6754, time: 0:02:30
 Epoch: 225, lr: 2.0e-03, train_loss: 0.8513, train_acc: 0.6916 test_loss: 0.9571, test_acc: 0.6703, best: 0.6754, time: 0:02:30
 Epoch: 226, lr: 2.0e-03, train_loss: 0.8438, train_acc: 0.6996 test_loss: 0.9289, test_acc: 0.6733, best: 0.6754, time: 0:02:30
 Epoch: 227, lr: 2.0e-03, train_loss: 0.8478, train_acc: 0.6946 test_loss: 0.9302, test_acc: 0.6717, best: 0.6754, time: 0:02:30
 Epoch: 228, lr: 2.0e-03, train_loss: 0.8420, train_acc: 0.6902 test_loss: 0.9394, test_acc: 0.6707, best: 0.6754, time: 0:02:30
 Epoch: 229, lr: 2.0e-03, train_loss: 0.8641, train_acc: 0.6868 test_loss: 0.9342, test_acc: 0.6690, best: 0.6754, time: 0:02:30
 Epoch: 230, lr: 2.0e-03, train_loss: 0.8282, train_acc: 0.7008 test_loss: 0.9367, test_acc: 0.6735, best: 0.6754, time: 0:02:30
 Epoch: 231, lr: 2.0e-03, train_loss: 0.8348, train_acc: 0.7034 test_loss: 0.9272, test_acc: 0.6759, best: 0.6759, time: 0:02:30
 Epoch: 232, lr: 2.0e-03, train_loss: 0.8619, train_acc: 0.6886 test_loss: 0.9456, test_acc: 0.6651, best: 0.6759, time: 0:02:30
 Epoch: 233, lr: 2.0e-03, train_loss: 0.8392, train_acc: 0.7040 test_loss: 0.9414, test_acc: 0.6695, best: 0.6759, time: 0:02:30
 Epoch: 234, lr: 2.0e-03, train_loss: 0.8377, train_acc: 0.6934 test_loss: 0.9160, test_acc: 0.6725, best: 0.6759, time: 0:02:30
 Epoch: 235, lr: 2.0e-03, train_loss: 0.8518, train_acc: 0.6964 test_loss: 0.9226, test_acc: 0.6744, best: 0.6759, time: 0:02:30
 Epoch: 236, lr: 2.0e-03, train_loss: 0.8472, train_acc: 0.6914 test_loss: 0.9254, test_acc: 0.6770, best: 0.6770, time: 0:02:30
 Epoch: 237, lr: 2.0e-03, train_loss: 0.8447, train_acc: 0.6938 test_loss: 0.9561, test_acc: 0.6647, best: 0.6770, time: 0:02:30
 Epoch: 238, lr: 2.0e-03, train_loss: 0.8463, train_acc: 0.6940 test_loss: 0.9511, test_acc: 0.6686, best: 0.6770, time: 0:02:30
 Epoch: 239, lr: 2.0e-03, train_loss: 0.8586, train_acc: 0.6942 test_loss: 0.9187, test_acc: 0.6781, best: 0.6781, time: 0:02:30
 Epoch: 240, lr: 4.0e-04, train_loss: 0.8085, train_acc: 0.7104 test_loss: 0.9218, test_acc: 0.6780, best: 0.6781, time: 0:02:30
 Epoch: 241, lr: 4.0e-04, train_loss: 0.8091, train_acc: 0.7132 test_loss: 0.9217, test_acc: 0.6793, best: 0.6793, time: 0:02:30
 Epoch: 242, lr: 4.0e-04, train_loss: 0.8205, train_acc: 0.7090 test_loss: 0.9126, test_acc: 0.6804, best: 0.6804, time: 0:02:30
 Epoch: 243, lr: 4.0e-04, train_loss: 0.7934, train_acc: 0.7210 test_loss: 0.9301, test_acc: 0.6781, best: 0.6804, time: 0:02:30
 Epoch: 244, lr: 4.0e-04, train_loss: 0.8173, train_acc: 0.7116 test_loss: 0.9298, test_acc: 0.6753, best: 0.6804, time: 0:02:30
 Epoch: 245, lr: 4.0e-04, train_loss: 0.7991, train_acc: 0.7154 test_loss: 0.9166, test_acc: 0.6846, best: 0.6846, time: 0:02:30
 Epoch: 246, lr: 4.0e-04, train_loss: 0.8000, train_acc: 0.7158 test_loss: 0.9182, test_acc: 0.6833, best: 0.6846, time: 0:02:30
 Epoch: 247, lr: 4.0e-04, train_loss: 0.8257, train_acc: 0.7084 test_loss: 0.9112, test_acc: 0.6809, best: 0.6846, time: 0:02:30
 Epoch: 248, lr: 4.0e-04, train_loss: 0.8126, train_acc: 0.7066 test_loss: 0.9079, test_acc: 0.6801, best: 0.6846, time: 0:02:30
 Epoch: 249, lr: 4.0e-04, train_loss: 0.8068, train_acc: 0.7080 test_loss: 0.9129, test_acc: 0.6823, best: 0.6846, time: 0:02:30
 Epoch: 250, lr: 4.0e-04, train_loss: 0.7864, train_acc: 0.7268 test_loss: 0.9093, test_acc: 0.6825, best: 0.6846, time: 0:02:30
 Epoch: 251, lr: 4.0e-04, train_loss: 0.8150, train_acc: 0.7046 test_loss: 0.9224, test_acc: 0.6781, best: 0.6846, time: 0:02:30
 Epoch: 252, lr: 4.0e-04, train_loss: 0.8097, train_acc: 0.7070 test_loss: 0.9131, test_acc: 0.6829, best: 0.6846, time: 0:02:30
 Epoch: 253, lr: 4.0e-04, train_loss: 0.7982, train_acc: 0.7196 test_loss: 0.9109, test_acc: 0.6837, best: 0.6846, time: 0:02:30
 Epoch: 254, lr: 4.0e-04, train_loss: 0.7894, train_acc: 0.7260 test_loss: 0.9111, test_acc: 0.6785, best: 0.6846, time: 0:02:30
 Epoch: 255, lr: 4.0e-04, train_loss: 0.7849, train_acc: 0.7172 test_loss: 0.9228, test_acc: 0.6753, best: 0.6846, time: 0:02:30
 Epoch: 256, lr: 4.0e-04, train_loss: 0.8002, train_acc: 0.7136 test_loss: 0.9053, test_acc: 0.6803, best: 0.6846, time: 0:02:30
 Epoch: 257, lr: 4.0e-04, train_loss: 0.7870, train_acc: 0.7180 test_loss: 0.9229, test_acc: 0.6815, best: 0.6846, time: 0:02:30
 Epoch: 258, lr: 4.0e-04, train_loss: 0.7762, train_acc: 0.7222 test_loss: 0.9163, test_acc: 0.6825, best: 0.6846, time: 0:02:30
 Epoch: 259, lr: 4.0e-04, train_loss: 0.7963, train_acc: 0.7120 test_loss: 0.9126, test_acc: 0.6807, best: 0.6846, time: 0:02:30
 Epoch: 260, lr: 4.0e-04, train_loss: 0.8043, train_acc: 0.7142 test_loss: 0.9132, test_acc: 0.6810, best: 0.6846, time: 0:02:30
 Epoch: 261, lr: 4.0e-04, train_loss: 0.7906, train_acc: 0.7232 test_loss: 0.9196, test_acc: 0.6799, best: 0.6846, time: 0:02:30
 Epoch: 262, lr: 4.0e-04, train_loss: 0.8278, train_acc: 0.7014 test_loss: 0.9253, test_acc: 0.6767, best: 0.6846, time: 0:02:30
 Epoch: 263, lr: 4.0e-04, train_loss: 0.7907, train_acc: 0.7166 test_loss: 0.9331, test_acc: 0.6741, best: 0.6846, time: 0:02:30
 Epoch: 264, lr: 4.0e-04, train_loss: 0.7882, train_acc: 0.7184 test_loss: 0.9259, test_acc: 0.6756, best: 0.6846, time: 0:02:30
 Epoch: 265, lr: 4.0e-04, train_loss: 0.8157, train_acc: 0.7138 test_loss: 0.9171, test_acc: 0.6805, best: 0.6846, time: 0:02:30
 Epoch: 266, lr: 4.0e-04, train_loss: 0.8008, train_acc: 0.7122 test_loss: 0.9060, test_acc: 0.6796, best: 0.6846, time: 0:02:30
 Epoch: 267, lr: 4.0e-04, train_loss: 0.8181, train_acc: 0.7102 test_loss: 0.9118, test_acc: 0.6771, best: 0.6846, time: 0:02:30
 Epoch: 268, lr: 4.0e-04, train_loss: 0.7955, train_acc: 0.7206 test_loss: 0.9144, test_acc: 0.6824, best: 0.6846, time: 0:02:30
 Epoch: 269, lr: 4.0e-04, train_loss: 0.7907, train_acc: 0.7210 test_loss: 0.9142, test_acc: 0.6791, best: 0.6846, time: 0:02:30
 Epoch: 270, lr: 8.0e-05, train_loss: 0.7811, train_acc: 0.7208 test_loss: 0.9106, test_acc: 0.6776, best: 0.6846, time: 0:02:30
 Epoch: 271, lr: 8.0e-05, train_loss: 0.7823, train_acc: 0.7172 test_loss: 0.9090, test_acc: 0.6816, best: 0.6846, time: 0:02:30
 Epoch: 272, lr: 8.0e-05, train_loss: 0.7900, train_acc: 0.7208 test_loss: 0.9357, test_acc: 0.6750, best: 0.6846, time: 0:02:30
 Epoch: 273, lr: 8.0e-05, train_loss: 0.7792, train_acc: 0.7190 test_loss: 0.9059, test_acc: 0.6830, best: 0.6846, time: 0:02:30
 Epoch: 274, lr: 8.0e-05, train_loss: 0.7834, train_acc: 0.7228 test_loss: 0.9190, test_acc: 0.6767, best: 0.6846, time: 0:02:30
 Epoch: 275, lr: 8.0e-05, train_loss: 0.7990, train_acc: 0.7174 test_loss: 0.9166, test_acc: 0.6787, best: 0.6846, time: 0:02:30
 Epoch: 276, lr: 8.0e-05, train_loss: 0.7906, train_acc: 0.7190 test_loss: 0.9097, test_acc: 0.6795, best: 0.6846, time: 0:02:30
 Epoch: 277, lr: 8.0e-05, train_loss: 0.7814, train_acc: 0.7202 test_loss: 0.9069, test_acc: 0.6827, best: 0.6846, time: 0:02:30
 Epoch: 278, lr: 8.0e-05, train_loss: 0.7821, train_acc: 0.7178 test_loss: 0.9056, test_acc: 0.6803, best: 0.6846, time: 0:02:30
 Epoch: 279, lr: 8.0e-05, train_loss: 0.7701, train_acc: 0.7256 test_loss: 0.9107, test_acc: 0.6857, best: 0.6857, time: 0:02:30
 Epoch: 280, lr: 8.0e-05, train_loss: 0.7906, train_acc: 0.7182 test_loss: 0.9069, test_acc: 0.6841, best: 0.6857, time: 0:02:30
 Epoch: 281, lr: 8.0e-05, train_loss: 0.7852, train_acc: 0.7158 test_loss: 0.9099, test_acc: 0.6824, best: 0.6857, time: 0:02:30
 Epoch: 282, lr: 8.0e-05, train_loss: 0.7811, train_acc: 0.7182 test_loss: 0.9099, test_acc: 0.6817, best: 0.6857, time: 0:02:29
 Epoch: 283, lr: 8.0e-05, train_loss: 0.7892, train_acc: 0.7176 test_loss: 0.9085, test_acc: 0.6861, best: 0.6861, time: 0:02:29
 Epoch: 284, lr: 8.0e-05, train_loss: 0.7733, train_acc: 0.7208 test_loss: 0.9038, test_acc: 0.6846, best: 0.6861, time: 0:02:29
 Epoch: 285, lr: 8.0e-05, train_loss: 0.7851, train_acc: 0.7194 test_loss: 0.9001, test_acc: 0.6855, best: 0.6861, time: 0:02:29
 Epoch: 286, lr: 8.0e-05, train_loss: 0.7683, train_acc: 0.7206 test_loss: 0.9138, test_acc: 0.6826, best: 0.6861, time: 0:02:29
 Epoch: 287, lr: 8.0e-05, train_loss: 0.7727, train_acc: 0.7254 test_loss: 0.9059, test_acc: 0.6827, best: 0.6861, time: 0:02:29
 Epoch: 288, lr: 8.0e-05, train_loss: 0.8192, train_acc: 0.7082 test_loss: 0.9320, test_acc: 0.6777, best: 0.6861, time: 0:02:29
 Epoch: 289, lr: 8.0e-05, train_loss: 0.7745, train_acc: 0.7264 test_loss: 0.9164, test_acc: 0.6780, best: 0.6861, time: 0:02:29
 Epoch: 290, lr: 8.0e-05, train_loss: 0.7869, train_acc: 0.7242 test_loss: 0.9043, test_acc: 0.6799, best: 0.6861, time: 0:02:28
 Epoch: 291, lr: 8.0e-05, train_loss: 0.7913, train_acc: 0.7210 test_loss: 0.9178, test_acc: 0.6779, best: 0.6861, time: 0:02:28
 Epoch: 292, lr: 8.0e-05, train_loss: 0.7794, train_acc: 0.7166 test_loss: 0.9116, test_acc: 0.6849, best: 0.6861, time: 0:02:28
 Epoch: 293, lr: 8.0e-05, train_loss: 0.7801, train_acc: 0.7244 test_loss: 0.9175, test_acc: 0.6801, best: 0.6861, time: 0:02:27
 Epoch: 294, lr: 8.0e-05, train_loss: 0.7802, train_acc: 0.7176 test_loss: 0.9037, test_acc: 0.6854, best: 0.6861, time: 0:02:27
 Epoch: 295, lr: 8.0e-05, train_loss: 0.7752, train_acc: 0.7232 test_loss: 0.9134, test_acc: 0.6791, best: 0.6861, time: 0:02:27
 Epoch: 296, lr: 8.0e-05, train_loss: 0.7707, train_acc: 0.7254 test_loss: 0.9108, test_acc: 0.6840, best: 0.6861, time: 0:02:27
 Epoch: 297, lr: 8.0e-05, train_loss: 0.7703, train_acc: 0.7298 test_loss: 0.9116, test_acc: 0.6816, best: 0.6861, time: 0:02:27
 Epoch: 298, lr: 8.0e-05, train_loss: 0.7892, train_acc: 0.7168 test_loss: 0.9147, test_acc: 0.6801, best: 0.6861, time: 0:02:27
 Epoch: 299, lr: 8.0e-05, train_loss: 0.7776, train_acc: 0.7228 test_loss: 0.9072, test_acc: 0.6859, best: 0.6861, time: 0:02:27
 Highest accuracy: 0.6861