
 Run on time: 2022-07-03 01:03:07.256578

 Architecture: mobilenet-nlp-4222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 4,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 4,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 8,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 16,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 64,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP-4222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(128, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 64)
                  (col_embed): Embedding(256, 64)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.2418, train_acc: 0.1230 test_loss: 2.4179, test_acc: 0.1061, best: 0.1061, time: 0:02:19
 Epoch: 2, lr: 1.0e-02, train_loss: 2.4579, train_acc: 0.1230 test_loss: 2.3967, test_acc: 0.1029, best: 0.1061, time: 0:02:19
 Epoch: 3, lr: 1.0e-02, train_loss: 2.3874, train_acc: 0.1054 test_loss: 2.3279, test_acc: 0.1123, best: 0.1123, time: 0:02:19
 Epoch: 4, lr: 1.0e-02, train_loss: 2.3394, train_acc: 0.1068 test_loss: 2.3107, test_acc: 0.1220, best: 0.1220, time: 0:02:19
 Epoch: 5, lr: 1.0e-02, train_loss: 2.3209, train_acc: 0.1156 test_loss: 2.2961, test_acc: 0.1204, best: 0.1220, time: 0:02:19
 Epoch: 6, lr: 1.0e-02, train_loss: 2.3105, train_acc: 0.1106 test_loss: 2.2809, test_acc: 0.1176, best: 0.1220, time: 0:02:19
 Epoch: 7, lr: 1.0e-02, train_loss: 2.2971, train_acc: 0.1138 test_loss: 2.2818, test_acc: 0.1168, best: 0.1220, time: 0:02:19
 Epoch: 8, lr: 1.0e-02, train_loss: 2.2968, train_acc: 0.1164 test_loss: 2.2829, test_acc: 0.1239, best: 0.1239, time: 0:02:19
 Epoch: 9, lr: 1.0e-02, train_loss: 2.2970, train_acc: 0.1188 test_loss: 2.2827, test_acc: 0.1081, best: 0.1239, time: 0:02:19
 Epoch: 10, lr: 1.0e-02, train_loss: 2.2958, train_acc: 0.1196 test_loss: 2.2901, test_acc: 0.1235, best: 0.1239, time: 0:02:19
 Epoch: 11, lr: 1.0e-02, train_loss: 2.2909, train_acc: 0.1228 test_loss: 2.2766, test_acc: 0.1260, best: 0.1260, time: 0:02:19
 Epoch: 12, lr: 1.0e-02, train_loss: 2.2822, train_acc: 0.1260 test_loss: 2.2578, test_acc: 0.1305, best: 0.1305, time: 0:02:19
 Epoch: 13, lr: 1.0e-02, train_loss: 2.2803, train_acc: 0.1332 test_loss: 2.2546, test_acc: 0.1507, best: 0.1507, time: 0:02:19
 Epoch: 14, lr: 1.0e-02, train_loss: 2.2828, train_acc: 0.1282 test_loss: 2.2804, test_acc: 0.1226, best: 0.1507, time: 0:02:19
 Epoch: 15, lr: 1.0e-02, train_loss: 2.2709, train_acc: 0.1358 test_loss: 2.2255, test_acc: 0.1409, best: 0.1507, time: 0:02:19
 Epoch: 16, lr: 1.0e-02, train_loss: 2.2782, train_acc: 0.1212 test_loss: 2.2753, test_acc: 0.1220, best: 0.1507, time: 0:02:19
 Epoch: 17, lr: 1.0e-02, train_loss: 2.2700, train_acc: 0.1296 test_loss: 2.2733, test_acc: 0.1161, best: 0.1507, time: 0:02:19
 Epoch: 18, lr: 1.0e-02, train_loss: 2.2624, train_acc: 0.1338 test_loss: 2.2798, test_acc: 0.1216, best: 0.1507, time: 0:02:19
 Epoch: 19, lr: 1.0e-02, train_loss: 2.2584, train_acc: 0.1328 test_loss: 2.2315, test_acc: 0.1575, best: 0.1575, time: 0:02:19
 Epoch: 20, lr: 1.0e-02, train_loss: 2.2582, train_acc: 0.1410 test_loss: 2.2434, test_acc: 0.1608, best: 0.1608, time: 0:02:19
 Epoch: 21, lr: 1.0e-02, train_loss: 2.2481, train_acc: 0.1532 test_loss: 2.2297, test_acc: 0.1649, best: 0.1649, time: 0:02:19
 Epoch: 22, lr: 1.0e-02, train_loss: 2.2356, train_acc: 0.1546 test_loss: 2.2375, test_acc: 0.1401, best: 0.1649, time: 0:02:19
 Epoch: 23, lr: 1.0e-02, train_loss: 2.2281, train_acc: 0.1574 test_loss: 2.1897, test_acc: 0.1807, best: 0.1807, time: 0:02:19
 Epoch: 24, lr: 1.0e-02, train_loss: 2.2307, train_acc: 0.1586 test_loss: 2.2617, test_acc: 0.1525, best: 0.1807, time: 0:02:19
 Epoch: 25, lr: 1.0e-02, train_loss: 2.2354, train_acc: 0.1560 test_loss: 2.2645, test_acc: 0.1490, best: 0.1807, time: 0:02:19
 Epoch: 26, lr: 1.0e-02, train_loss: 2.1946, train_acc: 0.1642 test_loss: 2.1584, test_acc: 0.2060, best: 0.2060, time: 0:02:19
 Epoch: 27, lr: 1.0e-02, train_loss: 2.1914, train_acc: 0.1748 test_loss: 2.2182, test_acc: 0.1464, best: 0.2060, time: 0:02:18
 Epoch: 28, lr: 1.0e-02, train_loss: 2.2140, train_acc: 0.1652 test_loss: 2.2190, test_acc: 0.1901, best: 0.2060, time: 0:02:19
 Epoch: 29, lr: 1.0e-02, train_loss: 2.2024, train_acc: 0.1732 test_loss: 2.1881, test_acc: 0.1974, best: 0.2060, time: 0:02:19
 Epoch: 30, lr: 1.0e-02, train_loss: 2.1927, train_acc: 0.1746 test_loss: 2.1786, test_acc: 0.1841, best: 0.2060, time: 0:02:18
 Epoch: 31, lr: 1.0e-02, train_loss: 2.1735, train_acc: 0.1958 test_loss: 2.1681, test_acc: 0.2074, best: 0.2074, time: 0:02:19
 Epoch: 32, lr: 1.0e-02, train_loss: 2.1675, train_acc: 0.1784 test_loss: 2.1606, test_acc: 0.2104, best: 0.2104, time: 0:02:19
 Epoch: 33, lr: 1.0e-02, train_loss: 2.1365, train_acc: 0.1906 test_loss: 2.1507, test_acc: 0.2425, best: 0.2425, time: 0:02:19
 Epoch: 34, lr: 1.0e-02, train_loss: 2.1546, train_acc: 0.1896 test_loss: 2.1633, test_acc: 0.2018, best: 0.2425, time: 0:02:19
 Epoch: 35, lr: 1.0e-02, train_loss: 2.1535, train_acc: 0.1996 test_loss: 2.1277, test_acc: 0.2304, best: 0.2425, time: 0:02:18
 Epoch: 36, lr: 1.0e-02, train_loss: 2.1580, train_acc: 0.1812 test_loss: 2.1600, test_acc: 0.2233, best: 0.2425, time: 0:02:18
 Epoch: 37, lr: 1.0e-02, train_loss: 2.1635, train_acc: 0.1932 test_loss: 2.1179, test_acc: 0.2479, best: 0.2479, time: 0:02:19
 Epoch: 38, lr: 1.0e-02, train_loss: 2.1303, train_acc: 0.1906 test_loss: 2.1477, test_acc: 0.2089, best: 0.2479, time: 0:02:18
 Epoch: 39, lr: 1.0e-02, train_loss: 2.1238, train_acc: 0.1924 test_loss: 2.0474, test_acc: 0.2630, best: 0.2630, time: 0:02:18
 Epoch: 40, lr: 1.0e-02, train_loss: 2.1031, train_acc: 0.2088 test_loss: 2.0186, test_acc: 0.2421, best: 0.2630, time: 0:02:18
 Epoch: 41, lr: 1.0e-02, train_loss: 2.0879, train_acc: 0.2160 test_loss: 2.0548, test_acc: 0.2375, best: 0.2630, time: 0:02:18
 Epoch: 42, lr: 1.0e-02, train_loss: 2.0812, train_acc: 0.2024 test_loss: 2.0314, test_acc: 0.2559, best: 0.2630, time: 0:02:18
 Epoch: 43, lr: 1.0e-02, train_loss: 2.0509, train_acc: 0.2166 test_loss: 2.0337, test_acc: 0.2484, best: 0.2630, time: 0:02:18
 Epoch: 44, lr: 1.0e-02, train_loss: 2.0746, train_acc: 0.2002 test_loss: 2.0034, test_acc: 0.2646, best: 0.2646, time: 0:02:18
 Epoch: 45, lr: 1.0e-02, train_loss: 2.0730, train_acc: 0.2124 test_loss: 2.0067, test_acc: 0.2474, best: 0.2646, time: 0:02:18
 Epoch: 46, lr: 1.0e-02, train_loss: 2.0786, train_acc: 0.2154 test_loss: 2.0374, test_acc: 0.2640, best: 0.2646, time: 0:02:18
 Epoch: 47, lr: 1.0e-02, train_loss: 2.0572, train_acc: 0.2164 test_loss: 2.0416, test_acc: 0.2432, best: 0.2646, time: 0:02:18
 Epoch: 48, lr: 1.0e-02, train_loss: 2.0766, train_acc: 0.2044 test_loss: 2.0648, test_acc: 0.2311, best: 0.2646, time: 0:02:18
 Epoch: 49, lr: 1.0e-02, train_loss: 2.0963, train_acc: 0.2038 test_loss: 2.0385, test_acc: 0.2176, best: 0.2646, time: 0:02:18
 Epoch: 50, lr: 1.0e-02, train_loss: 2.1091, train_acc: 0.2058 test_loss: 2.0316, test_acc: 0.2372, best: 0.2646, time: 0:02:18
 Epoch: 51, lr: 1.0e-02, train_loss: 2.0981, train_acc: 0.2014 test_loss: 2.0285, test_acc: 0.2288, best: 0.2646, time: 0:02:18
 Epoch: 52, lr: 1.0e-02, train_loss: 2.0756, train_acc: 0.2022 test_loss: 2.0295, test_acc: 0.2719, best: 0.2719, time: 0:02:18
 Epoch: 53, lr: 1.0e-02, train_loss: 2.0910, train_acc: 0.2082 test_loss: 2.0873, test_acc: 0.2375, best: 0.2719, time: 0:02:18
 Epoch: 54, lr: 1.0e-02, train_loss: 2.0696, train_acc: 0.2004 test_loss: 2.0356, test_acc: 0.2477, best: 0.2719, time: 0:02:18
 Epoch: 55, lr: 1.0e-02, train_loss: 2.0612, train_acc: 0.2138 test_loss: 1.9995, test_acc: 0.2519, best: 0.2719, time: 0:02:18
 Epoch: 56, lr: 1.0e-02, train_loss: 2.0508, train_acc: 0.2164 test_loss: 2.0228, test_acc: 0.2410, best: 0.2719, time: 0:02:18
 Epoch: 57, lr: 1.0e-02, train_loss: 2.0556, train_acc: 0.2166 test_loss: 1.9614, test_acc: 0.2767, best: 0.2767, time: 0:02:18
 Epoch: 58, lr: 1.0e-02, train_loss: 2.0352, train_acc: 0.2110 test_loss: 2.0133, test_acc: 0.2685, best: 0.2767, time: 0:02:18
 Epoch: 59, lr: 1.0e-02, train_loss: 2.0380, train_acc: 0.2284 test_loss: 2.1017, test_acc: 0.2321, best: 0.2767, time: 0:02:18
 Epoch: 60, lr: 1.0e-02, train_loss: 2.0766, train_acc: 0.2144 test_loss: 1.9995, test_acc: 0.2495, best: 0.2767, time: 0:02:18
 Epoch: 61, lr: 1.0e-02, train_loss: 2.0539, train_acc: 0.2296 test_loss: 1.9888, test_acc: 0.2685, best: 0.2767, time: 0:02:18
 Epoch: 62, lr: 1.0e-02, train_loss: 2.0267, train_acc: 0.2182 test_loss: 1.9841, test_acc: 0.2814, best: 0.2814, time: 0:02:18
 Epoch: 63, lr: 1.0e-02, train_loss: 2.0177, train_acc: 0.2264 test_loss: 1.9924, test_acc: 0.2559, best: 0.2814, time: 0:02:18
 Epoch: 64, lr: 1.0e-02, train_loss: 2.0642, train_acc: 0.2140 test_loss: 1.9848, test_acc: 0.2457, best: 0.2814, time: 0:02:18
 Epoch: 65, lr: 1.0e-02, train_loss: 2.0472, train_acc: 0.2138 test_loss: 1.9927, test_acc: 0.2230, best: 0.2814, time: 0:02:18
 Epoch: 66, lr: 1.0e-02, train_loss: 2.0551, train_acc: 0.2186 test_loss: 1.9956, test_acc: 0.2705, best: 0.2814, time: 0:02:18
 Epoch: 67, lr: 1.0e-02, train_loss: 2.0404, train_acc: 0.2268 test_loss: 1.9709, test_acc: 0.2685, best: 0.2814, time: 0:02:18
 Epoch: 68, lr: 1.0e-02, train_loss: 2.0223, train_acc: 0.2344 test_loss: 2.0132, test_acc: 0.2744, best: 0.2814, time: 0:02:18
 Epoch: 69, lr: 1.0e-02, train_loss: 2.0116, train_acc: 0.2384 test_loss: 1.9715, test_acc: 0.2839, best: 0.2839, time: 0:02:18
 Epoch: 70, lr: 1.0e-02, train_loss: 2.0203, train_acc: 0.2376 test_loss: 2.0562, test_acc: 0.2600, best: 0.2839, time: 0:02:18
 Epoch: 71, lr: 1.0e-02, train_loss: 2.0226, train_acc: 0.2246 test_loss: 2.0787, test_acc: 0.2308, best: 0.2839, time: 0:02:18
 Epoch: 72, lr: 1.0e-02, train_loss: 2.0200, train_acc: 0.2316 test_loss: 1.9850, test_acc: 0.2644, best: 0.2839, time: 0:02:18
 Epoch: 73, lr: 1.0e-02, train_loss: 2.0228, train_acc: 0.2368 test_loss: 2.0724, test_acc: 0.2203, best: 0.2839, time: 0:02:18
 Epoch: 74, lr: 1.0e-02, train_loss: 2.0029, train_acc: 0.2382 test_loss: 2.0172, test_acc: 0.2470, best: 0.2839, time: 0:02:18
 Epoch: 75, lr: 1.0e-02, train_loss: 2.0410, train_acc: 0.2346 test_loss: 2.0449, test_acc: 0.1860, best: 0.2839, time: 0:02:18
 Epoch: 76, lr: 1.0e-02, train_loss: 2.0798, train_acc: 0.2152 test_loss: 2.1387, test_acc: 0.1792, best: 0.2839, time: 0:02:18
 Epoch: 77, lr: 1.0e-02, train_loss: 2.0865, train_acc: 0.1982 test_loss: 2.0453, test_acc: 0.2229, best: 0.2839, time: 0:02:18
 Epoch: 78, lr: 1.0e-02, train_loss: 2.0713, train_acc: 0.2066 test_loss: 1.9985, test_acc: 0.2610, best: 0.2839, time: 0:02:18
 Epoch: 79, lr: 1.0e-02, train_loss: 2.0371, train_acc: 0.2156 test_loss: 2.0025, test_acc: 0.2304, best: 0.2839, time: 0:02:18
 Epoch: 80, lr: 1.0e-02, train_loss: 2.0234, train_acc: 0.2256 test_loss: 1.9731, test_acc: 0.2665, best: 0.2839, time: 0:02:18
 Epoch: 81, lr: 1.0e-02, train_loss: 2.0359, train_acc: 0.2374 test_loss: 1.9734, test_acc: 0.2607, best: 0.2839, time: 0:02:18
 Epoch: 82, lr: 1.0e-02, train_loss: 2.0091, train_acc: 0.2352 test_loss: 1.9950, test_acc: 0.2549, best: 0.2839, time: 0:02:18
 Epoch: 83, lr: 1.0e-02, train_loss: 2.0004, train_acc: 0.2464 test_loss: 1.9623, test_acc: 0.2626, best: 0.2839, time: 0:02:18
 Epoch: 84, lr: 1.0e-02, train_loss: 1.9946, train_acc: 0.2442 test_loss: 1.9576, test_acc: 0.2921, best: 0.2921, time: 0:02:18
 Epoch: 85, lr: 1.0e-02, train_loss: 2.0446, train_acc: 0.2202 test_loss: 2.0665, test_acc: 0.2266, best: 0.2921, time: 0:02:21
 Epoch: 86, lr: 1.0e-02, train_loss: 2.0706, train_acc: 0.2144 test_loss: 1.9899, test_acc: 0.2757, best: 0.2921, time: 0:02:22
 Epoch: 87, lr: 1.0e-02, train_loss: 2.0510, train_acc: 0.2276 test_loss: 2.0359, test_acc: 0.2509, best: 0.2921, time: 0:02:22
 Epoch: 88, lr: 1.0e-02, train_loss: 2.0281, train_acc: 0.2332 test_loss: 1.9870, test_acc: 0.2570, best: 0.2921, time: 0:02:22
 Epoch: 89, lr: 1.0e-02, train_loss: 2.0643, train_acc: 0.2248 test_loss: 2.0118, test_acc: 0.2760, best: 0.2921, time: 0:02:22
 Epoch: 90, lr: 1.0e-02, train_loss: 2.0427, train_acc: 0.2272 test_loss: 2.0349, test_acc: 0.2591, best: 0.2921, time: 0:02:22
 Epoch: 91, lr: 1.0e-02, train_loss: 2.0140, train_acc: 0.2458 test_loss: 1.9858, test_acc: 0.2866, best: 0.2921, time: 0:02:22
 Epoch: 92, lr: 1.0e-02, train_loss: 2.0195, train_acc: 0.2408 test_loss: 1.9876, test_acc: 0.2641, best: 0.2921, time: 0:02:22
 Epoch: 93, lr: 1.0e-02, train_loss: 2.0615, train_acc: 0.2284 test_loss: 2.0116, test_acc: 0.2886, best: 0.2921, time: 0:02:22
 Epoch: 94, lr: 1.0e-02, train_loss: 2.0190, train_acc: 0.2448 test_loss: 1.9744, test_acc: 0.2780, best: 0.2921, time: 0:02:22
 Epoch: 95, lr: 1.0e-02, train_loss: 2.0268, train_acc: 0.2422 test_loss: 2.1725, test_acc: 0.1948, best: 0.2921, time: 0:02:22
 Epoch: 96, lr: 1.0e-02, train_loss: 2.0647, train_acc: 0.2300 test_loss: 2.0382, test_acc: 0.2637, best: 0.2921, time: 0:02:22
 Epoch: 97, lr: 1.0e-02, train_loss: 2.0287, train_acc: 0.2410 test_loss: 2.0735, test_acc: 0.2850, best: 0.2921, time: 0:02:22
 Epoch: 98, lr: 1.0e-02, train_loss: 2.0637, train_acc: 0.2262 test_loss: 2.0630, test_acc: 0.2734, best: 0.2921, time: 0:02:22
 Epoch: 99, lr: 1.0e-02, train_loss: 2.0504, train_acc: 0.2282 test_loss: 2.0218, test_acc: 0.2414, best: 0.2921, time: 0:02:22
 Epoch: 100, lr: 1.0e-02, train_loss: 2.1069, train_acc: 0.2044 test_loss: 2.2339, test_acc: 0.1732, best: 0.2921, time: 0:02:22
 Epoch: 101, lr: 1.0e-02, train_loss: 2.0888, train_acc: 0.2074 test_loss: 2.0162, test_acc: 0.2589, best: 0.2921, time: 0:02:22
 Epoch: 102, lr: 1.0e-02, train_loss: 2.0703, train_acc: 0.2182 test_loss: 2.0412, test_acc: 0.2435, best: 0.2921, time: 0:02:22
 Epoch: 103, lr: 1.0e-02, train_loss: 2.0671, train_acc: 0.2072 test_loss: 2.0935, test_acc: 0.2179, best: 0.2921, time: 0:02:22
 Epoch: 104, lr: 1.0e-02, train_loss: 2.0785, train_acc: 0.2024 test_loss: 2.0378, test_acc: 0.2263, best: 0.2921, time: 0:02:21
 Epoch: 105, lr: 1.0e-02, train_loss: 2.0598, train_acc: 0.2118 test_loss: 2.0542, test_acc: 0.2130, best: 0.2921, time: 0:02:21
 Epoch: 106, lr: 1.0e-02, train_loss: 2.1005, train_acc: 0.2134 test_loss: 2.1116, test_acc: 0.2203, best: 0.2921, time: 0:02:21
 Epoch: 107, lr: 1.0e-02, train_loss: 2.1749, train_acc: 0.1822 test_loss: 2.1897, test_acc: 0.2060, best: 0.2921, time: 0:02:21
 Epoch: 108, lr: 1.0e-02, train_loss: 2.1302, train_acc: 0.1930 test_loss: 2.1323, test_acc: 0.1888, best: 0.2921, time: 0:02:21
 Epoch: 109, lr: 1.0e-02, train_loss: 2.1832, train_acc: 0.1598 test_loss: 2.3616, test_acc: 0.1084, best: 0.2921, time: 0:02:21
 Epoch: 110, lr: 1.0e-02, train_loss: 2.1828, train_acc: 0.1630 test_loss: 2.1522, test_acc: 0.1787, best: 0.2921, time: 0:02:21
 Epoch: 111, lr: 1.0e-02, train_loss: 2.1604, train_acc: 0.1698 test_loss: 2.1465, test_acc: 0.1777, best: 0.2921, time: 0:02:21
 Epoch: 112, lr: 1.0e-02, train_loss: 2.1060, train_acc: 0.1936 test_loss: 2.0532, test_acc: 0.2209, best: 0.2921, time: 0:02:21
 Epoch: 113, lr: 1.0e-02, train_loss: 2.0641, train_acc: 0.2008 test_loss: 2.0548, test_acc: 0.2280, best: 0.2921, time: 0:02:21
 Epoch: 114, lr: 1.0e-02, train_loss: 2.0564, train_acc: 0.2074 test_loss: 2.0926, test_acc: 0.1985, best: 0.2921, time: 0:02:21
 Epoch: 115, lr: 1.0e-02, train_loss: 2.0540, train_acc: 0.2114 test_loss: 1.9495, test_acc: 0.2712, best: 0.2921, time: 0:02:21
 Epoch: 116, lr: 1.0e-02, train_loss: 2.0768, train_acc: 0.2064 test_loss: 2.0630, test_acc: 0.1886, best: 0.2921, time: 0:02:21
 Epoch: 117, lr: 1.0e-02, train_loss: 2.0681, train_acc: 0.2026 test_loss: 1.9829, test_acc: 0.2190, best: 0.2921, time: 0:02:21
 Epoch: 118, lr: 1.0e-02, train_loss: 2.0445, train_acc: 0.1978 test_loss: 2.0365, test_acc: 0.2223, best: 0.2921, time: 0:02:21
 Epoch: 119, lr: 1.0e-02, train_loss: 2.0554, train_acc: 0.2052 test_loss: 2.0061, test_acc: 0.2371, best: 0.2921, time: 0:02:21
 Epoch: 120, lr: 1.0e-02, train_loss: 2.0320, train_acc: 0.2030 test_loss: 2.0671, test_acc: 0.1911, best: 0.2921, time: 0:02:21
 Epoch: 121, lr: 1.0e-02, train_loss: 2.1355, train_acc: 0.1866 test_loss: 2.0639, test_acc: 0.2395, best: 0.2921, time: 0:02:21
 Epoch: 122, lr: 1.0e-02, train_loss: 2.0855, train_acc: 0.2066 test_loss: 2.1147, test_acc: 0.2129, best: 0.2921, time: 0:02:21
 Epoch: 123, lr: 1.0e-02, train_loss: 2.0847, train_acc: 0.2056 test_loss: 2.0103, test_acc: 0.2315, best: 0.2921, time: 0:02:21
 Epoch: 124, lr: 1.0e-02, train_loss: 2.0735, train_acc: 0.1930 test_loss: 2.0513, test_acc: 0.2075, best: 0.2921, time: 0:02:22
 Epoch: 125, lr: 1.0e-02, train_loss: 2.1740, train_acc: 0.1686 test_loss: 2.2706, test_acc: 0.1629, best: 0.2921, time: 0:02:22
 Epoch: 126, lr: 1.0e-02, train_loss: 2.2134, train_acc: 0.1632 test_loss: 2.1965, test_acc: 0.1665, best: 0.2921, time: 0:02:22
 Epoch: 127, lr: 1.0e-02, train_loss: 2.1577, train_acc: 0.1856 test_loss: 2.1158, test_acc: 0.1864, best: 0.2921, time: 0:02:22
 Epoch: 128, lr: 1.0e-02, train_loss: 2.1200, train_acc: 0.1948 test_loss: 2.0964, test_acc: 0.2155, best: 0.2921, time: 0:02:22
 Epoch: 129, lr: 1.0e-02, train_loss: 2.0862, train_acc: 0.2076 test_loss: 2.1055, test_acc: 0.2040, best: 0.2921, time: 0:02:22
 Epoch: 130, lr: 1.0e-02, train_loss: 2.0570, train_acc: 0.2250 test_loss: 2.0241, test_acc: 0.2497, best: 0.2921, time: 0:02:22
 Epoch: 131, lr: 1.0e-02, train_loss: 2.0940, train_acc: 0.2082 test_loss: 2.0914, test_acc: 0.2020, best: 0.2921, time: 0:02:22
 Epoch: 132, lr: 1.0e-02, train_loss: 2.1203, train_acc: 0.1946 test_loss: 2.0760, test_acc: 0.2084, best: 0.2921, time: 0:02:22
 Epoch: 133, lr: 1.0e-02, train_loss: 2.0558, train_acc: 0.2094 test_loss: 1.9965, test_acc: 0.2586, best: 0.2921, time: 0:02:22
 Epoch: 134, lr: 1.0e-02, train_loss: 2.0343, train_acc: 0.2248 test_loss: 1.9925, test_acc: 0.2570, best: 0.2921, time: 0:02:22
 Epoch: 135, lr: 1.0e-02, train_loss: 2.0491, train_acc: 0.2178 test_loss: 2.0501, test_acc: 0.2344, best: 0.2921, time: 0:02:22
 Epoch: 136, lr: 1.0e-02, train_loss: 2.0518, train_acc: 0.2210 test_loss: 2.0422, test_acc: 0.2411, best: 0.2921, time: 0:02:22
 Epoch: 137, lr: 1.0e-02, train_loss: 2.1918, train_acc: 0.1644 test_loss: 2.3813, test_acc: 0.1176, best: 0.2921, time: 0:02:22
 Epoch: 138, lr: 1.0e-02, train_loss: 2.2099, train_acc: 0.1572 test_loss: 2.2179, test_acc: 0.1576, best: 0.2921, time: 0:02:22
 Epoch: 139, lr: 1.0e-02, train_loss: 2.1741, train_acc: 0.1796 test_loss: 2.2059, test_acc: 0.1495, best: 0.2921, time: 0:02:22
 Epoch: 140, lr: 1.0e-02, train_loss: 2.1716, train_acc: 0.1844 test_loss: 2.1608, test_acc: 0.1953, best: 0.2921, time: 0:02:22
 Epoch: 141, lr: 1.0e-02, train_loss: 2.1308, train_acc: 0.1964 test_loss: 2.1553, test_acc: 0.2060, best: 0.2921, time: 0:02:22
 Epoch: 142, lr: 1.0e-02, train_loss: 2.1266, train_acc: 0.1902 test_loss: 2.1549, test_acc: 0.1757, best: 0.2921, time: 0:02:22
 Epoch: 143, lr: 1.0e-02, train_loss: 2.1119, train_acc: 0.1974 test_loss: 2.1314, test_acc: 0.2160, best: 0.2921, time: 0:02:22
 Epoch: 144, lr: 1.0e-02, train_loss: 2.1526, train_acc: 0.1970 test_loss: 2.1841, test_acc: 0.1985, best: 0.2921, time: 0:02:22
 Epoch: 145, lr: 1.0e-02, train_loss: 2.1159, train_acc: 0.1950 test_loss: 2.0301, test_acc: 0.2425, best: 0.2921, time: 0:02:22
 Epoch: 146, lr: 1.0e-02, train_loss: 2.0927, train_acc: 0.2082 test_loss: 2.1107, test_acc: 0.2085, best: 0.2921, time: 0:02:22
 Epoch: 147, lr: 1.0e-02, train_loss: 2.1366, train_acc: 0.1952 test_loss: 2.1241, test_acc: 0.2177, best: 0.2921, time: 0:02:22
 Epoch: 148, lr: 1.0e-02, train_loss: 2.1155, train_acc: 0.2004 test_loss: 2.1103, test_acc: 0.2204, best: 0.2921, time: 0:02:22
 Epoch: 149, lr: 1.0e-02, train_loss: 2.0744, train_acc: 0.2200 test_loss: 2.1018, test_acc: 0.2080, best: 0.2921, time: 0:02:22
 Epoch: 150, lr: 1.0e-02, train_loss: 2.0569, train_acc: 0.2256 test_loss: 2.0196, test_acc: 0.2469, best: 0.2921, time: 0:02:22
 Epoch: 151, lr: 1.0e-02, train_loss: 2.0387, train_acc: 0.2190 test_loss: 1.9254, test_acc: 0.2722, best: 0.2921, time: 0:02:22
 Epoch: 152, lr: 1.0e-02, train_loss: 2.0247, train_acc: 0.2206 test_loss: 1.9898, test_acc: 0.2605, best: 0.2921, time: 0:02:22
 Epoch: 153, lr: 1.0e-02, train_loss: 2.0384, train_acc: 0.2226 test_loss: 1.9548, test_acc: 0.2470, best: 0.2921, time: 0:02:22
 Epoch: 154, lr: 1.0e-02, train_loss: 2.0298, train_acc: 0.2270 test_loss: 2.0136, test_acc: 0.2374, best: 0.2921, time: 0:02:22
 Epoch: 155, lr: 1.0e-02, train_loss: 2.0211, train_acc: 0.2362 test_loss: 2.0024, test_acc: 0.2451, best: 0.2921, time: 0:02:22
 Epoch: 156, lr: 1.0e-02, train_loss: 2.0348, train_acc: 0.2338 test_loss: 1.9777, test_acc: 0.2810, best: 0.2921, time: 0:02:22
 Epoch: 157, lr: 1.0e-02, train_loss: 2.0108, train_acc: 0.2482 test_loss: 1.9951, test_acc: 0.2501, best: 0.2921, time: 0:02:23
 Epoch: 158, lr: 1.0e-02, train_loss: 2.0160, train_acc: 0.2286 test_loss: 1.9882, test_acc: 0.2479, best: 0.2921, time: 0:02:22
 Epoch: 159, lr: 1.0e-02, train_loss: 1.9954, train_acc: 0.2340 test_loss: 1.9582, test_acc: 0.2319, best: 0.2921, time: 0:02:22
 Epoch: 160, lr: 1.0e-02, train_loss: 1.9886, train_acc: 0.2364 test_loss: 1.9686, test_acc: 0.2696, best: 0.2921, time: 0:02:22
 Epoch: 161, lr: 1.0e-02, train_loss: 1.9798, train_acc: 0.2426 test_loss: 1.9600, test_acc: 0.2744, best: 0.2921, time: 0:02:22
 Epoch: 162, lr: 1.0e-02, train_loss: 2.0132, train_acc: 0.2282 test_loss: 2.0079, test_acc: 0.2370, best: 0.2921, time: 0:02:22
 Epoch: 163, lr: 1.0e-02, train_loss: 2.0044, train_acc: 0.2382 test_loss: 1.9948, test_acc: 0.2502, best: 0.2921, time: 0:02:22
 Epoch: 164, lr: 1.0e-02, train_loss: 1.9742, train_acc: 0.2430 test_loss: 1.9659, test_acc: 0.2871, best: 0.2921, time: 0:02:22
 Epoch: 165, lr: 1.0e-02, train_loss: 2.0430, train_acc: 0.2258 test_loss: 2.0751, test_acc: 0.2107, best: 0.2921, time: 0:02:22
 Epoch: 166, lr: 1.0e-02, train_loss: 2.0707, train_acc: 0.2152 test_loss: 2.0287, test_acc: 0.2370, best: 0.2921, time: 0:02:22
 Epoch: 167, lr: 1.0e-02, train_loss: 2.0190, train_acc: 0.2364 test_loss: 2.0050, test_acc: 0.2580, best: 0.2921, time: 0:02:22
 Epoch: 168, lr: 1.0e-02, train_loss: 2.0543, train_acc: 0.2208 test_loss: 2.3232, test_acc: 0.1344, best: 0.2921, time: 0:02:22
 Epoch: 169, lr: 1.0e-02, train_loss: 2.2151, train_acc: 0.1580 test_loss: 2.2177, test_acc: 0.1744, best: 0.2921, time: 0:02:22
 Epoch: 170, lr: 1.0e-02, train_loss: 2.2131, train_acc: 0.1544 test_loss: 2.2365, test_acc: 0.1500, best: 0.2921, time: 0:02:23
 Epoch: 171, lr: 1.0e-02, train_loss: 2.1832, train_acc: 0.1640 test_loss: 2.1594, test_acc: 0.2054, best: 0.2921, time: 0:02:23
 Epoch: 172, lr: 1.0e-02, train_loss: 2.1456, train_acc: 0.1880 test_loss: 2.1294, test_acc: 0.2193, best: 0.2921, time: 0:02:23
 Epoch: 173, lr: 1.0e-02, train_loss: 2.1353, train_acc: 0.1912 test_loss: 2.1322, test_acc: 0.1789, best: 0.2921, time: 0:02:22
 Epoch: 174, lr: 1.0e-02, train_loss: 2.1063, train_acc: 0.1986 test_loss: 2.1024, test_acc: 0.2231, best: 0.2921, time: 0:02:22
 Epoch: 175, lr: 1.0e-02, train_loss: 2.1157, train_acc: 0.2068 test_loss: 2.0894, test_acc: 0.2374, best: 0.2921, time: 0:02:22
 Epoch: 176, lr: 1.0e-02, train_loss: 2.0891, train_acc: 0.2060 test_loss: 2.0674, test_acc: 0.2089, best: 0.2921, time: 0:02:23
 Epoch: 177, lr: 1.0e-02, train_loss: 2.0876, train_acc: 0.2172 test_loss: 2.0035, test_acc: 0.2876, best: 0.2921, time: 0:02:23
 Epoch: 178, lr: 1.0e-02, train_loss: 2.0536, train_acc: 0.2230 test_loss: 2.0407, test_acc: 0.2454, best: 0.2921, time: 0:02:22
 Epoch: 179, lr: 1.0e-02, train_loss: 2.0404, train_acc: 0.2180 test_loss: 2.0162, test_acc: 0.2377, best: 0.2921, time: 0:02:22
 Epoch: 180, lr: 2.0e-03, train_loss: 2.0045, train_acc: 0.2416 test_loss: 1.9673, test_acc: 0.2595, best: 0.2921, time: 0:02:22
 Epoch: 181, lr: 2.0e-03, train_loss: 2.0023, train_acc: 0.2426 test_loss: 1.9729, test_acc: 0.2589, best: 0.2921, time: 0:02:22
 Epoch: 182, lr: 2.0e-03, train_loss: 2.0155, train_acc: 0.2324 test_loss: 1.9808, test_acc: 0.2612, best: 0.2921, time: 0:02:22
 Epoch: 183, lr: 2.0e-03, train_loss: 2.0098, train_acc: 0.2322 test_loss: 1.9898, test_acc: 0.2494, best: 0.2921, time: 0:02:22
 Epoch: 184, lr: 2.0e-03, train_loss: 1.9991, train_acc: 0.2370 test_loss: 1.9244, test_acc: 0.2802, best: 0.2921, time: 0:02:22
 Epoch: 185, lr: 2.0e-03, train_loss: 2.0002, train_acc: 0.2286 test_loss: 1.9720, test_acc: 0.2610, best: 0.2921, time: 0:02:22
 Epoch: 186, lr: 2.0e-03, train_loss: 1.9832, train_acc: 0.2454 test_loss: 1.9562, test_acc: 0.2694, best: 0.2921, time: 0:02:21
 Epoch: 187, lr: 2.0e-03, train_loss: 1.9847, train_acc: 0.2406 test_loss: 1.9346, test_acc: 0.2657, best: 0.2921, time: 0:02:22
 Epoch: 188, lr: 2.0e-03, train_loss: 1.9853, train_acc: 0.2454 test_loss: 1.9290, test_acc: 0.2807, best: 0.2921, time: 0:02:22
 Epoch: 189, lr: 2.0e-03, train_loss: 1.9946, train_acc: 0.2412 test_loss: 1.9477, test_acc: 0.2818, best: 0.2921, time: 0:02:22
 Epoch: 190, lr: 2.0e-03, train_loss: 1.9758, train_acc: 0.2510 test_loss: 1.9465, test_acc: 0.2742, best: 0.2921, time: 0:02:21
 Epoch: 191, lr: 2.0e-03, train_loss: 1.9847, train_acc: 0.2478 test_loss: 1.9341, test_acc: 0.2769, best: 0.2921, time: 0:02:22
 Epoch: 192, lr: 2.0e-03, train_loss: 1.9937, train_acc: 0.2412 test_loss: 1.9321, test_acc: 0.2649, best: 0.2921, time: 0:02:22
 Epoch: 193, lr: 2.0e-03, train_loss: 1.9813, train_acc: 0.2570 test_loss: 1.9152, test_acc: 0.2799, best: 0.2921, time: 0:02:23
 Epoch: 194, lr: 2.0e-03, train_loss: 1.9715, train_acc: 0.2594 test_loss: 1.9026, test_acc: 0.2809, best: 0.2921, time: 0:02:22
 Epoch: 195, lr: 2.0e-03, train_loss: 1.9790, train_acc: 0.2580 test_loss: 1.9562, test_acc: 0.2656, best: 0.2921, time: 0:02:22
 Epoch: 196, lr: 2.0e-03, train_loss: 1.9827, train_acc: 0.2562 test_loss: 1.9227, test_acc: 0.2730, best: 0.2921, time: 0:02:22
 Epoch: 197, lr: 2.0e-03, train_loss: 1.9753, train_acc: 0.2544 test_loss: 1.9132, test_acc: 0.2904, best: 0.2921, time: 0:02:22
 Epoch: 198, lr: 2.0e-03, train_loss: 1.9639, train_acc: 0.2526 test_loss: 1.9158, test_acc: 0.2750, best: 0.2921, time: 0:02:22
 Epoch: 199, lr: 2.0e-03, train_loss: 1.9587, train_acc: 0.2628 test_loss: 1.9247, test_acc: 0.2785, best: 0.2921, time: 0:02:22
 Epoch: 200, lr: 2.0e-03, train_loss: 1.9765, train_acc: 0.2602 test_loss: 1.9012, test_acc: 0.2854, best: 0.2921, time: 0:02:22
 Epoch: 201, lr: 2.0e-03, train_loss: 1.9645, train_acc: 0.2570 test_loss: 1.9406, test_acc: 0.2575, best: 0.2921, time: 0:02:22
 Epoch: 202, lr: 2.0e-03, train_loss: 1.9573, train_acc: 0.2600 test_loss: 1.9370, test_acc: 0.2701, best: 0.2921, time: 0:02:22
 Epoch: 203, lr: 2.0e-03, train_loss: 1.9467, train_acc: 0.2654 test_loss: 1.9129, test_acc: 0.2689, best: 0.2921, time: 0:02:22
 Epoch: 204, lr: 2.0e-03, train_loss: 1.9560, train_acc: 0.2596 test_loss: 1.8941, test_acc: 0.2976, best: 0.2976, time: 0:02:22
 Epoch: 205, lr: 2.0e-03, train_loss: 1.9899, train_acc: 0.2446 test_loss: 1.9086, test_acc: 0.2823, best: 0.2976, time: 0:02:22
 Epoch: 206, lr: 2.0e-03, train_loss: 1.9822, train_acc: 0.2500 test_loss: 1.9347, test_acc: 0.2800, best: 0.2976, time: 0:02:22
 Epoch: 207, lr: 2.0e-03, train_loss: 1.9672, train_acc: 0.2600 test_loss: 1.9539, test_acc: 0.2789, best: 0.2976, time: 0:02:22
 Epoch: 208, lr: 2.0e-03, train_loss: 1.9688, train_acc: 0.2558 test_loss: 1.9467, test_acc: 0.2666, best: 0.2976, time: 0:02:22
 Epoch: 209, lr: 2.0e-03, train_loss: 1.9585, train_acc: 0.2584 test_loss: 1.8965, test_acc: 0.2744, best: 0.2976, time: 0:02:22
 Epoch: 210, lr: 2.0e-03, train_loss: 1.9704, train_acc: 0.2618 test_loss: 1.9095, test_acc: 0.2796, best: 0.2976, time: 0:02:22
 Epoch: 211, lr: 2.0e-03, train_loss: 1.9518, train_acc: 0.2654 test_loss: 1.9417, test_acc: 0.2564, best: 0.2976, time: 0:02:22
 Epoch: 212, lr: 2.0e-03, train_loss: 1.9572, train_acc: 0.2698 test_loss: 1.9379, test_acc: 0.2491, best: 0.2976, time: 0:02:22
 Epoch: 213, lr: 2.0e-03, train_loss: 1.9861, train_acc: 0.2606 test_loss: 1.9287, test_acc: 0.2659, best: 0.2976, time: 0:02:22
 Epoch: 214, lr: 2.0e-03, train_loss: 1.9768, train_acc: 0.2522 test_loss: 1.9756, test_acc: 0.2586, best: 0.2976, time: 0:02:22
 Epoch: 215, lr: 2.0e-03, train_loss: 1.9885, train_acc: 0.2568 test_loss: 1.9746, test_acc: 0.2724, best: 0.2976, time: 0:02:22
 Epoch: 216, lr: 2.0e-03, train_loss: 1.9734, train_acc: 0.2594 test_loss: 1.8971, test_acc: 0.2863, best: 0.2976, time: 0:02:22
 Epoch: 217, lr: 2.0e-03, train_loss: 1.9766, train_acc: 0.2530 test_loss: 1.9205, test_acc: 0.2790, best: 0.2976, time: 0:02:22
 Epoch: 218, lr: 2.0e-03, train_loss: 1.9758, train_acc: 0.2522 test_loss: 1.9449, test_acc: 0.2669, best: 0.2976, time: 0:02:22
 Epoch: 219, lr: 2.0e-03, train_loss: 1.9765, train_acc: 0.2630 test_loss: 1.9171, test_acc: 0.2898, best: 0.2976, time: 0:02:23
 Epoch: 220, lr: 2.0e-03, train_loss: 1.9833, train_acc: 0.2520 test_loss: 1.9362, test_acc: 0.2855, best: 0.2976, time: 0:02:22
 Epoch: 221, lr: 2.0e-03, train_loss: 1.9715, train_acc: 0.2578 test_loss: 1.9107, test_acc: 0.2848, best: 0.2976, time: 0:02:22
 Epoch: 222, lr: 2.0e-03, train_loss: 1.9501, train_acc: 0.2680 test_loss: 1.8833, test_acc: 0.3021, best: 0.3021, time: 0:02:22
 Epoch: 223, lr: 2.0e-03, train_loss: 1.9418, train_acc: 0.2688 test_loss: 1.8996, test_acc: 0.2860, best: 0.3021, time: 0:02:22
 Epoch: 224, lr: 2.0e-03, train_loss: 1.9543, train_acc: 0.2690 test_loss: 1.9093, test_acc: 0.3039, best: 0.3039, time: 0:02:22
 Epoch: 225, lr: 2.0e-03, train_loss: 1.9562, train_acc: 0.2574 test_loss: 1.9269, test_acc: 0.2946, best: 0.3039, time: 0:02:22
 Epoch: 226, lr: 2.0e-03, train_loss: 1.9475, train_acc: 0.2660 test_loss: 1.9058, test_acc: 0.3005, best: 0.3039, time: 0:02:22
 Epoch: 227, lr: 2.0e-03, train_loss: 1.9472, train_acc: 0.2636 test_loss: 1.9041, test_acc: 0.3050, best: 0.3050, time: 0:02:22
 Epoch: 228, lr: 2.0e-03, train_loss: 1.9385, train_acc: 0.2702 test_loss: 1.8805, test_acc: 0.2930, best: 0.3050, time: 0:02:22
 Epoch: 229, lr: 2.0e-03, train_loss: 1.9523, train_acc: 0.2634 test_loss: 1.9352, test_acc: 0.2821, best: 0.3050, time: 0:02:22
 Epoch: 230, lr: 2.0e-03, train_loss: 1.9396, train_acc: 0.2712 test_loss: 1.8367, test_acc: 0.3239, best: 0.3239, time: 0:02:22
 Epoch: 231, lr: 2.0e-03, train_loss: 1.9319, train_acc: 0.2744 test_loss: 1.8755, test_acc: 0.3066, best: 0.3239, time: 0:02:22
 Epoch: 232, lr: 2.0e-03, train_loss: 1.9408, train_acc: 0.2670 test_loss: 1.8943, test_acc: 0.2859, best: 0.3239, time: 0:02:22
 Epoch: 233, lr: 2.0e-03, train_loss: 1.9522, train_acc: 0.2694 test_loss: 1.8877, test_acc: 0.2884, best: 0.3239, time: 0:02:22
 Epoch: 234, lr: 2.0e-03, train_loss: 1.9386, train_acc: 0.2640 test_loss: 1.9341, test_acc: 0.2830, best: 0.3239, time: 0:02:22
 Epoch: 235, lr: 2.0e-03, train_loss: 1.9471, train_acc: 0.2634 test_loss: 1.9220, test_acc: 0.2880, best: 0.3239, time: 0:02:22
 Epoch: 236, lr: 2.0e-03, train_loss: 1.9223, train_acc: 0.2742 test_loss: 1.9363, test_acc: 0.2734, best: 0.3239, time: 0:02:22
 Epoch: 237, lr: 2.0e-03, train_loss: 1.9430, train_acc: 0.2750 test_loss: 1.8893, test_acc: 0.2946, best: 0.3239, time: 0:02:22
 Epoch: 238, lr: 2.0e-03, train_loss: 1.9570, train_acc: 0.2606 test_loss: 1.9436, test_acc: 0.2760, best: 0.3239, time: 0:02:22
 Epoch: 239, lr: 2.0e-03, train_loss: 1.9493, train_acc: 0.2688 test_loss: 1.9299, test_acc: 0.2710, best: 0.3239, time: 0:02:22
 Epoch: 240, lr: 4.0e-04, train_loss: 1.9467, train_acc: 0.2602 test_loss: 1.9121, test_acc: 0.2858, best: 0.3239, time: 0:02:22
 Epoch: 241, lr: 4.0e-04, train_loss: 1.9355, train_acc: 0.2714 test_loss: 1.8995, test_acc: 0.2928, best: 0.3239, time: 0:02:22
 Epoch: 242, lr: 4.0e-04, train_loss: 1.9407, train_acc: 0.2696 test_loss: 1.9253, test_acc: 0.2856, best: 0.3239, time: 0:02:22
 Epoch: 243, lr: 4.0e-04, train_loss: 1.9274, train_acc: 0.2776 test_loss: 1.8817, test_acc: 0.2899, best: 0.3239, time: 0:02:22
 Epoch: 244, lr: 4.0e-04, train_loss: 1.9242, train_acc: 0.2722 test_loss: 1.8963, test_acc: 0.2839, best: 0.3239, time: 0:02:22
 Epoch: 245, lr: 4.0e-04, train_loss: 1.9273, train_acc: 0.2736 test_loss: 1.9018, test_acc: 0.2879, best: 0.3239, time: 0:02:22
 Epoch: 246, lr: 4.0e-04, train_loss: 1.9190, train_acc: 0.2814 test_loss: 1.9056, test_acc: 0.2903, best: 0.3239, time: 0:02:22
 Epoch: 247, lr: 4.0e-04, train_loss: 1.9400, train_acc: 0.2740 test_loss: 1.9164, test_acc: 0.2741, best: 0.3239, time: 0:02:22
 Epoch: 248, lr: 4.0e-04, train_loss: 1.9586, train_acc: 0.2622 test_loss: 1.8894, test_acc: 0.2930, best: 0.3239, time: 0:02:22
 Epoch: 249, lr: 4.0e-04, train_loss: 1.9478, train_acc: 0.2668 test_loss: 1.8922, test_acc: 0.2836, best: 0.3239, time: 0:02:22
 Epoch: 250, lr: 4.0e-04, train_loss: 1.9449, train_acc: 0.2682 test_loss: 1.9008, test_acc: 0.2979, best: 0.3239, time: 0:02:22
 Epoch: 251, lr: 4.0e-04, train_loss: 1.9567, train_acc: 0.2704 test_loss: 1.8779, test_acc: 0.2940, best: 0.3239, time: 0:02:22
 Epoch: 252, lr: 4.0e-04, train_loss: 1.9536, train_acc: 0.2676 test_loss: 1.8686, test_acc: 0.3078, best: 0.3239, time: 0:02:22
 Epoch: 253, lr: 4.0e-04, train_loss: 1.9442, train_acc: 0.2648 test_loss: 1.8527, test_acc: 0.3074, best: 0.3239, time: 0:02:22
 Epoch: 254, lr: 4.0e-04, train_loss: 1.9409, train_acc: 0.2718 test_loss: 1.9176, test_acc: 0.2915, best: 0.3239, time: 0:02:22
 Epoch: 255, lr: 4.0e-04, train_loss: 1.9292, train_acc: 0.2780 test_loss: 1.8734, test_acc: 0.2959, best: 0.3239, time: 0:02:22
 Epoch: 256, lr: 4.0e-04, train_loss: 1.9204, train_acc: 0.2732 test_loss: 1.9134, test_acc: 0.2893, best: 0.3239, time: 0:02:22
 Epoch: 257, lr: 4.0e-04, train_loss: 1.9441, train_acc: 0.2606 test_loss: 1.8720, test_acc: 0.3043, best: 0.3239, time: 0:02:22
 Epoch: 258, lr: 4.0e-04, train_loss: 1.9222, train_acc: 0.2768 test_loss: 1.8600, test_acc: 0.2946, best: 0.3239, time: 0:02:22
 Epoch: 259, lr: 4.0e-04, train_loss: 1.9098, train_acc: 0.2832 test_loss: 1.8981, test_acc: 0.2801, best: 0.3239, time: 0:02:22
 Epoch: 260, lr: 4.0e-04, train_loss: 1.9248, train_acc: 0.2706 test_loss: 1.9150, test_acc: 0.2913, best: 0.3239, time: 0:02:22
 Epoch: 261, lr: 4.0e-04, train_loss: 1.9178, train_acc: 0.2764 test_loss: 1.8644, test_acc: 0.2953, best: 0.3239, time: 0:02:22
 Epoch: 262, lr: 4.0e-04, train_loss: 1.9307, train_acc: 0.2750 test_loss: 1.8947, test_acc: 0.2854, best: 0.3239, time: 0:02:22
 Epoch: 263, lr: 4.0e-04, train_loss: 1.9527, train_acc: 0.2660 test_loss: 1.8920, test_acc: 0.2919, best: 0.3239, time: 0:02:22
 Epoch: 264, lr: 4.0e-04, train_loss: 1.9140, train_acc: 0.2786 test_loss: 1.8666, test_acc: 0.3023, best: 0.3239, time: 0:02:22
 Epoch: 265, lr: 4.0e-04, train_loss: 1.9251, train_acc: 0.2666 test_loss: 1.8683, test_acc: 0.3125, best: 0.3239, time: 0:02:22
 Epoch: 266, lr: 4.0e-04, train_loss: 1.9281, train_acc: 0.2622 test_loss: 1.8928, test_acc: 0.2772, best: 0.3239, time: 0:02:22
 Epoch: 267, lr: 4.0e-04, train_loss: 1.9203, train_acc: 0.2650 test_loss: 1.9079, test_acc: 0.2747, best: 0.3239, time: 0:02:22
 Epoch: 268, lr: 4.0e-04, train_loss: 1.9227, train_acc: 0.2808 test_loss: 1.8938, test_acc: 0.2781, best: 0.3239, time: 0:02:22
 Epoch: 269, lr: 4.0e-04, train_loss: 1.9204, train_acc: 0.2734 test_loss: 1.8811, test_acc: 0.2885, best: 0.3239, time: 0:02:22
 Epoch: 270, lr: 8.0e-05, train_loss: 1.9166, train_acc: 0.2812 test_loss: 1.9246, test_acc: 0.2697, best: 0.3239, time: 0:02:22
 Epoch: 271, lr: 8.0e-05, train_loss: 1.9156, train_acc: 0.2772 test_loss: 1.8930, test_acc: 0.2825, best: 0.3239, time: 0:02:22
 Epoch: 272, lr: 8.0e-05, train_loss: 1.9055, train_acc: 0.2810 test_loss: 1.8687, test_acc: 0.3004, best: 0.3239, time: 0:02:22
 Epoch: 273, lr: 8.0e-05, train_loss: 1.9172, train_acc: 0.2764 test_loss: 1.8822, test_acc: 0.2861, best: 0.3239, time: 0:02:22
 Epoch: 274, lr: 8.0e-05, train_loss: 1.9154, train_acc: 0.2782 test_loss: 1.8835, test_acc: 0.2781, best: 0.3239, time: 0:02:22
 Epoch: 275, lr: 8.0e-05, train_loss: 1.9047, train_acc: 0.2776 test_loss: 1.8851, test_acc: 0.2799, best: 0.3239, time: 0:02:22
 Epoch: 276, lr: 8.0e-05, train_loss: 1.9169, train_acc: 0.2794 test_loss: 1.8980, test_acc: 0.2833, best: 0.3239, time: 0:02:22
 Epoch: 277, lr: 8.0e-05, train_loss: 1.9148, train_acc: 0.2794 test_loss: 1.8765, test_acc: 0.2911, best: 0.3239, time: 0:02:22
 Epoch: 278, lr: 8.0e-05, train_loss: 1.9083, train_acc: 0.2782 test_loss: 1.8680, test_acc: 0.3116, best: 0.3239, time: 0:02:22
 Epoch: 279, lr: 8.0e-05, train_loss: 1.9003, train_acc: 0.2848 test_loss: 1.9132, test_acc: 0.2841, best: 0.3239, time: 0:02:22
 Epoch: 280, lr: 8.0e-05, train_loss: 1.9198, train_acc: 0.2784 test_loss: 1.8687, test_acc: 0.2961, best: 0.3239, time: 0:02:22
 Epoch: 281, lr: 8.0e-05, train_loss: 1.9266, train_acc: 0.2778 test_loss: 1.9049, test_acc: 0.2876, best: 0.3239, time: 0:02:22
 Epoch: 282, lr: 8.0e-05, train_loss: 1.9162, train_acc: 0.2792 test_loss: 1.8686, test_acc: 0.3010, best: 0.3239, time: 0:02:22
 Epoch: 283, lr: 8.0e-05, train_loss: 1.9127, train_acc: 0.2738 test_loss: 1.8701, test_acc: 0.2915, best: 0.3239, time: 0:02:22
 Epoch: 284, lr: 8.0e-05, train_loss: 1.9093, train_acc: 0.2850 test_loss: 1.8967, test_acc: 0.2864, best: 0.3239, time: 0:02:22
 Epoch: 285, lr: 8.0e-05, train_loss: 1.9134, train_acc: 0.2908 test_loss: 1.8906, test_acc: 0.2894, best: 0.3239, time: 0:02:22
 Epoch: 286, lr: 8.0e-05, train_loss: 1.9077, train_acc: 0.2774 test_loss: 1.8660, test_acc: 0.2976, best: 0.3239, time: 0:02:22
 Epoch: 287, lr: 8.0e-05, train_loss: 1.9170, train_acc: 0.2792 test_loss: 1.8618, test_acc: 0.3033, best: 0.3239, time: 0:02:22
 Epoch: 288, lr: 8.0e-05, train_loss: 1.9110, train_acc: 0.2808 test_loss: 1.8761, test_acc: 0.2859, best: 0.3239, time: 0:02:22
 Epoch: 289, lr: 8.0e-05, train_loss: 1.9125, train_acc: 0.2800 test_loss: 1.8912, test_acc: 0.2761, best: 0.3239, time: 0:02:22
 Epoch: 290, lr: 8.0e-05, train_loss: 1.9240, train_acc: 0.2772 test_loss: 1.9040, test_acc: 0.2724, best: 0.3239, time: 0:02:22
 Epoch: 291, lr: 8.0e-05, train_loss: 1.9100, train_acc: 0.2808 test_loss: 1.8683, test_acc: 0.2916, best: 0.3239, time: 0:02:22
 Epoch: 292, lr: 8.0e-05, train_loss: 1.9057, train_acc: 0.2766 test_loss: 1.8796, test_acc: 0.2870, best: 0.3239, time: 0:02:22
 Epoch: 293, lr: 8.0e-05, train_loss: 1.9067, train_acc: 0.2830 test_loss: 1.8716, test_acc: 0.2888, best: 0.3239, time: 0:02:22
 Epoch: 294, lr: 8.0e-05, train_loss: 1.8977, train_acc: 0.2856 test_loss: 1.8781, test_acc: 0.2926, best: 0.3239, time: 0:02:22
 Epoch: 295, lr: 8.0e-05, train_loss: 1.9154, train_acc: 0.2836 test_loss: 1.8708, test_acc: 0.2943, best: 0.3239, time: 0:02:22
 Epoch: 296, lr: 8.0e-05, train_loss: 1.9197, train_acc: 0.2756 test_loss: 1.8890, test_acc: 0.2873, best: 0.3239, time: 0:02:22
 Epoch: 297, lr: 8.0e-05, train_loss: 1.8980, train_acc: 0.2848 test_loss: 1.8654, test_acc: 0.2881, best: 0.3239, time: 0:02:22
 Epoch: 298, lr: 8.0e-05, train_loss: 1.9222, train_acc: 0.2792 test_loss: 1.8774, test_acc: 0.2824, best: 0.3239, time: 0:02:22
 Epoch: 299, lr: 8.0e-05, train_loss: 1.9068, train_acc: 0.2792 test_loss: 1.8569, test_acc: 0.3026, best: 0.3239, time: 0:02:22
 Highest accuracy: 0.3239