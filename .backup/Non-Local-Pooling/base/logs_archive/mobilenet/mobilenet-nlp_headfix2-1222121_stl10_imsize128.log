
 Run on time: 2022-07-03 01:03:17.713172

 Architecture: mobilenet-nlp_headfix2-1222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP_HEADFIX2-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=96, out_features=96, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 48)
                  (col_embed): Embedding(256, 48)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5138, train_acc: 0.1764 test_loss: 1.8792, test_acc: 0.2519, best: 0.2519, time: 0:02:25
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0466, train_acc: 0.2396 test_loss: 1.7736, test_acc: 0.3055, best: 0.3055, time: 0:02:26
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9638, train_acc: 0.2632 test_loss: 1.7188, test_acc: 0.3130, best: 0.3130, time: 0:02:26
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9063, train_acc: 0.2786 test_loss: 1.6769, test_acc: 0.3553, best: 0.3553, time: 0:02:26
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8630, train_acc: 0.2892 test_loss: 1.6602, test_acc: 0.3392, best: 0.3553, time: 0:02:26
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8238, train_acc: 0.3152 test_loss: 1.6942, test_acc: 0.3390, best: 0.3553, time: 0:02:25
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7923, train_acc: 0.3186 test_loss: 1.5317, test_acc: 0.4015, best: 0.4015, time: 0:02:25
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7533, train_acc: 0.3500 test_loss: 1.5395, test_acc: 0.4052, best: 0.4052, time: 0:02:26
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7493, train_acc: 0.3370 test_loss: 1.4956, test_acc: 0.4354, best: 0.4354, time: 0:02:25
 Epoch: 10, lr: 1.0e-02, train_loss: 1.7029, train_acc: 0.3604 test_loss: 1.4682, test_acc: 0.4427, best: 0.4427, time: 0:02:25
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6987, train_acc: 0.3588 test_loss: 1.4478, test_acc: 0.4564, best: 0.4564, time: 0:02:25
 Epoch: 12, lr: 1.0e-02, train_loss: 1.6524, train_acc: 0.3826 test_loss: 1.4905, test_acc: 0.4369, best: 0.4564, time: 0:02:25
 Epoch: 13, lr: 1.0e-02, train_loss: 1.6296, train_acc: 0.3966 test_loss: 1.4630, test_acc: 0.4556, best: 0.4564, time: 0:02:25
 Epoch: 14, lr: 1.0e-02, train_loss: 1.6101, train_acc: 0.4040 test_loss: 1.3922, test_acc: 0.4839, best: 0.4839, time: 0:02:26
 Epoch: 15, lr: 1.0e-02, train_loss: 1.5798, train_acc: 0.4180 test_loss: 1.3942, test_acc: 0.4814, best: 0.4839, time: 0:02:26
 Epoch: 16, lr: 1.0e-02, train_loss: 1.5539, train_acc: 0.4168 test_loss: 1.4554, test_acc: 0.4400, best: 0.4839, time: 0:02:25
 Epoch: 17, lr: 1.0e-02, train_loss: 1.5242, train_acc: 0.4368 test_loss: 1.3231, test_acc: 0.5060, best: 0.5060, time: 0:02:25
 Epoch: 18, lr: 1.0e-02, train_loss: 1.4934, train_acc: 0.4464 test_loss: 1.2975, test_acc: 0.5118, best: 0.5118, time: 0:02:25
 Epoch: 19, lr: 1.0e-02, train_loss: 1.4675, train_acc: 0.4656 test_loss: 1.2769, test_acc: 0.5249, best: 0.5249, time: 0:02:25
 Epoch: 20, lr: 1.0e-02, train_loss: 1.4549, train_acc: 0.4620 test_loss: 1.2783, test_acc: 0.5265, best: 0.5265, time: 0:02:25
 Epoch: 21, lr: 1.0e-02, train_loss: 1.4173, train_acc: 0.4784 test_loss: 1.3481, test_acc: 0.5058, best: 0.5265, time: 0:02:25
 Epoch: 22, lr: 1.0e-02, train_loss: 1.4289, train_acc: 0.4722 test_loss: 1.1771, test_acc: 0.5639, best: 0.5639, time: 0:02:25
 Epoch: 23, lr: 1.0e-02, train_loss: 1.3982, train_acc: 0.4866 test_loss: 1.2471, test_acc: 0.5440, best: 0.5639, time: 0:02:25
 Epoch: 24, lr: 1.0e-02, train_loss: 1.3837, train_acc: 0.4916 test_loss: 1.1867, test_acc: 0.5583, best: 0.5639, time: 0:02:25
 Epoch: 25, lr: 1.0e-02, train_loss: 1.3665, train_acc: 0.5056 test_loss: 1.1426, test_acc: 0.5757, best: 0.5757, time: 0:02:25
 Epoch: 26, lr: 1.0e-02, train_loss: 1.3237, train_acc: 0.5144 test_loss: 1.1731, test_acc: 0.5801, best: 0.5801, time: 0:02:25
 Epoch: 27, lr: 1.0e-02, train_loss: 1.2875, train_acc: 0.5264 test_loss: 1.0888, test_acc: 0.5954, best: 0.5954, time: 0:02:25
 Epoch: 28, lr: 1.0e-02, train_loss: 1.3246, train_acc: 0.5164 test_loss: 1.1035, test_acc: 0.5897, best: 0.5954, time: 0:02:25
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2956, train_acc: 0.5342 test_loss: 1.1736, test_acc: 0.5826, best: 0.5954, time: 0:02:25
 Epoch: 30, lr: 1.0e-02, train_loss: 1.2806, train_acc: 0.5390 test_loss: 1.0770, test_acc: 0.6114, best: 0.6114, time: 0:02:25
 Epoch: 31, lr: 1.0e-02, train_loss: 1.2802, train_acc: 0.5336 test_loss: 1.0851, test_acc: 0.6092, best: 0.6114, time: 0:02:25
 Epoch: 32, lr: 1.0e-02, train_loss: 1.2465, train_acc: 0.5468 test_loss: 1.0673, test_acc: 0.6056, best: 0.6114, time: 0:02:25
 Epoch: 33, lr: 1.0e-02, train_loss: 1.2299, train_acc: 0.5574 test_loss: 1.1578, test_acc: 0.5773, best: 0.6114, time: 0:02:25
 Epoch: 34, lr: 1.0e-02, train_loss: 1.2495, train_acc: 0.5410 test_loss: 1.0626, test_acc: 0.6186, best: 0.6186, time: 0:02:25
 Epoch: 35, lr: 1.0e-02, train_loss: 1.2179, train_acc: 0.5598 test_loss: 1.1052, test_acc: 0.6006, best: 0.6186, time: 0:02:25
 Epoch: 36, lr: 1.0e-02, train_loss: 1.2019, train_acc: 0.5652 test_loss: 1.0147, test_acc: 0.6394, best: 0.6394, time: 0:02:25
 Epoch: 37, lr: 1.0e-02, train_loss: 1.1993, train_acc: 0.5654 test_loss: 1.0448, test_acc: 0.6248, best: 0.6394, time: 0:02:25
 Epoch: 38, lr: 1.0e-02, train_loss: 1.1939, train_acc: 0.5658 test_loss: 1.0694, test_acc: 0.6158, best: 0.6394, time: 0:02:25
 Epoch: 39, lr: 1.0e-02, train_loss: 1.1624, train_acc: 0.5802 test_loss: 0.9845, test_acc: 0.6471, best: 0.6471, time: 0:02:25
 Epoch: 40, lr: 1.0e-02, train_loss: 1.1652, train_acc: 0.5818 test_loss: 0.9986, test_acc: 0.6544, best: 0.6544, time: 0:02:25
 Epoch: 41, lr: 1.0e-02, train_loss: 1.1512, train_acc: 0.5836 test_loss: 1.0143, test_acc: 0.6355, best: 0.6544, time: 0:02:25
 Epoch: 42, lr: 1.0e-02, train_loss: 1.1443, train_acc: 0.5906 test_loss: 1.0033, test_acc: 0.6416, best: 0.6544, time: 0:02:25
 Epoch: 43, lr: 1.0e-02, train_loss: 1.1334, train_acc: 0.5962 test_loss: 1.0940, test_acc: 0.6144, best: 0.6544, time: 0:02:25
 Epoch: 44, lr: 1.0e-02, train_loss: 1.1229, train_acc: 0.5946 test_loss: 0.9390, test_acc: 0.6691, best: 0.6691, time: 0:02:25
 Epoch: 45, lr: 1.0e-02, train_loss: 1.1305, train_acc: 0.5906 test_loss: 0.9580, test_acc: 0.6621, best: 0.6691, time: 0:02:25
 Epoch: 46, lr: 1.0e-02, train_loss: 1.0993, train_acc: 0.5968 test_loss: 1.0504, test_acc: 0.6159, best: 0.6691, time: 0:02:25
 Epoch: 47, lr: 1.0e-02, train_loss: 1.0961, train_acc: 0.6040 test_loss: 0.9402, test_acc: 0.6621, best: 0.6691, time: 0:02:25
 Epoch: 48, lr: 1.0e-02, train_loss: 1.0795, train_acc: 0.6106 test_loss: 0.9621, test_acc: 0.6656, best: 0.6691, time: 0:02:25
 Epoch: 49, lr: 1.0e-02, train_loss: 1.0774, train_acc: 0.6162 test_loss: 0.8833, test_acc: 0.6791, best: 0.6791, time: 0:02:25
 Epoch: 50, lr: 1.0e-02, train_loss: 1.0653, train_acc: 0.6134 test_loss: 0.9655, test_acc: 0.6621, best: 0.6791, time: 0:02:25
 Epoch: 51, lr: 1.0e-02, train_loss: 1.0590, train_acc: 0.6194 test_loss: 0.9003, test_acc: 0.6803, best: 0.6803, time: 0:02:25
 Epoch: 52, lr: 1.0e-02, train_loss: 1.0587, train_acc: 0.6208 test_loss: 0.9498, test_acc: 0.6609, best: 0.6803, time: 0:02:25
 Epoch: 53, lr: 1.0e-02, train_loss: 1.0417, train_acc: 0.6208 test_loss: 0.8644, test_acc: 0.6869, best: 0.6869, time: 0:02:25
 Epoch: 54, lr: 1.0e-02, train_loss: 1.0465, train_acc: 0.6192 test_loss: 0.8834, test_acc: 0.6789, best: 0.6869, time: 0:02:25
 Epoch: 55, lr: 1.0e-02, train_loss: 1.0223, train_acc: 0.6314 test_loss: 0.9420, test_acc: 0.6644, best: 0.6869, time: 0:02:25
 Epoch: 56, lr: 1.0e-02, train_loss: 1.0227, train_acc: 0.6362 test_loss: 0.8594, test_acc: 0.6940, best: 0.6940, time: 0:02:25
 Epoch: 57, lr: 1.0e-02, train_loss: 1.0063, train_acc: 0.6356 test_loss: 0.9437, test_acc: 0.6650, best: 0.6940, time: 0:02:25
 Epoch: 58, lr: 1.0e-02, train_loss: 1.0144, train_acc: 0.6392 test_loss: 0.9064, test_acc: 0.6740, best: 0.6940, time: 0:02:25
 Epoch: 59, lr: 1.0e-02, train_loss: 1.0001, train_acc: 0.6310 test_loss: 0.8724, test_acc: 0.6910, best: 0.6940, time: 0:02:25
 Epoch: 60, lr: 1.0e-02, train_loss: 0.9901, train_acc: 0.6442 test_loss: 0.9192, test_acc: 0.6734, best: 0.6940, time: 0:02:25
 Epoch: 61, lr: 1.0e-02, train_loss: 0.9748, train_acc: 0.6500 test_loss: 0.9000, test_acc: 0.6819, best: 0.6940, time: 0:02:25
 Epoch: 62, lr: 1.0e-02, train_loss: 0.9997, train_acc: 0.6440 test_loss: 0.8732, test_acc: 0.6873, best: 0.6940, time: 0:02:25
 Epoch: 63, lr: 1.0e-02, train_loss: 0.9827, train_acc: 0.6406 test_loss: 0.8713, test_acc: 0.6929, best: 0.6940, time: 0:02:25
 Epoch: 64, lr: 1.0e-02, train_loss: 0.9734, train_acc: 0.6518 test_loss: 0.9281, test_acc: 0.6713, best: 0.6940, time: 0:02:25
 Epoch: 65, lr: 1.0e-02, train_loss: 0.9659, train_acc: 0.6496 test_loss: 0.9074, test_acc: 0.6840, best: 0.6940, time: 0:02:25
 Epoch: 66, lr: 1.0e-02, train_loss: 0.9546, train_acc: 0.6618 test_loss: 0.9405, test_acc: 0.6670, best: 0.6940, time: 0:02:25
 Epoch: 67, lr: 1.0e-02, train_loss: 0.9551, train_acc: 0.6592 test_loss: 0.9236, test_acc: 0.6813, best: 0.6940, time: 0:02:25
 Epoch: 68, lr: 1.0e-02, train_loss: 0.9254, train_acc: 0.6744 test_loss: 0.8690, test_acc: 0.6907, best: 0.6940, time: 0:02:25
 Epoch: 69, lr: 1.0e-02, train_loss: 0.9263, train_acc: 0.6640 test_loss: 0.8644, test_acc: 0.7023, best: 0.7023, time: 0:02:25
 Epoch: 70, lr: 1.0e-02, train_loss: 0.9007, train_acc: 0.6778 test_loss: 0.8442, test_acc: 0.7070, best: 0.7070, time: 0:02:25
 Epoch: 71, lr: 1.0e-02, train_loss: 0.9175, train_acc: 0.6688 test_loss: 0.8541, test_acc: 0.7059, best: 0.7070, time: 0:02:25
 Epoch: 72, lr: 1.0e-02, train_loss: 0.9187, train_acc: 0.6724 test_loss: 0.8436, test_acc: 0.7015, best: 0.7070, time: 0:02:25
 Epoch: 73, lr: 1.0e-02, train_loss: 0.8993, train_acc: 0.6772 test_loss: 0.8038, test_acc: 0.7202, best: 0.7202, time: 0:02:25
 Epoch: 74, lr: 1.0e-02, train_loss: 0.8899, train_acc: 0.6756 test_loss: 0.8357, test_acc: 0.7073, best: 0.7202, time: 0:02:25
 Epoch: 75, lr: 1.0e-02, train_loss: 0.8947, train_acc: 0.6794 test_loss: 0.8447, test_acc: 0.7014, best: 0.7202, time: 0:02:25
 Epoch: 76, lr: 1.0e-02, train_loss: 0.9015, train_acc: 0.6776 test_loss: 0.8562, test_acc: 0.7026, best: 0.7202, time: 0:02:25
 Epoch: 77, lr: 1.0e-02, train_loss: 0.8708, train_acc: 0.6926 test_loss: 0.9079, test_acc: 0.6893, best: 0.7202, time: 0:02:25
 Epoch: 78, lr: 1.0e-02, train_loss: 0.8922, train_acc: 0.6802 test_loss: 0.8661, test_acc: 0.6929, best: 0.7202, time: 0:02:25
 Epoch: 79, lr: 1.0e-02, train_loss: 0.8622, train_acc: 0.6942 test_loss: 0.8124, test_acc: 0.7111, best: 0.7202, time: 0:02:25
 Epoch: 80, lr: 1.0e-02, train_loss: 0.8820, train_acc: 0.6852 test_loss: 0.7937, test_acc: 0.7228, best: 0.7228, time: 0:02:25
 Epoch: 81, lr: 1.0e-02, train_loss: 0.8774, train_acc: 0.6834 test_loss: 0.8357, test_acc: 0.7157, best: 0.7228, time: 0:02:25
 Epoch: 82, lr: 1.0e-02, train_loss: 0.8705, train_acc: 0.6830 test_loss: 0.8572, test_acc: 0.7059, best: 0.7228, time: 0:02:25
 Epoch: 83, lr: 1.0e-02, train_loss: 0.8660, train_acc: 0.6824 test_loss: 0.7950, test_acc: 0.7166, best: 0.7228, time: 0:02:25
 Epoch: 84, lr: 1.0e-02, train_loss: 0.8444, train_acc: 0.6956 test_loss: 0.8900, test_acc: 0.6951, best: 0.7228, time: 0:02:25
 Epoch: 85, lr: 1.0e-02, train_loss: 0.8415, train_acc: 0.6956 test_loss: 0.8075, test_acc: 0.7183, best: 0.7228, time: 0:02:25
 Epoch: 86, lr: 1.0e-02, train_loss: 0.8490, train_acc: 0.7002 test_loss: 0.8926, test_acc: 0.6939, best: 0.7228, time: 0:02:25
 Epoch: 87, lr: 1.0e-02, train_loss: 0.8406, train_acc: 0.6998 test_loss: 0.8873, test_acc: 0.6914, best: 0.7228, time: 0:02:25
 Epoch: 88, lr: 1.0e-02, train_loss: 0.8297, train_acc: 0.7112 test_loss: 0.7826, test_acc: 0.7230, best: 0.7230, time: 0:02:25
 Epoch: 89, lr: 1.0e-02, train_loss: 0.8249, train_acc: 0.7098 test_loss: 0.7722, test_acc: 0.7352, best: 0.7352, time: 0:02:25
 Epoch: 90, lr: 1.0e-02, train_loss: 0.8006, train_acc: 0.7082 test_loss: 0.9391, test_acc: 0.6906, best: 0.7352, time: 0:02:25
 Epoch: 91, lr: 1.0e-02, train_loss: 0.8391, train_acc: 0.7042 test_loss: 0.7879, test_acc: 0.7329, best: 0.7352, time: 0:02:25
 Epoch: 92, lr: 1.0e-02, train_loss: 0.8202, train_acc: 0.7020 test_loss: 0.8432, test_acc: 0.7074, best: 0.7352, time: 0:02:25
 Epoch: 93, lr: 1.0e-02, train_loss: 0.8091, train_acc: 0.7080 test_loss: 0.8375, test_acc: 0.7060, best: 0.7352, time: 0:02:25
 Epoch: 94, lr: 1.0e-02, train_loss: 0.7857, train_acc: 0.7150 test_loss: 0.9480, test_acc: 0.6820, best: 0.7352, time: 0:02:25
 Epoch: 95, lr: 1.0e-02, train_loss: 0.7935, train_acc: 0.7190 test_loss: 0.7829, test_acc: 0.7338, best: 0.7352, time: 0:02:25
 Epoch: 96, lr: 1.0e-02, train_loss: 0.7899, train_acc: 0.7198 test_loss: 0.7573, test_acc: 0.7398, best: 0.7398, time: 0:02:25
 Epoch: 97, lr: 1.0e-02, train_loss: 0.7787, train_acc: 0.7182 test_loss: 0.8185, test_acc: 0.7190, best: 0.7398, time: 0:02:25
 Epoch: 98, lr: 1.0e-02, train_loss: 0.7967, train_acc: 0.7148 test_loss: 0.7985, test_acc: 0.7249, best: 0.7398, time: 0:02:25
 Epoch: 99, lr: 1.0e-02, train_loss: 0.7977, train_acc: 0.7094 test_loss: 0.7916, test_acc: 0.7260, best: 0.7398, time: 0:02:25
 Epoch: 100, lr: 1.0e-02, train_loss: 0.8076, train_acc: 0.7110 test_loss: 0.7968, test_acc: 0.7272, best: 0.7398, time: 0:02:25
 Epoch: 101, lr: 1.0e-02, train_loss: 0.7715, train_acc: 0.7294 test_loss: 0.8738, test_acc: 0.7097, best: 0.7398, time: 0:02:25
 Epoch: 102, lr: 1.0e-02, train_loss: 0.7763, train_acc: 0.7134 test_loss: 0.8145, test_acc: 0.7135, best: 0.7398, time: 0:02:25
 Epoch: 103, lr: 1.0e-02, train_loss: 0.7587, train_acc: 0.7282 test_loss: 0.9112, test_acc: 0.6914, best: 0.7398, time: 0:02:25
 Epoch: 104, lr: 1.0e-02, train_loss: 0.7558, train_acc: 0.7282 test_loss: 0.7752, test_acc: 0.7296, best: 0.7398, time: 0:02:25
 Epoch: 105, lr: 1.0e-02, train_loss: 0.7555, train_acc: 0.7270 test_loss: 0.7423, test_acc: 0.7439, best: 0.7439, time: 0:02:25
 Epoch: 106, lr: 1.0e-02, train_loss: 0.7474, train_acc: 0.7352 test_loss: 0.7872, test_acc: 0.7336, best: 0.7439, time: 0:02:25
 Epoch: 107, lr: 1.0e-02, train_loss: 0.7411, train_acc: 0.7354 test_loss: 0.8186, test_acc: 0.7232, best: 0.7439, time: 0:02:25
 Epoch: 108, lr: 1.0e-02, train_loss: 0.7579, train_acc: 0.7328 test_loss: 0.7922, test_acc: 0.7301, best: 0.7439, time: 0:02:25
 Epoch: 109, lr: 1.0e-02, train_loss: 0.7373, train_acc: 0.7400 test_loss: 0.7544, test_acc: 0.7404, best: 0.7439, time: 0:02:25
 Epoch: 110, lr: 1.0e-02, train_loss: 0.7491, train_acc: 0.7356 test_loss: 0.8009, test_acc: 0.7239, best: 0.7439, time: 0:02:25
 Epoch: 111, lr: 1.0e-02, train_loss: 0.7359, train_acc: 0.7360 test_loss: 0.7768, test_acc: 0.7341, best: 0.7439, time: 0:02:25
 Epoch: 112, lr: 1.0e-02, train_loss: 0.7395, train_acc: 0.7404 test_loss: 0.8233, test_acc: 0.7285, best: 0.7439, time: 0:02:25
 Epoch: 113, lr: 1.0e-02, train_loss: 0.7227, train_acc: 0.7476 test_loss: 0.7780, test_acc: 0.7359, best: 0.7439, time: 0:02:25
 Epoch: 114, lr: 1.0e-02, train_loss: 0.7094, train_acc: 0.7522 test_loss: 0.7683, test_acc: 0.7426, best: 0.7439, time: 0:02:25
 Epoch: 115, lr: 1.0e-02, train_loss: 0.7308, train_acc: 0.7414 test_loss: 0.7582, test_acc: 0.7358, best: 0.7439, time: 0:02:25
 Epoch: 116, lr: 1.0e-02, train_loss: 0.6874, train_acc: 0.7552 test_loss: 0.8267, test_acc: 0.7232, best: 0.7439, time: 0:02:25
 Epoch: 117, lr: 1.0e-02, train_loss: 0.7098, train_acc: 0.7546 test_loss: 0.7664, test_acc: 0.7396, best: 0.7439, time: 0:02:25
 Epoch: 118, lr: 1.0e-02, train_loss: 0.7024, train_acc: 0.7498 test_loss: 0.7846, test_acc: 0.7328, best: 0.7439, time: 0:02:25
 Epoch: 119, lr: 1.0e-02, train_loss: 0.7078, train_acc: 0.7528 test_loss: 0.8090, test_acc: 0.7276, best: 0.7439, time: 0:02:25
 Epoch: 120, lr: 1.0e-02, train_loss: 0.7051, train_acc: 0.7456 test_loss: 0.7917, test_acc: 0.7412, best: 0.7439, time: 0:02:25
 Epoch: 121, lr: 1.0e-02, train_loss: 0.7013, train_acc: 0.7500 test_loss: 0.7787, test_acc: 0.7415, best: 0.7439, time: 0:02:25
 Epoch: 122, lr: 1.0e-02, train_loss: 0.7070, train_acc: 0.7482 test_loss: 0.7828, test_acc: 0.7424, best: 0.7439, time: 0:02:25
 Epoch: 123, lr: 1.0e-02, train_loss: 0.7036, train_acc: 0.7538 test_loss: 0.7270, test_acc: 0.7540, best: 0.7540, time: 0:02:25
 Epoch: 124, lr: 1.0e-02, train_loss: 0.6871, train_acc: 0.7600 test_loss: 0.7722, test_acc: 0.7421, best: 0.7540, time: 0:02:25
 Epoch: 125, lr: 1.0e-02, train_loss: 0.6810, train_acc: 0.7528 test_loss: 0.7833, test_acc: 0.7325, best: 0.7540, time: 0:02:25
 Epoch: 126, lr: 1.0e-02, train_loss: 0.6690, train_acc: 0.7564 test_loss: 0.7786, test_acc: 0.7442, best: 0.7540, time: 0:02:25
 Epoch: 127, lr: 1.0e-02, train_loss: 0.6897, train_acc: 0.7588 test_loss: 0.7719, test_acc: 0.7408, best: 0.7540, time: 0:02:25
 Epoch: 128, lr: 1.0e-02, train_loss: 0.6681, train_acc: 0.7572 test_loss: 0.7784, test_acc: 0.7341, best: 0.7540, time: 0:02:25
 Epoch: 129, lr: 1.0e-02, train_loss: 0.6767, train_acc: 0.7620 test_loss: 0.7629, test_acc: 0.7470, best: 0.7540, time: 0:02:25
 Epoch: 130, lr: 1.0e-02, train_loss: 0.6592, train_acc: 0.7666 test_loss: 0.7371, test_acc: 0.7504, best: 0.7540, time: 0:02:25
 Epoch: 131, lr: 1.0e-02, train_loss: 0.6534, train_acc: 0.7748 test_loss: 0.8044, test_acc: 0.7318, best: 0.7540, time: 0:02:25
 Epoch: 132, lr: 1.0e-02, train_loss: 0.6599, train_acc: 0.7706 test_loss: 0.7713, test_acc: 0.7386, best: 0.7540, time: 0:02:25
 Epoch: 133, lr: 1.0e-02, train_loss: 0.6587, train_acc: 0.7644 test_loss: 0.7596, test_acc: 0.7401, best: 0.7540, time: 0:02:25
 Epoch: 134, lr: 1.0e-02, train_loss: 0.6548, train_acc: 0.7654 test_loss: 0.7579, test_acc: 0.7491, best: 0.7540, time: 0:02:25
 Epoch: 135, lr: 1.0e-02, train_loss: 0.6443, train_acc: 0.7788 test_loss: 0.7386, test_acc: 0.7516, best: 0.7540, time: 0:02:25
 Epoch: 136, lr: 1.0e-02, train_loss: 0.6654, train_acc: 0.7684 test_loss: 0.7552, test_acc: 0.7439, best: 0.7540, time: 0:02:25
 Epoch: 137, lr: 1.0e-02, train_loss: 0.6521, train_acc: 0.7690 test_loss: 0.7500, test_acc: 0.7472, best: 0.7540, time: 0:02:25
 Epoch: 138, lr: 1.0e-02, train_loss: 0.6452, train_acc: 0.7666 test_loss: 0.7805, test_acc: 0.7360, best: 0.7540, time: 0:02:25
 Epoch: 139, lr: 1.0e-02, train_loss: 0.6407, train_acc: 0.7760 test_loss: 0.7584, test_acc: 0.7530, best: 0.7540, time: 0:02:25
 Epoch: 140, lr: 1.0e-02, train_loss: 0.6458, train_acc: 0.7764 test_loss: 0.7543, test_acc: 0.7478, best: 0.7540, time: 0:02:25
 Epoch: 141, lr: 1.0e-02, train_loss: 0.6149, train_acc: 0.7864 test_loss: 0.7842, test_acc: 0.7469, best: 0.7540, time: 0:02:25
 Epoch: 142, lr: 1.0e-02, train_loss: 0.6090, train_acc: 0.7832 test_loss: 0.7733, test_acc: 0.7468, best: 0.7540, time: 0:02:25
 Epoch: 143, lr: 1.0e-02, train_loss: 0.6506, train_acc: 0.7700 test_loss: 0.7331, test_acc: 0.7524, best: 0.7540, time: 0:02:25
 Epoch: 144, lr: 1.0e-02, train_loss: 0.6260, train_acc: 0.7768 test_loss: 0.8061, test_acc: 0.7380, best: 0.7540, time: 0:02:25
 Epoch: 145, lr: 1.0e-02, train_loss: 0.6374, train_acc: 0.7722 test_loss: 0.8037, test_acc: 0.7530, best: 0.7540, time: 0:02:25
 Epoch: 146, lr: 1.0e-02, train_loss: 0.6304, train_acc: 0.7758 test_loss: 0.7685, test_acc: 0.7491, best: 0.7540, time: 0:02:25
 Epoch: 147, lr: 1.0e-02, train_loss: 0.6225, train_acc: 0.7766 test_loss: 0.7683, test_acc: 0.7512, best: 0.7540, time: 0:02:25
 Epoch: 148, lr: 1.0e-02, train_loss: 0.6084, train_acc: 0.7914 test_loss: 0.7361, test_acc: 0.7544, best: 0.7544, time: 0:02:25
 Epoch: 149, lr: 1.0e-02, train_loss: 0.6186, train_acc: 0.7898 test_loss: 0.7751, test_acc: 0.7510, best: 0.7544, time: 0:02:25
 Epoch: 150, lr: 1.0e-02, train_loss: 0.6264, train_acc: 0.7828 test_loss: 0.7533, test_acc: 0.7475, best: 0.7544, time: 0:02:25
 Epoch: 151, lr: 1.0e-02, train_loss: 0.6089, train_acc: 0.7834 test_loss: 0.7819, test_acc: 0.7529, best: 0.7544, time: 0:02:25
 Epoch: 152, lr: 1.0e-02, train_loss: 0.6368, train_acc: 0.7792 test_loss: 0.7202, test_acc: 0.7621, best: 0.7621, time: 0:02:25
 Epoch: 153, lr: 1.0e-02, train_loss: 0.6099, train_acc: 0.7830 test_loss: 0.7809, test_acc: 0.7494, best: 0.7621, time: 0:02:25
 Epoch: 154, lr: 1.0e-02, train_loss: 0.6229, train_acc: 0.7778 test_loss: 0.8051, test_acc: 0.7456, best: 0.7621, time: 0:02:25
 Epoch: 155, lr: 1.0e-02, train_loss: 0.5866, train_acc: 0.7892 test_loss: 0.8001, test_acc: 0.7522, best: 0.7621, time: 0:02:25
 Epoch: 156, lr: 1.0e-02, train_loss: 0.5836, train_acc: 0.7972 test_loss: 0.7395, test_acc: 0.7646, best: 0.7646, time: 0:02:25
 Epoch: 157, lr: 1.0e-02, train_loss: 0.6206, train_acc: 0.7780 test_loss: 0.7181, test_acc: 0.7628, best: 0.7646, time: 0:02:25
 Epoch: 158, lr: 1.0e-02, train_loss: 0.5913, train_acc: 0.7866 test_loss: 0.7348, test_acc: 0.7552, best: 0.7646, time: 0:02:25
 Epoch: 159, lr: 1.0e-02, train_loss: 0.5922, train_acc: 0.7912 test_loss: 0.7328, test_acc: 0.7628, best: 0.7646, time: 0:02:25
 Epoch: 160, lr: 1.0e-02, train_loss: 0.5964, train_acc: 0.7932 test_loss: 0.7683, test_acc: 0.7489, best: 0.7646, time: 0:02:25
 Epoch: 161, lr: 1.0e-02, train_loss: 0.5896, train_acc: 0.7894 test_loss: 0.7620, test_acc: 0.7546, best: 0.7646, time: 0:02:25
 Epoch: 162, lr: 1.0e-02, train_loss: 0.5661, train_acc: 0.7998 test_loss: 0.8566, test_acc: 0.7351, best: 0.7646, time: 0:02:25
 Epoch: 163, lr: 1.0e-02, train_loss: 0.5661, train_acc: 0.8044 test_loss: 0.7409, test_acc: 0.7631, best: 0.7646, time: 0:02:25
 Epoch: 164, lr: 1.0e-02, train_loss: 0.5679, train_acc: 0.8040 test_loss: 0.7746, test_acc: 0.7651, best: 0.7651, time: 0:02:25
 Epoch: 165, lr: 1.0e-02, train_loss: 0.5604, train_acc: 0.8058 test_loss: 0.8380, test_acc: 0.7441, best: 0.7651, time: 0:02:25
 Epoch: 166, lr: 1.0e-02, train_loss: 0.5581, train_acc: 0.8008 test_loss: 0.7984, test_acc: 0.7555, best: 0.7651, time: 0:02:25
 Epoch: 167, lr: 1.0e-02, train_loss: 0.5709, train_acc: 0.8026 test_loss: 0.7291, test_acc: 0.7691, best: 0.7691, time: 0:02:25
 Epoch: 168, lr: 1.0e-02, train_loss: 0.5910, train_acc: 0.7916 test_loss: 0.7493, test_acc: 0.7562, best: 0.7691, time: 0:02:25
 Epoch: 169, lr: 1.0e-02, train_loss: 0.5603, train_acc: 0.7986 test_loss: 0.8020, test_acc: 0.7528, best: 0.7691, time: 0:02:25
 Epoch: 170, lr: 1.0e-02, train_loss: 0.5532, train_acc: 0.8068 test_loss: 0.7789, test_acc: 0.7588, best: 0.7691, time: 0:02:25
 Epoch: 171, lr: 1.0e-02, train_loss: 0.5973, train_acc: 0.7890 test_loss: 0.7449, test_acc: 0.7696, best: 0.7696, time: 0:02:25
 Epoch: 172, lr: 1.0e-02, train_loss: 0.5463, train_acc: 0.8094 test_loss: 0.7515, test_acc: 0.7572, best: 0.7696, time: 0:02:25
 Epoch: 173, lr: 1.0e-02, train_loss: 0.5557, train_acc: 0.8066 test_loss: 0.8014, test_acc: 0.7524, best: 0.7696, time: 0:02:25
 Epoch: 174, lr: 1.0e-02, train_loss: 0.5784, train_acc: 0.7990 test_loss: 0.8123, test_acc: 0.7509, best: 0.7696, time: 0:02:25
 Epoch: 175, lr: 1.0e-02, train_loss: 0.5506, train_acc: 0.8040 test_loss: 0.7610, test_acc: 0.7592, best: 0.7696, time: 0:02:25
 Epoch: 176, lr: 1.0e-02, train_loss: 0.5476, train_acc: 0.8078 test_loss: 0.8062, test_acc: 0.7470, best: 0.7696, time: 0:02:25
 Epoch: 177, lr: 1.0e-02, train_loss: 0.5536, train_acc: 0.8056 test_loss: 0.8314, test_acc: 0.7351, best: 0.7696, time: 0:02:25
 Epoch: 178, lr: 1.0e-02, train_loss: 0.5458, train_acc: 0.8128 test_loss: 0.7648, test_acc: 0.7516, best: 0.7696, time: 0:02:25
 Epoch: 179, lr: 1.0e-02, train_loss: 0.5426, train_acc: 0.8066 test_loss: 0.7842, test_acc: 0.7582, best: 0.7696, time: 0:02:25
 Epoch: 180, lr: 2.0e-03, train_loss: 0.4860, train_acc: 0.8362 test_loss: 0.7244, test_acc: 0.7754, best: 0.7754, time: 0:02:25
 Epoch: 181, lr: 2.0e-03, train_loss: 0.4469, train_acc: 0.8458 test_loss: 0.7292, test_acc: 0.7754, best: 0.7754, time: 0:02:25
 Epoch: 182, lr: 2.0e-03, train_loss: 0.4489, train_acc: 0.8458 test_loss: 0.7053, test_acc: 0.7831, best: 0.7831, time: 0:02:25
 Epoch: 183, lr: 2.0e-03, train_loss: 0.4369, train_acc: 0.8486 test_loss: 0.7235, test_acc: 0.7829, best: 0.7831, time: 0:02:25
 Epoch: 184, lr: 2.0e-03, train_loss: 0.4251, train_acc: 0.8534 test_loss: 0.7007, test_acc: 0.7869, best: 0.7869, time: 0:02:25
 Epoch: 185, lr: 2.0e-03, train_loss: 0.4249, train_acc: 0.8462 test_loss: 0.7156, test_acc: 0.7819, best: 0.7869, time: 0:02:25
 Epoch: 186, lr: 2.0e-03, train_loss: 0.4169, train_acc: 0.8546 test_loss: 0.7215, test_acc: 0.7866, best: 0.7869, time: 0:02:25
 Epoch: 187, lr: 2.0e-03, train_loss: 0.4014, train_acc: 0.8592 test_loss: 0.7338, test_acc: 0.7786, best: 0.7869, time: 0:02:25
 Epoch: 188, lr: 2.0e-03, train_loss: 0.4315, train_acc: 0.8522 test_loss: 0.7327, test_acc: 0.7796, best: 0.7869, time: 0:02:25
 Epoch: 189, lr: 2.0e-03, train_loss: 0.3969, train_acc: 0.8628 test_loss: 0.7480, test_acc: 0.7843, best: 0.7869, time: 0:02:25
 Epoch: 190, lr: 2.0e-03, train_loss: 0.4117, train_acc: 0.8600 test_loss: 0.7327, test_acc: 0.7791, best: 0.7869, time: 0:02:25
 Epoch: 191, lr: 2.0e-03, train_loss: 0.4064, train_acc: 0.8596 test_loss: 0.7311, test_acc: 0.7817, best: 0.7869, time: 0:02:25
 Epoch: 192, lr: 2.0e-03, train_loss: 0.3949, train_acc: 0.8632 test_loss: 0.7131, test_acc: 0.7859, best: 0.7869, time: 0:02:25
 Epoch: 193, lr: 2.0e-03, train_loss: 0.3905, train_acc: 0.8638 test_loss: 0.7172, test_acc: 0.7856, best: 0.7869, time: 0:02:25
 Epoch: 194, lr: 2.0e-03, train_loss: 0.3929, train_acc: 0.8632 test_loss: 0.7148, test_acc: 0.7885, best: 0.7885, time: 0:02:25
 Epoch: 195, lr: 2.0e-03, train_loss: 0.4009, train_acc: 0.8616 test_loss: 0.7568, test_acc: 0.7740, best: 0.7885, time: 0:02:25
 Epoch: 196, lr: 2.0e-03, train_loss: 0.3830, train_acc: 0.8636 test_loss: 0.7279, test_acc: 0.7833, best: 0.7885, time: 0:02:25
 Epoch: 197, lr: 2.0e-03, train_loss: 0.3807, train_acc: 0.8650 test_loss: 0.7357, test_acc: 0.7885, best: 0.7885, time: 0:02:25
 Epoch: 198, lr: 2.0e-03, train_loss: 0.3832, train_acc: 0.8682 test_loss: 0.7290, test_acc: 0.7817, best: 0.7885, time: 0:02:25
 Epoch: 199, lr: 2.0e-03, train_loss: 0.3789, train_acc: 0.8654 test_loss: 0.7499, test_acc: 0.7824, best: 0.7885, time: 0:02:25
 Epoch: 200, lr: 2.0e-03, train_loss: 0.3632, train_acc: 0.8780 test_loss: 0.7178, test_acc: 0.7893, best: 0.7893, time: 0:02:25
 Epoch: 201, lr: 2.0e-03, train_loss: 0.3969, train_acc: 0.8644 test_loss: 0.7331, test_acc: 0.7841, best: 0.7893, time: 0:02:25
 Epoch: 202, lr: 2.0e-03, train_loss: 0.3788, train_acc: 0.8692 test_loss: 0.7288, test_acc: 0.7870, best: 0.7893, time: 0:02:25
 Epoch: 203, lr: 2.0e-03, train_loss: 0.3752, train_acc: 0.8708 test_loss: 0.7390, test_acc: 0.7816, best: 0.7893, time: 0:02:25
 Epoch: 204, lr: 2.0e-03, train_loss: 0.3782, train_acc: 0.8724 test_loss: 0.7443, test_acc: 0.7860, best: 0.7893, time: 0:02:25
 Epoch: 205, lr: 2.0e-03, train_loss: 0.3687, train_acc: 0.8746 test_loss: 0.7672, test_acc: 0.7791, best: 0.7893, time: 0:02:25
 Epoch: 206, lr: 2.0e-03, train_loss: 0.3895, train_acc: 0.8634 test_loss: 0.7376, test_acc: 0.7861, best: 0.7893, time: 0:02:26
 Epoch: 207, lr: 2.0e-03, train_loss: 0.3730, train_acc: 0.8700 test_loss: 0.7536, test_acc: 0.7833, best: 0.7893, time: 0:02:25
 Epoch: 208, lr: 2.0e-03, train_loss: 0.3596, train_acc: 0.8768 test_loss: 0.7522, test_acc: 0.7819, best: 0.7893, time: 0:02:25
 Epoch: 209, lr: 2.0e-03, train_loss: 0.3765, train_acc: 0.8656 test_loss: 0.7610, test_acc: 0.7837, best: 0.7893, time: 0:02:25
 Epoch: 210, lr: 2.0e-03, train_loss: 0.3773, train_acc: 0.8722 test_loss: 0.7318, test_acc: 0.7891, best: 0.7893, time: 0:02:25
 Epoch: 211, lr: 2.0e-03, train_loss: 0.3732, train_acc: 0.8694 test_loss: 0.7305, test_acc: 0.7860, best: 0.7893, time: 0:02:25
 Epoch: 212, lr: 2.0e-03, train_loss: 0.3939, train_acc: 0.8624 test_loss: 0.7302, test_acc: 0.7831, best: 0.7893, time: 0:02:25
 Epoch: 213, lr: 2.0e-03, train_loss: 0.3531, train_acc: 0.8762 test_loss: 0.7383, test_acc: 0.7843, best: 0.7893, time: 0:02:25
 Epoch: 214, lr: 2.0e-03, train_loss: 0.3645, train_acc: 0.8770 test_loss: 0.7322, test_acc: 0.7885, best: 0.7893, time: 0:02:25
 Epoch: 215, lr: 2.0e-03, train_loss: 0.3573, train_acc: 0.8742 test_loss: 0.7649, test_acc: 0.7861, best: 0.7893, time: 0:02:25
 Epoch: 216, lr: 2.0e-03, train_loss: 0.3442, train_acc: 0.8790 test_loss: 0.8171, test_acc: 0.7756, best: 0.7893, time: 0:02:25
 Epoch: 217, lr: 2.0e-03, train_loss: 0.3561, train_acc: 0.8768 test_loss: 0.7651, test_acc: 0.7825, best: 0.7893, time: 0:02:25
 Epoch: 218, lr: 2.0e-03, train_loss: 0.3747, train_acc: 0.8666 test_loss: 0.7650, test_acc: 0.7831, best: 0.7893, time: 0:02:25
 Epoch: 219, lr: 2.0e-03, train_loss: 0.3808, train_acc: 0.8712 test_loss: 0.7507, test_acc: 0.7809, best: 0.7893, time: 0:02:25
 Epoch: 220, lr: 2.0e-03, train_loss: 0.3682, train_acc: 0.8714 test_loss: 0.7571, test_acc: 0.7809, best: 0.7893, time: 0:02:25
 Epoch: 221, lr: 2.0e-03, train_loss: 0.3777, train_acc: 0.8688 test_loss: 0.7551, test_acc: 0.7846, best: 0.7893, time: 0:02:25
 Epoch: 222, lr: 2.0e-03, train_loss: 0.3609, train_acc: 0.8722 test_loss: 0.7564, test_acc: 0.7825, best: 0.7893, time: 0:02:25
 Epoch: 223, lr: 2.0e-03, train_loss: 0.3686, train_acc: 0.8702 test_loss: 0.7674, test_acc: 0.7779, best: 0.7893, time: 0:02:25
 Epoch: 224, lr: 2.0e-03, train_loss: 0.3604, train_acc: 0.8752 test_loss: 0.7723, test_acc: 0.7779, best: 0.7893, time: 0:02:25
 Epoch: 225, lr: 2.0e-03, train_loss: 0.3619, train_acc: 0.8760 test_loss: 0.7772, test_acc: 0.7798, best: 0.7893, time: 0:02:25
 Epoch: 226, lr: 2.0e-03, train_loss: 0.3570, train_acc: 0.8790 test_loss: 0.7816, test_acc: 0.7784, best: 0.7893, time: 0:02:25
 Epoch: 227, lr: 2.0e-03, train_loss: 0.3694, train_acc: 0.8736 test_loss: 0.7419, test_acc: 0.7826, best: 0.7893, time: 0:02:25
 Epoch: 228, lr: 2.0e-03, train_loss: 0.3624, train_acc: 0.8756 test_loss: 0.7805, test_acc: 0.7790, best: 0.7893, time: 0:02:25
 Epoch: 229, lr: 2.0e-03, train_loss: 0.3559, train_acc: 0.8800 test_loss: 0.7552, test_acc: 0.7840, best: 0.7893, time: 0:02:25
 Epoch: 230, lr: 2.0e-03, train_loss: 0.3644, train_acc: 0.8772 test_loss: 0.7442, test_acc: 0.7827, best: 0.7893, time: 0:02:25
 Epoch: 231, lr: 2.0e-03, train_loss: 0.3368, train_acc: 0.8826 test_loss: 0.7903, test_acc: 0.7809, best: 0.7893, time: 0:02:25
 Epoch: 232, lr: 2.0e-03, train_loss: 0.3618, train_acc: 0.8756 test_loss: 0.7604, test_acc: 0.7826, best: 0.7893, time: 0:02:25
 Epoch: 233, lr: 2.0e-03, train_loss: 0.3563, train_acc: 0.8736 test_loss: 0.7644, test_acc: 0.7792, best: 0.7893, time: 0:02:25
 Epoch: 234, lr: 2.0e-03, train_loss: 0.3498, train_acc: 0.8778 test_loss: 0.7726, test_acc: 0.7820, best: 0.7893, time: 0:02:25
 Epoch: 235, lr: 2.0e-03, train_loss: 0.3412, train_acc: 0.8796 test_loss: 0.7684, test_acc: 0.7823, best: 0.7893, time: 0:02:25
 Epoch: 236, lr: 2.0e-03, train_loss: 0.3405, train_acc: 0.8828 test_loss: 0.7935, test_acc: 0.7799, best: 0.7893, time: 0:02:25
 Epoch: 237, lr: 2.0e-03, train_loss: 0.3425, train_acc: 0.8802 test_loss: 0.7951, test_acc: 0.7831, best: 0.7893, time: 0:02:25
 Epoch: 238, lr: 2.0e-03, train_loss: 0.3602, train_acc: 0.8814 test_loss: 0.7667, test_acc: 0.7839, best: 0.7893, time: 0:02:25
 Epoch: 239, lr: 2.0e-03, train_loss: 0.3659, train_acc: 0.8722 test_loss: 0.7661, test_acc: 0.7800, best: 0.7893, time: 0:02:25
 Epoch: 240, lr: 4.0e-04, train_loss: 0.3352, train_acc: 0.8874 test_loss: 0.7596, test_acc: 0.7866, best: 0.7893, time: 0:02:25
 Epoch: 241, lr: 4.0e-04, train_loss: 0.3312, train_acc: 0.8824 test_loss: 0.7495, test_acc: 0.7847, best: 0.7893, time: 0:02:25
 Epoch: 242, lr: 4.0e-04, train_loss: 0.3366, train_acc: 0.8830 test_loss: 0.7425, test_acc: 0.7865, best: 0.7893, time: 0:02:25
 Epoch: 243, lr: 4.0e-04, train_loss: 0.3212, train_acc: 0.8916 test_loss: 0.7359, test_acc: 0.7814, best: 0.7893, time: 0:02:25
 Epoch: 244, lr: 4.0e-04, train_loss: 0.3202, train_acc: 0.8924 test_loss: 0.7466, test_acc: 0.7841, best: 0.7893, time: 0:02:25
 Epoch: 245, lr: 4.0e-04, train_loss: 0.3325, train_acc: 0.8898 test_loss: 0.7563, test_acc: 0.7849, best: 0.7893, time: 0:02:25
 Epoch: 246, lr: 4.0e-04, train_loss: 0.3107, train_acc: 0.8904 test_loss: 0.7478, test_acc: 0.7880, best: 0.7893, time: 0:02:25
 Epoch: 247, lr: 4.0e-04, train_loss: 0.3271, train_acc: 0.8850 test_loss: 0.7510, test_acc: 0.7846, best: 0.7893, time: 0:02:25
 Epoch: 248, lr: 4.0e-04, train_loss: 0.3340, train_acc: 0.8854 test_loss: 0.7422, test_acc: 0.7863, best: 0.7893, time: 0:02:25
 Epoch: 249, lr: 4.0e-04, train_loss: 0.3212, train_acc: 0.8896 test_loss: 0.7583, test_acc: 0.7873, best: 0.7893, time: 0:02:26
 Epoch: 250, lr: 4.0e-04, train_loss: 0.3314, train_acc: 0.8848 test_loss: 0.7401, test_acc: 0.7849, best: 0.7893, time: 0:02:25
 Epoch: 251, lr: 4.0e-04, train_loss: 0.3413, train_acc: 0.8802 test_loss: 0.7434, test_acc: 0.7869, best: 0.7893, time: 0:02:25
 Epoch: 252, lr: 4.0e-04, train_loss: 0.3229, train_acc: 0.8866 test_loss: 0.7706, test_acc: 0.7870, best: 0.7893, time: 0:02:25
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2950, train_acc: 0.8946 test_loss: 0.7653, test_acc: 0.7841, best: 0.7893, time: 0:02:25
 Epoch: 254, lr: 4.0e-04, train_loss: 0.3252, train_acc: 0.8934 test_loss: 0.7584, test_acc: 0.7869, best: 0.7893, time: 0:02:25
 Epoch: 255, lr: 4.0e-04, train_loss: 0.3165, train_acc: 0.8936 test_loss: 0.7641, test_acc: 0.7849, best: 0.7893, time: 0:02:25
 Epoch: 256, lr: 4.0e-04, train_loss: 0.3248, train_acc: 0.8890 test_loss: 0.7589, test_acc: 0.7855, best: 0.7893, time: 0:02:25
 Epoch: 257, lr: 4.0e-04, train_loss: 0.3244, train_acc: 0.8856 test_loss: 0.7659, test_acc: 0.7854, best: 0.7893, time: 0:02:25
 Epoch: 258, lr: 4.0e-04, train_loss: 0.3278, train_acc: 0.8900 test_loss: 0.7622, test_acc: 0.7854, best: 0.7893, time: 0:02:25
 Epoch: 259, lr: 4.0e-04, train_loss: 0.3256, train_acc: 0.8834 test_loss: 0.7469, test_acc: 0.7883, best: 0.7893, time: 0:02:25
 Epoch: 260, lr: 4.0e-04, train_loss: 0.3183, train_acc: 0.8940 test_loss: 0.7538, test_acc: 0.7839, best: 0.7893, time: 0:02:25
 Epoch: 261, lr: 4.0e-04, train_loss: 0.2919, train_acc: 0.8972 test_loss: 0.7644, test_acc: 0.7881, best: 0.7893, time: 0:02:25
 Epoch: 262, lr: 4.0e-04, train_loss: 0.3149, train_acc: 0.8922 test_loss: 0.7661, test_acc: 0.7883, best: 0.7893, time: 0:02:25
 Epoch: 263, lr: 4.0e-04, train_loss: 0.3180, train_acc: 0.8886 test_loss: 0.7552, test_acc: 0.7901, best: 0.7901, time: 0:02:25
 Epoch: 264, lr: 4.0e-04, train_loss: 0.3184, train_acc: 0.8926 test_loss: 0.7645, test_acc: 0.7876, best: 0.7901, time: 0:02:25
 Epoch: 265, lr: 4.0e-04, train_loss: 0.3333, train_acc: 0.8842 test_loss: 0.7686, test_acc: 0.7849, best: 0.7901, time: 0:02:25
 Epoch: 266, lr: 4.0e-04, train_loss: 0.3119, train_acc: 0.8878 test_loss: 0.7643, test_acc: 0.7885, best: 0.7901, time: 0:02:25
 Epoch: 267, lr: 4.0e-04, train_loss: 0.3095, train_acc: 0.8916 test_loss: 0.7908, test_acc: 0.7811, best: 0.7901, time: 0:02:26
 Epoch: 268, lr: 4.0e-04, train_loss: 0.3169, train_acc: 0.8894 test_loss: 0.7566, test_acc: 0.7873, best: 0.7901, time: 0:02:25
 Epoch: 269, lr: 4.0e-04, train_loss: 0.3070, train_acc: 0.8998 test_loss: 0.7677, test_acc: 0.7870, best: 0.7901, time: 0:02:25
 Epoch: 270, lr: 8.0e-05, train_loss: 0.3428, train_acc: 0.8820 test_loss: 0.7719, test_acc: 0.7864, best: 0.7901, time: 0:02:25
 Epoch: 271, lr: 8.0e-05, train_loss: 0.3105, train_acc: 0.8914 test_loss: 0.7773, test_acc: 0.7890, best: 0.7901, time: 0:02:25
 Epoch: 272, lr: 8.0e-05, train_loss: 0.3167, train_acc: 0.8906 test_loss: 0.7772, test_acc: 0.7857, best: 0.7901, time: 0:02:25
 Epoch: 273, lr: 8.0e-05, train_loss: 0.3008, train_acc: 0.8950 test_loss: 0.7773, test_acc: 0.7877, best: 0.7901, time: 0:02:25
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2979, train_acc: 0.8972 test_loss: 0.7651, test_acc: 0.7871, best: 0.7901, time: 0:02:25
 Epoch: 275, lr: 8.0e-05, train_loss: 0.3334, train_acc: 0.8818 test_loss: 0.7687, test_acc: 0.7895, best: 0.7901, time: 0:02:25
 Epoch: 276, lr: 8.0e-05, train_loss: 0.3046, train_acc: 0.8976 test_loss: 0.7804, test_acc: 0.7856, best: 0.7901, time: 0:02:25
 Epoch: 277, lr: 8.0e-05, train_loss: 0.3162, train_acc: 0.8922 test_loss: 0.7669, test_acc: 0.7865, best: 0.7901, time: 0:02:25
 Epoch: 278, lr: 8.0e-05, train_loss: 0.3066, train_acc: 0.8932 test_loss: 0.7601, test_acc: 0.7867, best: 0.7901, time: 0:02:25
 Epoch: 279, lr: 8.0e-05, train_loss: 0.3215, train_acc: 0.8906 test_loss: 0.7784, test_acc: 0.7861, best: 0.7901, time: 0:02:25
 Epoch: 280, lr: 8.0e-05, train_loss: 0.3146, train_acc: 0.8946 test_loss: 0.7679, test_acc: 0.7865, best: 0.7901, time: 0:02:25
 Epoch: 281, lr: 8.0e-05, train_loss: 0.3074, train_acc: 0.8914 test_loss: 0.7772, test_acc: 0.7870, best: 0.7901, time: 0:02:25
 Epoch: 282, lr: 8.0e-05, train_loss: 0.2939, train_acc: 0.8980 test_loss: 0.7735, test_acc: 0.7875, best: 0.7901, time: 0:02:25
 Epoch: 283, lr: 8.0e-05, train_loss: 0.3202, train_acc: 0.8876 test_loss: 0.7720, test_acc: 0.7864, best: 0.7901, time: 0:02:25
 Epoch: 284, lr: 8.0e-05, train_loss: 0.3127, train_acc: 0.8938 test_loss: 0.7720, test_acc: 0.7863, best: 0.7901, time: 0:02:25
 Epoch: 285, lr: 8.0e-05, train_loss: 0.3105, train_acc: 0.8902 test_loss: 0.7598, test_acc: 0.7904, best: 0.7904, time: 0:02:25
 Epoch: 286, lr: 8.0e-05, train_loss: 0.3106, train_acc: 0.8954 test_loss: 0.7629, test_acc: 0.7843, best: 0.7904, time: 0:02:25
 Epoch: 287, lr: 8.0e-05, train_loss: 0.3051, train_acc: 0.8964 test_loss: 0.7925, test_acc: 0.7854, best: 0.7904, time: 0:02:25
 Epoch: 288, lr: 8.0e-05, train_loss: 0.3029, train_acc: 0.8962 test_loss: 0.7743, test_acc: 0.7864, best: 0.7904, time: 0:02:25
 Epoch: 289, lr: 8.0e-05, train_loss: 0.3486, train_acc: 0.8794 test_loss: 0.7514, test_acc: 0.7876, best: 0.7904, time: 0:02:25
 Epoch: 290, lr: 8.0e-05, train_loss: 0.3128, train_acc: 0.8958 test_loss: 0.7644, test_acc: 0.7863, best: 0.7904, time: 0:02:25
 Epoch: 291, lr: 8.0e-05, train_loss: 0.3240, train_acc: 0.8912 test_loss: 0.7521, test_acc: 0.7896, best: 0.7904, time: 0:02:25
 Epoch: 292, lr: 8.0e-05, train_loss: 0.3166, train_acc: 0.8874 test_loss: 0.7567, test_acc: 0.7875, best: 0.7904, time: 0:02:24
 Epoch: 293, lr: 8.0e-05, train_loss: 0.2981, train_acc: 0.8982 test_loss: 0.7765, test_acc: 0.7864, best: 0.7904, time: 0:02:23
 Epoch: 294, lr: 8.0e-05, train_loss: 0.3182, train_acc: 0.8874 test_loss: 0.7792, test_acc: 0.7833, best: 0.7904, time: 0:02:23
 Epoch: 295, lr: 8.0e-05, train_loss: 0.3098, train_acc: 0.8900 test_loss: 0.7646, test_acc: 0.7886, best: 0.7904, time: 0:02:23
 Epoch: 296, lr: 8.0e-05, train_loss: 0.3145, train_acc: 0.8974 test_loss: 0.7698, test_acc: 0.7880, best: 0.7904, time: 0:02:23
 Epoch: 297, lr: 8.0e-05, train_loss: 0.3168, train_acc: 0.8914 test_loss: 0.7783, test_acc: 0.7835, best: 0.7904, time: 0:02:23
 Epoch: 298, lr: 8.0e-05, train_loss: 0.3156, train_acc: 0.8898 test_loss: 0.7736, test_acc: 0.7840, best: 0.7904, time: 0:02:23
 Epoch: 299, lr: 8.0e-05, train_loss: 0.3032, train_acc: 0.8952 test_loss: 0.7711, test_acc: 0.7821, best: 0.7904, time: 0:02:23
 Highest accuracy: 0.7904