
 Run on time: 2022-07-03 01:03:45.492636

 Architecture: mobilenet-nlp_headfix2-4222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 4,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP_HEADFIX2-4222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=96, out_features=96, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 48)
                  (col_embed): Embedding(256, 48)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.2771, train_acc: 0.1200 test_loss: 2.4853, test_acc: 0.1256, best: 0.1256, time: 0:01:58
 Epoch: 2, lr: 1.0e-02, train_loss: 2.4342, train_acc: 0.1264 test_loss: 2.2657, test_acc: 0.1396, best: 0.1396, time: 0:01:58
 Epoch: 3, lr: 1.0e-02, train_loss: 2.3282, train_acc: 0.1378 test_loss: 2.2974, test_acc: 0.1403, best: 0.1403, time: 0:01:58
 Epoch: 4, lr: 1.0e-02, train_loss: 2.3434, train_acc: 0.1216 test_loss: 2.2832, test_acc: 0.1636, best: 0.1636, time: 0:01:58
 Epoch: 5, lr: 1.0e-02, train_loss: 2.3024, train_acc: 0.1262 test_loss: 2.2826, test_acc: 0.1163, best: 0.1636, time: 0:01:58
 Epoch: 6, lr: 1.0e-02, train_loss: 2.2696, train_acc: 0.1390 test_loss: 2.2316, test_acc: 0.1444, best: 0.1636, time: 0:01:58
 Epoch: 7, lr: 1.0e-02, train_loss: 2.2491, train_acc: 0.1468 test_loss: 2.2202, test_acc: 0.1609, best: 0.1636, time: 0:01:57
 Epoch: 8, lr: 1.0e-02, train_loss: 2.2275, train_acc: 0.1524 test_loss: 2.2344, test_acc: 0.1355, best: 0.1636, time: 0:01:57
 Epoch: 9, lr: 1.0e-02, train_loss: 2.2273, train_acc: 0.1476 test_loss: 2.2387, test_acc: 0.1527, best: 0.1636, time: 0:01:57
 Epoch: 10, lr: 1.0e-02, train_loss: 2.2225, train_acc: 0.1542 test_loss: 2.2192, test_acc: 0.1670, best: 0.1670, time: 0:01:57
 Epoch: 11, lr: 1.0e-02, train_loss: 2.2014, train_acc: 0.1652 test_loss: 2.1923, test_acc: 0.1765, best: 0.1765, time: 0:01:55
 Epoch: 12, lr: 1.0e-02, train_loss: 2.2232, train_acc: 0.1476 test_loss: 2.2251, test_acc: 0.1571, best: 0.1765, time: 0:01:55
 Epoch: 13, lr: 1.0e-02, train_loss: 2.1916, train_acc: 0.1536 test_loss: 2.2062, test_acc: 0.1701, best: 0.1765, time: 0:01:55
 Epoch: 14, lr: 1.0e-02, train_loss: 2.2211, train_acc: 0.1500 test_loss: 2.2212, test_acc: 0.1588, best: 0.1765, time: 0:01:55
 Epoch: 15, lr: 1.0e-02, train_loss: 2.1802, train_acc: 0.1680 test_loss: 2.2104, test_acc: 0.1404, best: 0.1765, time: 0:01:55
 Epoch: 16, lr: 1.0e-02, train_loss: 2.1727, train_acc: 0.1708 test_loss: 2.1815, test_acc: 0.1681, best: 0.1765, time: 0:01:56
 Epoch: 17, lr: 1.0e-02, train_loss: 2.2805, train_acc: 0.1272 test_loss: 2.2761, test_acc: 0.1368, best: 0.1765, time: 0:01:56
 Epoch: 18, lr: 1.0e-02, train_loss: 2.2777, train_acc: 0.1352 test_loss: 2.2787, test_acc: 0.1350, best: 0.1765, time: 0:01:55
 Epoch: 19, lr: 1.0e-02, train_loss: 2.2479, train_acc: 0.1416 test_loss: 2.3076, test_acc: 0.1449, best: 0.1765, time: 0:01:56
 Epoch: 20, lr: 1.0e-02, train_loss: 2.2510, train_acc: 0.1422 test_loss: 2.2455, test_acc: 0.1708, best: 0.1765, time: 0:01:55
 Epoch: 21, lr: 1.0e-02, train_loss: 2.2358, train_acc: 0.1518 test_loss: 2.2620, test_acc: 0.1440, best: 0.1765, time: 0:01:55
 Epoch: 22, lr: 1.0e-02, train_loss: 2.2404, train_acc: 0.1422 test_loss: 2.2711, test_acc: 0.1469, best: 0.1765, time: 0:01:55
 Epoch: 23, lr: 1.0e-02, train_loss: 2.2211, train_acc: 0.1468 test_loss: 2.2486, test_acc: 0.1515, best: 0.1765, time: 0:01:56
 Epoch: 24, lr: 1.0e-02, train_loss: 2.2161, train_acc: 0.1604 test_loss: 2.2740, test_acc: 0.1446, best: 0.1765, time: 0:01:55
 Epoch: 25, lr: 1.0e-02, train_loss: 2.2146, train_acc: 0.1614 test_loss: 2.2711, test_acc: 0.1395, best: 0.1765, time: 0:01:55
 Epoch: 26, lr: 1.0e-02, train_loss: 2.2016, train_acc: 0.1576 test_loss: 2.2330, test_acc: 0.1466, best: 0.1765, time: 0:01:55
 Epoch: 27, lr: 1.0e-02, train_loss: 2.2129, train_acc: 0.1558 test_loss: 2.2494, test_acc: 0.1576, best: 0.1765, time: 0:01:56
 Epoch: 28, lr: 1.0e-02, train_loss: 2.2060, train_acc: 0.1568 test_loss: 2.2285, test_acc: 0.1756, best: 0.1765, time: 0:01:55
 Epoch: 29, lr: 1.0e-02, train_loss: 2.1855, train_acc: 0.1674 test_loss: 2.2212, test_acc: 0.1984, best: 0.1984, time: 0:01:55
 Epoch: 30, lr: 1.0e-02, train_loss: 2.1743, train_acc: 0.1728 test_loss: 2.2622, test_acc: 0.1391, best: 0.1984, time: 0:01:56
 Epoch: 31, lr: 1.0e-02, train_loss: 2.2133, train_acc: 0.1586 test_loss: 2.2082, test_acc: 0.1704, best: 0.1984, time: 0:01:55
 Epoch: 32, lr: 1.0e-02, train_loss: 2.1998, train_acc: 0.1596 test_loss: 2.2730, test_acc: 0.1220, best: 0.1984, time: 0:01:55
 Epoch: 33, lr: 1.0e-02, train_loss: 2.2348, train_acc: 0.1534 test_loss: 2.2088, test_acc: 0.1925, best: 0.1984, time: 0:01:55
 Epoch: 34, lr: 1.0e-02, train_loss: 2.1946, train_acc: 0.1570 test_loss: 2.1951, test_acc: 0.1926, best: 0.1984, time: 0:01:55
 Epoch: 35, lr: 1.0e-02, train_loss: 2.1874, train_acc: 0.1594 test_loss: 2.1681, test_acc: 0.1842, best: 0.1984, time: 0:01:55
 Epoch: 36, lr: 1.0e-02, train_loss: 2.1787, train_acc: 0.1658 test_loss: 2.2675, test_acc: 0.1862, best: 0.1984, time: 0:01:55
 Epoch: 37, lr: 1.0e-02, train_loss: 2.1887, train_acc: 0.1774 test_loss: 2.1785, test_acc: 0.1732, best: 0.1984, time: 0:01:55
 Epoch: 38, lr: 1.0e-02, train_loss: 2.1570, train_acc: 0.1794 test_loss: 2.1910, test_acc: 0.1766, best: 0.1984, time: 0:01:56
 Epoch: 39, lr: 1.0e-02, train_loss: 2.2233, train_acc: 0.1564 test_loss: 2.1549, test_acc: 0.2111, best: 0.2111, time: 0:01:56
 Epoch: 40, lr: 1.0e-02, train_loss: 2.1518, train_acc: 0.1860 test_loss: 2.1687, test_acc: 0.1780, best: 0.2111, time: 0:01:56
 Epoch: 41, lr: 1.0e-02, train_loss: 2.1033, train_acc: 0.2058 test_loss: 2.1272, test_acc: 0.2114, best: 0.2114, time: 0:01:55
 Epoch: 42, lr: 1.0e-02, train_loss: 2.1145, train_acc: 0.1866 test_loss: 2.1015, test_acc: 0.2309, best: 0.2309, time: 0:01:56
 Epoch: 43, lr: 1.0e-02, train_loss: 2.1162, train_acc: 0.1938 test_loss: 2.1284, test_acc: 0.2286, best: 0.2309, time: 0:01:55
 Epoch: 44, lr: 1.0e-02, train_loss: 2.1195, train_acc: 0.1918 test_loss: 2.1843, test_acc: 0.2010, best: 0.2309, time: 0:01:56
 Epoch: 45, lr: 1.0e-02, train_loss: 2.1080, train_acc: 0.1970 test_loss: 2.0443, test_acc: 0.2356, best: 0.2356, time: 0:01:55
 Epoch: 46, lr: 1.0e-02, train_loss: 2.0941, train_acc: 0.1996 test_loss: 2.0928, test_acc: 0.2310, best: 0.2356, time: 0:01:55
 Epoch: 47, lr: 1.0e-02, train_loss: 2.0812, train_acc: 0.2098 test_loss: 2.0701, test_acc: 0.2331, best: 0.2356, time: 0:01:55
 Epoch: 48, lr: 1.0e-02, train_loss: 2.0589, train_acc: 0.2240 test_loss: 2.0053, test_acc: 0.2492, best: 0.2492, time: 0:01:55
 Epoch: 49, lr: 1.0e-02, train_loss: 2.0763, train_acc: 0.2120 test_loss: 2.0368, test_acc: 0.2576, best: 0.2576, time: 0:01:55
 Epoch: 50, lr: 1.0e-02, train_loss: 2.0388, train_acc: 0.2258 test_loss: 2.0561, test_acc: 0.2789, best: 0.2789, time: 0:01:55
 Epoch: 51, lr: 1.0e-02, train_loss: 2.0999, train_acc: 0.2032 test_loss: 2.1397, test_acc: 0.1963, best: 0.2789, time: 0:01:55
 Epoch: 52, lr: 1.0e-02, train_loss: 2.0744, train_acc: 0.2230 test_loss: 2.0709, test_acc: 0.2425, best: 0.2789, time: 0:01:55
 Epoch: 53, lr: 1.0e-02, train_loss: 2.0554, train_acc: 0.2280 test_loss: 2.0395, test_acc: 0.2727, best: 0.2789, time: 0:01:56
 Epoch: 54, lr: 1.0e-02, train_loss: 2.0604, train_acc: 0.2292 test_loss: 2.0987, test_acc: 0.2577, best: 0.2789, time: 0:01:55
 Epoch: 55, lr: 1.0e-02, train_loss: 2.0480, train_acc: 0.2236 test_loss: 1.9736, test_acc: 0.2774, best: 0.2789, time: 0:01:56
 Epoch: 56, lr: 1.0e-02, train_loss: 2.0299, train_acc: 0.2248 test_loss: 2.0258, test_acc: 0.2679, best: 0.2789, time: 0:01:56
 Epoch: 57, lr: 1.0e-02, train_loss: 2.0483, train_acc: 0.2248 test_loss: 1.9735, test_acc: 0.2780, best: 0.2789, time: 0:01:55
 Epoch: 58, lr: 1.0e-02, train_loss: 2.0231, train_acc: 0.2346 test_loss: 2.0427, test_acc: 0.2364, best: 0.2789, time: 0:01:55
 Epoch: 59, lr: 1.0e-02, train_loss: 2.0265, train_acc: 0.2384 test_loss: 1.9648, test_acc: 0.2572, best: 0.2789, time: 0:01:55
 Epoch: 60, lr: 1.0e-02, train_loss: 2.0586, train_acc: 0.2194 test_loss: 2.1074, test_acc: 0.2238, best: 0.2789, time: 0:01:55
 Epoch: 61, lr: 1.0e-02, train_loss: 2.0621, train_acc: 0.2164 test_loss: 2.0649, test_acc: 0.2412, best: 0.2789, time: 0:01:56
 Epoch: 62, lr: 1.0e-02, train_loss: 2.0624, train_acc: 0.2174 test_loss: 2.0550, test_acc: 0.2303, best: 0.2789, time: 0:01:56
 Epoch: 63, lr: 1.0e-02, train_loss: 2.0520, train_acc: 0.2188 test_loss: 2.0447, test_acc: 0.2464, best: 0.2789, time: 0:01:56
 Epoch: 64, lr: 1.0e-02, train_loss: 2.0340, train_acc: 0.2232 test_loss: 2.0672, test_acc: 0.2112, best: 0.2789, time: 0:01:55
 Epoch: 65, lr: 1.0e-02, train_loss: 2.0128, train_acc: 0.2292 test_loss: 2.0300, test_acc: 0.2319, best: 0.2789, time: 0:01:56
 Epoch: 66, lr: 1.0e-02, train_loss: 2.0151, train_acc: 0.2310 test_loss: 1.9483, test_acc: 0.2880, best: 0.2880, time: 0:01:55
 Epoch: 67, lr: 1.0e-02, train_loss: 2.0346, train_acc: 0.2298 test_loss: 2.2656, test_acc: 0.1715, best: 0.2880, time: 0:01:55
 Epoch: 68, lr: 1.0e-02, train_loss: 2.1509, train_acc: 0.1890 test_loss: 2.1019, test_acc: 0.2194, best: 0.2880, time: 0:01:55
 Epoch: 69, lr: 1.0e-02, train_loss: 2.0793, train_acc: 0.2116 test_loss: 2.0518, test_acc: 0.2404, best: 0.2880, time: 0:01:56
 Epoch: 70, lr: 1.0e-02, train_loss: 2.0716, train_acc: 0.2134 test_loss: 2.0924, test_acc: 0.2273, best: 0.2880, time: 0:01:55
 Epoch: 71, lr: 1.0e-02, train_loss: 2.1090, train_acc: 0.1948 test_loss: 2.1429, test_acc: 0.1815, best: 0.2880, time: 0:01:56
 Epoch: 72, lr: 1.0e-02, train_loss: 2.1081, train_acc: 0.1882 test_loss: 2.0795, test_acc: 0.2460, best: 0.2880, time: 0:01:55
 Epoch: 73, lr: 1.0e-02, train_loss: 2.0920, train_acc: 0.2056 test_loss: 2.0682, test_acc: 0.2330, best: 0.2880, time: 0:01:56
 Epoch: 74, lr: 1.0e-02, train_loss: 2.0608, train_acc: 0.2144 test_loss: 2.0482, test_acc: 0.2499, best: 0.2880, time: 0:01:55
 Epoch: 75, lr: 1.0e-02, train_loss: 2.0367, train_acc: 0.2170 test_loss: 2.0447, test_acc: 0.2290, best: 0.2880, time: 0:01:55
 Epoch: 76, lr: 1.0e-02, train_loss: 2.0133, train_acc: 0.2326 test_loss: 2.0165, test_acc: 0.2655, best: 0.2880, time: 0:01:56
 Epoch: 77, lr: 1.0e-02, train_loss: 2.0195, train_acc: 0.2286 test_loss: 2.0164, test_acc: 0.2579, best: 0.2880, time: 0:01:55
 Epoch: 78, lr: 1.0e-02, train_loss: 2.0063, train_acc: 0.2418 test_loss: 1.9800, test_acc: 0.2587, best: 0.2880, time: 0:01:55
 Epoch: 79, lr: 1.0e-02, train_loss: 2.0389, train_acc: 0.2412 test_loss: 2.0182, test_acc: 0.2644, best: 0.2880, time: 0:01:55
 Epoch: 80, lr: 1.0e-02, train_loss: 2.0289, train_acc: 0.2400 test_loss: 2.0018, test_acc: 0.2666, best: 0.2880, time: 0:01:55
 Epoch: 81, lr: 1.0e-02, train_loss: 2.0143, train_acc: 0.2236 test_loss: 1.9565, test_acc: 0.2742, best: 0.2880, time: 0:01:55
 Epoch: 82, lr: 1.0e-02, train_loss: 1.9992, train_acc: 0.2408 test_loss: 1.9713, test_acc: 0.2716, best: 0.2880, time: 0:01:55
 Epoch: 83, lr: 1.0e-02, train_loss: 2.0620, train_acc: 0.2206 test_loss: 2.0878, test_acc: 0.2399, best: 0.2880, time: 0:01:55
 Epoch: 84, lr: 1.0e-02, train_loss: 2.0737, train_acc: 0.2186 test_loss: 2.0274, test_acc: 0.2485, best: 0.2880, time: 0:01:55
 Epoch: 85, lr: 1.0e-02, train_loss: 2.0519, train_acc: 0.2152 test_loss: 2.0995, test_acc: 0.2254, best: 0.2880, time: 0:01:55
 Epoch: 86, lr: 1.0e-02, train_loss: 2.0683, train_acc: 0.2046 test_loss: 2.0413, test_acc: 0.2331, best: 0.2880, time: 0:01:56
 Epoch: 87, lr: 1.0e-02, train_loss: 2.1287, train_acc: 0.1854 test_loss: 2.1040, test_acc: 0.1774, best: 0.2880, time: 0:01:56
 Epoch: 88, lr: 1.0e-02, train_loss: 2.1480, train_acc: 0.1792 test_loss: 2.0829, test_acc: 0.2176, best: 0.2880, time: 0:01:56
 Epoch: 89, lr: 1.0e-02, train_loss: 2.1427, train_acc: 0.1902 test_loss: 2.1146, test_acc: 0.2035, best: 0.2880, time: 0:01:55
 Epoch: 90, lr: 1.0e-02, train_loss: 2.0892, train_acc: 0.2056 test_loss: 2.0183, test_acc: 0.2239, best: 0.2880, time: 0:01:55
 Epoch: 91, lr: 1.0e-02, train_loss: 2.0612, train_acc: 0.2108 test_loss: 2.0275, test_acc: 0.2527, best: 0.2880, time: 0:01:55
 Epoch: 92, lr: 1.0e-02, train_loss: 2.0516, train_acc: 0.2092 test_loss: 2.0487, test_acc: 0.2361, best: 0.2880, time: 0:01:55
 Epoch: 93, lr: 1.0e-02, train_loss: 2.0416, train_acc: 0.2194 test_loss: 1.9824, test_acc: 0.2539, best: 0.2880, time: 0:01:56
 Epoch: 94, lr: 1.0e-02, train_loss: 2.0356, train_acc: 0.2186 test_loss: 1.9688, test_acc: 0.2306, best: 0.2880, time: 0:01:56
 Epoch: 95, lr: 1.0e-02, train_loss: 2.0195, train_acc: 0.2180 test_loss: 1.9425, test_acc: 0.2695, best: 0.2880, time: 0:01:55
 Epoch: 96, lr: 1.0e-02, train_loss: 2.0130, train_acc: 0.2248 test_loss: 1.9570, test_acc: 0.2612, best: 0.2880, time: 0:01:56
 Epoch: 97, lr: 1.0e-02, train_loss: 2.0098, train_acc: 0.2212 test_loss: 1.9590, test_acc: 0.2706, best: 0.2880, time: 0:01:56
 Epoch: 98, lr: 1.0e-02, train_loss: 2.0041, train_acc: 0.2326 test_loss: 1.9574, test_acc: 0.2560, best: 0.2880, time: 0:01:55
 Epoch: 99, lr: 1.0e-02, train_loss: 1.9799, train_acc: 0.2370 test_loss: 1.9365, test_acc: 0.2639, best: 0.2880, time: 0:01:56
 Epoch: 100, lr: 1.0e-02, train_loss: 1.9829, train_acc: 0.2332 test_loss: 1.9726, test_acc: 0.2804, best: 0.2880, time: 0:01:56
 Epoch: 101, lr: 1.0e-02, train_loss: 1.9619, train_acc: 0.2476 test_loss: 1.9232, test_acc: 0.2829, best: 0.2880, time: 0:01:56
 Epoch: 102, lr: 1.0e-02, train_loss: 1.9712, train_acc: 0.2386 test_loss: 1.9894, test_acc: 0.2171, best: 0.2880, time: 0:01:56
 Epoch: 103, lr: 1.0e-02, train_loss: 2.0524, train_acc: 0.2132 test_loss: 1.9785, test_acc: 0.2507, best: 0.2880, time: 0:01:56
 Epoch: 104, lr: 1.0e-02, train_loss: 2.0101, train_acc: 0.2348 test_loss: 1.9729, test_acc: 0.2712, best: 0.2880, time: 0:01:56
 Epoch: 105, lr: 1.0e-02, train_loss: 2.0870, train_acc: 0.2168 test_loss: 2.0228, test_acc: 0.2580, best: 0.2880, time: 0:01:55
 Epoch: 106, lr: 1.0e-02, train_loss: 2.0523, train_acc: 0.2310 test_loss: 2.0254, test_acc: 0.2426, best: 0.2880, time: 0:01:55
 Epoch: 107, lr: 1.0e-02, train_loss: 2.0277, train_acc: 0.2306 test_loss: 2.0031, test_acc: 0.2814, best: 0.2880, time: 0:01:55
 Epoch: 108, lr: 1.0e-02, train_loss: 2.0046, train_acc: 0.2420 test_loss: 1.9949, test_acc: 0.2607, best: 0.2880, time: 0:01:55
 Epoch: 109, lr: 1.0e-02, train_loss: 2.0160, train_acc: 0.2396 test_loss: 2.0238, test_acc: 0.2470, best: 0.2880, time: 0:01:55
 Epoch: 110, lr: 1.0e-02, train_loss: 2.0226, train_acc: 0.2274 test_loss: 1.9126, test_acc: 0.2700, best: 0.2880, time: 0:01:55
 Epoch: 111, lr: 1.0e-02, train_loss: 1.9965, train_acc: 0.2316 test_loss: 1.9587, test_acc: 0.2685, best: 0.2880, time: 0:01:54
 Epoch: 112, lr: 1.0e-02, train_loss: 1.9859, train_acc: 0.2378 test_loss: 1.9383, test_acc: 0.2866, best: 0.2880, time: 0:01:55
 Epoch: 113, lr: 1.0e-02, train_loss: 1.9832, train_acc: 0.2504 test_loss: 1.8657, test_acc: 0.3038, best: 0.3038, time: 0:01:56
 Epoch: 114, lr: 1.0e-02, train_loss: 1.9841, train_acc: 0.2416 test_loss: 1.9920, test_acc: 0.2559, best: 0.3038, time: 0:01:56
 Epoch: 115, lr: 1.0e-02, train_loss: 1.9759, train_acc: 0.2432 test_loss: 1.9572, test_acc: 0.2500, best: 0.3038, time: 0:01:55
 Epoch: 116, lr: 1.0e-02, train_loss: 1.9851, train_acc: 0.2462 test_loss: 1.9744, test_acc: 0.2856, best: 0.3038, time: 0:01:56
 Epoch: 117, lr: 1.0e-02, train_loss: 1.9694, train_acc: 0.2408 test_loss: 1.8772, test_acc: 0.2936, best: 0.3038, time: 0:01:56
 Epoch: 118, lr: 1.0e-02, train_loss: 1.9768, train_acc: 0.2520 test_loss: 1.9220, test_acc: 0.2978, best: 0.3038, time: 0:01:56
 Epoch: 119, lr: 1.0e-02, train_loss: 2.1070, train_acc: 0.1800 test_loss: 2.0700, test_acc: 0.2115, best: 0.3038, time: 0:01:55
 Epoch: 120, lr: 1.0e-02, train_loss: 2.0846, train_acc: 0.1984 test_loss: 2.0574, test_acc: 0.2013, best: 0.3038, time: 0:01:56
 Epoch: 121, lr: 1.0e-02, train_loss: 2.0750, train_acc: 0.2052 test_loss: 2.0497, test_acc: 0.2193, best: 0.3038, time: 0:01:55
 Epoch: 122, lr: 1.0e-02, train_loss: 2.0552, train_acc: 0.2106 test_loss: 1.9988, test_acc: 0.2650, best: 0.3038, time: 0:01:56
 Epoch: 123, lr: 1.0e-02, train_loss: 2.0465, train_acc: 0.2234 test_loss: 2.0183, test_acc: 0.2286, best: 0.3038, time: 0:01:56
 Epoch: 124, lr: 1.0e-02, train_loss: 2.0901, train_acc: 0.2136 test_loss: 2.0773, test_acc: 0.2016, best: 0.3038, time: 0:01:55
 Epoch: 125, lr: 1.0e-02, train_loss: 2.1068, train_acc: 0.1960 test_loss: 2.0566, test_acc: 0.2194, best: 0.3038, time: 0:01:55
 Epoch: 126, lr: 1.0e-02, train_loss: 2.0663, train_acc: 0.2130 test_loss: 2.0130, test_acc: 0.2263, best: 0.3038, time: 0:01:56
 Epoch: 127, lr: 1.0e-02, train_loss: 2.0498, train_acc: 0.2196 test_loss: 2.0558, test_acc: 0.2424, best: 0.3038, time: 0:01:55
 Epoch: 128, lr: 1.0e-02, train_loss: 2.0873, train_acc: 0.2074 test_loss: 2.0185, test_acc: 0.2186, best: 0.3038, time: 0:01:55
 Epoch: 129, lr: 1.0e-02, train_loss: 2.0674, train_acc: 0.2176 test_loss: 2.1007, test_acc: 0.2035, best: 0.3038, time: 0:01:55
 Epoch: 130, lr: 1.0e-02, train_loss: 2.0190, train_acc: 0.2248 test_loss: 2.0153, test_acc: 0.2477, best: 0.3038, time: 0:01:56
 Epoch: 131, lr: 1.0e-02, train_loss: 2.0024, train_acc: 0.2340 test_loss: 2.0458, test_acc: 0.2405, best: 0.3038, time: 0:01:55
 Epoch: 132, lr: 1.0e-02, train_loss: 2.0402, train_acc: 0.2254 test_loss: 2.0251, test_acc: 0.2522, best: 0.3038, time: 0:01:55
 Epoch: 133, lr: 1.0e-02, train_loss: 2.0055, train_acc: 0.2356 test_loss: 1.9537, test_acc: 0.3043, best: 0.3043, time: 0:01:55
 Epoch: 134, lr: 1.0e-02, train_loss: 1.9790, train_acc: 0.2506 test_loss: 1.9845, test_acc: 0.2792, best: 0.3043, time: 0:01:55
 Epoch: 135, lr: 1.0e-02, train_loss: 1.9891, train_acc: 0.2580 test_loss: 2.0003, test_acc: 0.2681, best: 0.3043, time: 0:01:56
 Epoch: 136, lr: 1.0e-02, train_loss: 2.0007, train_acc: 0.2440 test_loss: 2.1301, test_acc: 0.1698, best: 0.3043, time: 0:01:55
 Epoch: 137, lr: 1.0e-02, train_loss: 2.0412, train_acc: 0.2404 test_loss: 2.0240, test_acc: 0.2729, best: 0.3043, time: 0:01:56
 Epoch: 138, lr: 1.0e-02, train_loss: 2.0273, train_acc: 0.2446 test_loss: 2.0181, test_acc: 0.2647, best: 0.3043, time: 0:01:55
 Epoch: 139, lr: 1.0e-02, train_loss: 1.9936, train_acc: 0.2622 test_loss: 2.0301, test_acc: 0.2520, best: 0.3043, time: 0:01:55
 Epoch: 140, lr: 1.0e-02, train_loss: 2.0160, train_acc: 0.2430 test_loss: 1.9783, test_acc: 0.2687, best: 0.3043, time: 0:01:55
 Epoch: 141, lr: 1.0e-02, train_loss: 2.0160, train_acc: 0.2546 test_loss: 2.0144, test_acc: 0.2335, best: 0.3043, time: 0:01:55
 Epoch: 142, lr: 1.0e-02, train_loss: 2.0022, train_acc: 0.2524 test_loss: 2.0383, test_acc: 0.2324, best: 0.3043, time: 0:01:55
 Epoch: 143, lr: 1.0e-02, train_loss: 1.9800, train_acc: 0.2516 test_loss: 1.9900, test_acc: 0.2777, best: 0.3043, time: 0:01:55
 Epoch: 144, lr: 1.0e-02, train_loss: 1.9894, train_acc: 0.2578 test_loss: 2.0692, test_acc: 0.2504, best: 0.3043, time: 0:01:55
 Epoch: 145, lr: 1.0e-02, train_loss: 2.0095, train_acc: 0.2580 test_loss: 2.0504, test_acc: 0.2422, best: 0.3043, time: 0:01:56
 Epoch: 146, lr: 1.0e-02, train_loss: 2.0281, train_acc: 0.2378 test_loss: 1.9674, test_acc: 0.2640, best: 0.3043, time: 0:01:55
 Epoch: 147, lr: 1.0e-02, train_loss: 1.9969, train_acc: 0.2548 test_loss: 1.9786, test_acc: 0.2826, best: 0.3043, time: 0:01:55
 Epoch: 148, lr: 1.0e-02, train_loss: 1.9912, train_acc: 0.2622 test_loss: 1.9979, test_acc: 0.2656, best: 0.3043, time: 0:01:55
 Epoch: 149, lr: 1.0e-02, train_loss: 1.9756, train_acc: 0.2656 test_loss: 1.9814, test_acc: 0.2620, best: 0.3043, time: 0:01:55
 Epoch: 150, lr: 1.0e-02, train_loss: 1.9651, train_acc: 0.2646 test_loss: 2.0040, test_acc: 0.2601, best: 0.3043, time: 0:01:54
 Epoch: 151, lr: 1.0e-02, train_loss: 1.9635, train_acc: 0.2672 test_loss: 1.8883, test_acc: 0.3024, best: 0.3043, time: 0:01:54
 Epoch: 152, lr: 1.0e-02, train_loss: 1.9618, train_acc: 0.2616 test_loss: 1.9314, test_acc: 0.2990, best: 0.3043, time: 0:01:55
 Epoch: 153, lr: 1.0e-02, train_loss: 2.0750, train_acc: 0.2262 test_loss: 2.1087, test_acc: 0.1893, best: 0.3043, time: 0:01:55
 Epoch: 154, lr: 1.0e-02, train_loss: 2.0493, train_acc: 0.2208 test_loss: 2.2047, test_acc: 0.1509, best: 0.3043, time: 0:01:55
 Epoch: 155, lr: 1.0e-02, train_loss: 2.0500, train_acc: 0.2282 test_loss: 1.9639, test_acc: 0.2641, best: 0.3043, time: 0:01:55
 Epoch: 156, lr: 1.0e-02, train_loss: 2.0444, train_acc: 0.2376 test_loss: 2.0496, test_acc: 0.2221, best: 0.3043, time: 0:01:55
 Epoch: 157, lr: 1.0e-02, train_loss: 2.0306, train_acc: 0.2358 test_loss: 2.0080, test_acc: 0.2632, best: 0.3043, time: 0:01:55
 Epoch: 158, lr: 1.0e-02, train_loss: 2.0290, train_acc: 0.2328 test_loss: 2.0809, test_acc: 0.2336, best: 0.3043, time: 0:01:56
 Epoch: 159, lr: 1.0e-02, train_loss: 2.1290, train_acc: 0.1918 test_loss: 2.1675, test_acc: 0.1801, best: 0.3043, time: 0:01:55
 Epoch: 160, lr: 1.0e-02, train_loss: 2.1266, train_acc: 0.2062 test_loss: 2.1440, test_acc: 0.2134, best: 0.3043, time: 0:01:55
 Epoch: 161, lr: 1.0e-02, train_loss: 2.1276, train_acc: 0.1988 test_loss: 2.0749, test_acc: 0.2268, best: 0.3043, time: 0:01:56
 Epoch: 162, lr: 1.0e-02, train_loss: 2.1395, train_acc: 0.1900 test_loss: 2.1993, test_acc: 0.1552, best: 0.3043, time: 0:01:55
 Epoch: 163, lr: 1.0e-02, train_loss: 2.1448, train_acc: 0.1862 test_loss: 2.0876, test_acc: 0.1930, best: 0.3043, time: 0:01:55
 Epoch: 164, lr: 1.0e-02, train_loss: 2.1227, train_acc: 0.2084 test_loss: 2.1325, test_acc: 0.1809, best: 0.3043, time: 0:01:56
 Epoch: 165, lr: 1.0e-02, train_loss: 2.0971, train_acc: 0.2084 test_loss: 2.1603, test_acc: 0.1425, best: 0.3043, time: 0:01:55
 Epoch: 166, lr: 1.0e-02, train_loss: 2.1008, train_acc: 0.2026 test_loss: 2.0936, test_acc: 0.2131, best: 0.3043, time: 0:01:55
 Epoch: 167, lr: 1.0e-02, train_loss: 2.0649, train_acc: 0.2236 test_loss: 2.0159, test_acc: 0.2206, best: 0.3043, time: 0:01:56
 Epoch: 168, lr: 1.0e-02, train_loss: 2.0663, train_acc: 0.2278 test_loss: 2.1354, test_acc: 0.1600, best: 0.3043, time: 0:01:55
 Epoch: 169, lr: 1.0e-02, train_loss: 2.0677, train_acc: 0.2244 test_loss: 2.0113, test_acc: 0.2542, best: 0.3043, time: 0:01:55
 Epoch: 170, lr: 1.0e-02, train_loss: 2.0556, train_acc: 0.2296 test_loss: 2.0610, test_acc: 0.2145, best: 0.3043, time: 0:01:55
 Epoch: 171, lr: 1.0e-02, train_loss: 2.0258, train_acc: 0.2496 test_loss: 1.9961, test_acc: 0.2649, best: 0.3043, time: 0:01:56
 Epoch: 172, lr: 1.0e-02, train_loss: 2.0700, train_acc: 0.2276 test_loss: 2.0872, test_acc: 0.2311, best: 0.3043, time: 0:01:56
 Epoch: 173, lr: 1.0e-02, train_loss: 2.0630, train_acc: 0.2380 test_loss: 2.0280, test_acc: 0.2364, best: 0.3043, time: 0:01:56
 Epoch: 174, lr: 1.0e-02, train_loss: 2.0673, train_acc: 0.2296 test_loss: 2.1185, test_acc: 0.2030, best: 0.3043, time: 0:01:56
 Epoch: 175, lr: 1.0e-02, train_loss: 2.0701, train_acc: 0.2280 test_loss: 2.0533, test_acc: 0.2590, best: 0.3043, time: 0:01:56
 Epoch: 176, lr: 1.0e-02, train_loss: 2.0519, train_acc: 0.2338 test_loss: 2.0381, test_acc: 0.2570, best: 0.3043, time: 0:01:56
 Epoch: 177, lr: 1.0e-02, train_loss: 2.0468, train_acc: 0.2372 test_loss: 2.1247, test_acc: 0.2003, best: 0.3043, time: 0:01:55
 Epoch: 178, lr: 1.0e-02, train_loss: 2.0688, train_acc: 0.2174 test_loss: 2.0883, test_acc: 0.2126, best: 0.3043, time: 0:01:55
 Epoch: 179, lr: 1.0e-02, train_loss: 2.0751, train_acc: 0.2264 test_loss: 2.0889, test_acc: 0.2275, best: 0.3043, time: 0:01:55
 Epoch: 180, lr: 2.0e-03, train_loss: 2.0378, train_acc: 0.2464 test_loss: 2.0334, test_acc: 0.2761, best: 0.3043, time: 0:01:55
 Epoch: 181, lr: 2.0e-03, train_loss: 2.0309, train_acc: 0.2438 test_loss: 2.0267, test_acc: 0.2774, best: 0.3043, time: 0:01:55
 Epoch: 182, lr: 2.0e-03, train_loss: 2.0288, train_acc: 0.2480 test_loss: 2.1093, test_acc: 0.1993, best: 0.3043, time: 0:01:55
 Epoch: 183, lr: 2.0e-03, train_loss: 2.0090, train_acc: 0.2594 test_loss: 2.0411, test_acc: 0.2790, best: 0.3043, time: 0:01:55
 Epoch: 184, lr: 2.0e-03, train_loss: 2.0217, train_acc: 0.2496 test_loss: 2.0171, test_acc: 0.2687, best: 0.3043, time: 0:01:55
 Epoch: 185, lr: 2.0e-03, train_loss: 2.0022, train_acc: 0.2558 test_loss: 2.0066, test_acc: 0.2853, best: 0.3043, time: 0:01:55
 Epoch: 186, lr: 2.0e-03, train_loss: 2.0137, train_acc: 0.2480 test_loss: 2.0638, test_acc: 0.2490, best: 0.3043, time: 0:01:55
 Epoch: 187, lr: 2.0e-03, train_loss: 2.0190, train_acc: 0.2444 test_loss: 2.0684, test_acc: 0.2494, best: 0.3043, time: 0:01:54
 Epoch: 188, lr: 2.0e-03, train_loss: 2.0072, train_acc: 0.2400 test_loss: 2.0228, test_acc: 0.2479, best: 0.3043, time: 0:01:55
 Epoch: 189, lr: 2.0e-03, train_loss: 2.0112, train_acc: 0.2470 test_loss: 2.0096, test_acc: 0.2839, best: 0.3043, time: 0:01:55
 Epoch: 190, lr: 2.0e-03, train_loss: 2.0083, train_acc: 0.2392 test_loss: 2.0089, test_acc: 0.2854, best: 0.3043, time: 0:01:56
 Epoch: 191, lr: 2.0e-03, train_loss: 2.0151, train_acc: 0.2420 test_loss: 2.0182, test_acc: 0.2647, best: 0.3043, time: 0:01:56
 Epoch: 192, lr: 2.0e-03, train_loss: 2.0139, train_acc: 0.2418 test_loss: 2.0199, test_acc: 0.2651, best: 0.3043, time: 0:01:56
 Epoch: 193, lr: 2.0e-03, train_loss: 2.0323, train_acc: 0.2216 test_loss: 1.9947, test_acc: 0.2895, best: 0.3043, time: 0:01:56
 Epoch: 194, lr: 2.0e-03, train_loss: 2.0187, train_acc: 0.2346 test_loss: 2.0029, test_acc: 0.2835, best: 0.3043, time: 0:01:56
 Epoch: 195, lr: 2.0e-03, train_loss: 2.0332, train_acc: 0.2328 test_loss: 2.1883, test_acc: 0.1686, best: 0.3043, time: 0:01:56
 Epoch: 196, lr: 2.0e-03, train_loss: 2.0964, train_acc: 0.2172 test_loss: 2.0749, test_acc: 0.2526, best: 0.3043, time: 0:01:55
 Epoch: 197, lr: 2.0e-03, train_loss: 2.0575, train_acc: 0.2222 test_loss: 2.0750, test_acc: 0.2575, best: 0.3043, time: 0:01:55
 Epoch: 198, lr: 2.0e-03, train_loss: 2.0301, train_acc: 0.2396 test_loss: 2.0228, test_acc: 0.2821, best: 0.3043, time: 0:01:55
 Epoch: 199, lr: 2.0e-03, train_loss: 2.0306, train_acc: 0.2370 test_loss: 2.1348, test_acc: 0.1951, best: 0.3043, time: 0:01:55
 Epoch: 200, lr: 2.0e-03, train_loss: 2.0261, train_acc: 0.2404 test_loss: 2.0248, test_acc: 0.2519, best: 0.3043, time: 0:01:55
 Epoch: 201, lr: 2.0e-03, train_loss: 2.0255, train_acc: 0.2342 test_loss: 2.0793, test_acc: 0.2592, best: 0.3043, time: 0:01:56
 Epoch: 202, lr: 2.0e-03, train_loss: 2.0194, train_acc: 0.2380 test_loss: 2.0334, test_acc: 0.2722, best: 0.3043, time: 0:01:55
 Epoch: 203, lr: 2.0e-03, train_loss: 2.0205, train_acc: 0.2400 test_loss: 2.0470, test_acc: 0.2486, best: 0.3043, time: 0:01:56
 Epoch: 204, lr: 2.0e-03, train_loss: 2.0296, train_acc: 0.2370 test_loss: 1.9924, test_acc: 0.2940, best: 0.3043, time: 0:01:55
 Epoch: 205, lr: 2.0e-03, train_loss: 2.0021, train_acc: 0.2506 test_loss: 2.0080, test_acc: 0.2639, best: 0.3043, time: 0:01:55
 Epoch: 206, lr: 2.0e-03, train_loss: 2.0078, train_acc: 0.2422 test_loss: 2.0331, test_acc: 0.2527, best: 0.3043, time: 0:01:55
 Epoch: 207, lr: 2.0e-03, train_loss: 1.9915, train_acc: 0.2548 test_loss: 2.0011, test_acc: 0.2606, best: 0.3043, time: 0:01:56
 Epoch: 208, lr: 2.0e-03, train_loss: 2.0106, train_acc: 0.2494 test_loss: 2.0245, test_acc: 0.2701, best: 0.3043, time: 0:01:55
 Epoch: 209, lr: 2.0e-03, train_loss: 2.0094, train_acc: 0.2518 test_loss: 2.0606, test_acc: 0.2620, best: 0.3043, time: 0:01:56
 Epoch: 210, lr: 2.0e-03, train_loss: 1.9923, train_acc: 0.2512 test_loss: 2.0036, test_acc: 0.2634, best: 0.3043, time: 0:01:55
 Epoch: 211, lr: 2.0e-03, train_loss: 1.9911, train_acc: 0.2520 test_loss: 1.9887, test_acc: 0.2823, best: 0.3043, time: 0:01:55
 Epoch: 212, lr: 2.0e-03, train_loss: 1.9884, train_acc: 0.2528 test_loss: 2.0102, test_acc: 0.2676, best: 0.3043, time: 0:01:55
 Epoch: 213, lr: 2.0e-03, train_loss: 2.0094, train_acc: 0.2488 test_loss: 2.0108, test_acc: 0.2650, best: 0.3043, time: 0:01:55
 Epoch: 214, lr: 2.0e-03, train_loss: 2.0150, train_acc: 0.2318 test_loss: 2.0034, test_acc: 0.2721, best: 0.3043, time: 0:01:55
 Epoch: 215, lr: 2.0e-03, train_loss: 2.0162, train_acc: 0.2286 test_loss: 1.9413, test_acc: 0.2985, best: 0.3043, time: 0:01:55
 Epoch: 216, lr: 2.0e-03, train_loss: 1.9901, train_acc: 0.2624 test_loss: 2.0090, test_acc: 0.2659, best: 0.3043, time: 0:01:55
 Epoch: 217, lr: 2.0e-03, train_loss: 2.0087, train_acc: 0.2592 test_loss: 2.0246, test_acc: 0.2285, best: 0.3043, time: 0:01:55
 Epoch: 218, lr: 2.0e-03, train_loss: 1.9992, train_acc: 0.2600 test_loss: 1.9835, test_acc: 0.2789, best: 0.3043, time: 0:01:55
 Epoch: 219, lr: 2.0e-03, train_loss: 1.9975, train_acc: 0.2634 test_loss: 1.9813, test_acc: 0.2650, best: 0.3043, time: 0:01:55
 Epoch: 220, lr: 2.0e-03, train_loss: 1.9848, train_acc: 0.2600 test_loss: 1.9549, test_acc: 0.2951, best: 0.3043, time: 0:01:55
 Epoch: 221, lr: 2.0e-03, train_loss: 1.9965, train_acc: 0.2564 test_loss: 1.9654, test_acc: 0.3024, best: 0.3043, time: 0:01:54
 Epoch: 222, lr: 2.0e-03, train_loss: 1.9811, train_acc: 0.2622 test_loss: 1.9826, test_acc: 0.2680, best: 0.3043, time: 0:01:54
 Epoch: 223, lr: 2.0e-03, train_loss: 1.9778, train_acc: 0.2680 test_loss: 1.9335, test_acc: 0.3019, best: 0.3043, time: 0:01:54
 Epoch: 224, lr: 2.0e-03, train_loss: 1.9747, train_acc: 0.2634 test_loss: 1.9629, test_acc: 0.2722, best: 0.3043, time: 0:01:54
 Epoch: 225, lr: 2.0e-03, train_loss: 1.9671, train_acc: 0.2668 test_loss: 1.9276, test_acc: 0.3018, best: 0.3043, time: 0:01:55
 Epoch: 226, lr: 2.0e-03, train_loss: 1.9776, train_acc: 0.2538 test_loss: 1.9531, test_acc: 0.2780, best: 0.3043, time: 0:01:55
 Epoch: 227, lr: 2.0e-03, train_loss: 1.9771, train_acc: 0.2660 test_loss: 1.9883, test_acc: 0.2676, best: 0.3043, time: 0:01:55
 Epoch: 228, lr: 2.0e-03, train_loss: 1.9703, train_acc: 0.2770 test_loss: 1.9435, test_acc: 0.3015, best: 0.3043, time: 0:01:55
 Epoch: 229, lr: 2.0e-03, train_loss: 1.9756, train_acc: 0.2670 test_loss: 1.9629, test_acc: 0.2735, best: 0.3043, time: 0:01:55
 Epoch: 230, lr: 2.0e-03, train_loss: 1.9686, train_acc: 0.2618 test_loss: 1.9099, test_acc: 0.2939, best: 0.3043, time: 0:01:55
 Epoch: 231, lr: 2.0e-03, train_loss: 1.9521, train_acc: 0.2734 test_loss: 1.9163, test_acc: 0.2981, best: 0.3043, time: 0:01:55
 Epoch: 232, lr: 2.0e-03, train_loss: 1.9839, train_acc: 0.2504 test_loss: 1.9484, test_acc: 0.2881, best: 0.3043, time: 0:01:55
 Epoch: 233, lr: 2.0e-03, train_loss: 2.0555, train_acc: 0.2428 test_loss: 2.0562, test_acc: 0.2622, best: 0.3043, time: 0:01:55
 Epoch: 234, lr: 2.0e-03, train_loss: 2.0259, train_acc: 0.2388 test_loss: 1.9969, test_acc: 0.2818, best: 0.3043, time: 0:01:55
 Epoch: 235, lr: 2.0e-03, train_loss: 2.0113, train_acc: 0.2434 test_loss: 1.9623, test_acc: 0.2943, best: 0.3043, time: 0:01:56
 Epoch: 236, lr: 2.0e-03, train_loss: 2.0045, train_acc: 0.2522 test_loss: 1.9564, test_acc: 0.3008, best: 0.3043, time: 0:01:56
 Epoch: 237, lr: 2.0e-03, train_loss: 1.9917, train_acc: 0.2526 test_loss: 1.9649, test_acc: 0.2604, best: 0.3043, time: 0:01:55
 Epoch: 238, lr: 2.0e-03, train_loss: 2.0342, train_acc: 0.2256 test_loss: 2.0062, test_acc: 0.2479, best: 0.3043, time: 0:01:56
 Epoch: 239, lr: 2.0e-03, train_loss: 2.0354, train_acc: 0.2266 test_loss: 2.0147, test_acc: 0.2521, best: 0.3043, time: 0:01:56
 Epoch: 240, lr: 4.0e-04, train_loss: 2.0238, train_acc: 0.2310 test_loss: 2.0171, test_acc: 0.2401, best: 0.3043, time: 0:01:56
 Epoch: 241, lr: 4.0e-04, train_loss: 2.0139, train_acc: 0.2288 test_loss: 2.0049, test_acc: 0.2510, best: 0.3043, time: 0:01:55
 Epoch: 242, lr: 4.0e-04, train_loss: 2.0243, train_acc: 0.2338 test_loss: 2.0158, test_acc: 0.2387, best: 0.3043, time: 0:01:55
 Epoch: 243, lr: 4.0e-04, train_loss: 2.0185, train_acc: 0.2412 test_loss: 2.0167, test_acc: 0.2361, best: 0.3043, time: 0:01:54
 Epoch: 244, lr: 4.0e-04, train_loss: 2.0381, train_acc: 0.2274 test_loss: 2.0074, test_acc: 0.2559, best: 0.3043, time: 0:01:55
 Epoch: 245, lr: 4.0e-04, train_loss: 2.0046, train_acc: 0.2462 test_loss: 1.9898, test_acc: 0.2556, best: 0.3043, time: 0:01:55
 Epoch: 246, lr: 4.0e-04, train_loss: 2.0092, train_acc: 0.2522 test_loss: 1.9919, test_acc: 0.2525, best: 0.3043, time: 0:01:54
 Epoch: 247, lr: 4.0e-04, train_loss: 2.0410, train_acc: 0.2220 test_loss: 2.0335, test_acc: 0.2265, best: 0.3043, time: 0:01:53
 Epoch: 248, lr: 4.0e-04, train_loss: 2.0319, train_acc: 0.2232 test_loss: 2.0302, test_acc: 0.2421, best: 0.3043, time: 0:01:53
 Epoch: 249, lr: 4.0e-04, train_loss: 2.0379, train_acc: 0.2286 test_loss: 2.0153, test_acc: 0.2555, best: 0.3043, time: 0:01:53
 Epoch: 250, lr: 4.0e-04, train_loss: 2.0244, train_acc: 0.2338 test_loss: 2.0017, test_acc: 0.2525, best: 0.3043, time: 0:01:53
 Epoch: 251, lr: 4.0e-04, train_loss: 2.0094, train_acc: 0.2426 test_loss: 2.0121, test_acc: 0.2440, best: 0.3043, time: 0:01:51
 Epoch: 252, lr: 4.0e-04, train_loss: 2.0219, train_acc: 0.2404 test_loss: 2.0071, test_acc: 0.2441, best: 0.3043, time: 0:01:51
 Epoch: 253, lr: 4.0e-04, train_loss: 2.0132, train_acc: 0.2390 test_loss: 2.0081, test_acc: 0.2502, best: 0.3043, time: 0:01:50
 Epoch: 254, lr: 4.0e-04, train_loss: 2.0207, train_acc: 0.2400 test_loss: 2.0006, test_acc: 0.2572, best: 0.3043, time: 0:01:50
 Epoch: 255, lr: 4.0e-04, train_loss: 1.9993, train_acc: 0.2400 test_loss: 2.0038, test_acc: 0.2486, best: 0.3043, time: 0:01:50
 Epoch: 256, lr: 4.0e-04, train_loss: 2.0067, train_acc: 0.2454 test_loss: 1.9806, test_acc: 0.2589, best: 0.3043, time: 0:01:50
 Epoch: 257, lr: 4.0e-04, train_loss: 2.0095, train_acc: 0.2350 test_loss: 1.9914, test_acc: 0.2580, best: 0.3043, time: 0:01:50
 Epoch: 258, lr: 4.0e-04, train_loss: 2.0093, train_acc: 0.2424 test_loss: 1.9971, test_acc: 0.2624, best: 0.3043, time: 0:01:50
 Epoch: 259, lr: 4.0e-04, train_loss: 1.9991, train_acc: 0.2428 test_loss: 1.9890, test_acc: 0.2592, best: 0.3043, time: 0:01:50
 Epoch: 260, lr: 4.0e-04, train_loss: 2.0084, train_acc: 0.2382 test_loss: 1.9970, test_acc: 0.2592, best: 0.3043, time: 0:01:50
 Epoch: 261, lr: 4.0e-04, train_loss: 2.0009, train_acc: 0.2452 test_loss: 1.9890, test_acc: 0.2611, best: 0.3043, time: 0:01:50
 Epoch: 262, lr: 4.0e-04, train_loss: 2.0097, train_acc: 0.2488 test_loss: 1.9956, test_acc: 0.2584, best: 0.3043, time: 0:01:50
 Epoch: 263, lr: 4.0e-04, train_loss: 2.0098, train_acc: 0.2350 test_loss: 1.9971, test_acc: 0.2554, best: 0.3043, time: 0:01:50
 Epoch: 264, lr: 4.0e-04, train_loss: 2.0160, train_acc: 0.2352 test_loss: 2.0057, test_acc: 0.2489, best: 0.3043, time: 0:01:50
 Epoch: 265, lr: 4.0e-04, train_loss: 2.0014, train_acc: 0.2486 test_loss: 1.9988, test_acc: 0.2520, best: 0.3043, time: 0:01:50
 Epoch: 266, lr: 4.0e-04, train_loss: 2.0008, train_acc: 0.2444 test_loss: 2.0143, test_acc: 0.2432, best: 0.3043, time: 0:01:50
 Epoch: 267, lr: 4.0e-04, train_loss: 2.0047, train_acc: 0.2390 test_loss: 1.9924, test_acc: 0.2576, best: 0.3043, time: 0:01:50
 Epoch: 268, lr: 4.0e-04, train_loss: 1.9916, train_acc: 0.2490 test_loss: 1.9859, test_acc: 0.2501, best: 0.3043, time: 0:01:50
 Epoch: 269, lr: 4.0e-04, train_loss: 2.0056, train_acc: 0.2398 test_loss: 1.9975, test_acc: 0.2442, best: 0.3043, time: 0:01:50
 Epoch: 270, lr: 8.0e-05, train_loss: 2.0052, train_acc: 0.2392 test_loss: 1.9941, test_acc: 0.2469, best: 0.3043, time: 0:01:50
 Epoch: 271, lr: 8.0e-05, train_loss: 2.0167, train_acc: 0.2482 test_loss: 1.9958, test_acc: 0.2519, best: 0.3043, time: 0:01:50
 Epoch: 272, lr: 8.0e-05, train_loss: 2.0123, train_acc: 0.2404 test_loss: 1.9887, test_acc: 0.2549, best: 0.3043, time: 0:01:50
 Epoch: 273, lr: 8.0e-05, train_loss: 1.9954, train_acc: 0.2486 test_loss: 1.9838, test_acc: 0.2551, best: 0.3043, time: 0:01:50
 Epoch: 274, lr: 8.0e-05, train_loss: 2.0056, train_acc: 0.2408 test_loss: 1.9917, test_acc: 0.2526, best: 0.3043, time: 0:01:50
 Epoch: 275, lr: 8.0e-05, train_loss: 2.0001, train_acc: 0.2394 test_loss: 1.9862, test_acc: 0.2552, best: 0.3043, time: 0:01:50
 Epoch: 276, lr: 8.0e-05, train_loss: 2.0066, train_acc: 0.2412 test_loss: 2.0029, test_acc: 0.2464, best: 0.3043, time: 0:01:50
 Epoch: 277, lr: 8.0e-05, train_loss: 2.0039, train_acc: 0.2446 test_loss: 2.0159, test_acc: 0.2436, best: 0.3043, time: 0:01:50
 Epoch: 278, lr: 8.0e-05, train_loss: 1.9968, train_acc: 0.2408 test_loss: 1.9943, test_acc: 0.2495, best: 0.3043, time: 0:01:50
 Epoch: 279, lr: 8.0e-05, train_loss: 1.9909, train_acc: 0.2448 test_loss: 1.9941, test_acc: 0.2501, best: 0.3043, time: 0:01:50
 Epoch: 280, lr: 8.0e-05, train_loss: 1.9958, train_acc: 0.2500 test_loss: 1.9822, test_acc: 0.2549, best: 0.3043, time: 0:01:50
 Epoch: 281, lr: 8.0e-05, train_loss: 2.0005, train_acc: 0.2398 test_loss: 1.9985, test_acc: 0.2520, best: 0.3043, time: 0:01:50
 Epoch: 282, lr: 8.0e-05, train_loss: 2.0030, train_acc: 0.2340 test_loss: 1.9789, test_acc: 0.2601, best: 0.3043, time: 0:01:50
 Epoch: 283, lr: 8.0e-05, train_loss: 1.9873, train_acc: 0.2524 test_loss: 1.9886, test_acc: 0.2607, best: 0.3043, time: 0:01:50
 Epoch: 284, lr: 8.0e-05, train_loss: 2.0034, train_acc: 0.2484 test_loss: 1.9989, test_acc: 0.2494, best: 0.3043, time: 0:01:50
 Epoch: 285, lr: 8.0e-05, train_loss: 2.0071, train_acc: 0.2370 test_loss: 1.9955, test_acc: 0.2542, best: 0.3043, time: 0:01:50
 Epoch: 286, lr: 8.0e-05, train_loss: 1.9883, train_acc: 0.2378 test_loss: 2.0016, test_acc: 0.2489, best: 0.3043, time: 0:01:50
 Epoch: 287, lr: 8.0e-05, train_loss: 2.0094, train_acc: 0.2386 test_loss: 2.0228, test_acc: 0.2470, best: 0.3043, time: 0:01:50
 Epoch: 288, lr: 8.0e-05, train_loss: 1.9962, train_acc: 0.2366 test_loss: 1.9967, test_acc: 0.2540, best: 0.3043, time: 0:01:50
 Epoch: 289, lr: 8.0e-05, train_loss: 1.9933, train_acc: 0.2370 test_loss: 1.9946, test_acc: 0.2509, best: 0.3043, time: 0:01:50
 Epoch: 290, lr: 8.0e-05, train_loss: 1.9961, train_acc: 0.2448 test_loss: 1.9873, test_acc: 0.2517, best: 0.3043, time: 0:01:50
 Epoch: 291, lr: 8.0e-05, train_loss: 1.9964, train_acc: 0.2436 test_loss: 1.9978, test_acc: 0.2445, best: 0.3043, time: 0:01:50
 Epoch: 292, lr: 8.0e-05, train_loss: 2.0071, train_acc: 0.2380 test_loss: 2.0078, test_acc: 0.2472, best: 0.3043, time: 0:01:50
 Epoch: 293, lr: 8.0e-05, train_loss: 2.0046, train_acc: 0.2358 test_loss: 1.9901, test_acc: 0.2569, best: 0.3043, time: 0:01:50
 Epoch: 294, lr: 8.0e-05, train_loss: 2.0009, train_acc: 0.2444 test_loss: 2.0080, test_acc: 0.2449, best: 0.3043, time: 0:01:50
 Epoch: 295, lr: 8.0e-05, train_loss: 1.9913, train_acc: 0.2434 test_loss: 1.9827, test_acc: 0.2575, best: 0.3043, time: 0:01:50
 Epoch: 296, lr: 8.0e-05, train_loss: 2.0052, train_acc: 0.2458 test_loss: 1.9891, test_acc: 0.2645, best: 0.3043, time: 0:01:50
 Epoch: 297, lr: 8.0e-05, train_loss: 1.9766, train_acc: 0.2490 test_loss: 1.9926, test_acc: 0.2551, best: 0.3043, time: 0:01:50
 Epoch: 298, lr: 8.0e-05, train_loss: 2.0002, train_acc: 0.2404 test_loss: 2.0008, test_acc: 0.2536, best: 0.3043, time: 0:01:50
 Epoch: 299, lr: 8.0e-05, train_loss: 1.9939, train_acc: 0.2420 test_loss: 1.9892, test_acc: 0.2549, best: 0.3043, time: 0:01:50
 Highest accuracy: 0.3043