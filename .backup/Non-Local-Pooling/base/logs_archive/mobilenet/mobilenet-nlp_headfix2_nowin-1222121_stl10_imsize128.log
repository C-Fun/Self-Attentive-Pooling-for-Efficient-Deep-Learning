
 Run on time: 2022-07-03 17:06:16.675384

 Architecture: mobilenet-nlp_headfix2_nowin-1222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP_HEADFIX2_NOWIN-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=96, out_features=96, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 48)
                  (col_embed): Embedding(256, 48)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.4757, train_acc: 0.1644 test_loss: 1.9267, test_acc: 0.2314, best: 0.2314, time: 0:02:21
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0371, train_acc: 0.2292 test_loss: 1.8615, test_acc: 0.3001, best: 0.3001, time: 0:02:20
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9736, train_acc: 0.2532 test_loss: 1.8384, test_acc: 0.2853, best: 0.3001, time: 0:02:20
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9400, train_acc: 0.2510 test_loss: 1.8043, test_acc: 0.2989, best: 0.3001, time: 0:02:19
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9089, train_acc: 0.2712 test_loss: 1.7233, test_acc: 0.3250, best: 0.3250, time: 0:02:20
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8638, train_acc: 0.2910 test_loss: 1.6322, test_acc: 0.3774, best: 0.3774, time: 0:02:20
 Epoch: 7, lr: 1.0e-02, train_loss: 1.8272, train_acc: 0.3010 test_loss: 1.6849, test_acc: 0.3434, best: 0.3774, time: 0:02:19
 Epoch: 8, lr: 1.0e-02, train_loss: 1.8026, train_acc: 0.3164 test_loss: 1.6358, test_acc: 0.3688, best: 0.3774, time: 0:02:20
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7789, train_acc: 0.3228 test_loss: 1.5807, test_acc: 0.4079, best: 0.4079, time: 0:02:20
 Epoch: 10, lr: 1.0e-02, train_loss: 1.7442, train_acc: 0.3400 test_loss: 1.4993, test_acc: 0.4258, best: 0.4258, time: 0:02:20
 Epoch: 11, lr: 1.0e-02, train_loss: 1.7365, train_acc: 0.3486 test_loss: 1.4773, test_acc: 0.4359, best: 0.4359, time: 0:02:20
 Epoch: 12, lr: 1.0e-02, train_loss: 1.7044, train_acc: 0.3608 test_loss: 1.4577, test_acc: 0.4519, best: 0.4519, time: 0:02:20
 Epoch: 13, lr: 1.0e-02, train_loss: 1.6800, train_acc: 0.3670 test_loss: 1.4586, test_acc: 0.4439, best: 0.4519, time: 0:02:20
 Epoch: 14, lr: 1.0e-02, train_loss: 1.6390, train_acc: 0.3928 test_loss: 1.4666, test_acc: 0.4515, best: 0.4519, time: 0:02:20
 Epoch: 15, lr: 1.0e-02, train_loss: 1.6131, train_acc: 0.3990 test_loss: 1.3802, test_acc: 0.4798, best: 0.4798, time: 0:02:20
 Epoch: 16, lr: 1.0e-02, train_loss: 1.5833, train_acc: 0.4060 test_loss: 1.4595, test_acc: 0.4386, best: 0.4798, time: 0:02:20
 Epoch: 17, lr: 1.0e-02, train_loss: 1.5604, train_acc: 0.4256 test_loss: 1.3529, test_acc: 0.4959, best: 0.4959, time: 0:02:20
 Epoch: 18, lr: 1.0e-02, train_loss: 1.5064, train_acc: 0.4502 test_loss: 1.2209, test_acc: 0.5403, best: 0.5403, time: 0:02:19
 Epoch: 19, lr: 1.0e-02, train_loss: 1.4981, train_acc: 0.4582 test_loss: 1.2801, test_acc: 0.5188, best: 0.5403, time: 0:02:20
 Epoch: 20, lr: 1.0e-02, train_loss: 1.4815, train_acc: 0.4554 test_loss: 1.2406, test_acc: 0.5426, best: 0.5426, time: 0:02:20
 Epoch: 21, lr: 1.0e-02, train_loss: 1.4418, train_acc: 0.4736 test_loss: 1.3532, test_acc: 0.4954, best: 0.5426, time: 0:02:20
 Epoch: 22, lr: 1.0e-02, train_loss: 1.4546, train_acc: 0.4650 test_loss: 1.2019, test_acc: 0.5517, best: 0.5517, time: 0:02:20
 Epoch: 23, lr: 1.0e-02, train_loss: 1.4199, train_acc: 0.4848 test_loss: 1.2422, test_acc: 0.5340, best: 0.5517, time: 0:02:20
 Epoch: 24, lr: 1.0e-02, train_loss: 1.3752, train_acc: 0.4980 test_loss: 1.1684, test_acc: 0.5715, best: 0.5715, time: 0:02:46
 Epoch: 25, lr: 1.0e-02, train_loss: 1.3737, train_acc: 0.5022 test_loss: 1.1680, test_acc: 0.5677, best: 0.5715, time: 0:02:19
 Epoch: 26, lr: 1.0e-02, train_loss: 1.3371, train_acc: 0.5156 test_loss: 1.1944, test_acc: 0.5641, best: 0.5715, time: 0:02:19
 Epoch: 27, lr: 1.0e-02, train_loss: 1.3148, train_acc: 0.5186 test_loss: 1.1373, test_acc: 0.5860, best: 0.5860, time: 0:02:19
 Epoch: 28, lr: 1.0e-02, train_loss: 1.3136, train_acc: 0.5282 test_loss: 1.1328, test_acc: 0.5889, best: 0.5889, time: 0:02:19
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2926, train_acc: 0.5328 test_loss: 1.0751, test_acc: 0.6088, best: 0.6088, time: 0:02:19
 Epoch: 30, lr: 1.0e-02, train_loss: 1.2800, train_acc: 0.5316 test_loss: 1.0760, test_acc: 0.6064, best: 0.6088, time: 0:02:19
 Epoch: 31, lr: 1.0e-02, train_loss: 1.2643, train_acc: 0.5390 test_loss: 1.1338, test_acc: 0.5854, best: 0.6088, time: 0:02:19
 Epoch: 32, lr: 1.0e-02, train_loss: 1.2428, train_acc: 0.5500 test_loss: 1.0896, test_acc: 0.6016, best: 0.6088, time: 0:02:19
 Epoch: 33, lr: 1.0e-02, train_loss: 1.2316, train_acc: 0.5584 test_loss: 1.0677, test_acc: 0.6150, best: 0.6150, time: 0:02:19
 Epoch: 34, lr: 1.0e-02, train_loss: 1.2393, train_acc: 0.5504 test_loss: 1.0195, test_acc: 0.6299, best: 0.6299, time: 0:02:19
 Epoch: 35, lr: 1.0e-02, train_loss: 1.2120, train_acc: 0.5606 test_loss: 1.1661, test_acc: 0.5854, best: 0.6299, time: 0:02:19
 Epoch: 36, lr: 1.0e-02, train_loss: 1.1993, train_acc: 0.5684 test_loss: 1.0182, test_acc: 0.6315, best: 0.6315, time: 0:02:19
 Epoch: 37, lr: 1.0e-02, train_loss: 1.2137, train_acc: 0.5702 test_loss: 1.0207, test_acc: 0.6268, best: 0.6315, time: 0:02:19
 Epoch: 38, lr: 1.0e-02, train_loss: 1.1838, train_acc: 0.5656 test_loss: 0.9884, test_acc: 0.6459, best: 0.6459, time: 0:02:19
 Epoch: 39, lr: 1.0e-02, train_loss: 1.1487, train_acc: 0.5806 test_loss: 0.9694, test_acc: 0.6520, best: 0.6520, time: 0:02:19
 Epoch: 40, lr: 1.0e-02, train_loss: 1.1664, train_acc: 0.5796 test_loss: 0.9651, test_acc: 0.6594, best: 0.6594, time: 0:02:19
 Epoch: 41, lr: 1.0e-02, train_loss: 1.1537, train_acc: 0.5848 test_loss: 0.9794, test_acc: 0.6452, best: 0.6594, time: 0:02:19
 Epoch: 42, lr: 1.0e-02, train_loss: 1.1311, train_acc: 0.5892 test_loss: 0.9620, test_acc: 0.6496, best: 0.6594, time: 0:02:19
 Epoch: 43, lr: 1.0e-02, train_loss: 1.1214, train_acc: 0.5962 test_loss: 0.9911, test_acc: 0.6444, best: 0.6594, time: 0:02:19
 Epoch: 44, lr: 1.0e-02, train_loss: 1.1106, train_acc: 0.6002 test_loss: 0.9632, test_acc: 0.6479, best: 0.6594, time: 0:02:19
 Epoch: 45, lr: 1.0e-02, train_loss: 1.1234, train_acc: 0.5926 test_loss: 0.9377, test_acc: 0.6617, best: 0.6617, time: 0:02:19
 Epoch: 46, lr: 1.0e-02, train_loss: 1.0715, train_acc: 0.6174 test_loss: 1.0266, test_acc: 0.6294, best: 0.6617, time: 0:02:19
 Epoch: 47, lr: 1.0e-02, train_loss: 1.0884, train_acc: 0.6054 test_loss: 0.9429, test_acc: 0.6590, best: 0.6617, time: 0:02:19
 Epoch: 48, lr: 1.0e-02, train_loss: 1.0816, train_acc: 0.6114 test_loss: 0.9531, test_acc: 0.6562, best: 0.6617, time: 0:02:19
 Epoch: 49, lr: 1.0e-02, train_loss: 1.0727, train_acc: 0.6078 test_loss: 0.9342, test_acc: 0.6726, best: 0.6726, time: 0:02:19
 Epoch: 50, lr: 1.0e-02, train_loss: 1.0511, train_acc: 0.6262 test_loss: 0.8956, test_acc: 0.6851, best: 0.6851, time: 0:02:20
 Epoch: 51, lr: 1.0e-02, train_loss: 1.0545, train_acc: 0.6156 test_loss: 0.9162, test_acc: 0.6751, best: 0.6851, time: 0:02:19
 Epoch: 52, lr: 1.0e-02, train_loss: 1.0609, train_acc: 0.6196 test_loss: 0.9235, test_acc: 0.6625, best: 0.6851, time: 0:02:19
 Epoch: 53, lr: 1.0e-02, train_loss: 1.0150, train_acc: 0.6352 test_loss: 0.9728, test_acc: 0.6575, best: 0.6851, time: 0:02:19
 Epoch: 54, lr: 1.0e-02, train_loss: 1.0390, train_acc: 0.6392 test_loss: 0.9496, test_acc: 0.6524, best: 0.6851, time: 0:02:19
 Epoch: 55, lr: 1.0e-02, train_loss: 1.0264, train_acc: 0.6376 test_loss: 0.9244, test_acc: 0.6723, best: 0.6851, time: 0:02:20
 Epoch: 56, lr: 1.0e-02, train_loss: 1.0019, train_acc: 0.6452 test_loss: 0.9815, test_acc: 0.6629, best: 0.6851, time: 0:02:19
 Epoch: 57, lr: 1.0e-02, train_loss: 0.9960, train_acc: 0.6502 test_loss: 0.9331, test_acc: 0.6706, best: 0.6851, time: 0:02:19
 Epoch: 58, lr: 1.0e-02, train_loss: 1.0039, train_acc: 0.6416 test_loss: 0.9966, test_acc: 0.6438, best: 0.6851, time: 0:02:19
 Epoch: 59, lr: 1.0e-02, train_loss: 0.9920, train_acc: 0.6370 test_loss: 0.9444, test_acc: 0.6624, best: 0.6851, time: 0:02:19
 Epoch: 60, lr: 1.0e-02, train_loss: 0.9808, train_acc: 0.6524 test_loss: 0.9533, test_acc: 0.6654, best: 0.6851, time: 0:02:19
 Epoch: 61, lr: 1.0e-02, train_loss: 0.9782, train_acc: 0.6520 test_loss: 0.8535, test_acc: 0.6980, best: 0.6980, time: 0:02:19
 Epoch: 62, lr: 1.0e-02, train_loss: 0.9777, train_acc: 0.6500 test_loss: 0.8724, test_acc: 0.6873, best: 0.6980, time: 0:02:19
 Epoch: 63, lr: 1.0e-02, train_loss: 0.9535, train_acc: 0.6610 test_loss: 0.8361, test_acc: 0.7070, best: 0.7070, time: 0:02:19
 Epoch: 64, lr: 1.0e-02, train_loss: 0.9667, train_acc: 0.6570 test_loss: 0.8970, test_acc: 0.6840, best: 0.7070, time: 0:02:19
 Epoch: 65, lr: 1.0e-02, train_loss: 0.9527, train_acc: 0.6556 test_loss: 0.9428, test_acc: 0.6784, best: 0.7070, time: 0:02:19
 Epoch: 66, lr: 1.0e-02, train_loss: 0.9265, train_acc: 0.6700 test_loss: 0.9281, test_acc: 0.6757, best: 0.7070, time: 0:02:19
 Epoch: 67, lr: 1.0e-02, train_loss: 0.9496, train_acc: 0.6652 test_loss: 0.8724, test_acc: 0.6974, best: 0.7070, time: 0:02:19
 Epoch: 68, lr: 1.0e-02, train_loss: 0.9192, train_acc: 0.6746 test_loss: 0.8281, test_acc: 0.7020, best: 0.7070, time: 0:02:19
 Epoch: 69, lr: 1.0e-02, train_loss: 0.9161, train_acc: 0.6664 test_loss: 0.7949, test_acc: 0.7180, best: 0.7180, time: 0:02:19
 Epoch: 70, lr: 1.0e-02, train_loss: 0.8860, train_acc: 0.6802 test_loss: 0.8589, test_acc: 0.7040, best: 0.7180, time: 0:02:19
 Epoch: 71, lr: 1.0e-02, train_loss: 0.8999, train_acc: 0.6788 test_loss: 0.8964, test_acc: 0.6861, best: 0.7180, time: 0:02:19
 Epoch: 72, lr: 1.0e-02, train_loss: 0.9125, train_acc: 0.6732 test_loss: 0.7891, test_acc: 0.7238, best: 0.7238, time: 0:02:19
 Epoch: 73, lr: 1.0e-02, train_loss: 0.8832, train_acc: 0.6842 test_loss: 0.8145, test_acc: 0.7167, best: 0.7238, time: 0:02:19
 Epoch: 74, lr: 1.0e-02, train_loss: 0.8798, train_acc: 0.6826 test_loss: 0.8191, test_acc: 0.7113, best: 0.7238, time: 0:02:19
 Epoch: 75, lr: 1.0e-02, train_loss: 0.8818, train_acc: 0.6826 test_loss: 0.8135, test_acc: 0.7106, best: 0.7238, time: 0:02:19
 Epoch: 76, lr: 1.0e-02, train_loss: 0.8906, train_acc: 0.6780 test_loss: 0.9037, test_acc: 0.6981, best: 0.7238, time: 0:02:19
 Epoch: 77, lr: 1.0e-02, train_loss: 0.8617, train_acc: 0.6894 test_loss: 0.8790, test_acc: 0.6951, best: 0.7238, time: 0:02:19
 Epoch: 78, lr: 1.0e-02, train_loss: 0.8668, train_acc: 0.6892 test_loss: 0.8145, test_acc: 0.7091, best: 0.7238, time: 0:02:19
 Epoch: 79, lr: 1.0e-02, train_loss: 0.8486, train_acc: 0.6956 test_loss: 0.7814, test_acc: 0.7291, best: 0.7291, time: 0:02:19
 Epoch: 80, lr: 1.0e-02, train_loss: 0.8624, train_acc: 0.6874 test_loss: 0.7964, test_acc: 0.7200, best: 0.7291, time: 0:02:19
 Epoch: 81, lr: 1.0e-02, train_loss: 0.8451, train_acc: 0.6946 test_loss: 0.8389, test_acc: 0.7167, best: 0.7291, time: 0:02:19
 Epoch: 82, lr: 1.0e-02, train_loss: 0.8568, train_acc: 0.6976 test_loss: 0.8303, test_acc: 0.7120, best: 0.7291, time: 0:02:19
 Epoch: 83, lr: 1.0e-02, train_loss: 0.8507, train_acc: 0.6934 test_loss: 0.8214, test_acc: 0.7140, best: 0.7291, time: 0:02:20
 Epoch: 84, lr: 1.0e-02, train_loss: 0.8251, train_acc: 0.7018 test_loss: 0.7949, test_acc: 0.7202, best: 0.7291, time: 0:02:19
 Epoch: 85, lr: 1.0e-02, train_loss: 0.8325, train_acc: 0.7062 test_loss: 0.8014, test_acc: 0.7196, best: 0.7291, time: 0:02:19
 Epoch: 86, lr: 1.0e-02, train_loss: 0.8328, train_acc: 0.7024 test_loss: 0.8861, test_acc: 0.6901, best: 0.7291, time: 0:02:19
 Epoch: 87, lr: 1.0e-02, train_loss: 0.8226, train_acc: 0.7098 test_loss: 0.8458, test_acc: 0.7077, best: 0.7291, time: 0:02:19
 Epoch: 88, lr: 1.0e-02, train_loss: 0.8142, train_acc: 0.7122 test_loss: 0.8041, test_acc: 0.7134, best: 0.7291, time: 0:02:19
 Epoch: 89, lr: 1.0e-02, train_loss: 0.8226, train_acc: 0.7038 test_loss: 0.7594, test_acc: 0.7312, best: 0.7312, time: 0:02:19
 Epoch: 90, lr: 1.0e-02, train_loss: 0.7953, train_acc: 0.7152 test_loss: 0.8569, test_acc: 0.7151, best: 0.7312, time: 0:02:19
 Epoch: 91, lr: 1.0e-02, train_loss: 0.8088, train_acc: 0.7188 test_loss: 0.7759, test_acc: 0.7322, best: 0.7322, time: 0:02:20
 Epoch: 92, lr: 1.0e-02, train_loss: 0.8061, train_acc: 0.7024 test_loss: 0.8028, test_acc: 0.7245, best: 0.7322, time: 0:02:19
 Epoch: 93, lr: 1.0e-02, train_loss: 0.7842, train_acc: 0.7200 test_loss: 0.8190, test_acc: 0.7127, best: 0.7322, time: 0:02:19
 Epoch: 94, lr: 1.0e-02, train_loss: 0.7799, train_acc: 0.7210 test_loss: 0.8722, test_acc: 0.6925, best: 0.7322, time: 0:02:19
 Epoch: 95, lr: 1.0e-02, train_loss: 0.7872, train_acc: 0.7146 test_loss: 0.7944, test_acc: 0.7304, best: 0.7322, time: 0:02:19
 Epoch: 96, lr: 1.0e-02, train_loss: 0.7602, train_acc: 0.7254 test_loss: 0.7884, test_acc: 0.7260, best: 0.7322, time: 0:02:19
 Epoch: 97, lr: 1.0e-02, train_loss: 0.7800, train_acc: 0.7208 test_loss: 0.8246, test_acc: 0.7234, best: 0.7322, time: 0:02:19
 Epoch: 98, lr: 1.0e-02, train_loss: 0.7699, train_acc: 0.7316 test_loss: 0.7650, test_acc: 0.7395, best: 0.7395, time: 0:02:19
 Epoch: 99, lr: 1.0e-02, train_loss: 0.7819, train_acc: 0.7224 test_loss: 0.8006, test_acc: 0.7270, best: 0.7395, time: 0:02:19
 Epoch: 100, lr: 1.0e-02, train_loss: 0.7864, train_acc: 0.7188 test_loss: 0.7900, test_acc: 0.7290, best: 0.7395, time: 0:02:19
 Epoch: 101, lr: 1.0e-02, train_loss: 0.7525, train_acc: 0.7358 test_loss: 0.8330, test_acc: 0.7134, best: 0.7395, time: 0:02:19
 Epoch: 102, lr: 1.0e-02, train_loss: 0.7723, train_acc: 0.7160 test_loss: 0.8268, test_acc: 0.7184, best: 0.7395, time: 0:02:19
 Epoch: 103, lr: 1.0e-02, train_loss: 0.7525, train_acc: 0.7290 test_loss: 0.8718, test_acc: 0.7107, best: 0.7395, time: 0:02:19
 Epoch: 104, lr: 1.0e-02, train_loss: 0.7312, train_acc: 0.7438 test_loss: 0.7527, test_acc: 0.7378, best: 0.7395, time: 0:02:19
 Epoch: 105, lr: 1.0e-02, train_loss: 0.7604, train_acc: 0.7250 test_loss: 0.7603, test_acc: 0.7372, best: 0.7395, time: 0:02:19
 Epoch: 106, lr: 1.0e-02, train_loss: 0.7408, train_acc: 0.7382 test_loss: 0.7706, test_acc: 0.7365, best: 0.7395, time: 0:02:19
 Epoch: 107, lr: 1.0e-02, train_loss: 0.7223, train_acc: 0.7464 test_loss: 0.8206, test_acc: 0.7238, best: 0.7395, time: 0:02:19
 Epoch: 108, lr: 1.0e-02, train_loss: 0.7317, train_acc: 0.7412 test_loss: 0.7890, test_acc: 0.7298, best: 0.7395, time: 0:02:19
 Epoch: 109, lr: 1.0e-02, train_loss: 0.7321, train_acc: 0.7452 test_loss: 0.7733, test_acc: 0.7401, best: 0.7401, time: 0:02:19
 Epoch: 110, lr: 1.0e-02, train_loss: 0.7435, train_acc: 0.7398 test_loss: 0.8062, test_acc: 0.7428, best: 0.7428, time: 0:02:19
 Epoch: 111, lr: 1.0e-02, train_loss: 0.7242, train_acc: 0.7358 test_loss: 0.8449, test_acc: 0.7202, best: 0.7428, time: 0:02:19
 Epoch: 112, lr: 1.0e-02, train_loss: 0.7155, train_acc: 0.7480 test_loss: 0.8541, test_acc: 0.7131, best: 0.7428, time: 0:02:19
 Epoch: 113, lr: 1.0e-02, train_loss: 0.7098, train_acc: 0.7510 test_loss: 0.8043, test_acc: 0.7321, best: 0.7428, time: 0:02:19
 Epoch: 114, lr: 1.0e-02, train_loss: 0.6967, train_acc: 0.7556 test_loss: 0.8384, test_acc: 0.7260, best: 0.7428, time: 0:02:18
 Epoch: 115, lr: 1.0e-02, train_loss: 0.7075, train_acc: 0.7448 test_loss: 0.7777, test_acc: 0.7365, best: 0.7428, time: 0:02:19
 Epoch: 116, lr: 1.0e-02, train_loss: 0.7024, train_acc: 0.7442 test_loss: 0.7439, test_acc: 0.7405, best: 0.7428, time: 0:02:19
 Epoch: 117, lr: 1.0e-02, train_loss: 0.6830, train_acc: 0.7602 test_loss: 0.7677, test_acc: 0.7418, best: 0.7428, time: 0:02:19
 Epoch: 118, lr: 1.0e-02, train_loss: 0.7003, train_acc: 0.7416 test_loss: 0.7893, test_acc: 0.7350, best: 0.7428, time: 0:02:19
 Epoch: 119, lr: 1.0e-02, train_loss: 0.6937, train_acc: 0.7492 test_loss: 0.7884, test_acc: 0.7362, best: 0.7428, time: 0:02:19
 Epoch: 120, lr: 1.0e-02, train_loss: 0.6867, train_acc: 0.7570 test_loss: 0.7303, test_acc: 0.7501, best: 0.7501, time: 0:02:19
 Epoch: 121, lr: 1.0e-02, train_loss: 0.6789, train_acc: 0.7600 test_loss: 0.8169, test_acc: 0.7329, best: 0.7501, time: 0:02:19
 Epoch: 122, lr: 1.0e-02, train_loss: 0.6831, train_acc: 0.7564 test_loss: 0.7783, test_acc: 0.7439, best: 0.7501, time: 0:02:19
 Epoch: 123, lr: 1.0e-02, train_loss: 0.6908, train_acc: 0.7518 test_loss: 0.8214, test_acc: 0.7342, best: 0.7501, time: 0:02:19
 Epoch: 124, lr: 1.0e-02, train_loss: 0.6981, train_acc: 0.7542 test_loss: 0.7939, test_acc: 0.7344, best: 0.7501, time: 0:02:19
 Epoch: 125, lr: 1.0e-02, train_loss: 0.6800, train_acc: 0.7512 test_loss: 0.7800, test_acc: 0.7412, best: 0.7501, time: 0:02:19
 Epoch: 126, lr: 1.0e-02, train_loss: 0.6807, train_acc: 0.7578 test_loss: 0.8145, test_acc: 0.7328, best: 0.7501, time: 0:02:19
 Epoch: 127, lr: 1.0e-02, train_loss: 0.6628, train_acc: 0.7616 test_loss: 0.7864, test_acc: 0.7369, best: 0.7501, time: 0:02:19
 Epoch: 128, lr: 1.0e-02, train_loss: 0.6662, train_acc: 0.7670 test_loss: 0.7902, test_acc: 0.7384, best: 0.7501, time: 0:02:19
 Epoch: 129, lr: 1.0e-02, train_loss: 0.6613, train_acc: 0.7690 test_loss: 0.7950, test_acc: 0.7522, best: 0.7522, time: 0:02:19
 Epoch: 130, lr: 1.0e-02, train_loss: 0.6635, train_acc: 0.7608 test_loss: 0.7731, test_acc: 0.7470, best: 0.7522, time: 0:02:19
 Epoch: 131, lr: 1.0e-02, train_loss: 0.6217, train_acc: 0.7874 test_loss: 0.8025, test_acc: 0.7371, best: 0.7522, time: 0:02:19
 Epoch: 132, lr: 1.0e-02, train_loss: 0.6524, train_acc: 0.7694 test_loss: 0.7787, test_acc: 0.7444, best: 0.7522, time: 0:02:19
 Epoch: 133, lr: 1.0e-02, train_loss: 0.6379, train_acc: 0.7712 test_loss: 0.8017, test_acc: 0.7374, best: 0.7522, time: 0:02:19
 Epoch: 134, lr: 1.0e-02, train_loss: 0.6388, train_acc: 0.7744 test_loss: 0.7507, test_acc: 0.7511, best: 0.7522, time: 0:02:20
 Epoch: 135, lr: 1.0e-02, train_loss: 0.6345, train_acc: 0.7794 test_loss: 0.8024, test_acc: 0.7464, best: 0.7522, time: 0:02:19
 Epoch: 136, lr: 1.0e-02, train_loss: 0.6363, train_acc: 0.7730 test_loss: 0.8093, test_acc: 0.7435, best: 0.7522, time: 0:02:19
 Epoch: 137, lr: 1.0e-02, train_loss: 0.6321, train_acc: 0.7764 test_loss: 0.7655, test_acc: 0.7539, best: 0.7539, time: 0:02:19
 Epoch: 138, lr: 1.0e-02, train_loss: 0.6427, train_acc: 0.7744 test_loss: 0.7867, test_acc: 0.7379, best: 0.7539, time: 0:02:19
 Epoch: 139, lr: 1.0e-02, train_loss: 0.6115, train_acc: 0.7900 test_loss: 0.8048, test_acc: 0.7455, best: 0.7539, time: 0:02:19
 Epoch: 140, lr: 1.0e-02, train_loss: 0.6392, train_acc: 0.7748 test_loss: 0.8445, test_acc: 0.7310, best: 0.7539, time: 0:02:19
 Epoch: 141, lr: 1.0e-02, train_loss: 0.6154, train_acc: 0.7812 test_loss: 0.8017, test_acc: 0.7424, best: 0.7539, time: 0:02:19
 Epoch: 142, lr: 1.0e-02, train_loss: 0.6104, train_acc: 0.7816 test_loss: 0.7770, test_acc: 0.7510, best: 0.7539, time: 0:02:19
 Epoch: 143, lr: 1.0e-02, train_loss: 0.6292, train_acc: 0.7740 test_loss: 0.7410, test_acc: 0.7576, best: 0.7576, time: 0:02:19
 Epoch: 144, lr: 1.0e-02, train_loss: 0.6090, train_acc: 0.7830 test_loss: 0.8629, test_acc: 0.7406, best: 0.7576, time: 0:02:18
 Epoch: 145, lr: 1.0e-02, train_loss: 0.6310, train_acc: 0.7800 test_loss: 0.7698, test_acc: 0.7540, best: 0.7576, time: 0:02:18
 Epoch: 146, lr: 1.0e-02, train_loss: 0.6315, train_acc: 0.7798 test_loss: 0.7708, test_acc: 0.7546, best: 0.7576, time: 0:02:18
 Epoch: 147, lr: 1.0e-02, train_loss: 0.6073, train_acc: 0.7828 test_loss: 0.7479, test_acc: 0.7618, best: 0.7618, time: 0:02:19
 Epoch: 148, lr: 1.0e-02, train_loss: 0.6109, train_acc: 0.7852 test_loss: 0.7946, test_acc: 0.7476, best: 0.7618, time: 0:02:19
 Epoch: 149, lr: 1.0e-02, train_loss: 0.6193, train_acc: 0.7862 test_loss: 0.8174, test_acc: 0.7498, best: 0.7618, time: 0:02:19
 Epoch: 150, lr: 1.0e-02, train_loss: 0.6196, train_acc: 0.7784 test_loss: 0.7795, test_acc: 0.7452, best: 0.7618, time: 0:02:19
 Epoch: 151, lr: 1.0e-02, train_loss: 0.6045, train_acc: 0.7858 test_loss: 0.7562, test_acc: 0.7604, best: 0.7618, time: 0:02:19
 Epoch: 152, lr: 1.0e-02, train_loss: 0.6045, train_acc: 0.7846 test_loss: 0.7569, test_acc: 0.7625, best: 0.7625, time: 0:02:19
 Epoch: 153, lr: 1.0e-02, train_loss: 0.6201, train_acc: 0.7788 test_loss: 0.7667, test_acc: 0.7508, best: 0.7625, time: 0:02:18
 Epoch: 154, lr: 1.0e-02, train_loss: 0.5993, train_acc: 0.7896 test_loss: 0.7631, test_acc: 0.7546, best: 0.7625, time: 0:02:18
 Epoch: 155, lr: 1.0e-02, train_loss: 0.5657, train_acc: 0.8054 test_loss: 0.8550, test_acc: 0.7326, best: 0.7625, time: 0:02:19
 Epoch: 156, lr: 1.0e-02, train_loss: 0.5912, train_acc: 0.7932 test_loss: 0.7797, test_acc: 0.7555, best: 0.7625, time: 0:02:19
 Epoch: 157, lr: 1.0e-02, train_loss: 0.5983, train_acc: 0.7844 test_loss: 0.7595, test_acc: 0.7545, best: 0.7625, time: 0:02:19
 Epoch: 158, lr: 1.0e-02, train_loss: 0.5873, train_acc: 0.7940 test_loss: 0.7400, test_acc: 0.7592, best: 0.7625, time: 0:02:19
 Epoch: 159, lr: 1.0e-02, train_loss: 0.5762, train_acc: 0.7972 test_loss: 0.7700, test_acc: 0.7620, best: 0.7625, time: 0:02:18
 Epoch: 160, lr: 1.0e-02, train_loss: 0.6002, train_acc: 0.7798 test_loss: 0.7108, test_acc: 0.7694, best: 0.7694, time: 0:02:19
 Epoch: 161, lr: 1.0e-02, train_loss: 0.5680, train_acc: 0.8032 test_loss: 0.7544, test_acc: 0.7599, best: 0.7694, time: 0:02:19
 Epoch: 162, lr: 1.0e-02, train_loss: 0.5560, train_acc: 0.8026 test_loss: 0.7411, test_acc: 0.7721, best: 0.7721, time: 0:02:19
 Epoch: 163, lr: 1.0e-02, train_loss: 0.5379, train_acc: 0.8082 test_loss: 0.8164, test_acc: 0.7538, best: 0.7721, time: 0:02:19
 Epoch: 164, lr: 1.0e-02, train_loss: 0.5571, train_acc: 0.8026 test_loss: 0.8100, test_acc: 0.7584, best: 0.7721, time: 0:02:19
 Epoch: 165, lr: 1.0e-02, train_loss: 0.5653, train_acc: 0.8000 test_loss: 0.8434, test_acc: 0.7475, best: 0.7721, time: 0:02:19
 Epoch: 166, lr: 1.0e-02, train_loss: 0.5470, train_acc: 0.8098 test_loss: 0.7687, test_acc: 0.7524, best: 0.7721, time: 0:02:19
 Epoch: 167, lr: 1.0e-02, train_loss: 0.5532, train_acc: 0.8048 test_loss: 0.7739, test_acc: 0.7629, best: 0.7721, time: 0:02:19
 Epoch: 168, lr: 1.0e-02, train_loss: 0.5685, train_acc: 0.7966 test_loss: 0.7699, test_acc: 0.7681, best: 0.7721, time: 0:02:19
 Epoch: 169, lr: 1.0e-02, train_loss: 0.5350, train_acc: 0.8128 test_loss: 0.7850, test_acc: 0.7611, best: 0.7721, time: 0:02:19
 Epoch: 170, lr: 1.0e-02, train_loss: 0.5464, train_acc: 0.8068 test_loss: 0.7396, test_acc: 0.7650, best: 0.7721, time: 0:02:19
 Epoch: 171, lr: 1.0e-02, train_loss: 0.5783, train_acc: 0.7984 test_loss: 0.7889, test_acc: 0.7611, best: 0.7721, time: 0:02:19
 Epoch: 172, lr: 1.0e-02, train_loss: 0.5530, train_acc: 0.8020 test_loss: 0.7474, test_acc: 0.7618, best: 0.7721, time: 0:02:19
 Epoch: 173, lr: 1.0e-02, train_loss: 0.5408, train_acc: 0.8116 test_loss: 0.7760, test_acc: 0.7561, best: 0.7721, time: 0:02:19
 Epoch: 174, lr: 1.0e-02, train_loss: 0.5536, train_acc: 0.8050 test_loss: 0.7853, test_acc: 0.7612, best: 0.7721, time: 0:02:19
 Epoch: 175, lr: 1.0e-02, train_loss: 0.5580, train_acc: 0.8020 test_loss: 0.7742, test_acc: 0.7512, best: 0.7721, time: 0:02:19
 Epoch: 176, lr: 1.0e-02, train_loss: 0.5345, train_acc: 0.8098 test_loss: 0.7737, test_acc: 0.7596, best: 0.7721, time: 0:02:19
 Epoch: 177, lr: 1.0e-02, train_loss: 0.5508, train_acc: 0.8054 test_loss: 0.7980, test_acc: 0.7545, best: 0.7721, time: 0:02:19
 Epoch: 178, lr: 1.0e-02, train_loss: 0.5356, train_acc: 0.8156 test_loss: 0.7894, test_acc: 0.7448, best: 0.7721, time: 0:02:19
 Epoch: 179, lr: 1.0e-02, train_loss: 0.5494, train_acc: 0.8092 test_loss: 0.8225, test_acc: 0.7455, best: 0.7721, time: 0:02:19
 Epoch: 180, lr: 2.0e-03, train_loss: 0.4641, train_acc: 0.8378 test_loss: 0.7354, test_acc: 0.7790, best: 0.7790, time: 0:02:20
 Epoch: 181, lr: 2.0e-03, train_loss: 0.4345, train_acc: 0.8486 test_loss: 0.7364, test_acc: 0.7819, best: 0.7819, time: 0:02:19
 Epoch: 182, lr: 2.0e-03, train_loss: 0.4308, train_acc: 0.8486 test_loss: 0.7144, test_acc: 0.7867, best: 0.7867, time: 0:02:19
 Epoch: 183, lr: 2.0e-03, train_loss: 0.4231, train_acc: 0.8532 test_loss: 0.7607, test_acc: 0.7815, best: 0.7867, time: 0:02:19
 Epoch: 184, lr: 2.0e-03, train_loss: 0.4176, train_acc: 0.8548 test_loss: 0.7204, test_acc: 0.7864, best: 0.7867, time: 0:02:19
 Epoch: 185, lr: 2.0e-03, train_loss: 0.4060, train_acc: 0.8576 test_loss: 0.7401, test_acc: 0.7794, best: 0.7867, time: 0:02:19
 Epoch: 186, lr: 2.0e-03, train_loss: 0.3971, train_acc: 0.8572 test_loss: 0.7335, test_acc: 0.7877, best: 0.7877, time: 0:02:19
 Epoch: 187, lr: 2.0e-03, train_loss: 0.3991, train_acc: 0.8570 test_loss: 0.7348, test_acc: 0.7831, best: 0.7877, time: 0:02:19
 Epoch: 188, lr: 2.0e-03, train_loss: 0.4125, train_acc: 0.8556 test_loss: 0.7285, test_acc: 0.7860, best: 0.7877, time: 0:02:19
 Epoch: 189, lr: 2.0e-03, train_loss: 0.3828, train_acc: 0.8650 test_loss: 0.7531, test_acc: 0.7926, best: 0.7926, time: 0:02:19
 Epoch: 190, lr: 2.0e-03, train_loss: 0.3827, train_acc: 0.8632 test_loss: 0.7534, test_acc: 0.7837, best: 0.7926, time: 0:02:19
 Epoch: 191, lr: 2.0e-03, train_loss: 0.3976, train_acc: 0.8628 test_loss: 0.7698, test_acc: 0.7806, best: 0.7926, time: 0:02:19
 Epoch: 192, lr: 2.0e-03, train_loss: 0.3786, train_acc: 0.8650 test_loss: 0.7398, test_acc: 0.7864, best: 0.7926, time: 0:02:19
 Epoch: 193, lr: 2.0e-03, train_loss: 0.3684, train_acc: 0.8752 test_loss: 0.7629, test_acc: 0.7864, best: 0.7926, time: 0:02:19
 Epoch: 194, lr: 2.0e-03, train_loss: 0.3866, train_acc: 0.8648 test_loss: 0.7262, test_acc: 0.7954, best: 0.7954, time: 0:02:19
 Epoch: 195, lr: 2.0e-03, train_loss: 0.3784, train_acc: 0.8674 test_loss: 0.7807, test_acc: 0.7816, best: 0.7954, time: 0:02:19
 Epoch: 196, lr: 2.0e-03, train_loss: 0.3723, train_acc: 0.8734 test_loss: 0.7633, test_acc: 0.7894, best: 0.7954, time: 0:02:19
 Epoch: 197, lr: 2.0e-03, train_loss: 0.3787, train_acc: 0.8674 test_loss: 0.7532, test_acc: 0.7891, best: 0.7954, time: 0:02:19
 Epoch: 198, lr: 2.0e-03, train_loss: 0.3719, train_acc: 0.8682 test_loss: 0.7377, test_acc: 0.7893, best: 0.7954, time: 0:02:19
 Epoch: 199, lr: 2.0e-03, train_loss: 0.3759, train_acc: 0.8616 test_loss: 0.7562, test_acc: 0.7905, best: 0.7954, time: 0:02:19
 Epoch: 200, lr: 2.0e-03, train_loss: 0.3554, train_acc: 0.8810 test_loss: 0.7548, test_acc: 0.7899, best: 0.7954, time: 0:02:19
 Epoch: 201, lr: 2.0e-03, train_loss: 0.3673, train_acc: 0.8694 test_loss: 0.7559, test_acc: 0.7911, best: 0.7954, time: 0:02:19
 Epoch: 202, lr: 2.0e-03, train_loss: 0.3686, train_acc: 0.8696 test_loss: 0.7498, test_acc: 0.7935, best: 0.7954, time: 0:02:19
 Epoch: 203, lr: 2.0e-03, train_loss: 0.3638, train_acc: 0.8710 test_loss: 0.7193, test_acc: 0.7946, best: 0.7954, time: 0:02:19
 Epoch: 204, lr: 2.0e-03, train_loss: 0.3467, train_acc: 0.8806 test_loss: 0.7725, test_acc: 0.7881, best: 0.7954, time: 0:02:19
 Epoch: 205, lr: 2.0e-03, train_loss: 0.3598, train_acc: 0.8746 test_loss: 0.7626, test_acc: 0.7889, best: 0.7954, time: 0:02:19
 Epoch: 206, lr: 2.0e-03, train_loss: 0.3708, train_acc: 0.8716 test_loss: 0.7366, test_acc: 0.7870, best: 0.7954, time: 0:02:19
 Epoch: 207, lr: 2.0e-03, train_loss: 0.3772, train_acc: 0.8670 test_loss: 0.7515, test_acc: 0.7879, best: 0.7954, time: 0:02:19
 Epoch: 208, lr: 2.0e-03, train_loss: 0.3415, train_acc: 0.8860 test_loss: 0.7980, test_acc: 0.7810, best: 0.7954, time: 0:02:19
 Epoch: 209, lr: 2.0e-03, train_loss: 0.3728, train_acc: 0.8710 test_loss: 0.7867, test_acc: 0.7879, best: 0.7954, time: 0:02:19
 Epoch: 210, lr: 2.0e-03, train_loss: 0.3552, train_acc: 0.8780 test_loss: 0.7826, test_acc: 0.7896, best: 0.7954, time: 0:02:19
 Epoch: 211, lr: 2.0e-03, train_loss: 0.3782, train_acc: 0.8670 test_loss: 0.7633, test_acc: 0.7819, best: 0.7954, time: 0:02:18
 Epoch: 212, lr: 2.0e-03, train_loss: 0.3832, train_acc: 0.8670 test_loss: 0.7596, test_acc: 0.7904, best: 0.7954, time: 0:02:19
 Epoch: 213, lr: 2.0e-03, train_loss: 0.3384, train_acc: 0.8786 test_loss: 0.7750, test_acc: 0.7969, best: 0.7969, time: 0:02:19
 Epoch: 214, lr: 2.0e-03, train_loss: 0.3574, train_acc: 0.8778 test_loss: 0.7737, test_acc: 0.7871, best: 0.7969, time: 0:02:19
 Epoch: 215, lr: 2.0e-03, train_loss: 0.3614, train_acc: 0.8742 test_loss: 0.7888, test_acc: 0.7874, best: 0.7969, time: 0:02:19
 Epoch: 216, lr: 2.0e-03, train_loss: 0.3463, train_acc: 0.8800 test_loss: 0.8109, test_acc: 0.7833, best: 0.7969, time: 0:02:19
 Epoch: 217, lr: 2.0e-03, train_loss: 0.3507, train_acc: 0.8786 test_loss: 0.7867, test_acc: 0.7861, best: 0.7969, time: 0:02:19
 Epoch: 218, lr: 2.0e-03, train_loss: 0.3555, train_acc: 0.8754 test_loss: 0.7791, test_acc: 0.7926, best: 0.7969, time: 0:02:19
 Epoch: 219, lr: 2.0e-03, train_loss: 0.3664, train_acc: 0.8754 test_loss: 0.7837, test_acc: 0.7869, best: 0.7969, time: 0:02:19
 Epoch: 220, lr: 2.0e-03, train_loss: 0.3547, train_acc: 0.8774 test_loss: 0.7621, test_acc: 0.7876, best: 0.7969, time: 0:02:19
 Epoch: 221, lr: 2.0e-03, train_loss: 0.3833, train_acc: 0.8664 test_loss: 0.7530, test_acc: 0.7927, best: 0.7969, time: 0:02:19
 Epoch: 222, lr: 2.0e-03, train_loss: 0.3397, train_acc: 0.8758 test_loss: 0.8117, test_acc: 0.7867, best: 0.7969, time: 0:02:19
 Epoch: 223, lr: 2.0e-03, train_loss: 0.3436, train_acc: 0.8782 test_loss: 0.7943, test_acc: 0.7804, best: 0.7969, time: 0:02:19
 Epoch: 224, lr: 2.0e-03, train_loss: 0.3635, train_acc: 0.8734 test_loss: 0.7638, test_acc: 0.7889, best: 0.7969, time: 0:02:19
 Epoch: 225, lr: 2.0e-03, train_loss: 0.3633, train_acc: 0.8730 test_loss: 0.7924, test_acc: 0.7847, best: 0.7969, time: 0:02:19
 Epoch: 226, lr: 2.0e-03, train_loss: 0.3415, train_acc: 0.8804 test_loss: 0.7841, test_acc: 0.7865, best: 0.7969, time: 0:02:19
 Epoch: 227, lr: 2.0e-03, train_loss: 0.3555, train_acc: 0.8784 test_loss: 0.7505, test_acc: 0.7873, best: 0.7969, time: 0:02:19
 Epoch: 228, lr: 2.0e-03, train_loss: 0.3714, train_acc: 0.8754 test_loss: 0.7836, test_acc: 0.7855, best: 0.7969, time: 0:02:19
 Epoch: 229, lr: 2.0e-03, train_loss: 0.3374, train_acc: 0.8848 test_loss: 0.7901, test_acc: 0.7897, best: 0.7969, time: 0:02:18
 Epoch: 230, lr: 2.0e-03, train_loss: 0.3491, train_acc: 0.8790 test_loss: 0.7517, test_acc: 0.7926, best: 0.7969, time: 0:02:18
 Epoch: 231, lr: 2.0e-03, train_loss: 0.3387, train_acc: 0.8846 test_loss: 0.7769, test_acc: 0.7926, best: 0.7969, time: 0:02:19
 Epoch: 232, lr: 2.0e-03, train_loss: 0.3374, train_acc: 0.8850 test_loss: 0.7980, test_acc: 0.7867, best: 0.7969, time: 0:02:19
 Epoch: 233, lr: 2.0e-03, train_loss: 0.3564, train_acc: 0.8754 test_loss: 0.7874, test_acc: 0.7856, best: 0.7969, time: 0:02:19
 Epoch: 234, lr: 2.0e-03, train_loss: 0.3242, train_acc: 0.8890 test_loss: 0.7765, test_acc: 0.7927, best: 0.7969, time: 0:02:19
 Epoch: 235, lr: 2.0e-03, train_loss: 0.3395, train_acc: 0.8778 test_loss: 0.8048, test_acc: 0.7880, best: 0.7969, time: 0:02:19
 Epoch: 236, lr: 2.0e-03, train_loss: 0.3391, train_acc: 0.8822 test_loss: 0.8111, test_acc: 0.7759, best: 0.7969, time: 0:02:19
 Epoch: 237, lr: 2.0e-03, train_loss: 0.3392, train_acc: 0.8844 test_loss: 0.7945, test_acc: 0.7876, best: 0.7969, time: 0:02:19
 Epoch: 238, lr: 2.0e-03, train_loss: 0.3422, train_acc: 0.8798 test_loss: 0.7702, test_acc: 0.7875, best: 0.7969, time: 0:02:19
 Epoch: 239, lr: 2.0e-03, train_loss: 0.3518, train_acc: 0.8752 test_loss: 0.7685, test_acc: 0.7889, best: 0.7969, time: 0:02:19
 Epoch: 240, lr: 4.0e-04, train_loss: 0.3326, train_acc: 0.8860 test_loss: 0.7681, test_acc: 0.7901, best: 0.7969, time: 0:02:19
 Epoch: 241, lr: 4.0e-04, train_loss: 0.3193, train_acc: 0.8916 test_loss: 0.7845, test_acc: 0.7879, best: 0.7969, time: 0:02:18
 Epoch: 242, lr: 4.0e-04, train_loss: 0.3249, train_acc: 0.8864 test_loss: 0.7766, test_acc: 0.7913, best: 0.7969, time: 0:02:19
 Epoch: 243, lr: 4.0e-04, train_loss: 0.3149, train_acc: 0.8890 test_loss: 0.7679, test_acc: 0.7920, best: 0.7969, time: 0:02:18
 Epoch: 244, lr: 4.0e-04, train_loss: 0.3126, train_acc: 0.8910 test_loss: 0.7784, test_acc: 0.7894, best: 0.7969, time: 0:02:19
 Epoch: 245, lr: 4.0e-04, train_loss: 0.3191, train_acc: 0.8882 test_loss: 0.7763, test_acc: 0.7907, best: 0.7969, time: 0:02:19
 Epoch: 246, lr: 4.0e-04, train_loss: 0.2966, train_acc: 0.8976 test_loss: 0.7804, test_acc: 0.7909, best: 0.7969, time: 0:02:19
 Epoch: 247, lr: 4.0e-04, train_loss: 0.3068, train_acc: 0.8922 test_loss: 0.7662, test_acc: 0.7940, best: 0.7969, time: 0:02:19
 Epoch: 248, lr: 4.0e-04, train_loss: 0.3205, train_acc: 0.8856 test_loss: 0.7608, test_acc: 0.7963, best: 0.7969, time: 0:02:19
 Epoch: 249, lr: 4.0e-04, train_loss: 0.3236, train_acc: 0.8874 test_loss: 0.7715, test_acc: 0.7913, best: 0.7969, time: 0:02:19
 Epoch: 250, lr: 4.0e-04, train_loss: 0.3186, train_acc: 0.8854 test_loss: 0.7782, test_acc: 0.7910, best: 0.7969, time: 0:02:19
 Epoch: 251, lr: 4.0e-04, train_loss: 0.3251, train_acc: 0.8846 test_loss: 0.7793, test_acc: 0.7940, best: 0.7969, time: 0:02:18
 Epoch: 252, lr: 4.0e-04, train_loss: 0.3095, train_acc: 0.8966 test_loss: 0.7829, test_acc: 0.7915, best: 0.7969, time: 0:02:19
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2957, train_acc: 0.8894 test_loss: 0.7957, test_acc: 0.7875, best: 0.7969, time: 0:02:19
 Epoch: 254, lr: 4.0e-04, train_loss: 0.3165, train_acc: 0.8898 test_loss: 0.7779, test_acc: 0.7887, best: 0.7969, time: 0:02:19
 Epoch: 255, lr: 4.0e-04, train_loss: 0.3062, train_acc: 0.8918 test_loss: 0.7688, test_acc: 0.7910, best: 0.7969, time: 0:02:19
 Epoch: 256, lr: 4.0e-04, train_loss: 0.3027, train_acc: 0.8956 test_loss: 0.7755, test_acc: 0.7955, best: 0.7969, time: 0:02:19
 Epoch: 257, lr: 4.0e-04, train_loss: 0.3040, train_acc: 0.8908 test_loss: 0.7843, test_acc: 0.7927, best: 0.7969, time: 0:02:19
 Epoch: 258, lr: 4.0e-04, train_loss: 0.3228, train_acc: 0.8908 test_loss: 0.7859, test_acc: 0.7910, best: 0.7969, time: 0:02:19
 Epoch: 259, lr: 4.0e-04, train_loss: 0.3069, train_acc: 0.8936 test_loss: 0.7738, test_acc: 0.7940, best: 0.7969, time: 0:02:19
 Epoch: 260, lr: 4.0e-04, train_loss: 0.3153, train_acc: 0.8878 test_loss: 0.7596, test_acc: 0.7943, best: 0.7969, time: 0:02:19
 Epoch: 261, lr: 4.0e-04, train_loss: 0.2811, train_acc: 0.9022 test_loss: 0.7914, test_acc: 0.7965, best: 0.7969, time: 0:02:19
 Epoch: 262, lr: 4.0e-04, train_loss: 0.3156, train_acc: 0.8906 test_loss: 0.7827, test_acc: 0.7921, best: 0.7969, time: 0:02:19
 Epoch: 263, lr: 4.0e-04, train_loss: 0.3093, train_acc: 0.8918 test_loss: 0.7838, test_acc: 0.7941, best: 0.7969, time: 0:02:19
 Epoch: 264, lr: 4.0e-04, train_loss: 0.3053, train_acc: 0.8964 test_loss: 0.7684, test_acc: 0.7943, best: 0.7969, time: 0:02:19
 Epoch: 265, lr: 4.0e-04, train_loss: 0.3262, train_acc: 0.8862 test_loss: 0.7838, test_acc: 0.7920, best: 0.7969, time: 0:02:19
 Epoch: 266, lr: 4.0e-04, train_loss: 0.2957, train_acc: 0.8964 test_loss: 0.7936, test_acc: 0.7926, best: 0.7969, time: 0:02:19
 Epoch: 267, lr: 4.0e-04, train_loss: 0.3074, train_acc: 0.8958 test_loss: 0.7866, test_acc: 0.7890, best: 0.7969, time: 0:02:19
 Epoch: 268, lr: 4.0e-04, train_loss: 0.3164, train_acc: 0.8896 test_loss: 0.7710, test_acc: 0.7940, best: 0.7969, time: 0:02:19
 Epoch: 269, lr: 4.0e-04, train_loss: 0.3015, train_acc: 0.8982 test_loss: 0.7683, test_acc: 0.7931, best: 0.7969, time: 0:02:19
 Epoch: 270, lr: 8.0e-05, train_loss: 0.3267, train_acc: 0.8890 test_loss: 0.7819, test_acc: 0.7953, best: 0.7969, time: 0:02:19
 Epoch: 271, lr: 8.0e-05, train_loss: 0.3080, train_acc: 0.8922 test_loss: 0.7839, test_acc: 0.7943, best: 0.7969, time: 0:02:18
 Epoch: 272, lr: 8.0e-05, train_loss: 0.3170, train_acc: 0.8888 test_loss: 0.7787, test_acc: 0.7919, best: 0.7969, time: 0:02:19
 Epoch: 273, lr: 8.0e-05, train_loss: 0.2936, train_acc: 0.8996 test_loss: 0.7705, test_acc: 0.7931, best: 0.7969, time: 0:02:18
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2971, train_acc: 0.8960 test_loss: 0.7612, test_acc: 0.7951, best: 0.7969, time: 0:02:19
 Epoch: 275, lr: 8.0e-05, train_loss: 0.3082, train_acc: 0.8890 test_loss: 0.7735, test_acc: 0.7959, best: 0.7969, time: 0:02:19
 Epoch: 276, lr: 8.0e-05, train_loss: 0.3037, train_acc: 0.8924 test_loss: 0.7903, test_acc: 0.7899, best: 0.7969, time: 0:02:19
 Epoch: 277, lr: 8.0e-05, train_loss: 0.3019, train_acc: 0.8944 test_loss: 0.7892, test_acc: 0.7935, best: 0.7969, time: 0:02:19
 Epoch: 278, lr: 8.0e-05, train_loss: 0.2989, train_acc: 0.8950 test_loss: 0.7776, test_acc: 0.7926, best: 0.7969, time: 0:02:19
 Epoch: 279, lr: 8.0e-05, train_loss: 0.2989, train_acc: 0.8962 test_loss: 0.7702, test_acc: 0.7887, best: 0.7969, time: 0:02:19
 Epoch: 280, lr: 8.0e-05, train_loss: 0.2951, train_acc: 0.8972 test_loss: 0.7736, test_acc: 0.7954, best: 0.7969, time: 0:02:19
 Epoch: 281, lr: 8.0e-05, train_loss: 0.3008, train_acc: 0.8916 test_loss: 0.7898, test_acc: 0.7887, best: 0.7969, time: 0:02:19
 Epoch: 282, lr: 8.0e-05, train_loss: 0.2864, train_acc: 0.9016 test_loss: 0.7853, test_acc: 0.7925, best: 0.7969, time: 0:02:19
 Epoch: 283, lr: 8.0e-05, train_loss: 0.3078, train_acc: 0.8954 test_loss: 0.7920, test_acc: 0.7933, best: 0.7969, time: 0:02:19
 Epoch: 284, lr: 8.0e-05, train_loss: 0.3104, train_acc: 0.8888 test_loss: 0.7591, test_acc: 0.7931, best: 0.7969, time: 0:02:19
 Epoch: 285, lr: 8.0e-05, train_loss: 0.3091, train_acc: 0.8918 test_loss: 0.7764, test_acc: 0.7931, best: 0.7969, time: 0:02:19
 Epoch: 286, lr: 8.0e-05, train_loss: 0.3095, train_acc: 0.8900 test_loss: 0.7839, test_acc: 0.7914, best: 0.7969, time: 0:02:19
 Epoch: 287, lr: 8.0e-05, train_loss: 0.3040, train_acc: 0.8936 test_loss: 0.7902, test_acc: 0.7905, best: 0.7969, time: 0:02:19
 Epoch: 288, lr: 8.0e-05, train_loss: 0.2959, train_acc: 0.8962 test_loss: 0.7738, test_acc: 0.7931, best: 0.7969, time: 0:02:19
 Epoch: 289, lr: 8.0e-05, train_loss: 0.3267, train_acc: 0.8846 test_loss: 0.7692, test_acc: 0.7917, best: 0.7969, time: 0:02:19
 Epoch: 290, lr: 8.0e-05, train_loss: 0.2956, train_acc: 0.8952 test_loss: 0.7774, test_acc: 0.7900, best: 0.7969, time: 0:02:19
 Epoch: 291, lr: 8.0e-05, train_loss: 0.3074, train_acc: 0.8928 test_loss: 0.7651, test_acc: 0.7929, best: 0.7969, time: 0:02:19
 Epoch: 292, lr: 8.0e-05, train_loss: 0.3158, train_acc: 0.8934 test_loss: 0.7748, test_acc: 0.7920, best: 0.7969, time: 0:02:19
 Epoch: 293, lr: 8.0e-05, train_loss: 0.2941, train_acc: 0.9010 test_loss: 0.7909, test_acc: 0.7905, best: 0.7969, time: 0:02:19
 Epoch: 294, lr: 8.0e-05, train_loss: 0.2950, train_acc: 0.8976 test_loss: 0.7955, test_acc: 0.7891, best: 0.7969, time: 0:02:19
 Epoch: 295, lr: 8.0e-05, train_loss: 0.3057, train_acc: 0.8952 test_loss: 0.7720, test_acc: 0.7941, best: 0.7969, time: 0:02:19
 Epoch: 296, lr: 8.0e-05, train_loss: 0.3068, train_acc: 0.8978 test_loss: 0.7734, test_acc: 0.7950, best: 0.7969, time: 0:02:19
 Epoch: 297, lr: 8.0e-05, train_loss: 0.3013, train_acc: 0.8940 test_loss: 0.7665, test_acc: 0.7923, best: 0.7969, time: 0:02:19
 Epoch: 298, lr: 8.0e-05, train_loss: 0.3018, train_acc: 0.8958 test_loss: 0.7858, test_acc: 0.7925, best: 0.7969, time: 0:02:18
 Epoch: 299, lr: 8.0e-05, train_loss: 0.2903, train_acc: 0.8952 test_loss: 0.7796, test_acc: 0.7907, best: 0.7969, time: 0:02:18
 Highest accuracy: 0.7969