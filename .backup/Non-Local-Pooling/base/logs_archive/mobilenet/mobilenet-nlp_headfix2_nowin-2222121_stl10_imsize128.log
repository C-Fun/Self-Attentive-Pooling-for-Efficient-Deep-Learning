
 Run on time: 2022-07-03 17:06:53.889334

 Architecture: mobilenet-nlp_headfix2_nowin-2222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP_HEADFIX2_NOWIN-2222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=96, out_features=96, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 48)
                  (col_embed): Embedding(256, 48)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.6338, train_acc: 0.1412 test_loss: 2.1041, test_acc: 0.2050, best: 0.2050, time: 0:02:19
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1793, train_acc: 0.1818 test_loss: 1.9811, test_acc: 0.2375, best: 0.2375, time: 0:02:18
 Epoch: 3, lr: 1.0e-02, train_loss: 2.1193, train_acc: 0.2034 test_loss: 1.9760, test_acc: 0.2466, best: 0.2466, time: 0:02:19
 Epoch: 4, lr: 1.0e-02, train_loss: 2.0979, train_acc: 0.2126 test_loss: 1.9600, test_acc: 0.2874, best: 0.2874, time: 0:02:18
 Epoch: 5, lr: 1.0e-02, train_loss: 2.0473, train_acc: 0.2190 test_loss: 1.8881, test_acc: 0.2850, best: 0.2874, time: 0:02:18
 Epoch: 6, lr: 1.0e-02, train_loss: 2.0753, train_acc: 0.2146 test_loss: 2.1137, test_acc: 0.2094, best: 0.2874, time: 0:02:19
 Epoch: 7, lr: 1.0e-02, train_loss: 2.0538, train_acc: 0.2188 test_loss: 1.8722, test_acc: 0.2306, best: 0.2874, time: 0:02:18
 Epoch: 8, lr: 1.0e-02, train_loss: 2.0033, train_acc: 0.2244 test_loss: 1.8452, test_acc: 0.2928, best: 0.2928, time: 0:02:18
 Epoch: 9, lr: 1.0e-02, train_loss: 2.0284, train_acc: 0.2330 test_loss: 1.8588, test_acc: 0.2833, best: 0.2928, time: 0:02:18
 Epoch: 10, lr: 1.0e-02, train_loss: 1.9858, train_acc: 0.2352 test_loss: 1.8301, test_acc: 0.3059, best: 0.3059, time: 0:02:18
 Epoch: 11, lr: 1.0e-02, train_loss: 1.9791, train_acc: 0.2400 test_loss: 1.7371, test_acc: 0.3369, best: 0.3369, time: 0:02:19
 Epoch: 12, lr: 1.0e-02, train_loss: 1.9347, train_acc: 0.2610 test_loss: 1.8023, test_acc: 0.3085, best: 0.3369, time: 0:02:19
 Epoch: 13, lr: 1.0e-02, train_loss: 1.9373, train_acc: 0.2658 test_loss: 1.8191, test_acc: 0.3034, best: 0.3369, time: 0:02:18
 Epoch: 14, lr: 1.0e-02, train_loss: 1.9308, train_acc: 0.2654 test_loss: 1.7915, test_acc: 0.3199, best: 0.3369, time: 0:02:19
 Epoch: 15, lr: 1.0e-02, train_loss: 1.9039, train_acc: 0.2660 test_loss: 1.8074, test_acc: 0.2961, best: 0.3369, time: 0:02:19
 Epoch: 16, lr: 1.0e-02, train_loss: 1.9134, train_acc: 0.2768 test_loss: 1.7146, test_acc: 0.3190, best: 0.3369, time: 0:02:19
 Epoch: 17, lr: 1.0e-02, train_loss: 1.8617, train_acc: 0.2874 test_loss: 1.6599, test_acc: 0.3660, best: 0.3660, time: 0:02:18
 Epoch: 18, lr: 1.0e-02, train_loss: 1.8563, train_acc: 0.2880 test_loss: 1.6689, test_acc: 0.3679, best: 0.3679, time: 0:02:18
 Epoch: 19, lr: 1.0e-02, train_loss: 1.8427, train_acc: 0.2964 test_loss: 1.6706, test_acc: 0.3644, best: 0.3679, time: 0:02:19
 Epoch: 20, lr: 1.0e-02, train_loss: 1.8855, train_acc: 0.2862 test_loss: 1.7353, test_acc: 0.3297, best: 0.3679, time: 0:02:18
 Epoch: 21, lr: 1.0e-02, train_loss: 1.9043, train_acc: 0.2796 test_loss: 1.7279, test_acc: 0.3375, best: 0.3679, time: 0:02:18
 Epoch: 22, lr: 1.0e-02, train_loss: 1.8969, train_acc: 0.2782 test_loss: 1.7361, test_acc: 0.3427, best: 0.3679, time: 0:02:19
 Epoch: 23, lr: 1.0e-02, train_loss: 1.8657, train_acc: 0.2852 test_loss: 1.7183, test_acc: 0.3365, best: 0.3679, time: 0:02:18
 Epoch: 24, lr: 1.0e-02, train_loss: 1.8262, train_acc: 0.3030 test_loss: 1.6776, test_acc: 0.3599, best: 0.3679, time: 0:02:18
 Epoch: 25, lr: 1.0e-02, train_loss: 1.8468, train_acc: 0.2958 test_loss: 1.6641, test_acc: 0.3767, best: 0.3767, time: 0:02:18
 Epoch: 26, lr: 1.0e-02, train_loss: 1.8097, train_acc: 0.3174 test_loss: 1.6410, test_acc: 0.3795, best: 0.3795, time: 0:02:18
 Epoch: 27, lr: 1.0e-02, train_loss: 1.8112, train_acc: 0.3104 test_loss: 1.6496, test_acc: 0.3822, best: 0.3822, time: 0:02:18
 Epoch: 28, lr: 1.0e-02, train_loss: 1.7693, train_acc: 0.3306 test_loss: 1.5910, test_acc: 0.3837, best: 0.3837, time: 0:02:18
 Epoch: 29, lr: 1.0e-02, train_loss: 1.7643, train_acc: 0.3228 test_loss: 1.6174, test_acc: 0.3686, best: 0.3837, time: 0:02:18
 Epoch: 30, lr: 1.0e-02, train_loss: 1.7688, train_acc: 0.3260 test_loss: 1.5966, test_acc: 0.3969, best: 0.3969, time: 0:02:18
 Epoch: 31, lr: 1.0e-02, train_loss: 1.8025, train_acc: 0.3160 test_loss: 1.6818, test_acc: 0.3391, best: 0.3969, time: 0:02:17
 Epoch: 32, lr: 1.0e-02, train_loss: 1.7943, train_acc: 0.3148 test_loss: 1.6019, test_acc: 0.3821, best: 0.3969, time: 0:02:18
 Epoch: 33, lr: 1.0e-02, train_loss: 1.7762, train_acc: 0.3170 test_loss: 1.5857, test_acc: 0.3966, best: 0.3969, time: 0:02:18
 Epoch: 34, lr: 1.0e-02, train_loss: 1.7345, train_acc: 0.3372 test_loss: 1.5813, test_acc: 0.3952, best: 0.3969, time: 0:02:18
 Epoch: 35, lr: 1.0e-02, train_loss: 1.7358, train_acc: 0.3320 test_loss: 1.5818, test_acc: 0.3797, best: 0.3969, time: 0:02:18
 Epoch: 36, lr: 1.0e-02, train_loss: 1.7481, train_acc: 0.3332 test_loss: 1.5903, test_acc: 0.3754, best: 0.3969, time: 0:02:18
 Epoch: 37, lr: 1.0e-02, train_loss: 1.7097, train_acc: 0.3530 test_loss: 1.5540, test_acc: 0.4015, best: 0.4015, time: 0:02:18
 Epoch: 38, lr: 1.0e-02, train_loss: 1.7015, train_acc: 0.3526 test_loss: 1.5312, test_acc: 0.4125, best: 0.4125, time: 0:02:18
 Epoch: 39, lr: 1.0e-02, train_loss: 1.7056, train_acc: 0.3550 test_loss: 1.5682, test_acc: 0.4029, best: 0.4125, time: 0:02:18
 Epoch: 40, lr: 1.0e-02, train_loss: 1.7239, train_acc: 0.3500 test_loss: 1.5725, test_acc: 0.3924, best: 0.4125, time: 0:02:18
 Epoch: 41, lr: 1.0e-02, train_loss: 1.7040, train_acc: 0.3502 test_loss: 1.6804, test_acc: 0.3394, best: 0.4125, time: 0:02:18
 Epoch: 42, lr: 1.0e-02, train_loss: 1.7077, train_acc: 0.3610 test_loss: 1.5295, test_acc: 0.4210, best: 0.4210, time: 0:02:18
 Epoch: 43, lr: 1.0e-02, train_loss: 1.6733, train_acc: 0.3592 test_loss: 1.5362, test_acc: 0.4079, best: 0.4210, time: 0:02:18
 Epoch: 44, lr: 1.0e-02, train_loss: 1.6754, train_acc: 0.3580 test_loss: 1.5381, test_acc: 0.4229, best: 0.4229, time: 0:02:18
 Epoch: 45, lr: 1.0e-02, train_loss: 1.6800, train_acc: 0.3634 test_loss: 1.5460, test_acc: 0.4131, best: 0.4229, time: 0:02:18
 Epoch: 46, lr: 1.0e-02, train_loss: 1.6663, train_acc: 0.3698 test_loss: 1.5187, test_acc: 0.4303, best: 0.4303, time: 0:02:18
 Epoch: 47, lr: 1.0e-02, train_loss: 1.6532, train_acc: 0.3758 test_loss: 1.4517, test_acc: 0.4387, best: 0.4387, time: 0:02:18
 Epoch: 48, lr: 1.0e-02, train_loss: 1.6423, train_acc: 0.3718 test_loss: 1.4491, test_acc: 0.4586, best: 0.4586, time: 0:02:18
 Epoch: 49, lr: 1.0e-02, train_loss: 1.6192, train_acc: 0.3942 test_loss: 1.4576, test_acc: 0.4527, best: 0.4586, time: 0:02:18
 Epoch: 50, lr: 1.0e-02, train_loss: 1.6210, train_acc: 0.3908 test_loss: 1.4859, test_acc: 0.4338, best: 0.4586, time: 0:02:18
 Epoch: 51, lr: 1.0e-02, train_loss: 1.6148, train_acc: 0.3958 test_loss: 1.4529, test_acc: 0.4607, best: 0.4607, time: 0:02:19
 Epoch: 52, lr: 1.0e-02, train_loss: 1.6131, train_acc: 0.3970 test_loss: 1.3949, test_acc: 0.4665, best: 0.4665, time: 0:02:19
 Epoch: 53, lr: 1.0e-02, train_loss: 1.5978, train_acc: 0.4020 test_loss: 1.4772, test_acc: 0.4457, best: 0.4665, time: 0:02:18
 Epoch: 54, lr: 1.0e-02, train_loss: 1.5657, train_acc: 0.4106 test_loss: 1.4081, test_acc: 0.4689, best: 0.4689, time: 0:02:18
 Epoch: 55, lr: 1.0e-02, train_loss: 1.5748, train_acc: 0.3992 test_loss: 1.4566, test_acc: 0.4444, best: 0.4689, time: 0:02:18
 Epoch: 56, lr: 1.0e-02, train_loss: 1.5751, train_acc: 0.4000 test_loss: 1.3855, test_acc: 0.4803, best: 0.4803, time: 0:02:19
 Epoch: 57, lr: 1.0e-02, train_loss: 1.5945, train_acc: 0.4012 test_loss: 1.4275, test_acc: 0.4739, best: 0.4803, time: 0:02:18
 Epoch: 58, lr: 1.0e-02, train_loss: 1.5434, train_acc: 0.4258 test_loss: 1.3940, test_acc: 0.4753, best: 0.4803, time: 0:02:18
 Epoch: 59, lr: 1.0e-02, train_loss: 1.5305, train_acc: 0.4312 test_loss: 1.4187, test_acc: 0.4600, best: 0.4803, time: 0:02:17
 Epoch: 60, lr: 1.0e-02, train_loss: 1.5396, train_acc: 0.4184 test_loss: 1.3517, test_acc: 0.4915, best: 0.4915, time: 0:02:18
 Epoch: 61, lr: 1.0e-02, train_loss: 1.5387, train_acc: 0.4310 test_loss: 1.3675, test_acc: 0.4815, best: 0.4915, time: 0:02:18
 Epoch: 62, lr: 1.0e-02, train_loss: 1.5446, train_acc: 0.4182 test_loss: 1.3673, test_acc: 0.4769, best: 0.4915, time: 0:02:18
 Epoch: 63, lr: 1.0e-02, train_loss: 1.5510, train_acc: 0.4190 test_loss: 1.3920, test_acc: 0.4796, best: 0.4915, time: 0:02:18
 Epoch: 64, lr: 1.0e-02, train_loss: 1.5163, train_acc: 0.4206 test_loss: 1.3362, test_acc: 0.4980, best: 0.4980, time: 0:02:18
 Epoch: 65, lr: 1.0e-02, train_loss: 1.5193, train_acc: 0.4352 test_loss: 1.4009, test_acc: 0.4744, best: 0.4980, time: 0:02:18
 Epoch: 66, lr: 1.0e-02, train_loss: 1.5219, train_acc: 0.4320 test_loss: 1.3952, test_acc: 0.4741, best: 0.4980, time: 0:02:18
 Epoch: 67, lr: 1.0e-02, train_loss: 1.5243, train_acc: 0.4450 test_loss: 1.3417, test_acc: 0.4971, best: 0.4980, time: 0:02:18
 Epoch: 68, lr: 1.0e-02, train_loss: 1.5163, train_acc: 0.4388 test_loss: 1.3286, test_acc: 0.5089, best: 0.5089, time: 0:02:18
 Epoch: 69, lr: 1.0e-02, train_loss: 1.4732, train_acc: 0.4534 test_loss: 1.2919, test_acc: 0.5201, best: 0.5201, time: 0:02:18
 Epoch: 70, lr: 1.0e-02, train_loss: 1.4663, train_acc: 0.4586 test_loss: 1.3280, test_acc: 0.5078, best: 0.5201, time: 0:02:18
 Epoch: 71, lr: 1.0e-02, train_loss: 1.4540, train_acc: 0.4620 test_loss: 1.3048, test_acc: 0.5160, best: 0.5201, time: 0:02:18
 Epoch: 72, lr: 1.0e-02, train_loss: 1.4584, train_acc: 0.4604 test_loss: 1.2973, test_acc: 0.5275, best: 0.5275, time: 0:02:18
 Epoch: 73, lr: 1.0e-02, train_loss: 1.4606, train_acc: 0.4622 test_loss: 1.3315, test_acc: 0.5092, best: 0.5275, time: 0:02:18
 Epoch: 74, lr: 1.0e-02, train_loss: 1.4443, train_acc: 0.4748 test_loss: 1.2981, test_acc: 0.5211, best: 0.5275, time: 0:02:18
 Epoch: 75, lr: 1.0e-02, train_loss: 1.4192, train_acc: 0.4774 test_loss: 1.2889, test_acc: 0.5225, best: 0.5275, time: 0:02:18
 Epoch: 76, lr: 1.0e-02, train_loss: 1.4366, train_acc: 0.4698 test_loss: 1.3056, test_acc: 0.5220, best: 0.5275, time: 0:02:18
 Epoch: 77, lr: 1.0e-02, train_loss: 1.4446, train_acc: 0.4636 test_loss: 1.2695, test_acc: 0.5405, best: 0.5405, time: 0:02:18
 Epoch: 78, lr: 1.0e-02, train_loss: 1.4088, train_acc: 0.4856 test_loss: 1.2782, test_acc: 0.5292, best: 0.5405, time: 0:02:18
 Epoch: 79, lr: 1.0e-02, train_loss: 1.4318, train_acc: 0.4804 test_loss: 1.2564, test_acc: 0.5454, best: 0.5454, time: 0:02:18
 Epoch: 80, lr: 1.0e-02, train_loss: 1.4039, train_acc: 0.4826 test_loss: 1.2678, test_acc: 0.5380, best: 0.5454, time: 0:02:18
 Epoch: 81, lr: 1.0e-02, train_loss: 1.3899, train_acc: 0.4864 test_loss: 1.2175, test_acc: 0.5555, best: 0.5555, time: 0:02:18
 Epoch: 82, lr: 1.0e-02, train_loss: 1.3922, train_acc: 0.4874 test_loss: 1.2644, test_acc: 0.5359, best: 0.5555, time: 0:02:18
 Epoch: 83, lr: 1.0e-02, train_loss: 1.3776, train_acc: 0.4972 test_loss: 1.2605, test_acc: 0.5459, best: 0.5555, time: 0:02:18
 Epoch: 84, lr: 1.0e-02, train_loss: 1.3708, train_acc: 0.4962 test_loss: 1.2153, test_acc: 0.5536, best: 0.5555, time: 0:02:18
 Epoch: 85, lr: 1.0e-02, train_loss: 1.3783, train_acc: 0.4910 test_loss: 1.2076, test_acc: 0.5590, best: 0.5590, time: 0:02:18
 Epoch: 86, lr: 1.0e-02, train_loss: 1.3755, train_acc: 0.4866 test_loss: 1.1816, test_acc: 0.5681, best: 0.5681, time: 0:02:18
 Epoch: 87, lr: 1.0e-02, train_loss: 1.3747, train_acc: 0.4894 test_loss: 1.2296, test_acc: 0.5536, best: 0.5681, time: 0:02:18
 Epoch: 88, lr: 1.0e-02, train_loss: 1.3535, train_acc: 0.4914 test_loss: 1.2168, test_acc: 0.5521, best: 0.5681, time: 0:02:18
 Epoch: 89, lr: 1.0e-02, train_loss: 1.3482, train_acc: 0.4996 test_loss: 1.1803, test_acc: 0.5730, best: 0.5730, time: 0:02:18
 Epoch: 90, lr: 1.0e-02, train_loss: 1.3575, train_acc: 0.5034 test_loss: 1.1935, test_acc: 0.5623, best: 0.5730, time: 0:02:18
 Epoch: 91, lr: 1.0e-02, train_loss: 1.3553, train_acc: 0.5116 test_loss: 1.2282, test_acc: 0.5579, best: 0.5730, time: 0:02:18
 Epoch: 92, lr: 1.0e-02, train_loss: 1.3380, train_acc: 0.5082 test_loss: 1.2299, test_acc: 0.5480, best: 0.5730, time: 0:02:18
 Epoch: 93, lr: 1.0e-02, train_loss: 1.3301, train_acc: 0.5084 test_loss: 1.1650, test_acc: 0.5783, best: 0.5783, time: 0:02:18
 Epoch: 94, lr: 1.0e-02, train_loss: 1.3228, train_acc: 0.5174 test_loss: 1.1631, test_acc: 0.5736, best: 0.5783, time: 0:02:18
 Epoch: 95, lr: 1.0e-02, train_loss: 1.3272, train_acc: 0.5132 test_loss: 1.1706, test_acc: 0.5756, best: 0.5783, time: 0:02:18
 Epoch: 96, lr: 1.0e-02, train_loss: 1.3291, train_acc: 0.5080 test_loss: 1.2066, test_acc: 0.5625, best: 0.5783, time: 0:02:18
 Epoch: 97, lr: 1.0e-02, train_loss: 1.2950, train_acc: 0.5156 test_loss: 1.1896, test_acc: 0.5635, best: 0.5783, time: 0:02:18
 Epoch: 98, lr: 1.0e-02, train_loss: 1.3097, train_acc: 0.5178 test_loss: 1.1810, test_acc: 0.5626, best: 0.5783, time: 0:02:17
 Epoch: 99, lr: 1.0e-02, train_loss: 1.2877, train_acc: 0.5216 test_loss: 1.1767, test_acc: 0.5655, best: 0.5783, time: 0:02:18
 Epoch: 100, lr: 1.0e-02, train_loss: 1.2977, train_acc: 0.5252 test_loss: 1.1541, test_acc: 0.5816, best: 0.5816, time: 0:02:18
 Epoch: 101, lr: 1.0e-02, train_loss: 1.2772, train_acc: 0.5348 test_loss: 1.1620, test_acc: 0.5710, best: 0.5816, time: 0:02:18
 Epoch: 102, lr: 1.0e-02, train_loss: 1.2818, train_acc: 0.5336 test_loss: 1.1580, test_acc: 0.5765, best: 0.5816, time: 0:02:18
 Epoch: 103, lr: 1.0e-02, train_loss: 1.2820, train_acc: 0.5356 test_loss: 1.1714, test_acc: 0.5764, best: 0.5816, time: 0:02:18
 Epoch: 104, lr: 1.0e-02, train_loss: 1.3181, train_acc: 0.5142 test_loss: 1.1503, test_acc: 0.5849, best: 0.5849, time: 0:02:18
 Epoch: 105, lr: 1.0e-02, train_loss: 1.2689, train_acc: 0.5282 test_loss: 1.2326, test_acc: 0.5547, best: 0.5849, time: 0:02:18
 Epoch: 106, lr: 1.0e-02, train_loss: 1.2929, train_acc: 0.5322 test_loss: 1.2005, test_acc: 0.5597, best: 0.5849, time: 0:02:18
 Epoch: 107, lr: 1.0e-02, train_loss: 1.2640, train_acc: 0.5348 test_loss: 1.1515, test_acc: 0.5844, best: 0.5849, time: 0:02:18
 Epoch: 108, lr: 1.0e-02, train_loss: 1.2758, train_acc: 0.5394 test_loss: 1.0878, test_acc: 0.6126, best: 0.6126, time: 0:02:18
 Epoch: 109, lr: 1.0e-02, train_loss: 1.2773, train_acc: 0.5322 test_loss: 1.1329, test_acc: 0.6079, best: 0.6126, time: 0:02:18
 Epoch: 110, lr: 1.0e-02, train_loss: 1.2526, train_acc: 0.5464 test_loss: 1.1538, test_acc: 0.5820, best: 0.6126, time: 0:02:18
 Epoch: 111, lr: 1.0e-02, train_loss: 1.2302, train_acc: 0.5496 test_loss: 1.1458, test_acc: 0.5841, best: 0.6126, time: 0:02:18
 Epoch: 112, lr: 1.0e-02, train_loss: 1.2548, train_acc: 0.5514 test_loss: 1.2032, test_acc: 0.5530, best: 0.6126, time: 0:02:18
 Epoch: 113, lr: 1.0e-02, train_loss: 1.2723, train_acc: 0.5398 test_loss: 1.1449, test_acc: 0.5810, best: 0.6126, time: 0:02:18
 Epoch: 114, lr: 1.0e-02, train_loss: 1.2448, train_acc: 0.5426 test_loss: 1.0930, test_acc: 0.6049, best: 0.6126, time: 0:02:18
 Epoch: 115, lr: 1.0e-02, train_loss: 1.2365, train_acc: 0.5436 test_loss: 1.1393, test_acc: 0.5886, best: 0.6126, time: 0:02:18
 Epoch: 116, lr: 1.0e-02, train_loss: 1.2280, train_acc: 0.5508 test_loss: 1.1265, test_acc: 0.5881, best: 0.6126, time: 0:02:18
 Epoch: 117, lr: 1.0e-02, train_loss: 1.2211, train_acc: 0.5516 test_loss: 1.1182, test_acc: 0.5988, best: 0.6126, time: 0:02:18
 Epoch: 118, lr: 1.0e-02, train_loss: 1.2150, train_acc: 0.5592 test_loss: 1.1371, test_acc: 0.5844, best: 0.6126, time: 0:02:18
 Epoch: 119, lr: 1.0e-02, train_loss: 1.2185, train_acc: 0.5552 test_loss: 1.1264, test_acc: 0.5920, best: 0.6126, time: 0:02:18
 Epoch: 120, lr: 1.0e-02, train_loss: 1.2304, train_acc: 0.5490 test_loss: 1.1251, test_acc: 0.5926, best: 0.6126, time: 0:02:18
 Epoch: 121, lr: 1.0e-02, train_loss: 1.2135, train_acc: 0.5556 test_loss: 1.0986, test_acc: 0.6005, best: 0.6126, time: 0:02:18
 Epoch: 122, lr: 1.0e-02, train_loss: 1.2094, train_acc: 0.5596 test_loss: 1.1057, test_acc: 0.6029, best: 0.6126, time: 0:02:18
 Epoch: 123, lr: 1.0e-02, train_loss: 1.1952, train_acc: 0.5740 test_loss: 1.1244, test_acc: 0.5955, best: 0.6126, time: 0:02:18
 Epoch: 124, lr: 1.0e-02, train_loss: 1.1947, train_acc: 0.5610 test_loss: 1.0842, test_acc: 0.6095, best: 0.6126, time: 0:02:18
 Epoch: 125, lr: 1.0e-02, train_loss: 1.1917, train_acc: 0.5708 test_loss: 1.0946, test_acc: 0.6055, best: 0.6126, time: 0:02:18
 Epoch: 126, lr: 1.0e-02, train_loss: 1.1972, train_acc: 0.5602 test_loss: 1.1301, test_acc: 0.5984, best: 0.6126, time: 0:02:18
 Epoch: 127, lr: 1.0e-02, train_loss: 1.1818, train_acc: 0.5718 test_loss: 1.0597, test_acc: 0.6149, best: 0.6149, time: 0:02:19
 Epoch: 128, lr: 1.0e-02, train_loss: 1.1798, train_acc: 0.5694 test_loss: 1.0917, test_acc: 0.5978, best: 0.6149, time: 0:02:18
 Epoch: 129, lr: 1.0e-02, train_loss: 1.1655, train_acc: 0.5766 test_loss: 1.0639, test_acc: 0.6060, best: 0.6149, time: 0:02:18
 Epoch: 130, lr: 1.0e-02, train_loss: 1.1820, train_acc: 0.5760 test_loss: 1.0826, test_acc: 0.6086, best: 0.6149, time: 0:02:18
 Epoch: 131, lr: 1.0e-02, train_loss: 1.1578, train_acc: 0.5808 test_loss: 1.0676, test_acc: 0.6156, best: 0.6156, time: 0:02:19
 Epoch: 132, lr: 1.0e-02, train_loss: 1.1562, train_acc: 0.5834 test_loss: 1.1010, test_acc: 0.5951, best: 0.6156, time: 0:02:18
 Epoch: 133, lr: 1.0e-02, train_loss: 1.1573, train_acc: 0.5778 test_loss: 1.1241, test_acc: 0.5956, best: 0.6156, time: 0:02:18
 Epoch: 134, lr: 1.0e-02, train_loss: 1.1700, train_acc: 0.5750 test_loss: 1.0579, test_acc: 0.6116, best: 0.6156, time: 0:02:18
 Epoch: 135, lr: 1.0e-02, train_loss: 1.1664, train_acc: 0.5744 test_loss: 1.1207, test_acc: 0.5961, best: 0.6156, time: 0:02:18
 Epoch: 136, lr: 1.0e-02, train_loss: 1.1487, train_acc: 0.5868 test_loss: 1.1026, test_acc: 0.6011, best: 0.6156, time: 0:02:18
 Epoch: 137, lr: 1.0e-02, train_loss: 1.1922, train_acc: 0.5656 test_loss: 1.0500, test_acc: 0.6176, best: 0.6176, time: 0:02:18
 Epoch: 138, lr: 1.0e-02, train_loss: 1.1638, train_acc: 0.5832 test_loss: 1.0844, test_acc: 0.6071, best: 0.6176, time: 0:02:18
 Epoch: 139, lr: 1.0e-02, train_loss: 1.1478, train_acc: 0.5832 test_loss: 1.0746, test_acc: 0.6185, best: 0.6185, time: 0:02:18
 Epoch: 140, lr: 1.0e-02, train_loss: 1.1246, train_acc: 0.5894 test_loss: 1.0821, test_acc: 0.6019, best: 0.6185, time: 0:02:18
 Epoch: 141, lr: 1.0e-02, train_loss: 1.1366, train_acc: 0.5838 test_loss: 1.0549, test_acc: 0.6154, best: 0.6185, time: 0:02:18
 Epoch: 142, lr: 1.0e-02, train_loss: 1.1305, train_acc: 0.5834 test_loss: 1.0662, test_acc: 0.6159, best: 0.6185, time: 0:02:18
 Epoch: 143, lr: 1.0e-02, train_loss: 1.1216, train_acc: 0.5992 test_loss: 1.0754, test_acc: 0.6110, best: 0.6185, time: 0:02:18
 Epoch: 144, lr: 1.0e-02, train_loss: 1.1331, train_acc: 0.5902 test_loss: 1.0534, test_acc: 0.6269, best: 0.6269, time: 0:02:18
 Epoch: 145, lr: 1.0e-02, train_loss: 1.1191, train_acc: 0.5936 test_loss: 1.0665, test_acc: 0.6131, best: 0.6269, time: 0:02:17
 Epoch: 146, lr: 1.0e-02, train_loss: 1.1116, train_acc: 0.5928 test_loss: 1.0898, test_acc: 0.6108, best: 0.6269, time: 0:02:17
 Epoch: 147, lr: 1.0e-02, train_loss: 1.1082, train_acc: 0.6080 test_loss: 1.0563, test_acc: 0.6228, best: 0.6269, time: 0:02:17
 Epoch: 148, lr: 1.0e-02, train_loss: 1.1187, train_acc: 0.6014 test_loss: 1.0897, test_acc: 0.6040, best: 0.6269, time: 0:02:18
 Epoch: 149, lr: 1.0e-02, train_loss: 1.1134, train_acc: 0.5938 test_loss: 1.0866, test_acc: 0.6105, best: 0.6269, time: 0:02:18
 Epoch: 150, lr: 1.0e-02, train_loss: 1.0954, train_acc: 0.6050 test_loss: 1.0878, test_acc: 0.6069, best: 0.6269, time: 0:02:18
 Epoch: 151, lr: 1.0e-02, train_loss: 1.1146, train_acc: 0.5916 test_loss: 1.1023, test_acc: 0.6085, best: 0.6269, time: 0:02:18
 Epoch: 152, lr: 1.0e-02, train_loss: 1.1373, train_acc: 0.5924 test_loss: 1.0356, test_acc: 0.6295, best: 0.6295, time: 0:02:18
 Epoch: 153, lr: 1.0e-02, train_loss: 1.1094, train_acc: 0.5914 test_loss: 1.0261, test_acc: 0.6321, best: 0.6321, time: 0:02:18
 Epoch: 154, lr: 1.0e-02, train_loss: 1.1133, train_acc: 0.5984 test_loss: 1.0027, test_acc: 0.6382, best: 0.6382, time: 0:02:18
 Epoch: 155, lr: 1.0e-02, train_loss: 1.0818, train_acc: 0.6072 test_loss: 1.0617, test_acc: 0.6154, best: 0.6382, time: 0:02:18
 Epoch: 156, lr: 1.0e-02, train_loss: 1.0973, train_acc: 0.6004 test_loss: 1.1152, test_acc: 0.5951, best: 0.6382, time: 0:02:18
 Epoch: 157, lr: 1.0e-02, train_loss: 1.0849, train_acc: 0.6144 test_loss: 1.0320, test_acc: 0.6278, best: 0.6382, time: 0:02:18
 Epoch: 158, lr: 1.0e-02, train_loss: 1.0998, train_acc: 0.6034 test_loss: 1.0163, test_acc: 0.6355, best: 0.6382, time: 0:02:18
 Epoch: 159, lr: 1.0e-02, train_loss: 1.0859, train_acc: 0.6070 test_loss: 1.0294, test_acc: 0.6288, best: 0.6382, time: 0:02:18
 Epoch: 160, lr: 1.0e-02, train_loss: 1.0787, train_acc: 0.6142 test_loss: 1.0417, test_acc: 0.6305, best: 0.6382, time: 0:02:18
 Epoch: 161, lr: 1.0e-02, train_loss: 1.0885, train_acc: 0.6084 test_loss: 1.0359, test_acc: 0.6305, best: 0.6382, time: 0:02:17
 Epoch: 162, lr: 1.0e-02, train_loss: 1.0815, train_acc: 0.6188 test_loss: 1.0370, test_acc: 0.6240, best: 0.6382, time: 0:02:18
 Epoch: 163, lr: 1.0e-02, train_loss: 1.0669, train_acc: 0.6204 test_loss: 1.0267, test_acc: 0.6276, best: 0.6382, time: 0:02:18
 Epoch: 164, lr: 1.0e-02, train_loss: 1.0648, train_acc: 0.6196 test_loss: 1.0351, test_acc: 0.6304, best: 0.6382, time: 0:02:18
 Epoch: 165, lr: 1.0e-02, train_loss: 1.0833, train_acc: 0.6074 test_loss: 1.0010, test_acc: 0.6371, best: 0.6382, time: 0:02:18
 Epoch: 166, lr: 1.0e-02, train_loss: 1.0683, train_acc: 0.6150 test_loss: 1.0504, test_acc: 0.6185, best: 0.6382, time: 0:02:18
 Epoch: 167, lr: 1.0e-02, train_loss: 1.0461, train_acc: 0.6234 test_loss: 1.0194, test_acc: 0.6296, best: 0.6382, time: 0:02:18
 Epoch: 168, lr: 1.0e-02, train_loss: 1.0465, train_acc: 0.6178 test_loss: 1.0141, test_acc: 0.6305, best: 0.6382, time: 0:02:18
 Epoch: 169, lr: 1.0e-02, train_loss: 1.0487, train_acc: 0.6226 test_loss: 1.0078, test_acc: 0.6330, best: 0.6382, time: 0:02:18
 Epoch: 170, lr: 1.0e-02, train_loss: 1.0699, train_acc: 0.6104 test_loss: 1.0443, test_acc: 0.6176, best: 0.6382, time: 0:02:18
 Epoch: 171, lr: 1.0e-02, train_loss: 1.0658, train_acc: 0.6102 test_loss: 1.0317, test_acc: 0.6259, best: 0.6382, time: 0:02:18
 Epoch: 172, lr: 1.0e-02, train_loss: 1.0377, train_acc: 0.6250 test_loss: 1.0072, test_acc: 0.6328, best: 0.6382, time: 0:02:18
 Epoch: 173, lr: 1.0e-02, train_loss: 1.0701, train_acc: 0.6080 test_loss: 1.0245, test_acc: 0.6306, best: 0.6382, time: 0:02:18
 Epoch: 174, lr: 1.0e-02, train_loss: 1.0276, train_acc: 0.6274 test_loss: 1.0691, test_acc: 0.6135, best: 0.6382, time: 0:02:18
 Epoch: 175, lr: 1.0e-02, train_loss: 1.0546, train_acc: 0.6186 test_loss: 1.0377, test_acc: 0.6208, best: 0.6382, time: 0:02:18
 Epoch: 176, lr: 1.0e-02, train_loss: 1.0322, train_acc: 0.6410 test_loss: 1.0205, test_acc: 0.6364, best: 0.6382, time: 0:02:18
 Epoch: 177, lr: 1.0e-02, train_loss: 1.0321, train_acc: 0.6290 test_loss: 0.9998, test_acc: 0.6375, best: 0.6382, time: 0:02:18
 Epoch: 178, lr: 1.0e-02, train_loss: 1.0396, train_acc: 0.6290 test_loss: 1.0317, test_acc: 0.6330, best: 0.6382, time: 0:02:18
 Epoch: 179, lr: 1.0e-02, train_loss: 1.0081, train_acc: 0.6404 test_loss: 1.0236, test_acc: 0.6328, best: 0.6382, time: 0:02:18
 Epoch: 180, lr: 2.0e-03, train_loss: 0.9457, train_acc: 0.6652 test_loss: 0.9699, test_acc: 0.6516, best: 0.6516, time: 0:02:18
 Epoch: 181, lr: 2.0e-03, train_loss: 0.9386, train_acc: 0.6624 test_loss: 0.9537, test_acc: 0.6546, best: 0.6546, time: 0:02:18
 Epoch: 182, lr: 2.0e-03, train_loss: 0.9239, train_acc: 0.6630 test_loss: 0.9347, test_acc: 0.6625, best: 0.6625, time: 0:02:18
 Epoch: 183, lr: 2.0e-03, train_loss: 0.8954, train_acc: 0.6742 test_loss: 0.9530, test_acc: 0.6597, best: 0.6625, time: 0:02:18
 Epoch: 184, lr: 2.0e-03, train_loss: 0.9107, train_acc: 0.6688 test_loss: 0.9411, test_acc: 0.6597, best: 0.6625, time: 0:02:18
 Epoch: 185, lr: 2.0e-03, train_loss: 0.9023, train_acc: 0.6732 test_loss: 0.9268, test_acc: 0.6641, best: 0.6641, time: 0:02:18
 Epoch: 186, lr: 2.0e-03, train_loss: 0.8823, train_acc: 0.6782 test_loss: 0.9415, test_acc: 0.6619, best: 0.6641, time: 0:02:18
 Epoch: 187, lr: 2.0e-03, train_loss: 0.8960, train_acc: 0.6760 test_loss: 0.9278, test_acc: 0.6697, best: 0.6697, time: 0:02:18
 Epoch: 188, lr: 2.0e-03, train_loss: 0.9139, train_acc: 0.6706 test_loss: 0.9329, test_acc: 0.6634, best: 0.6697, time: 0:02:18
 Epoch: 189, lr: 2.0e-03, train_loss: 0.8791, train_acc: 0.6838 test_loss: 0.9197, test_acc: 0.6676, best: 0.6697, time: 0:02:18
 Epoch: 190, lr: 2.0e-03, train_loss: 0.8674, train_acc: 0.6950 test_loss: 0.9515, test_acc: 0.6594, best: 0.6697, time: 0:02:18
 Epoch: 191, lr: 2.0e-03, train_loss: 0.8854, train_acc: 0.6880 test_loss: 0.9374, test_acc: 0.6637, best: 0.6697, time: 0:02:18
 Epoch: 192, lr: 2.0e-03, train_loss: 0.8812, train_acc: 0.6858 test_loss: 0.9280, test_acc: 0.6729, best: 0.6729, time: 0:02:18
 Epoch: 193, lr: 2.0e-03, train_loss: 0.8885, train_acc: 0.6790 test_loss: 0.9346, test_acc: 0.6667, best: 0.6729, time: 0:02:18
 Epoch: 194, lr: 2.0e-03, train_loss: 0.8745, train_acc: 0.6860 test_loss: 0.9121, test_acc: 0.6725, best: 0.6729, time: 0:02:18
 Epoch: 195, lr: 2.0e-03, train_loss: 0.8670, train_acc: 0.6834 test_loss: 0.9544, test_acc: 0.6586, best: 0.6729, time: 0:02:18
 Epoch: 196, lr: 2.0e-03, train_loss: 0.8535, train_acc: 0.6932 test_loss: 0.9194, test_acc: 0.6725, best: 0.6729, time: 0:02:18
 Epoch: 197, lr: 2.0e-03, train_loss: 0.8632, train_acc: 0.6954 test_loss: 0.9246, test_acc: 0.6671, best: 0.6729, time: 0:02:18
 Epoch: 198, lr: 2.0e-03, train_loss: 0.8664, train_acc: 0.6902 test_loss: 0.9442, test_acc: 0.6617, best: 0.6729, time: 0:02:18
 Epoch: 199, lr: 2.0e-03, train_loss: 0.8504, train_acc: 0.6966 test_loss: 0.9319, test_acc: 0.6653, best: 0.6729, time: 0:02:18
 Epoch: 200, lr: 2.0e-03, train_loss: 0.8618, train_acc: 0.6946 test_loss: 0.9310, test_acc: 0.6699, best: 0.6729, time: 0:02:18
 Epoch: 201, lr: 2.0e-03, train_loss: 0.8691, train_acc: 0.6904 test_loss: 0.9414, test_acc: 0.6649, best: 0.6729, time: 0:02:18
 Epoch: 202, lr: 2.0e-03, train_loss: 0.8467, train_acc: 0.6946 test_loss: 0.9381, test_acc: 0.6691, best: 0.6729, time: 0:02:18
 Epoch: 203, lr: 2.0e-03, train_loss: 0.8429, train_acc: 0.6998 test_loss: 0.9240, test_acc: 0.6705, best: 0.6729, time: 0:02:18
 Epoch: 204, lr: 2.0e-03, train_loss: 0.8493, train_acc: 0.6990 test_loss: 0.9444, test_acc: 0.6646, best: 0.6729, time: 0:02:18
 Epoch: 205, lr: 2.0e-03, train_loss: 0.8329, train_acc: 0.6972 test_loss: 0.9373, test_acc: 0.6703, best: 0.6729, time: 0:02:18
 Epoch: 206, lr: 2.0e-03, train_loss: 0.8507, train_acc: 0.6940 test_loss: 0.9341, test_acc: 0.6696, best: 0.6729, time: 0:02:18
 Epoch: 207, lr: 2.0e-03, train_loss: 0.8485, train_acc: 0.6956 test_loss: 0.9387, test_acc: 0.6659, best: 0.6729, time: 0:02:18
 Epoch: 208, lr: 2.0e-03, train_loss: 0.8653, train_acc: 0.6874 test_loss: 0.9225, test_acc: 0.6737, best: 0.6737, time: 0:02:18
 Epoch: 209, lr: 2.0e-03, train_loss: 0.8255, train_acc: 0.6988 test_loss: 0.9226, test_acc: 0.6753, best: 0.6753, time: 0:02:18
 Epoch: 210, lr: 2.0e-03, train_loss: 0.8439, train_acc: 0.6992 test_loss: 0.9321, test_acc: 0.6644, best: 0.6753, time: 0:02:18
 Epoch: 211, lr: 2.0e-03, train_loss: 0.8413, train_acc: 0.7056 test_loss: 0.9313, test_acc: 0.6675, best: 0.6753, time: 0:02:18
 Epoch: 212, lr: 2.0e-03, train_loss: 0.8504, train_acc: 0.6984 test_loss: 0.9158, test_acc: 0.6669, best: 0.6753, time: 0:02:17
 Epoch: 213, lr: 2.0e-03, train_loss: 0.8581, train_acc: 0.6916 test_loss: 0.9175, test_acc: 0.6713, best: 0.6753, time: 0:02:18
 Epoch: 214, lr: 2.0e-03, train_loss: 0.8413, train_acc: 0.6974 test_loss: 0.9380, test_acc: 0.6673, best: 0.6753, time: 0:02:18
 Epoch: 215, lr: 2.0e-03, train_loss: 0.8343, train_acc: 0.6988 test_loss: 0.9360, test_acc: 0.6664, best: 0.6753, time: 0:02:18
 Epoch: 216, lr: 2.0e-03, train_loss: 0.8327, train_acc: 0.6966 test_loss: 0.9439, test_acc: 0.6643, best: 0.6753, time: 0:02:18
 Epoch: 217, lr: 2.0e-03, train_loss: 0.8333, train_acc: 0.7004 test_loss: 0.9426, test_acc: 0.6594, best: 0.6753, time: 0:02:18
 Epoch: 218, lr: 2.0e-03, train_loss: 0.8352, train_acc: 0.7024 test_loss: 0.9315, test_acc: 0.6657, best: 0.6753, time: 0:02:18
 Epoch: 219, lr: 2.0e-03, train_loss: 0.8443, train_acc: 0.6976 test_loss: 0.9251, test_acc: 0.6660, best: 0.6753, time: 0:02:18
 Epoch: 220, lr: 2.0e-03, train_loss: 0.8344, train_acc: 0.7000 test_loss: 0.9429, test_acc: 0.6620, best: 0.6753, time: 0:02:18
 Epoch: 221, lr: 2.0e-03, train_loss: 0.8556, train_acc: 0.6970 test_loss: 0.9219, test_acc: 0.6701, best: 0.6753, time: 0:02:18
 Epoch: 222, lr: 2.0e-03, train_loss: 0.8115, train_acc: 0.7130 test_loss: 0.9243, test_acc: 0.6749, best: 0.6753, time: 0:02:18
 Epoch: 223, lr: 2.0e-03, train_loss: 0.8326, train_acc: 0.6994 test_loss: 0.9263, test_acc: 0.6715, best: 0.6753, time: 0:02:17
 Epoch: 224, lr: 2.0e-03, train_loss: 0.8375, train_acc: 0.7068 test_loss: 0.9477, test_acc: 0.6631, best: 0.6753, time: 0:02:18
 Epoch: 225, lr: 2.0e-03, train_loss: 0.8256, train_acc: 0.7078 test_loss: 0.9323, test_acc: 0.6680, best: 0.6753, time: 0:02:18
 Epoch: 226, lr: 2.0e-03, train_loss: 0.8313, train_acc: 0.7020 test_loss: 0.9297, test_acc: 0.6653, best: 0.6753, time: 0:02:18
 Epoch: 227, lr: 2.0e-03, train_loss: 0.8238, train_acc: 0.7040 test_loss: 0.9313, test_acc: 0.6667, best: 0.6753, time: 0:02:18
 Epoch: 228, lr: 2.0e-03, train_loss: 0.8320, train_acc: 0.7048 test_loss: 0.9307, test_acc: 0.6680, best: 0.6753, time: 0:02:18
 Epoch: 229, lr: 2.0e-03, train_loss: 0.8194, train_acc: 0.7066 test_loss: 0.9362, test_acc: 0.6687, best: 0.6753, time: 0:02:18
 Epoch: 230, lr: 2.0e-03, train_loss: 0.8108, train_acc: 0.6978 test_loss: 0.9199, test_acc: 0.6681, best: 0.6753, time: 0:02:17
 Epoch: 231, lr: 2.0e-03, train_loss: 0.8052, train_acc: 0.7118 test_loss: 0.9275, test_acc: 0.6715, best: 0.6753, time: 0:02:18
 Epoch: 232, lr: 2.0e-03, train_loss: 0.8165, train_acc: 0.7058 test_loss: 0.9232, test_acc: 0.6713, best: 0.6753, time: 0:02:18
 Epoch: 233, lr: 2.0e-03, train_loss: 0.8098, train_acc: 0.7082 test_loss: 0.9188, test_acc: 0.6691, best: 0.6753, time: 0:02:18
 Epoch: 234, lr: 2.0e-03, train_loss: 0.8129, train_acc: 0.7064 test_loss: 0.9426, test_acc: 0.6689, best: 0.6753, time: 0:02:17
 Epoch: 235, lr: 2.0e-03, train_loss: 0.8109, train_acc: 0.7096 test_loss: 0.9415, test_acc: 0.6657, best: 0.6753, time: 0:02:18
 Epoch: 236, lr: 2.0e-03, train_loss: 0.8062, train_acc: 0.7092 test_loss: 0.9191, test_acc: 0.6813, best: 0.6813, time: 0:02:18
 Epoch: 237, lr: 2.0e-03, train_loss: 0.8165, train_acc: 0.7066 test_loss: 0.9375, test_acc: 0.6700, best: 0.6813, time: 0:02:18
 Epoch: 238, lr: 2.0e-03, train_loss: 0.8137, train_acc: 0.7060 test_loss: 0.9312, test_acc: 0.6707, best: 0.6813, time: 0:02:18
 Epoch: 239, lr: 2.0e-03, train_loss: 0.8258, train_acc: 0.7002 test_loss: 0.9073, test_acc: 0.6755, best: 0.6813, time: 0:02:18
 Epoch: 240, lr: 4.0e-04, train_loss: 0.7786, train_acc: 0.7184 test_loss: 0.9135, test_acc: 0.6813, best: 0.6813, time: 0:02:18
 Epoch: 241, lr: 4.0e-04, train_loss: 0.7752, train_acc: 0.7232 test_loss: 0.9177, test_acc: 0.6783, best: 0.6813, time: 0:02:18
 Epoch: 242, lr: 4.0e-04, train_loss: 0.8013, train_acc: 0.7148 test_loss: 0.9073, test_acc: 0.6806, best: 0.6813, time: 0:02:18
 Epoch: 243, lr: 4.0e-04, train_loss: 0.7809, train_acc: 0.7208 test_loss: 0.9148, test_acc: 0.6784, best: 0.6813, time: 0:02:17
 Epoch: 244, lr: 4.0e-04, train_loss: 0.7850, train_acc: 0.7200 test_loss: 0.9169, test_acc: 0.6780, best: 0.6813, time: 0:02:18
 Epoch: 245, lr: 4.0e-04, train_loss: 0.7687, train_acc: 0.7212 test_loss: 0.9198, test_acc: 0.6771, best: 0.6813, time: 0:02:17
 Epoch: 246, lr: 4.0e-04, train_loss: 0.7659, train_acc: 0.7236 test_loss: 0.9020, test_acc: 0.6803, best: 0.6813, time: 0:02:18
 Epoch: 247, lr: 4.0e-04, train_loss: 0.7709, train_acc: 0.7312 test_loss: 0.9115, test_acc: 0.6786, best: 0.6813, time: 0:02:18
 Epoch: 248, lr: 4.0e-04, train_loss: 0.7759, train_acc: 0.7218 test_loss: 0.9189, test_acc: 0.6779, best: 0.6813, time: 0:02:18
 Epoch: 249, lr: 4.0e-04, train_loss: 0.7857, train_acc: 0.7178 test_loss: 0.9143, test_acc: 0.6760, best: 0.6813, time: 0:02:18
 Epoch: 250, lr: 4.0e-04, train_loss: 0.7831, train_acc: 0.7210 test_loss: 0.9132, test_acc: 0.6751, best: 0.6813, time: 0:02:18
 Epoch: 251, lr: 4.0e-04, train_loss: 0.7758, train_acc: 0.7232 test_loss: 0.9147, test_acc: 0.6757, best: 0.6813, time: 0:02:18
 Epoch: 252, lr: 4.0e-04, train_loss: 0.7737, train_acc: 0.7308 test_loss: 0.9133, test_acc: 0.6751, best: 0.6813, time: 0:02:18
 Epoch: 253, lr: 4.0e-04, train_loss: 0.7732, train_acc: 0.7278 test_loss: 0.9070, test_acc: 0.6779, best: 0.6813, time: 0:02:17
 Epoch: 254, lr: 4.0e-04, train_loss: 0.7920, train_acc: 0.7144 test_loss: 0.9172, test_acc: 0.6781, best: 0.6813, time: 0:02:18
 Epoch: 255, lr: 4.0e-04, train_loss: 0.7596, train_acc: 0.7256 test_loss: 0.9244, test_acc: 0.6740, best: 0.6813, time: 0:02:18
 Epoch: 256, lr: 4.0e-04, train_loss: 0.7699, train_acc: 0.7272 test_loss: 0.9222, test_acc: 0.6767, best: 0.6813, time: 0:02:18
 Epoch: 257, lr: 4.0e-04, train_loss: 0.7682, train_acc: 0.7266 test_loss: 0.9144, test_acc: 0.6789, best: 0.6813, time: 0:02:18
 Epoch: 258, lr: 4.0e-04, train_loss: 0.7749, train_acc: 0.7222 test_loss: 0.9155, test_acc: 0.6777, best: 0.6813, time: 0:02:18
 Epoch: 259, lr: 4.0e-04, train_loss: 0.7706, train_acc: 0.7270 test_loss: 0.9400, test_acc: 0.6725, best: 0.6813, time: 0:02:18
 Epoch: 260, lr: 4.0e-04, train_loss: 0.7510, train_acc: 0.7332 test_loss: 0.9176, test_acc: 0.6804, best: 0.6813, time: 0:02:18
 Epoch: 261, lr: 4.0e-04, train_loss: 0.7620, train_acc: 0.7242 test_loss: 0.9189, test_acc: 0.6776, best: 0.6813, time: 0:02:18
 Epoch: 262, lr: 4.0e-04, train_loss: 0.7532, train_acc: 0.7298 test_loss: 0.9101, test_acc: 0.6806, best: 0.6813, time: 0:02:18
 Epoch: 263, lr: 4.0e-04, train_loss: 0.7849, train_acc: 0.7204 test_loss: 0.9102, test_acc: 0.6795, best: 0.6813, time: 0:02:18
 Epoch: 264, lr: 4.0e-04, train_loss: 0.7752, train_acc: 0.7210 test_loss: 0.9147, test_acc: 0.6753, best: 0.6813, time: 0:02:18
 Epoch: 265, lr: 4.0e-04, train_loss: 0.7516, train_acc: 0.7286 test_loss: 0.9072, test_acc: 0.6781, best: 0.6813, time: 0:02:18
 Epoch: 266, lr: 4.0e-04, train_loss: 0.7712, train_acc: 0.7284 test_loss: 0.9183, test_acc: 0.6765, best: 0.6813, time: 0:02:18
 Epoch: 267, lr: 4.0e-04, train_loss: 0.7646, train_acc: 0.7338 test_loss: 0.9306, test_acc: 0.6740, best: 0.6813, time: 0:02:18
 Epoch: 268, lr: 4.0e-04, train_loss: 0.7465, train_acc: 0.7336 test_loss: 0.9310, test_acc: 0.6716, best: 0.6813, time: 0:02:18
 Epoch: 269, lr: 4.0e-04, train_loss: 0.7621, train_acc: 0.7300 test_loss: 0.9221, test_acc: 0.6764, best: 0.6813, time: 0:02:18
 Epoch: 270, lr: 8.0e-05, train_loss: 0.7425, train_acc: 0.7388 test_loss: 0.9227, test_acc: 0.6770, best: 0.6813, time: 0:02:18
 Epoch: 271, lr: 8.0e-05, train_loss: 0.7520, train_acc: 0.7274 test_loss: 0.9173, test_acc: 0.6783, best: 0.6813, time: 0:02:18
 Epoch: 272, lr: 8.0e-05, train_loss: 0.7643, train_acc: 0.7256 test_loss: 0.9208, test_acc: 0.6763, best: 0.6813, time: 0:02:18
 Epoch: 273, lr: 8.0e-05, train_loss: 0.7328, train_acc: 0.7408 test_loss: 0.9300, test_acc: 0.6754, best: 0.6813, time: 0:02:17
 Epoch: 274, lr: 8.0e-05, train_loss: 0.7620, train_acc: 0.7370 test_loss: 0.9238, test_acc: 0.6733, best: 0.6813, time: 0:02:18
 Epoch: 275, lr: 8.0e-05, train_loss: 0.7413, train_acc: 0.7312 test_loss: 0.9194, test_acc: 0.6724, best: 0.6813, time: 0:02:17
 Epoch: 276, lr: 8.0e-05, train_loss: 0.7352, train_acc: 0.7424 test_loss: 0.9264, test_acc: 0.6760, best: 0.6813, time: 0:02:18
 Epoch: 277, lr: 8.0e-05, train_loss: 0.7527, train_acc: 0.7354 test_loss: 0.9251, test_acc: 0.6741, best: 0.6813, time: 0:02:18
 Epoch: 278, lr: 8.0e-05, train_loss: 0.7490, train_acc: 0.7382 test_loss: 0.9178, test_acc: 0.6737, best: 0.6813, time: 0:02:18
 Epoch: 279, lr: 8.0e-05, train_loss: 0.7523, train_acc: 0.7310 test_loss: 0.9283, test_acc: 0.6746, best: 0.6813, time: 0:02:18
 Epoch: 280, lr: 8.0e-05, train_loss: 0.7478, train_acc: 0.7362 test_loss: 0.9292, test_acc: 0.6747, best: 0.6813, time: 0:02:18
 Epoch: 281, lr: 8.0e-05, train_loss: 0.7561, train_acc: 0.7268 test_loss: 0.9295, test_acc: 0.6739, best: 0.6813, time: 0:02:18
 Epoch: 282, lr: 8.0e-05, train_loss: 0.7507, train_acc: 0.7292 test_loss: 0.9159, test_acc: 0.6783, best: 0.6813, time: 0:02:18
 Epoch: 283, lr: 8.0e-05, train_loss: 0.7503, train_acc: 0.7396 test_loss: 0.9224, test_acc: 0.6801, best: 0.6813, time: 0:02:18
 Epoch: 284, lr: 8.0e-05, train_loss: 0.7751, train_acc: 0.7222 test_loss: 0.9284, test_acc: 0.6693, best: 0.6813, time: 0:02:18
 Epoch: 285, lr: 8.0e-05, train_loss: 0.7614, train_acc: 0.7374 test_loss: 0.9262, test_acc: 0.6774, best: 0.6813, time: 0:02:18
 Epoch: 286, lr: 8.0e-05, train_loss: 0.7212, train_acc: 0.7462 test_loss: 0.9111, test_acc: 0.6795, best: 0.6813, time: 0:02:18
 Epoch: 287, lr: 8.0e-05, train_loss: 0.7554, train_acc: 0.7264 test_loss: 0.9192, test_acc: 0.6826, best: 0.6826, time: 0:02:18
 Epoch: 288, lr: 8.0e-05, train_loss: 0.7422, train_acc: 0.7350 test_loss: 0.9197, test_acc: 0.6790, best: 0.6826, time: 0:02:18
 Epoch: 289, lr: 8.0e-05, train_loss: 0.7580, train_acc: 0.7252 test_loss: 0.9186, test_acc: 0.6770, best: 0.6826, time: 0:02:18
 Epoch: 290, lr: 8.0e-05, train_loss: 0.7633, train_acc: 0.7292 test_loss: 0.9122, test_acc: 0.6775, best: 0.6826, time: 0:02:18
 Epoch: 291, lr: 8.0e-05, train_loss: 0.7614, train_acc: 0.7332 test_loss: 0.9296, test_acc: 0.6785, best: 0.6826, time: 0:02:18
 Epoch: 292, lr: 8.0e-05, train_loss: 0.7490, train_acc: 0.7268 test_loss: 0.9211, test_acc: 0.6803, best: 0.6826, time: 0:02:18
 Epoch: 293, lr: 8.0e-05, train_loss: 0.7535, train_acc: 0.7304 test_loss: 0.9215, test_acc: 0.6781, best: 0.6826, time: 0:02:18
 Epoch: 294, lr: 8.0e-05, train_loss: 0.7438, train_acc: 0.7378 test_loss: 0.9157, test_acc: 0.6779, best: 0.6826, time: 0:02:18
 Epoch: 295, lr: 8.0e-05, train_loss: 0.7476, train_acc: 0.7362 test_loss: 0.9252, test_acc: 0.6759, best: 0.6826, time: 0:02:18
 Epoch: 296, lr: 8.0e-05, train_loss: 0.7402, train_acc: 0.7278 test_loss: 0.9263, test_acc: 0.6761, best: 0.6826, time: 0:02:18
 Epoch: 297, lr: 8.0e-05, train_loss: 0.7687, train_acc: 0.7248 test_loss: 0.9175, test_acc: 0.6775, best: 0.6826, time: 0:02:18
 Epoch: 298, lr: 8.0e-05, train_loss: 0.7405, train_acc: 0.7396 test_loss: 0.9372, test_acc: 0.6734, best: 0.6826, time: 0:02:18
 Epoch: 299, lr: 8.0e-05, train_loss: 0.7419, train_acc: 0.7376 test_loss: 0.9063, test_acc: 0.6791, best: 0.6826, time: 0:02:18
 Highest accuracy: 0.6826