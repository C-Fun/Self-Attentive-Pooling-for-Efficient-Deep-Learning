
 Run on time: 2022-07-03 17:14:55.808045

 Architecture: mobilenet-nlp_headfix2_nowin-4222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 4,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP_HEADFIX2_NOWIN-4222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=96, out_features=96, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 48)
                  (col_embed): Embedding(256, 48)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.2251, train_acc: 0.1110 test_loss: 2.4299, test_acc: 0.1215, best: 0.1215, time: 0:01:58
 Epoch: 2, lr: 1.0e-02, train_loss: 2.4525, train_acc: 0.1244 test_loss: 2.2449, test_acc: 0.1524, best: 0.1524, time: 0:01:56
 Epoch: 3, lr: 1.0e-02, train_loss: 2.3543, train_acc: 0.1354 test_loss: 2.3240, test_acc: 0.1296, best: 0.1524, time: 0:01:55
 Epoch: 4, lr: 1.0e-02, train_loss: 2.3145, train_acc: 0.1346 test_loss: 2.2353, test_acc: 0.1724, best: 0.1724, time: 0:01:55
 Epoch: 5, lr: 1.0e-02, train_loss: 2.3081, train_acc: 0.1312 test_loss: 2.2480, test_acc: 0.1489, best: 0.1724, time: 0:01:55
 Epoch: 6, lr: 1.0e-02, train_loss: 2.2772, train_acc: 0.1478 test_loss: 2.2637, test_acc: 0.1280, best: 0.1724, time: 0:01:55
 Epoch: 7, lr: 1.0e-02, train_loss: 2.2860, train_acc: 0.1366 test_loss: 2.2806, test_acc: 0.1366, best: 0.1724, time: 0:01:56
 Epoch: 8, lr: 1.0e-02, train_loss: 2.2709, train_acc: 0.1396 test_loss: 2.2607, test_acc: 0.1771, best: 0.1771, time: 0:01:56
 Epoch: 9, lr: 1.0e-02, train_loss: 2.2636, train_acc: 0.1518 test_loss: 2.2572, test_acc: 0.1557, best: 0.1771, time: 0:01:55
 Epoch: 10, lr: 1.0e-02, train_loss: 2.2675, train_acc: 0.1412 test_loss: 2.2555, test_acc: 0.1591, best: 0.1771, time: 0:01:55
 Epoch: 11, lr: 1.0e-02, train_loss: 2.2872, train_acc: 0.1304 test_loss: 2.2607, test_acc: 0.1614, best: 0.1771, time: 0:01:55
 Epoch: 12, lr: 1.0e-02, train_loss: 2.2701, train_acc: 0.1382 test_loss: 2.2415, test_acc: 0.1525, best: 0.1771, time: 0:01:55
 Epoch: 13, lr: 1.0e-02, train_loss: 2.2542, train_acc: 0.1488 test_loss: 2.2607, test_acc: 0.1573, best: 0.1771, time: 0:01:55
 Epoch: 14, lr: 1.0e-02, train_loss: 2.2632, train_acc: 0.1444 test_loss: 2.2533, test_acc: 0.1461, best: 0.1771, time: 0:01:55
 Epoch: 15, lr: 1.0e-02, train_loss: 2.2428, train_acc: 0.1484 test_loss: 2.1962, test_acc: 0.1880, best: 0.1880, time: 0:01:55
 Epoch: 16, lr: 1.0e-02, train_loss: 2.2010, train_acc: 0.1626 test_loss: 2.1544, test_acc: 0.2114, best: 0.2114, time: 0:01:55
 Epoch: 17, lr: 1.0e-02, train_loss: 2.1989, train_acc: 0.1710 test_loss: 2.1835, test_acc: 0.1847, best: 0.2114, time: 0:01:55
 Epoch: 18, lr: 1.0e-02, train_loss: 2.2191, train_acc: 0.1528 test_loss: 2.2330, test_acc: 0.1440, best: 0.2114, time: 0:01:55
 Epoch: 19, lr: 1.0e-02, train_loss: 2.2555, train_acc: 0.1376 test_loss: 2.2398, test_acc: 0.1684, best: 0.2114, time: 0:01:54
 Epoch: 20, lr: 1.0e-02, train_loss: 2.2489, train_acc: 0.1450 test_loss: 2.2055, test_acc: 0.1688, best: 0.2114, time: 0:01:54
 Epoch: 21, lr: 1.0e-02, train_loss: 2.2389, train_acc: 0.1524 test_loss: 2.2319, test_acc: 0.1398, best: 0.2114, time: 0:01:54
 Epoch: 22, lr: 1.0e-02, train_loss: 2.2405, train_acc: 0.1616 test_loss: 2.2525, test_acc: 0.1590, best: 0.2114, time: 0:01:54
 Epoch: 23, lr: 1.0e-02, train_loss: 2.2588, train_acc: 0.1510 test_loss: 2.2469, test_acc: 0.1441, best: 0.2114, time: 0:01:54
 Epoch: 24, lr: 1.0e-02, train_loss: 2.2428, train_acc: 0.1508 test_loss: 2.1929, test_acc: 0.1575, best: 0.2114, time: 0:01:55
 Epoch: 25, lr: 1.0e-02, train_loss: 2.2623, train_acc: 0.1424 test_loss: 2.2686, test_acc: 0.1441, best: 0.2114, time: 0:01:54
 Epoch: 26, lr: 1.0e-02, train_loss: 2.2486, train_acc: 0.1568 test_loss: 2.1866, test_acc: 0.2000, best: 0.2114, time: 0:01:54
 Epoch: 27, lr: 1.0e-02, train_loss: 2.2470, train_acc: 0.1550 test_loss: 2.2205, test_acc: 0.1319, best: 0.2114, time: 0:01:54
 Epoch: 28, lr: 1.0e-02, train_loss: 2.2296, train_acc: 0.1670 test_loss: 2.2315, test_acc: 0.1790, best: 0.2114, time: 0:01:54
 Epoch: 29, lr: 1.0e-02, train_loss: 2.2349, train_acc: 0.1442 test_loss: 2.1978, test_acc: 0.1698, best: 0.2114, time: 0:01:55
 Epoch: 30, lr: 1.0e-02, train_loss: 2.2369, train_acc: 0.1530 test_loss: 2.1975, test_acc: 0.1685, best: 0.2114, time: 0:01:54
 Epoch: 31, lr: 1.0e-02, train_loss: 2.2247, train_acc: 0.1630 test_loss: 2.1973, test_acc: 0.1851, best: 0.2114, time: 0:01:54
 Epoch: 32, lr: 1.0e-02, train_loss: 2.2255, train_acc: 0.1568 test_loss: 2.2210, test_acc: 0.1616, best: 0.2114, time: 0:01:55
 Epoch: 33, lr: 1.0e-02, train_loss: 2.2145, train_acc: 0.1650 test_loss: 2.1775, test_acc: 0.1896, best: 0.2114, time: 0:01:55
 Epoch: 34, lr: 1.0e-02, train_loss: 2.1891, train_acc: 0.1776 test_loss: 2.1634, test_acc: 0.1864, best: 0.2114, time: 0:01:55
 Epoch: 35, lr: 1.0e-02, train_loss: 2.1879, train_acc: 0.1790 test_loss: 2.1554, test_acc: 0.2106, best: 0.2114, time: 0:01:55
 Epoch: 36, lr: 1.0e-02, train_loss: 2.2115, train_acc: 0.1790 test_loss: 2.2987, test_acc: 0.1364, best: 0.2114, time: 0:01:55
 Epoch: 37, lr: 1.0e-02, train_loss: 2.2477, train_acc: 0.1540 test_loss: 2.2045, test_acc: 0.1698, best: 0.2114, time: 0:01:55
 Epoch: 38, lr: 1.0e-02, train_loss: 2.1748, train_acc: 0.1838 test_loss: 2.1463, test_acc: 0.2037, best: 0.2114, time: 0:01:55
 Epoch: 39, lr: 1.0e-02, train_loss: 2.1932, train_acc: 0.1776 test_loss: 2.1449, test_acc: 0.1941, best: 0.2114, time: 0:01:55
 Epoch: 40, lr: 1.0e-02, train_loss: 2.1824, train_acc: 0.1762 test_loss: 2.1658, test_acc: 0.1958, best: 0.2114, time: 0:01:55
 Epoch: 41, lr: 1.0e-02, train_loss: 2.2586, train_acc: 0.1456 test_loss: 2.2184, test_acc: 0.1736, best: 0.2114, time: 0:01:55
 Epoch: 42, lr: 1.0e-02, train_loss: 2.2408, train_acc: 0.1504 test_loss: 2.1946, test_acc: 0.1850, best: 0.2114, time: 0:01:55
 Epoch: 43, lr: 1.0e-02, train_loss: 2.2218, train_acc: 0.1640 test_loss: 2.1666, test_acc: 0.1954, best: 0.2114, time: 0:01:55
 Epoch: 44, lr: 1.0e-02, train_loss: 2.1925, train_acc: 0.1652 test_loss: 2.1598, test_acc: 0.1889, best: 0.2114, time: 0:01:55
 Epoch: 45, lr: 1.0e-02, train_loss: 2.1995, train_acc: 0.1674 test_loss: 2.2254, test_acc: 0.1771, best: 0.2114, time: 0:01:55
 Epoch: 46, lr: 1.0e-02, train_loss: 2.2207, train_acc: 0.1608 test_loss: 2.1682, test_acc: 0.2000, best: 0.2114, time: 0:01:55
 Epoch: 47, lr: 1.0e-02, train_loss: 2.1873, train_acc: 0.1706 test_loss: 2.1195, test_acc: 0.1981, best: 0.2114, time: 0:01:55
 Epoch: 48, lr: 1.0e-02, train_loss: 2.1655, train_acc: 0.1868 test_loss: 2.0896, test_acc: 0.2289, best: 0.2289, time: 0:01:55
 Epoch: 49, lr: 1.0e-02, train_loss: 2.1601, train_acc: 0.1890 test_loss: 2.1602, test_acc: 0.1956, best: 0.2289, time: 0:01:55
 Epoch: 50, lr: 1.0e-02, train_loss: 2.1530, train_acc: 0.1792 test_loss: 2.2072, test_acc: 0.1820, best: 0.2289, time: 0:01:55
 Epoch: 51, lr: 1.0e-02, train_loss: 2.1346, train_acc: 0.1830 test_loss: 2.2040, test_acc: 0.1996, best: 0.2289, time: 0:01:56
 Epoch: 52, lr: 1.0e-02, train_loss: 2.1398, train_acc: 0.1846 test_loss: 2.2979, test_acc: 0.1381, best: 0.2289, time: 0:01:55
 Epoch: 53, lr: 1.0e-02, train_loss: 2.2022, train_acc: 0.1666 test_loss: 2.1331, test_acc: 0.2136, best: 0.2289, time: 0:01:55
 Epoch: 54, lr: 1.0e-02, train_loss: 2.1928, train_acc: 0.1706 test_loss: 2.1765, test_acc: 0.2071, best: 0.2289, time: 0:01:55
 Epoch: 55, lr: 1.0e-02, train_loss: 2.1810, train_acc: 0.1752 test_loss: 2.2065, test_acc: 0.1675, best: 0.2289, time: 0:01:55
 Epoch: 56, lr: 1.0e-02, train_loss: 2.2466, train_acc: 0.1466 test_loss: 2.2422, test_acc: 0.1649, best: 0.2289, time: 0:01:54
 Epoch: 57, lr: 1.0e-02, train_loss: 2.2341, train_acc: 0.1600 test_loss: 2.2590, test_acc: 0.1542, best: 0.2289, time: 0:01:55
 Epoch: 58, lr: 1.0e-02, train_loss: 2.2300, train_acc: 0.1568 test_loss: 2.1896, test_acc: 0.1699, best: 0.2289, time: 0:01:55
 Epoch: 59, lr: 1.0e-02, train_loss: 2.2218, train_acc: 0.1568 test_loss: 2.1467, test_acc: 0.1916, best: 0.2289, time: 0:01:55
 Epoch: 60, lr: 1.0e-02, train_loss: 2.1886, train_acc: 0.1702 test_loss: 2.1724, test_acc: 0.1797, best: 0.2289, time: 0:01:54
 Epoch: 61, lr: 1.0e-02, train_loss: 2.2077, train_acc: 0.1584 test_loss: 2.1771, test_acc: 0.1796, best: 0.2289, time: 0:01:54
 Epoch: 62, lr: 1.0e-02, train_loss: 2.1773, train_acc: 0.1722 test_loss: 2.1285, test_acc: 0.1832, best: 0.2289, time: 0:01:54
 Epoch: 63, lr: 1.0e-02, train_loss: 2.1791, train_acc: 0.1722 test_loss: 2.1464, test_acc: 0.2079, best: 0.2289, time: 0:01:54
 Epoch: 64, lr: 1.0e-02, train_loss: 2.1894, train_acc: 0.1642 test_loss: 2.1204, test_acc: 0.2185, best: 0.2289, time: 0:01:55
 Epoch: 65, lr: 1.0e-02, train_loss: 2.1604, train_acc: 0.1790 test_loss: 2.1119, test_acc: 0.1834, best: 0.2289, time: 0:01:55
 Epoch: 66, lr: 1.0e-02, train_loss: 2.1766, train_acc: 0.1760 test_loss: 2.1136, test_acc: 0.1994, best: 0.2289, time: 0:01:55
 Epoch: 67, lr: 1.0e-02, train_loss: 2.1674, train_acc: 0.1806 test_loss: 2.1453, test_acc: 0.1910, best: 0.2289, time: 0:01:55
 Epoch: 68, lr: 1.0e-02, train_loss: 2.1704, train_acc: 0.1822 test_loss: 2.1039, test_acc: 0.2052, best: 0.2289, time: 0:01:54
 Epoch: 69, lr: 1.0e-02, train_loss: 2.1373, train_acc: 0.1892 test_loss: 2.0567, test_acc: 0.2359, best: 0.2359, time: 0:01:55
 Epoch: 70, lr: 1.0e-02, train_loss: 2.1153, train_acc: 0.1982 test_loss: 2.0670, test_acc: 0.2198, best: 0.2359, time: 0:01:55
 Epoch: 71, lr: 1.0e-02, train_loss: 2.1741, train_acc: 0.1746 test_loss: 2.1727, test_acc: 0.1740, best: 0.2359, time: 0:01:55
 Epoch: 72, lr: 1.0e-02, train_loss: 2.1678, train_acc: 0.1798 test_loss: 2.1665, test_acc: 0.2031, best: 0.2359, time: 0:01:55
 Epoch: 73, lr: 1.0e-02, train_loss: 2.1466, train_acc: 0.1778 test_loss: 2.1193, test_acc: 0.2072, best: 0.2359, time: 0:01:55
 Epoch: 74, lr: 1.0e-02, train_loss: 2.1321, train_acc: 0.1912 test_loss: 2.1047, test_acc: 0.2062, best: 0.2359, time: 0:01:54
 Epoch: 75, lr: 1.0e-02, train_loss: 2.1038, train_acc: 0.2012 test_loss: 2.0454, test_acc: 0.2446, best: 0.2446, time: 0:01:55
 Epoch: 76, lr: 1.0e-02, train_loss: 2.0672, train_acc: 0.2130 test_loss: 2.0714, test_acc: 0.2345, best: 0.2446, time: 0:01:54
 Epoch: 77, lr: 1.0e-02, train_loss: 2.0700, train_acc: 0.2056 test_loss: 2.0339, test_acc: 0.2440, best: 0.2446, time: 0:01:55
 Epoch: 78, lr: 1.0e-02, train_loss: 2.0633, train_acc: 0.2126 test_loss: 2.0144, test_acc: 0.2545, best: 0.2545, time: 0:01:55
 Epoch: 79, lr: 1.0e-02, train_loss: 2.0711, train_acc: 0.2134 test_loss: 2.0126, test_acc: 0.2461, best: 0.2545, time: 0:01:55
 Epoch: 80, lr: 1.0e-02, train_loss: 2.0470, train_acc: 0.2256 test_loss: 1.9757, test_acc: 0.2704, best: 0.2704, time: 0:01:55
 Epoch: 81, lr: 1.0e-02, train_loss: 2.0585, train_acc: 0.2118 test_loss: 2.0600, test_acc: 0.2321, best: 0.2704, time: 0:01:54
 Epoch: 82, lr: 1.0e-02, train_loss: 2.0413, train_acc: 0.2288 test_loss: 2.0266, test_acc: 0.2409, best: 0.2704, time: 0:01:54
 Epoch: 83, lr: 1.0e-02, train_loss: 2.0721, train_acc: 0.2102 test_loss: 2.0338, test_acc: 0.2499, best: 0.2704, time: 0:01:55
 Epoch: 84, lr: 1.0e-02, train_loss: 2.1019, train_acc: 0.2096 test_loss: 2.0559, test_acc: 0.2331, best: 0.2704, time: 0:01:55
 Epoch: 85, lr: 1.0e-02, train_loss: 2.1188, train_acc: 0.2116 test_loss: 2.1229, test_acc: 0.2006, best: 0.2704, time: 0:01:55
 Epoch: 86, lr: 1.0e-02, train_loss: 2.0894, train_acc: 0.2176 test_loss: 2.0623, test_acc: 0.2455, best: 0.2704, time: 0:01:54
 Epoch: 87, lr: 1.0e-02, train_loss: 2.0768, train_acc: 0.2100 test_loss: 2.0715, test_acc: 0.2346, best: 0.2704, time: 0:01:54
 Epoch: 88, lr: 1.0e-02, train_loss: 2.0776, train_acc: 0.2074 test_loss: 1.9917, test_acc: 0.2574, best: 0.2704, time: 0:01:55
 Epoch: 89, lr: 1.0e-02, train_loss: 2.0481, train_acc: 0.2198 test_loss: 2.0518, test_acc: 0.2352, best: 0.2704, time: 0:01:54
 Epoch: 90, lr: 1.0e-02, train_loss: 2.0740, train_acc: 0.2046 test_loss: 2.1776, test_acc: 0.1739, best: 0.2704, time: 0:01:54
 Epoch: 91, lr: 1.0e-02, train_loss: 2.1613, train_acc: 0.1768 test_loss: 2.1793, test_acc: 0.1984, best: 0.2704, time: 0:01:54
 Epoch: 92, lr: 1.0e-02, train_loss: 2.1262, train_acc: 0.1956 test_loss: 2.0920, test_acc: 0.2343, best: 0.2704, time: 0:01:54
 Epoch: 93, lr: 1.0e-02, train_loss: 2.0926, train_acc: 0.1984 test_loss: 2.0668, test_acc: 0.2106, best: 0.2704, time: 0:01:55
 Epoch: 94, lr: 1.0e-02, train_loss: 2.0982, train_acc: 0.1938 test_loss: 2.0575, test_acc: 0.2281, best: 0.2704, time: 0:01:55
 Epoch: 95, lr: 1.0e-02, train_loss: 2.1058, train_acc: 0.1928 test_loss: 2.0829, test_acc: 0.2264, best: 0.2704, time: 0:01:54
 Epoch: 96, lr: 1.0e-02, train_loss: 2.0689, train_acc: 0.2094 test_loss: 1.9925, test_acc: 0.2394, best: 0.2704, time: 0:01:55
 Epoch: 97, lr: 1.0e-02, train_loss: 2.0462, train_acc: 0.2172 test_loss: 2.0174, test_acc: 0.2331, best: 0.2704, time: 0:01:54
 Epoch: 98, lr: 1.0e-02, train_loss: 2.0410, train_acc: 0.2130 test_loss: 2.0166, test_acc: 0.2135, best: 0.2704, time: 0:01:54
 Epoch: 99, lr: 1.0e-02, train_loss: 2.0192, train_acc: 0.2206 test_loss: 1.9897, test_acc: 0.2188, best: 0.2704, time: 0:01:54
 Epoch: 100, lr: 1.0e-02, train_loss: 2.0231, train_acc: 0.2204 test_loss: 2.0242, test_acc: 0.2467, best: 0.2704, time: 0:01:55
 Epoch: 101, lr: 1.0e-02, train_loss: 2.0038, train_acc: 0.2332 test_loss: 1.9537, test_acc: 0.2662, best: 0.2704, time: 0:01:54
 Epoch: 102, lr: 1.0e-02, train_loss: 1.9984, train_acc: 0.2376 test_loss: 2.0111, test_acc: 0.2271, best: 0.2704, time: 0:01:54
 Epoch: 103, lr: 1.0e-02, train_loss: 1.9794, train_acc: 0.2292 test_loss: 1.9803, test_acc: 0.2481, best: 0.2704, time: 0:01:55
 Epoch: 104, lr: 1.0e-02, train_loss: 2.0014, train_acc: 0.2270 test_loss: 1.9945, test_acc: 0.2360, best: 0.2704, time: 0:01:54
 Epoch: 105, lr: 1.0e-02, train_loss: 1.9983, train_acc: 0.2368 test_loss: 1.9899, test_acc: 0.2651, best: 0.2704, time: 0:01:54
 Epoch: 106, lr: 1.0e-02, train_loss: 1.9992, train_acc: 0.2352 test_loss: 1.9919, test_acc: 0.2405, best: 0.2704, time: 0:01:55
 Epoch: 107, lr: 1.0e-02, train_loss: 1.9944, train_acc: 0.2320 test_loss: 2.0162, test_acc: 0.2452, best: 0.2704, time: 0:01:54
 Epoch: 108, lr: 1.0e-02, train_loss: 1.9949, train_acc: 0.2414 test_loss: 2.0494, test_acc: 0.2291, best: 0.2704, time: 0:01:54
 Epoch: 109, lr: 1.0e-02, train_loss: 1.9947, train_acc: 0.2368 test_loss: 1.9913, test_acc: 0.2799, best: 0.2799, time: 0:01:55
 Epoch: 110, lr: 1.0e-02, train_loss: 1.9859, train_acc: 0.2386 test_loss: 1.9857, test_acc: 0.2308, best: 0.2799, time: 0:01:54
 Epoch: 111, lr: 1.0e-02, train_loss: 1.9824, train_acc: 0.2348 test_loss: 1.9828, test_acc: 0.2476, best: 0.2799, time: 0:01:55
 Epoch: 112, lr: 1.0e-02, train_loss: 1.9815, train_acc: 0.2440 test_loss: 1.9311, test_acc: 0.2607, best: 0.2799, time: 0:01:55
 Epoch: 113, lr: 1.0e-02, train_loss: 1.9737, train_acc: 0.2468 test_loss: 1.9318, test_acc: 0.2720, best: 0.2799, time: 0:01:54
 Epoch: 114, lr: 1.0e-02, train_loss: 1.9486, train_acc: 0.2444 test_loss: 1.9185, test_acc: 0.2836, best: 0.2836, time: 0:01:54
 Epoch: 115, lr: 1.0e-02, train_loss: 1.9500, train_acc: 0.2470 test_loss: 1.9821, test_acc: 0.2356, best: 0.2836, time: 0:01:54
 Epoch: 116, lr: 1.0e-02, train_loss: 1.9704, train_acc: 0.2380 test_loss: 2.1302, test_acc: 0.1946, best: 0.2836, time: 0:01:54
 Epoch: 117, lr: 1.0e-02, train_loss: 1.9891, train_acc: 0.2388 test_loss: 1.9597, test_acc: 0.2719, best: 0.2836, time: 0:01:54
 Epoch: 118, lr: 1.0e-02, train_loss: 1.9573, train_acc: 0.2508 test_loss: 1.9240, test_acc: 0.2749, best: 0.2836, time: 0:01:54
 Epoch: 119, lr: 1.0e-02, train_loss: 1.9893, train_acc: 0.2316 test_loss: 1.9181, test_acc: 0.2772, best: 0.2836, time: 0:01:54
 Epoch: 120, lr: 1.0e-02, train_loss: 1.9591, train_acc: 0.2430 test_loss: 1.9269, test_acc: 0.2689, best: 0.2836, time: 0:01:54
 Epoch: 121, lr: 1.0e-02, train_loss: 1.9731, train_acc: 0.2442 test_loss: 2.0130, test_acc: 0.2251, best: 0.2836, time: 0:01:54
 Epoch: 122, lr: 1.0e-02, train_loss: 2.0599, train_acc: 0.2266 test_loss: 2.0682, test_acc: 0.2366, best: 0.2836, time: 0:01:54
 Epoch: 123, lr: 1.0e-02, train_loss: 2.0924, train_acc: 0.2034 test_loss: 2.0286, test_acc: 0.2422, best: 0.2836, time: 0:01:54
 Epoch: 124, lr: 1.0e-02, train_loss: 2.1571, train_acc: 0.1776 test_loss: 2.0708, test_acc: 0.2015, best: 0.2836, time: 0:01:54
 Epoch: 125, lr: 1.0e-02, train_loss: 2.1074, train_acc: 0.1978 test_loss: 2.0710, test_acc: 0.2121, best: 0.2836, time: 0:01:54
 Epoch: 126, lr: 1.0e-02, train_loss: 2.0897, train_acc: 0.2006 test_loss: 2.0183, test_acc: 0.2333, best: 0.2836, time: 0:01:54
 Epoch: 127, lr: 1.0e-02, train_loss: 2.0586, train_acc: 0.2186 test_loss: 2.0091, test_acc: 0.2469, best: 0.2836, time: 0:01:54
 Epoch: 128, lr: 1.0e-02, train_loss: 2.0370, train_acc: 0.2266 test_loss: 1.9720, test_acc: 0.2521, best: 0.2836, time: 0:01:55
 Epoch: 129, lr: 1.0e-02, train_loss: 2.0407, train_acc: 0.2236 test_loss: 2.0010, test_acc: 0.2475, best: 0.2836, time: 0:01:55
 Epoch: 130, lr: 1.0e-02, train_loss: 2.0269, train_acc: 0.2246 test_loss: 1.9202, test_acc: 0.2557, best: 0.2836, time: 0:01:55
 Epoch: 131, lr: 1.0e-02, train_loss: 2.0443, train_acc: 0.2154 test_loss: 1.9840, test_acc: 0.2567, best: 0.2836, time: 0:01:54
 Epoch: 132, lr: 1.0e-02, train_loss: 2.0461, train_acc: 0.2094 test_loss: 1.9700, test_acc: 0.2666, best: 0.2836, time: 0:01:54
 Epoch: 133, lr: 1.0e-02, train_loss: 2.0474, train_acc: 0.2280 test_loss: 1.9517, test_acc: 0.2674, best: 0.2836, time: 0:01:54
 Epoch: 134, lr: 1.0e-02, train_loss: 2.0271, train_acc: 0.2372 test_loss: 1.9923, test_acc: 0.2293, best: 0.2836, time: 0:01:54
 Epoch: 135, lr: 1.0e-02, train_loss: 2.0230, train_acc: 0.2296 test_loss: 2.0177, test_acc: 0.2675, best: 0.2836, time: 0:01:54
 Epoch: 136, lr: 1.0e-02, train_loss: 2.0021, train_acc: 0.2432 test_loss: 1.9632, test_acc: 0.2800, best: 0.2836, time: 0:01:55
 Epoch: 137, lr: 1.0e-02, train_loss: 2.0001, train_acc: 0.2316 test_loss: 1.9621, test_acc: 0.2780, best: 0.2836, time: 0:01:55
 Epoch: 138, lr: 1.0e-02, train_loss: 2.0130, train_acc: 0.2332 test_loss: 1.9518, test_acc: 0.2921, best: 0.2921, time: 0:01:55
 Epoch: 139, lr: 1.0e-02, train_loss: 1.9820, train_acc: 0.2386 test_loss: 1.9364, test_acc: 0.2760, best: 0.2921, time: 0:01:54
 Epoch: 140, lr: 1.0e-02, train_loss: 1.9769, train_acc: 0.2462 test_loss: 1.9694, test_acc: 0.3019, best: 0.3019, time: 0:01:55
 Epoch: 141, lr: 1.0e-02, train_loss: 2.0230, train_acc: 0.2322 test_loss: 2.0258, test_acc: 0.2674, best: 0.3019, time: 0:01:54
 Epoch: 142, lr: 1.0e-02, train_loss: 2.0060, train_acc: 0.2436 test_loss: 1.9433, test_acc: 0.2906, best: 0.3019, time: 0:01:54
 Epoch: 143, lr: 1.0e-02, train_loss: 2.0141, train_acc: 0.2372 test_loss: 1.9294, test_acc: 0.3064, best: 0.3064, time: 0:01:55
 Epoch: 144, lr: 1.0e-02, train_loss: 2.0021, train_acc: 0.2398 test_loss: 1.9822, test_acc: 0.2993, best: 0.3064, time: 0:01:55
 Epoch: 145, lr: 1.0e-02, train_loss: 2.0403, train_acc: 0.2210 test_loss: 1.9666, test_acc: 0.3031, best: 0.3064, time: 0:01:55
 Epoch: 146, lr: 1.0e-02, train_loss: 1.9949, train_acc: 0.2540 test_loss: 1.9392, test_acc: 0.2960, best: 0.3064, time: 0:01:55
 Epoch: 147, lr: 1.0e-02, train_loss: 1.9806, train_acc: 0.2450 test_loss: 1.8850, test_acc: 0.3079, best: 0.3079, time: 0:01:55
 Epoch: 148, lr: 1.0e-02, train_loss: 1.9707, train_acc: 0.2572 test_loss: 1.8666, test_acc: 0.3277, best: 0.3277, time: 0:01:55
 Epoch: 149, lr: 1.0e-02, train_loss: 1.9750, train_acc: 0.2502 test_loss: 1.8992, test_acc: 0.2969, best: 0.3277, time: 0:01:54
 Epoch: 150, lr: 1.0e-02, train_loss: 1.9543, train_acc: 0.2600 test_loss: 1.9181, test_acc: 0.3096, best: 0.3277, time: 0:01:55
 Epoch: 151, lr: 1.0e-02, train_loss: 1.9572, train_acc: 0.2576 test_loss: 1.8494, test_acc: 0.2931, best: 0.3277, time: 0:01:55
 Epoch: 152, lr: 1.0e-02, train_loss: 1.9519, train_acc: 0.2574 test_loss: 1.9080, test_acc: 0.2946, best: 0.3277, time: 0:01:54
 Epoch: 153, lr: 1.0e-02, train_loss: 1.9616, train_acc: 0.2556 test_loss: 1.8845, test_acc: 0.3232, best: 0.3277, time: 0:01:54
 Epoch: 154, lr: 1.0e-02, train_loss: 1.9888, train_acc: 0.2458 test_loss: 1.9768, test_acc: 0.2834, best: 0.3277, time: 0:01:55
 Epoch: 155, lr: 1.0e-02, train_loss: 2.0039, train_acc: 0.2394 test_loss: 1.9209, test_acc: 0.3035, best: 0.3277, time: 0:01:55
 Epoch: 156, lr: 1.0e-02, train_loss: 1.9741, train_acc: 0.2412 test_loss: 2.0163, test_acc: 0.2599, best: 0.3277, time: 0:01:54
 Epoch: 157, lr: 1.0e-02, train_loss: 1.9784, train_acc: 0.2514 test_loss: 1.9056, test_acc: 0.3004, best: 0.3277, time: 0:01:54
 Epoch: 158, lr: 1.0e-02, train_loss: 1.9719, train_acc: 0.2432 test_loss: 1.9505, test_acc: 0.2727, best: 0.3277, time: 0:01:54
 Epoch: 159, lr: 1.0e-02, train_loss: 1.9602, train_acc: 0.2524 test_loss: 2.0220, test_acc: 0.2431, best: 0.3277, time: 0:01:54
 Epoch: 160, lr: 1.0e-02, train_loss: 2.0060, train_acc: 0.2486 test_loss: 1.9312, test_acc: 0.3104, best: 0.3277, time: 0:01:55
 Epoch: 161, lr: 1.0e-02, train_loss: 1.9830, train_acc: 0.2472 test_loss: 1.9457, test_acc: 0.2976, best: 0.3277, time: 0:01:55
 Epoch: 162, lr: 1.0e-02, train_loss: 1.9616, train_acc: 0.2522 test_loss: 1.9278, test_acc: 0.3026, best: 0.3277, time: 0:01:54
 Epoch: 163, lr: 1.0e-02, train_loss: 1.9475, train_acc: 0.2586 test_loss: 1.9235, test_acc: 0.2994, best: 0.3277, time: 0:01:54
 Epoch: 164, lr: 1.0e-02, train_loss: 1.9364, train_acc: 0.2674 test_loss: 1.9050, test_acc: 0.3064, best: 0.3277, time: 0:01:54
 Epoch: 165, lr: 1.0e-02, train_loss: 1.9546, train_acc: 0.2526 test_loss: 1.9107, test_acc: 0.3136, best: 0.3277, time: 0:01:54
 Epoch: 166, lr: 1.0e-02, train_loss: 1.9641, train_acc: 0.2544 test_loss: 1.9084, test_acc: 0.2724, best: 0.3277, time: 0:01:54
 Epoch: 167, lr: 1.0e-02, train_loss: 1.9495, train_acc: 0.2596 test_loss: 1.8710, test_acc: 0.2901, best: 0.3277, time: 0:01:54
 Epoch: 168, lr: 1.0e-02, train_loss: 1.9993, train_acc: 0.2432 test_loss: 2.0187, test_acc: 0.2509, best: 0.3277, time: 0:01:54
 Epoch: 169, lr: 1.0e-02, train_loss: 2.0187, train_acc: 0.2340 test_loss: 1.9291, test_acc: 0.2727, best: 0.3277, time: 0:01:55
 Epoch: 170, lr: 1.0e-02, train_loss: 1.9734, train_acc: 0.2438 test_loss: 1.9176, test_acc: 0.2824, best: 0.3277, time: 0:01:54
 Epoch: 171, lr: 1.0e-02, train_loss: 1.9666, train_acc: 0.2482 test_loss: 1.8728, test_acc: 0.3040, best: 0.3277, time: 0:01:55
 Epoch: 172, lr: 1.0e-02, train_loss: 1.9685, train_acc: 0.2428 test_loss: 1.9573, test_acc: 0.2831, best: 0.3277, time: 0:01:54
 Epoch: 173, lr: 1.0e-02, train_loss: 1.9590, train_acc: 0.2474 test_loss: 1.8963, test_acc: 0.2935, best: 0.3277, time: 0:01:54
 Epoch: 174, lr: 1.0e-02, train_loss: 1.9670, train_acc: 0.2446 test_loss: 1.9721, test_acc: 0.2430, best: 0.3277, time: 0:01:55
 Epoch: 175, lr: 1.0e-02, train_loss: 1.9862, train_acc: 0.2418 test_loss: 1.9469, test_acc: 0.2815, best: 0.3277, time: 0:01:54
 Epoch: 176, lr: 1.0e-02, train_loss: 1.9726, train_acc: 0.2452 test_loss: 1.9457, test_acc: 0.2815, best: 0.3277, time: 0:01:54
 Epoch: 177, lr: 1.0e-02, train_loss: 1.9800, train_acc: 0.2468 test_loss: 1.9446, test_acc: 0.2674, best: 0.3277, time: 0:01:55
 Epoch: 178, lr: 1.0e-02, train_loss: 1.9542, train_acc: 0.2440 test_loss: 1.9492, test_acc: 0.2624, best: 0.3277, time: 0:01:54
 Epoch: 179, lr: 1.0e-02, train_loss: 1.9446, train_acc: 0.2548 test_loss: 1.9534, test_acc: 0.2429, best: 0.3277, time: 0:01:54
 Epoch: 180, lr: 2.0e-03, train_loss: 1.9834, train_acc: 0.2348 test_loss: 1.8888, test_acc: 0.2874, best: 0.3277, time: 0:01:54
 Epoch: 181, lr: 2.0e-03, train_loss: 1.9737, train_acc: 0.2420 test_loss: 1.8968, test_acc: 0.2883, best: 0.3277, time: 0:01:54
 Epoch: 182, lr: 2.0e-03, train_loss: 1.9695, train_acc: 0.2460 test_loss: 1.9134, test_acc: 0.3054, best: 0.3277, time: 0:01:54
 Epoch: 183, lr: 2.0e-03, train_loss: 1.9497, train_acc: 0.2608 test_loss: 1.8929, test_acc: 0.3039, best: 0.3277, time: 0:01:54
 Epoch: 184, lr: 2.0e-03, train_loss: 1.9381, train_acc: 0.2532 test_loss: 1.8801, test_acc: 0.3040, best: 0.3277, time: 0:01:54
 Epoch: 185, lr: 2.0e-03, train_loss: 1.9325, train_acc: 0.2592 test_loss: 1.8903, test_acc: 0.2970, best: 0.3277, time: 0:01:55
 Epoch: 186, lr: 2.0e-03, train_loss: 1.9391, train_acc: 0.2608 test_loss: 1.9033, test_acc: 0.3124, best: 0.3277, time: 0:01:54
 Epoch: 187, lr: 2.0e-03, train_loss: 1.9339, train_acc: 0.2512 test_loss: 1.8996, test_acc: 0.3135, best: 0.3277, time: 0:01:55
 Epoch: 188, lr: 2.0e-03, train_loss: 1.9146, train_acc: 0.2584 test_loss: 1.8897, test_acc: 0.3199, best: 0.3277, time: 0:01:54
 Epoch: 189, lr: 2.0e-03, train_loss: 1.9282, train_acc: 0.2696 test_loss: 1.8823, test_acc: 0.3065, best: 0.3277, time: 0:01:54
 Epoch: 190, lr: 2.0e-03, train_loss: 1.9248, train_acc: 0.2600 test_loss: 1.8750, test_acc: 0.3175, best: 0.3277, time: 0:01:54
 Epoch: 191, lr: 2.0e-03, train_loss: 1.9127, train_acc: 0.2688 test_loss: 1.9124, test_acc: 0.3083, best: 0.3277, time: 0:01:54
 Epoch: 192, lr: 2.0e-03, train_loss: 1.8955, train_acc: 0.2722 test_loss: 1.8617, test_acc: 0.3149, best: 0.3277, time: 0:01:54
 Epoch: 193, lr: 2.0e-03, train_loss: 1.8972, train_acc: 0.2708 test_loss: 1.8838, test_acc: 0.3124, best: 0.3277, time: 0:01:54
 Epoch: 194, lr: 2.0e-03, train_loss: 1.9130, train_acc: 0.2634 test_loss: 1.8648, test_acc: 0.3320, best: 0.3320, time: 0:01:55
 Epoch: 195, lr: 2.0e-03, train_loss: 1.8944, train_acc: 0.2780 test_loss: 1.8511, test_acc: 0.3184, best: 0.3320, time: 0:01:54
 Epoch: 196, lr: 2.0e-03, train_loss: 1.8993, train_acc: 0.2756 test_loss: 1.8248, test_acc: 0.3400, best: 0.3400, time: 0:01:55
 Epoch: 197, lr: 2.0e-03, train_loss: 1.8995, train_acc: 0.2612 test_loss: 1.8555, test_acc: 0.3221, best: 0.3400, time: 0:01:54
 Epoch: 198, lr: 2.0e-03, train_loss: 1.8951, train_acc: 0.2794 test_loss: 1.8689, test_acc: 0.3269, best: 0.3400, time: 0:01:55
 Epoch: 199, lr: 2.0e-03, train_loss: 1.8813, train_acc: 0.2884 test_loss: 1.8590, test_acc: 0.3307, best: 0.3400, time: 0:01:55
 Epoch: 200, lr: 2.0e-03, train_loss: 1.9015, train_acc: 0.2712 test_loss: 1.8597, test_acc: 0.3202, best: 0.3400, time: 0:01:54
 Epoch: 201, lr: 2.0e-03, train_loss: 1.8993, train_acc: 0.2734 test_loss: 1.8403, test_acc: 0.3316, best: 0.3400, time: 0:01:54
 Epoch: 202, lr: 2.0e-03, train_loss: 1.8835, train_acc: 0.2780 test_loss: 1.8610, test_acc: 0.3187, best: 0.3400, time: 0:01:54
 Epoch: 203, lr: 2.0e-03, train_loss: 1.8745, train_acc: 0.2866 test_loss: 1.8321, test_acc: 0.3255, best: 0.3400, time: 0:01:55
 Epoch: 204, lr: 2.0e-03, train_loss: 1.9031, train_acc: 0.2714 test_loss: 1.8262, test_acc: 0.3429, best: 0.3429, time: 0:01:55
 Epoch: 205, lr: 2.0e-03, train_loss: 1.8760, train_acc: 0.2790 test_loss: 1.8207, test_acc: 0.3285, best: 0.3429, time: 0:01:55
 Epoch: 206, lr: 2.0e-03, train_loss: 1.8871, train_acc: 0.2720 test_loss: 1.8531, test_acc: 0.3276, best: 0.3429, time: 0:01:54
 Epoch: 207, lr: 2.0e-03, train_loss: 1.8721, train_acc: 0.2842 test_loss: 1.8715, test_acc: 0.3262, best: 0.3429, time: 0:01:54
 Epoch: 208, lr: 2.0e-03, train_loss: 1.8890, train_acc: 0.2834 test_loss: 1.9197, test_acc: 0.3075, best: 0.3429, time: 0:01:55
 Epoch: 209, lr: 2.0e-03, train_loss: 1.8786, train_acc: 0.2866 test_loss: 1.8835, test_acc: 0.3141, best: 0.3429, time: 0:01:54
 Epoch: 210, lr: 2.0e-03, train_loss: 1.8734, train_acc: 0.2758 test_loss: 1.8608, test_acc: 0.3089, best: 0.3429, time: 0:01:54
 Epoch: 211, lr: 2.0e-03, train_loss: 1.8589, train_acc: 0.2854 test_loss: 1.8424, test_acc: 0.3142, best: 0.3429, time: 0:01:54
 Epoch: 212, lr: 2.0e-03, train_loss: 1.8639, train_acc: 0.2758 test_loss: 1.8414, test_acc: 0.3307, best: 0.3429, time: 0:01:54
 Epoch: 213, lr: 2.0e-03, train_loss: 1.8954, train_acc: 0.2756 test_loss: 1.8197, test_acc: 0.3261, best: 0.3429, time: 0:01:54
 Epoch: 214, lr: 2.0e-03, train_loss: 1.8637, train_acc: 0.2804 test_loss: 1.8449, test_acc: 0.3259, best: 0.3429, time: 0:01:55
 Epoch: 215, lr: 2.0e-03, train_loss: 1.8773, train_acc: 0.2820 test_loss: 1.8236, test_acc: 0.3326, best: 0.3429, time: 0:01:55
 Epoch: 216, lr: 2.0e-03, train_loss: 1.8745, train_acc: 0.2816 test_loss: 1.8335, test_acc: 0.3320, best: 0.3429, time: 0:01:55
 Epoch: 217, lr: 2.0e-03, train_loss: 1.8794, train_acc: 0.2772 test_loss: 1.8459, test_acc: 0.3276, best: 0.3429, time: 0:01:54
 Epoch: 218, lr: 2.0e-03, train_loss: 1.8707, train_acc: 0.2862 test_loss: 1.8248, test_acc: 0.3295, best: 0.3429, time: 0:01:54
 Epoch: 219, lr: 2.0e-03, train_loss: 1.8846, train_acc: 0.2776 test_loss: 1.8399, test_acc: 0.3376, best: 0.3429, time: 0:01:54
 Epoch: 220, lr: 2.0e-03, train_loss: 1.8639, train_acc: 0.2812 test_loss: 1.8048, test_acc: 0.3226, best: 0.3429, time: 0:01:54
 Epoch: 221, lr: 2.0e-03, train_loss: 1.8906, train_acc: 0.2842 test_loss: 1.8176, test_acc: 0.3314, best: 0.3429, time: 0:01:54
 Epoch: 222, lr: 2.0e-03, train_loss: 1.8637, train_acc: 0.2758 test_loss: 1.8865, test_acc: 0.3060, best: 0.3429, time: 0:01:54
 Epoch: 223, lr: 2.0e-03, train_loss: 1.9150, train_acc: 0.2614 test_loss: 1.8373, test_acc: 0.3229, best: 0.3429, time: 0:01:55
 Epoch: 224, lr: 2.0e-03, train_loss: 1.8803, train_acc: 0.2702 test_loss: 1.8887, test_acc: 0.2858, best: 0.3429, time: 0:01:54
 Epoch: 225, lr: 2.0e-03, train_loss: 1.8760, train_acc: 0.2860 test_loss: 1.8078, test_acc: 0.3260, best: 0.3429, time: 0:01:54
 Epoch: 226, lr: 2.0e-03, train_loss: 1.8864, train_acc: 0.2732 test_loss: 1.8470, test_acc: 0.3176, best: 0.3429, time: 0:01:55
 Epoch: 227, lr: 2.0e-03, train_loss: 1.8839, train_acc: 0.2748 test_loss: 1.8329, test_acc: 0.3312, best: 0.3429, time: 0:01:54
 Epoch: 228, lr: 2.0e-03, train_loss: 1.8834, train_acc: 0.2786 test_loss: 1.8601, test_acc: 0.3236, best: 0.3429, time: 0:01:54
 Epoch: 229, lr: 2.0e-03, train_loss: 1.8754, train_acc: 0.2882 test_loss: 1.8424, test_acc: 0.3234, best: 0.3429, time: 0:01:54
 Epoch: 230, lr: 2.0e-03, train_loss: 1.8849, train_acc: 0.2776 test_loss: 1.8453, test_acc: 0.3249, best: 0.3429, time: 0:01:54
 Epoch: 231, lr: 2.0e-03, train_loss: 1.8613, train_acc: 0.2910 test_loss: 1.8030, test_acc: 0.3380, best: 0.3429, time: 0:01:54
 Epoch: 232, lr: 2.0e-03, train_loss: 1.8743, train_acc: 0.2832 test_loss: 1.8794, test_acc: 0.3020, best: 0.3429, time: 0:01:54
 Epoch: 233, lr: 2.0e-03, train_loss: 1.8716, train_acc: 0.2870 test_loss: 1.8040, test_acc: 0.3349, best: 0.3429, time: 0:01:54
 Epoch: 234, lr: 2.0e-03, train_loss: 1.8754, train_acc: 0.2752 test_loss: 1.8520, test_acc: 0.3214, best: 0.3429, time: 0:01:54
 Epoch: 235, lr: 2.0e-03, train_loss: 1.8753, train_acc: 0.2890 test_loss: 1.8580, test_acc: 0.3175, best: 0.3429, time: 0:01:55
 Epoch: 236, lr: 2.0e-03, train_loss: 1.8691, train_acc: 0.2872 test_loss: 1.8756, test_acc: 0.3011, best: 0.3429, time: 0:01:55
 Epoch: 237, lr: 2.0e-03, train_loss: 1.8884, train_acc: 0.2750 test_loss: 1.8648, test_acc: 0.3120, best: 0.3429, time: 0:01:54
 Epoch: 238, lr: 2.0e-03, train_loss: 1.8733, train_acc: 0.2750 test_loss: 1.8858, test_acc: 0.2928, best: 0.3429, time: 0:01:55
 Epoch: 239, lr: 2.0e-03, train_loss: 1.8752, train_acc: 0.2840 test_loss: 1.8421, test_acc: 0.3204, best: 0.3429, time: 0:01:55
 Epoch: 240, lr: 4.0e-04, train_loss: 1.8714, train_acc: 0.2812 test_loss: 1.8618, test_acc: 0.3084, best: 0.3429, time: 0:01:55
 Epoch: 241, lr: 4.0e-04, train_loss: 1.8581, train_acc: 0.2800 test_loss: 1.8232, test_acc: 0.3230, best: 0.3429, time: 0:01:55
 Epoch: 242, lr: 4.0e-04, train_loss: 1.8640, train_acc: 0.2894 test_loss: 1.8735, test_acc: 0.3038, best: 0.3429, time: 0:01:55
 Epoch: 243, lr: 4.0e-04, train_loss: 1.8464, train_acc: 0.2886 test_loss: 1.8398, test_acc: 0.3123, best: 0.3429, time: 0:01:55
 Epoch: 244, lr: 4.0e-04, train_loss: 1.8645, train_acc: 0.2810 test_loss: 1.8442, test_acc: 0.3212, best: 0.3429, time: 0:01:55
 Epoch: 245, lr: 4.0e-04, train_loss: 1.8609, train_acc: 0.2868 test_loss: 1.8701, test_acc: 0.3115, best: 0.3429, time: 0:01:55
 Epoch: 246, lr: 4.0e-04, train_loss: 1.8636, train_acc: 0.2914 test_loss: 1.8349, test_acc: 0.3239, best: 0.3429, time: 0:01:55
 Epoch: 247, lr: 4.0e-04, train_loss: 1.8527, train_acc: 0.2874 test_loss: 1.8201, test_acc: 0.3351, best: 0.3429, time: 0:01:55
 Epoch: 248, lr: 4.0e-04, train_loss: 1.8496, train_acc: 0.2914 test_loss: 1.8649, test_acc: 0.2994, best: 0.3429, time: 0:01:54
 Epoch: 249, lr: 4.0e-04, train_loss: 1.8606, train_acc: 0.2880 test_loss: 1.8631, test_acc: 0.3051, best: 0.3429, time: 0:01:54
 Epoch: 250, lr: 4.0e-04, train_loss: 1.8538, train_acc: 0.2808 test_loss: 1.8312, test_acc: 0.3166, best: 0.3429, time: 0:01:54
 Epoch: 251, lr: 4.0e-04, train_loss: 1.8513, train_acc: 0.2948 test_loss: 1.8524, test_acc: 0.3041, best: 0.3429, time: 0:01:54
 Epoch: 252, lr: 4.0e-04, train_loss: 1.8564, train_acc: 0.2858 test_loss: 1.8633, test_acc: 0.3162, best: 0.3429, time: 0:01:54
 Epoch: 253, lr: 4.0e-04, train_loss: 1.8486, train_acc: 0.2928 test_loss: 1.8563, test_acc: 0.3003, best: 0.3429, time: 0:01:54
 Epoch: 254, lr: 4.0e-04, train_loss: 1.8496, train_acc: 0.2874 test_loss: 1.8684, test_acc: 0.3189, best: 0.3429, time: 0:01:55
 Epoch: 255, lr: 4.0e-04, train_loss: 1.8560, train_acc: 0.2800 test_loss: 1.9090, test_acc: 0.2875, best: 0.3429, time: 0:01:55
 Epoch: 256, lr: 4.0e-04, train_loss: 1.9199, train_acc: 0.2736 test_loss: 1.8901, test_acc: 0.2973, best: 0.3429, time: 0:01:55
 Epoch: 257, lr: 4.0e-04, train_loss: 1.9122, train_acc: 0.2800 test_loss: 1.9082, test_acc: 0.2988, best: 0.3429, time: 0:01:54
 Epoch: 258, lr: 4.0e-04, train_loss: 1.8993, train_acc: 0.2778 test_loss: 1.8843, test_acc: 0.3058, best: 0.3429, time: 0:01:54
 Epoch: 259, lr: 4.0e-04, train_loss: 1.8681, train_acc: 0.2756 test_loss: 1.8929, test_acc: 0.2953, best: 0.3429, time: 0:01:54
 Epoch: 260, lr: 4.0e-04, train_loss: 1.8831, train_acc: 0.2838 test_loss: 1.8609, test_acc: 0.3134, best: 0.3429, time: 0:01:54
 Epoch: 261, lr: 4.0e-04, train_loss: 1.8827, train_acc: 0.2864 test_loss: 1.8609, test_acc: 0.3115, best: 0.3429, time: 0:01:55
 Epoch: 262, lr: 4.0e-04, train_loss: 1.8677, train_acc: 0.2870 test_loss: 1.8322, test_acc: 0.3314, best: 0.3429, time: 0:01:54
 Epoch: 263, lr: 4.0e-04, train_loss: 1.8684, train_acc: 0.2872 test_loss: 1.8351, test_acc: 0.3217, best: 0.3429, time: 0:01:54
 Epoch: 264, lr: 4.0e-04, train_loss: 1.8804, train_acc: 0.2846 test_loss: 1.8741, test_acc: 0.3175, best: 0.3429, time: 0:01:54
 Epoch: 265, lr: 4.0e-04, train_loss: 1.8664, train_acc: 0.2840 test_loss: 1.8769, test_acc: 0.3207, best: 0.3429, time: 0:01:55
 Epoch: 266, lr: 4.0e-04, train_loss: 1.8602, train_acc: 0.2820 test_loss: 1.8788, test_acc: 0.3113, best: 0.3429, time: 0:01:55
 Epoch: 267, lr: 4.0e-04, train_loss: 1.8787, train_acc: 0.2814 test_loss: 1.8735, test_acc: 0.3116, best: 0.3429, time: 0:01:54
 Epoch: 268, lr: 4.0e-04, train_loss: 1.8615, train_acc: 0.2832 test_loss: 1.8279, test_acc: 0.3202, best: 0.3429, time: 0:01:54
 Epoch: 269, lr: 4.0e-04, train_loss: 1.8523, train_acc: 0.2884 test_loss: 1.8034, test_acc: 0.3369, best: 0.3429, time: 0:01:54
 Epoch: 270, lr: 8.0e-05, train_loss: 1.8483, train_acc: 0.2922 test_loss: 1.8434, test_acc: 0.3275, best: 0.3429, time: 0:01:54
 Epoch: 271, lr: 8.0e-05, train_loss: 1.8601, train_acc: 0.2826 test_loss: 1.8275, test_acc: 0.3334, best: 0.3429, time: 0:01:54
 Epoch: 272, lr: 8.0e-05, train_loss: 1.8516, train_acc: 0.2944 test_loss: 1.8507, test_acc: 0.3235, best: 0.3429, time: 0:01:53
 Epoch: 273, lr: 8.0e-05, train_loss: 1.8495, train_acc: 0.2910 test_loss: 1.8266, test_acc: 0.3252, best: 0.3429, time: 0:01:54
 Epoch: 274, lr: 8.0e-05, train_loss: 1.8489, train_acc: 0.2906 test_loss: 1.8511, test_acc: 0.3246, best: 0.3429, time: 0:01:54
 Epoch: 275, lr: 8.0e-05, train_loss: 1.8465, train_acc: 0.3050 test_loss: 1.8453, test_acc: 0.3215, best: 0.3429, time: 0:01:54
 Epoch: 276, lr: 8.0e-05, train_loss: 1.8542, train_acc: 0.2862 test_loss: 1.8471, test_acc: 0.3247, best: 0.3429, time: 0:01:54
 Epoch: 277, lr: 8.0e-05, train_loss: 1.8463, train_acc: 0.2976 test_loss: 1.8710, test_acc: 0.3177, best: 0.3429, time: 0:01:54
 Epoch: 278, lr: 8.0e-05, train_loss: 1.8438, train_acc: 0.2980 test_loss: 1.8758, test_acc: 0.3170, best: 0.3429, time: 0:01:54
 Epoch: 279, lr: 8.0e-05, train_loss: 1.8481, train_acc: 0.2896 test_loss: 1.8385, test_acc: 0.3230, best: 0.3429, time: 0:01:54
 Epoch: 280, lr: 8.0e-05, train_loss: 1.8460, train_acc: 0.2862 test_loss: 1.8473, test_acc: 0.3280, best: 0.3429, time: 0:01:54
 Epoch: 281, lr: 8.0e-05, train_loss: 1.8534, train_acc: 0.2856 test_loss: 1.8465, test_acc: 0.3239, best: 0.3429, time: 0:01:53
 Epoch: 282, lr: 8.0e-05, train_loss: 1.8514, train_acc: 0.2892 test_loss: 1.8329, test_acc: 0.3211, best: 0.3429, time: 0:01:53
 Epoch: 283, lr: 8.0e-05, train_loss: 1.8490, train_acc: 0.2972 test_loss: 1.8441, test_acc: 0.3277, best: 0.3429, time: 0:01:54
 Epoch: 284, lr: 8.0e-05, train_loss: 1.8512, train_acc: 0.2966 test_loss: 1.8500, test_acc: 0.3160, best: 0.3429, time: 0:01:54
 Epoch: 285, lr: 8.0e-05, train_loss: 1.8511, train_acc: 0.2966 test_loss: 1.8480, test_acc: 0.3127, best: 0.3429, time: 0:01:54
 Epoch: 286, lr: 8.0e-05, train_loss: 1.8518, train_acc: 0.2806 test_loss: 1.8589, test_acc: 0.3215, best: 0.3429, time: 0:01:53
 Epoch: 287, lr: 8.0e-05, train_loss: 1.8563, train_acc: 0.2968 test_loss: 1.8696, test_acc: 0.3099, best: 0.3429, time: 0:01:53
 Epoch: 288, lr: 8.0e-05, train_loss: 1.8548, train_acc: 0.2902 test_loss: 1.8492, test_acc: 0.3151, best: 0.3429, time: 0:01:53
 Epoch: 289, lr: 8.0e-05, train_loss: 1.8618, train_acc: 0.2872 test_loss: 1.8458, test_acc: 0.3200, best: 0.3429, time: 0:01:53
 Epoch: 290, lr: 8.0e-05, train_loss: 1.8478, train_acc: 0.2896 test_loss: 1.8660, test_acc: 0.3157, best: 0.3429, time: 0:01:53
 Epoch: 291, lr: 8.0e-05, train_loss: 1.8555, train_acc: 0.2912 test_loss: 1.8407, test_acc: 0.3217, best: 0.3429, time: 0:01:53
 Epoch: 292, lr: 8.0e-05, train_loss: 1.8609, train_acc: 0.2846 test_loss: 1.8601, test_acc: 0.3167, best: 0.3429, time: 0:01:53
 Epoch: 293, lr: 8.0e-05, train_loss: 1.8488, train_acc: 0.2906 test_loss: 1.8679, test_acc: 0.3121, best: 0.3429, time: 0:01:53
 Epoch: 294, lr: 8.0e-05, train_loss: 1.8454, train_acc: 0.2914 test_loss: 1.8258, test_acc: 0.3276, best: 0.3429, time: 0:01:53
 Epoch: 295, lr: 8.0e-05, train_loss: 1.8379, train_acc: 0.2986 test_loss: 1.8551, test_acc: 0.3200, best: 0.3429, time: 0:01:53
 Epoch: 296, lr: 8.0e-05, train_loss: 1.8476, train_acc: 0.2884 test_loss: 1.8661, test_acc: 0.3116, best: 0.3429, time: 0:01:53
 Epoch: 297, lr: 8.0e-05, train_loss: 1.8404, train_acc: 0.2894 test_loss: 1.8555, test_acc: 0.3185, best: 0.3429, time: 0:01:54
 Epoch: 298, lr: 8.0e-05, train_loss: 1.8425, train_acc: 0.2946 test_loss: 1.8474, test_acc: 0.3252, best: 0.3429, time: 0:01:54
 Epoch: 299, lr: 8.0e-05, train_loss: 1.8586, train_acc: 0.2870 test_loss: 1.8663, test_acc: 0.3142, best: 0.3429, time: 0:01:53
 Highest accuracy: 0.3429