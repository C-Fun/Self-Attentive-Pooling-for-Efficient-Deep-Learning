
 Run on time: 2022-07-03 16:58:34.142792

 Architecture: mobilenet-nlp_nowin-1222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 4,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 8,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 16,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 64,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP_NOWIN-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(128, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 64)
                  (col_embed): Embedding(256, 64)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5370, train_acc: 0.1562 test_loss: 2.1272, test_acc: 0.2155, best: 0.2155, time: 0:03:48
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0434, train_acc: 0.2180 test_loss: 1.9087, test_acc: 0.2835, best: 0.2835, time: 0:03:48
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9696, train_acc: 0.2498 test_loss: 1.8123, test_acc: 0.2815, best: 0.2835, time: 0:03:47
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9127, train_acc: 0.2678 test_loss: 1.7531, test_acc: 0.3366, best: 0.3366, time: 0:03:47
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8859, train_acc: 0.2776 test_loss: 1.6983, test_acc: 0.3490, best: 0.3490, time: 0:03:47
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8431, train_acc: 0.2916 test_loss: 1.6188, test_acc: 0.3639, best: 0.3639, time: 0:03:47
 Epoch: 7, lr: 1.0e-02, train_loss: 1.8128, train_acc: 0.2978 test_loss: 1.5993, test_acc: 0.3914, best: 0.3914, time: 0:03:47
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7833, train_acc: 0.3338 test_loss: 1.5913, test_acc: 0.3695, best: 0.3914, time: 0:03:47
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7658, train_acc: 0.3282 test_loss: 1.5399, test_acc: 0.4075, best: 0.4075, time: 0:03:47
 Epoch: 10, lr: 1.0e-02, train_loss: 1.7505, train_acc: 0.3414 test_loss: 1.5280, test_acc: 0.3951, best: 0.4075, time: 0:03:47
 Epoch: 11, lr: 1.0e-02, train_loss: 1.7178, train_acc: 0.3454 test_loss: 1.5375, test_acc: 0.4133, best: 0.4133, time: 0:03:47
 Epoch: 12, lr: 1.0e-02, train_loss: 1.6882, train_acc: 0.3628 test_loss: 1.4670, test_acc: 0.4460, best: 0.4460, time: 0:03:47
 Epoch: 13, lr: 1.0e-02, train_loss: 1.6625, train_acc: 0.3650 test_loss: 1.4248, test_acc: 0.4576, best: 0.4576, time: 0:03:47
 Epoch: 14, lr: 1.0e-02, train_loss: 1.6449, train_acc: 0.3812 test_loss: 1.4247, test_acc: 0.4654, best: 0.4654, time: 0:03:47
 Epoch: 15, lr: 1.0e-02, train_loss: 1.6263, train_acc: 0.3778 test_loss: 1.4027, test_acc: 0.4693, best: 0.4693, time: 0:03:47
 Epoch: 16, lr: 1.0e-02, train_loss: 1.5990, train_acc: 0.3968 test_loss: 1.5563, test_acc: 0.4203, best: 0.4693, time: 0:03:47
 Epoch: 17, lr: 1.0e-02, train_loss: 1.5883, train_acc: 0.4118 test_loss: 1.4214, test_acc: 0.4619, best: 0.4693, time: 0:03:47
 Epoch: 18, lr: 1.0e-02, train_loss: 1.5484, train_acc: 0.4188 test_loss: 1.4439, test_acc: 0.4800, best: 0.4800, time: 0:03:47
 Epoch: 19, lr: 1.0e-02, train_loss: 1.5497, train_acc: 0.4280 test_loss: 1.3230, test_acc: 0.4991, best: 0.4991, time: 0:03:47
 Epoch: 20, lr: 1.0e-02, train_loss: 1.5142, train_acc: 0.4338 test_loss: 1.3784, test_acc: 0.4854, best: 0.4991, time: 0:03:47
 Epoch: 21, lr: 1.0e-02, train_loss: 1.4875, train_acc: 0.4420 test_loss: 1.2803, test_acc: 0.5210, best: 0.5210, time: 0:03:47
 Epoch: 22, lr: 1.0e-02, train_loss: 1.4658, train_acc: 0.4492 test_loss: 1.3137, test_acc: 0.5216, best: 0.5216, time: 0:03:47
 Epoch: 23, lr: 1.0e-02, train_loss: 1.4440, train_acc: 0.4660 test_loss: 1.2504, test_acc: 0.5539, best: 0.5539, time: 0:03:47
 Epoch: 24, lr: 1.0e-02, train_loss: 1.4319, train_acc: 0.4730 test_loss: 1.2781, test_acc: 0.5410, best: 0.5539, time: 0:03:47
 Epoch: 25, lr: 1.0e-02, train_loss: 1.4259, train_acc: 0.4878 test_loss: 1.2629, test_acc: 0.5282, best: 0.5539, time: 0:03:47
 Epoch: 26, lr: 1.0e-02, train_loss: 1.3992, train_acc: 0.4852 test_loss: 1.2333, test_acc: 0.5431, best: 0.5539, time: 0:03:47
 Epoch: 27, lr: 1.0e-02, train_loss: 1.3860, train_acc: 0.4938 test_loss: 1.2131, test_acc: 0.5470, best: 0.5539, time: 0:03:47
 Epoch: 28, lr: 1.0e-02, train_loss: 1.3527, train_acc: 0.4974 test_loss: 1.2341, test_acc: 0.5444, best: 0.5539, time: 0:03:47
 Epoch: 29, lr: 1.0e-02, train_loss: 1.3526, train_acc: 0.5050 test_loss: 1.2016, test_acc: 0.5620, best: 0.5620, time: 0:03:47
 Epoch: 30, lr: 1.0e-02, train_loss: 1.3289, train_acc: 0.5068 test_loss: 1.1514, test_acc: 0.5916, best: 0.5916, time: 0:03:47
 Epoch: 31, lr: 1.0e-02, train_loss: 1.3126, train_acc: 0.5204 test_loss: 1.0990, test_acc: 0.6039, best: 0.6039, time: 0:03:47
 Epoch: 32, lr: 1.0e-02, train_loss: 1.2823, train_acc: 0.5366 test_loss: 1.1207, test_acc: 0.5960, best: 0.6039, time: 0:03:47
 Epoch: 33, lr: 1.0e-02, train_loss: 1.2867, train_acc: 0.5358 test_loss: 1.1199, test_acc: 0.6036, best: 0.6039, time: 0:03:47
 Epoch: 34, lr: 1.0e-02, train_loss: 1.2608, train_acc: 0.5512 test_loss: 1.0686, test_acc: 0.6116, best: 0.6116, time: 0:03:47
 Epoch: 35, lr: 1.0e-02, train_loss: 1.2697, train_acc: 0.5366 test_loss: 1.0953, test_acc: 0.6084, best: 0.6116, time: 0:03:47
 Epoch: 36, lr: 1.0e-02, train_loss: 1.2494, train_acc: 0.5494 test_loss: 1.0831, test_acc: 0.6051, best: 0.6116, time: 0:03:47
 Epoch: 37, lr: 1.0e-02, train_loss: 1.2082, train_acc: 0.5522 test_loss: 1.0613, test_acc: 0.6098, best: 0.6116, time: 0:03:47
 Epoch: 38, lr: 1.0e-02, train_loss: 1.2128, train_acc: 0.5576 test_loss: 1.0572, test_acc: 0.6241, best: 0.6241, time: 0:03:47
 Epoch: 39, lr: 1.0e-02, train_loss: 1.1912, train_acc: 0.5616 test_loss: 1.1003, test_acc: 0.6021, best: 0.6241, time: 0:03:47
 Epoch: 40, lr: 1.0e-02, train_loss: 1.1956, train_acc: 0.5658 test_loss: 1.0425, test_acc: 0.6312, best: 0.6312, time: 0:03:47
 Epoch: 41, lr: 1.0e-02, train_loss: 1.1843, train_acc: 0.5722 test_loss: 1.0216, test_acc: 0.6311, best: 0.6312, time: 0:03:47
 Epoch: 42, lr: 1.0e-02, train_loss: 1.1663, train_acc: 0.5810 test_loss: 1.0498, test_acc: 0.6364, best: 0.6364, time: 0:03:47
 Epoch: 43, lr: 1.0e-02, train_loss: 1.1591, train_acc: 0.5756 test_loss: 1.0157, test_acc: 0.6335, best: 0.6364, time: 0:03:47
 Epoch: 44, lr: 1.0e-02, train_loss: 1.1632, train_acc: 0.5782 test_loss: 1.0511, test_acc: 0.6284, best: 0.6364, time: 0:03:47
 Epoch: 45, lr: 1.0e-02, train_loss: 1.1575, train_acc: 0.5790 test_loss: 0.9663, test_acc: 0.6560, best: 0.6560, time: 0:03:47
 Epoch: 46, lr: 1.0e-02, train_loss: 1.1092, train_acc: 0.5982 test_loss: 1.0035, test_acc: 0.6439, best: 0.6560, time: 0:03:47
 Epoch: 47, lr: 1.0e-02, train_loss: 1.1267, train_acc: 0.5926 test_loss: 1.0418, test_acc: 0.6320, best: 0.6560, time: 0:03:47
 Epoch: 48, lr: 1.0e-02, train_loss: 1.1076, train_acc: 0.5956 test_loss: 1.0251, test_acc: 0.6345, best: 0.6560, time: 0:03:47
 Epoch: 49, lr: 1.0e-02, train_loss: 1.0860, train_acc: 0.6076 test_loss: 0.9457, test_acc: 0.6560, best: 0.6560, time: 0:03:47
 Epoch: 50, lr: 1.0e-02, train_loss: 1.1063, train_acc: 0.6058 test_loss: 0.9850, test_acc: 0.6519, best: 0.6560, time: 0:03:47
 Epoch: 51, lr: 1.0e-02, train_loss: 1.0679, train_acc: 0.6132 test_loss: 0.9664, test_acc: 0.6597, best: 0.6597, time: 0:03:47
 Epoch: 52, lr: 1.0e-02, train_loss: 1.0716, train_acc: 0.6116 test_loss: 0.9941, test_acc: 0.6476, best: 0.6597, time: 0:03:47
 Epoch: 53, lr: 1.0e-02, train_loss: 1.0720, train_acc: 0.6084 test_loss: 0.9598, test_acc: 0.6653, best: 0.6653, time: 0:03:47
 Epoch: 54, lr: 1.0e-02, train_loss: 1.0652, train_acc: 0.6162 test_loss: 0.9617, test_acc: 0.6528, best: 0.6653, time: 0:03:47
 Epoch: 55, lr: 1.0e-02, train_loss: 1.0547, train_acc: 0.6198 test_loss: 1.0401, test_acc: 0.6346, best: 0.6653, time: 0:03:47
 Epoch: 56, lr: 1.0e-02, train_loss: 1.0406, train_acc: 0.6226 test_loss: 0.9776, test_acc: 0.6596, best: 0.6653, time: 0:03:47
 Epoch: 57, lr: 1.0e-02, train_loss: 1.0225, train_acc: 0.6352 test_loss: 0.9615, test_acc: 0.6594, best: 0.6653, time: 0:03:47
 Epoch: 58, lr: 1.0e-02, train_loss: 1.0200, train_acc: 0.6254 test_loss: 0.9114, test_acc: 0.6786, best: 0.6786, time: 0:03:47
 Epoch: 59, lr: 1.0e-02, train_loss: 1.0129, train_acc: 0.6350 test_loss: 0.8878, test_acc: 0.6795, best: 0.6795, time: 0:03:47
 Epoch: 60, lr: 1.0e-02, train_loss: 1.0008, train_acc: 0.6414 test_loss: 0.8885, test_acc: 0.6834, best: 0.6834, time: 0:03:47
 Epoch: 61, lr: 1.0e-02, train_loss: 1.0146, train_acc: 0.6432 test_loss: 0.9972, test_acc: 0.6570, best: 0.6834, time: 0:03:47
 Epoch: 62, lr: 1.0e-02, train_loss: 0.9871, train_acc: 0.6466 test_loss: 0.8961, test_acc: 0.6831, best: 0.6834, time: 0:03:47
 Epoch: 63, lr: 1.0e-02, train_loss: 0.9805, train_acc: 0.6478 test_loss: 0.9325, test_acc: 0.6706, best: 0.6834, time: 0:03:47
 Epoch: 64, lr: 1.0e-02, train_loss: 0.9847, train_acc: 0.6534 test_loss: 0.8983, test_acc: 0.6801, best: 0.6834, time: 0:03:47
 Epoch: 65, lr: 1.0e-02, train_loss: 0.9681, train_acc: 0.6596 test_loss: 0.8667, test_acc: 0.6886, best: 0.6886, time: 0:03:47
 Epoch: 66, lr: 1.0e-02, train_loss: 0.9800, train_acc: 0.6460 test_loss: 0.8821, test_acc: 0.6876, best: 0.6886, time: 0:03:47
 Epoch: 67, lr: 1.0e-02, train_loss: 0.9494, train_acc: 0.6600 test_loss: 0.8990, test_acc: 0.6815, best: 0.6886, time: 0:03:47
 Epoch: 68, lr: 1.0e-02, train_loss: 0.9674, train_acc: 0.6608 test_loss: 0.8852, test_acc: 0.6887, best: 0.6887, time: 0:03:47
 Epoch: 69, lr: 1.0e-02, train_loss: 0.9213, train_acc: 0.6688 test_loss: 0.8379, test_acc: 0.7097, best: 0.7097, time: 0:03:47
 Epoch: 70, lr: 1.0e-02, train_loss: 0.9510, train_acc: 0.6600 test_loss: 0.9081, test_acc: 0.6800, best: 0.7097, time: 0:03:47
 Epoch: 71, lr: 1.0e-02, train_loss: 0.9169, train_acc: 0.6766 test_loss: 0.8613, test_acc: 0.6943, best: 0.7097, time: 0:03:47
 Epoch: 72, lr: 1.0e-02, train_loss: 0.9257, train_acc: 0.6712 test_loss: 0.8422, test_acc: 0.7051, best: 0.7097, time: 0:03:47
 Epoch: 73, lr: 1.0e-02, train_loss: 0.9144, train_acc: 0.6628 test_loss: 0.9060, test_acc: 0.6757, best: 0.7097, time: 0:03:46
 Epoch: 74, lr: 1.0e-02, train_loss: 0.9090, train_acc: 0.6684 test_loss: 0.8788, test_acc: 0.6931, best: 0.7097, time: 0:03:47
 Epoch: 75, lr: 1.0e-02, train_loss: 0.8966, train_acc: 0.6770 test_loss: 0.8330, test_acc: 0.7099, best: 0.7099, time: 0:03:47
 Epoch: 76, lr: 1.0e-02, train_loss: 0.8979, train_acc: 0.6820 test_loss: 0.8960, test_acc: 0.6827, best: 0.7099, time: 0:03:46
 Epoch: 77, lr: 1.0e-02, train_loss: 0.8709, train_acc: 0.6850 test_loss: 0.8144, test_acc: 0.7160, best: 0.7160, time: 0:03:47
 Epoch: 78, lr: 1.0e-02, train_loss: 0.8899, train_acc: 0.6870 test_loss: 0.8370, test_acc: 0.7057, best: 0.7160, time: 0:03:47
 Epoch: 79, lr: 1.0e-02, train_loss: 0.8864, train_acc: 0.6840 test_loss: 0.8688, test_acc: 0.6963, best: 0.7160, time: 0:03:47
 Epoch: 80, lr: 1.0e-02, train_loss: 0.8873, train_acc: 0.6836 test_loss: 0.8706, test_acc: 0.6960, best: 0.7160, time: 0:03:47
 Epoch: 81, lr: 1.0e-02, train_loss: 0.8799, train_acc: 0.6854 test_loss: 0.8316, test_acc: 0.7046, best: 0.7160, time: 0:03:47
 Epoch: 82, lr: 1.0e-02, train_loss: 0.8592, train_acc: 0.6912 test_loss: 0.8373, test_acc: 0.7043, best: 0.7160, time: 0:03:46
 Epoch: 83, lr: 1.0e-02, train_loss: 0.8586, train_acc: 0.6968 test_loss: 0.8905, test_acc: 0.6963, best: 0.7160, time: 0:03:46
 Epoch: 84, lr: 1.0e-02, train_loss: 0.8474, train_acc: 0.6940 test_loss: 0.8350, test_acc: 0.7055, best: 0.7160, time: 0:03:47
 Epoch: 85, lr: 1.0e-02, train_loss: 0.8398, train_acc: 0.6982 test_loss: 0.8823, test_acc: 0.6960, best: 0.7160, time: 0:03:46
 Epoch: 86, lr: 1.0e-02, train_loss: 0.8450, train_acc: 0.6992 test_loss: 0.8405, test_acc: 0.7065, best: 0.7160, time: 0:03:46
 Epoch: 87, lr: 1.0e-02, train_loss: 0.8625, train_acc: 0.6978 test_loss: 0.8031, test_acc: 0.7155, best: 0.7160, time: 0:03:47
 Epoch: 88, lr: 1.0e-02, train_loss: 0.8601, train_acc: 0.6970 test_loss: 0.7795, test_acc: 0.7316, best: 0.7316, time: 0:03:47
 Epoch: 89, lr: 1.0e-02, train_loss: 0.8396, train_acc: 0.7012 test_loss: 0.9062, test_acc: 0.6935, best: 0.7316, time: 0:03:47
 Epoch: 90, lr: 1.0e-02, train_loss: 0.8373, train_acc: 0.7066 test_loss: 0.7920, test_acc: 0.7225, best: 0.7316, time: 0:03:46
 Epoch: 91, lr: 1.0e-02, train_loss: 0.8205, train_acc: 0.7090 test_loss: 0.8628, test_acc: 0.6944, best: 0.7316, time: 0:03:47
 Epoch: 92, lr: 1.0e-02, train_loss: 0.8008, train_acc: 0.7120 test_loss: 0.8423, test_acc: 0.7177, best: 0.7316, time: 0:03:47
 Epoch: 93, lr: 1.0e-02, train_loss: 0.7631, train_acc: 0.7240 test_loss: 0.8057, test_acc: 0.7196, best: 0.7316, time: 0:03:47
 Epoch: 94, lr: 1.0e-02, train_loss: 0.8161, train_acc: 0.7086 test_loss: 0.8259, test_acc: 0.7150, best: 0.7316, time: 0:03:46
 Epoch: 95, lr: 1.0e-02, train_loss: 0.8099, train_acc: 0.7150 test_loss: 0.8360, test_acc: 0.7110, best: 0.7316, time: 0:03:47
 Epoch: 96, lr: 1.0e-02, train_loss: 0.8014, train_acc: 0.7072 test_loss: 0.8028, test_acc: 0.7196, best: 0.7316, time: 0:03:46
 Epoch: 97, lr: 1.0e-02, train_loss: 0.8045, train_acc: 0.7146 test_loss: 0.8269, test_acc: 0.7144, best: 0.7316, time: 0:03:46
 Epoch: 98, lr: 1.0e-02, train_loss: 0.7760, train_acc: 0.7234 test_loss: 0.8494, test_acc: 0.7093, best: 0.7316, time: 0:03:46
 Epoch: 99, lr: 1.0e-02, train_loss: 0.7948, train_acc: 0.7108 test_loss: 0.7851, test_acc: 0.7278, best: 0.7316, time: 0:03:46
 Epoch: 100, lr: 1.0e-02, train_loss: 0.7876, train_acc: 0.7292 test_loss: 0.8184, test_acc: 0.7171, best: 0.7316, time: 0:03:46
 Epoch: 101, lr: 1.0e-02, train_loss: 0.7645, train_acc: 0.7304 test_loss: 0.7794, test_acc: 0.7305, best: 0.7316, time: 0:03:46
 Epoch: 102, lr: 1.0e-02, train_loss: 0.7844, train_acc: 0.7198 test_loss: 0.7534, test_acc: 0.7401, best: 0.7401, time: 0:03:47
 Epoch: 103, lr: 1.0e-02, train_loss: 0.7683, train_acc: 0.7234 test_loss: 0.8345, test_acc: 0.7179, best: 0.7401, time: 0:03:47
 Epoch: 104, lr: 1.0e-02, train_loss: 0.7674, train_acc: 0.7302 test_loss: 0.7908, test_acc: 0.7289, best: 0.7401, time: 0:03:47
 Epoch: 105, lr: 1.0e-02, train_loss: 0.7576, train_acc: 0.7354 test_loss: 0.8771, test_acc: 0.6989, best: 0.7401, time: 0:03:47
 Epoch: 106, lr: 1.0e-02, train_loss: 0.7666, train_acc: 0.7290 test_loss: 0.7829, test_acc: 0.7228, best: 0.7401, time: 0:03:46
 Epoch: 107, lr: 1.0e-02, train_loss: 0.7552, train_acc: 0.7280 test_loss: 0.8037, test_acc: 0.7259, best: 0.7401, time: 0:03:47
 Epoch: 108, lr: 1.0e-02, train_loss: 0.7682, train_acc: 0.7184 test_loss: 0.7598, test_acc: 0.7400, best: 0.7401, time: 0:03:46
 Epoch: 109, lr: 1.0e-02, train_loss: 0.7651, train_acc: 0.7304 test_loss: 0.7690, test_acc: 0.7330, best: 0.7401, time: 0:03:47
 Epoch: 110, lr: 1.0e-02, train_loss: 0.7267, train_acc: 0.7442 test_loss: 0.8384, test_acc: 0.7249, best: 0.7401, time: 0:03:47
 Epoch: 111, lr: 1.0e-02, train_loss: 0.7204, train_acc: 0.7450 test_loss: 0.8181, test_acc: 0.7221, best: 0.7401, time: 0:03:46
 Epoch: 112, lr: 1.0e-02, train_loss: 0.7278, train_acc: 0.7392 test_loss: 0.8411, test_acc: 0.7163, best: 0.7401, time: 0:03:46
 Epoch: 113, lr: 1.0e-02, train_loss: 0.7280, train_acc: 0.7418 test_loss: 0.7834, test_acc: 0.7334, best: 0.7401, time: 0:03:46
 Epoch: 114, lr: 1.0e-02, train_loss: 0.7002, train_acc: 0.7490 test_loss: 0.7974, test_acc: 0.7366, best: 0.7401, time: 0:03:47
 Epoch: 115, lr: 1.0e-02, train_loss: 0.7278, train_acc: 0.7480 test_loss: 0.8078, test_acc: 0.7229, best: 0.7401, time: 0:03:47
 Epoch: 116, lr: 1.0e-02, train_loss: 0.7315, train_acc: 0.7446 test_loss: 0.7437, test_acc: 0.7456, best: 0.7456, time: 0:03:47
 Epoch: 117, lr: 1.0e-02, train_loss: 0.7072, train_acc: 0.7444 test_loss: 0.7541, test_acc: 0.7470, best: 0.7470, time: 0:03:47
 Epoch: 118, lr: 1.0e-02, train_loss: 0.7197, train_acc: 0.7400 test_loss: 0.7381, test_acc: 0.7540, best: 0.7540, time: 0:03:47
 Epoch: 119, lr: 1.0e-02, train_loss: 0.7018, train_acc: 0.7532 test_loss: 0.8881, test_acc: 0.6974, best: 0.7540, time: 0:03:47
 Epoch: 120, lr: 1.0e-02, train_loss: 0.7177, train_acc: 0.7486 test_loss: 0.7752, test_acc: 0.7309, best: 0.7540, time: 0:03:47
 Epoch: 121, lr: 1.0e-02, train_loss: 0.6916, train_acc: 0.7540 test_loss: 0.7970, test_acc: 0.7254, best: 0.7540, time: 0:03:47
 Epoch: 122, lr: 1.0e-02, train_loss: 0.6946, train_acc: 0.7480 test_loss: 0.8104, test_acc: 0.7374, best: 0.7540, time: 0:03:47
 Epoch: 123, lr: 1.0e-02, train_loss: 0.7002, train_acc: 0.7568 test_loss: 0.7730, test_acc: 0.7398, best: 0.7540, time: 0:03:47
 Epoch: 124, lr: 1.0e-02, train_loss: 0.6818, train_acc: 0.7590 test_loss: 0.7610, test_acc: 0.7456, best: 0.7540, time: 0:03:47
 Epoch: 125, lr: 1.0e-02, train_loss: 0.6996, train_acc: 0.7532 test_loss: 0.7839, test_acc: 0.7388, best: 0.7540, time: 0:03:47
 Epoch: 126, lr: 1.0e-02, train_loss: 0.6672, train_acc: 0.7634 test_loss: 0.7749, test_acc: 0.7356, best: 0.7540, time: 0:03:47
 Epoch: 127, lr: 1.0e-02, train_loss: 0.6877, train_acc: 0.7576 test_loss: 0.7862, test_acc: 0.7348, best: 0.7540, time: 0:03:47
 Epoch: 128, lr: 1.0e-02, train_loss: 0.6951, train_acc: 0.7530 test_loss: 0.8099, test_acc: 0.7198, best: 0.7540, time: 0:03:46
 Epoch: 129, lr: 1.0e-02, train_loss: 0.6772, train_acc: 0.7594 test_loss: 0.8634, test_acc: 0.7221, best: 0.7540, time: 0:03:47
 Epoch: 130, lr: 1.0e-02, train_loss: 0.6640, train_acc: 0.7664 test_loss: 0.8114, test_acc: 0.7355, best: 0.7540, time: 0:03:46
 Epoch: 131, lr: 1.0e-02, train_loss: 0.6623, train_acc: 0.7644 test_loss: 0.7898, test_acc: 0.7382, best: 0.7540, time: 0:03:47
 Epoch: 132, lr: 1.0e-02, train_loss: 0.6575, train_acc: 0.7666 test_loss: 0.7766, test_acc: 0.7440, best: 0.7540, time: 0:03:47
 Epoch: 133, lr: 1.0e-02, train_loss: 0.6571, train_acc: 0.7698 test_loss: 0.7847, test_acc: 0.7400, best: 0.7540, time: 0:03:46
 Epoch: 134, lr: 1.0e-02, train_loss: 0.6600, train_acc: 0.7654 test_loss: 0.8275, test_acc: 0.7380, best: 0.7540, time: 0:03:47
 Epoch: 135, lr: 1.0e-02, train_loss: 0.6761, train_acc: 0.7550 test_loss: 0.7386, test_acc: 0.7545, best: 0.7545, time: 0:03:47
 Epoch: 136, lr: 1.0e-02, train_loss: 0.6567, train_acc: 0.7630 test_loss: 0.8009, test_acc: 0.7365, best: 0.7545, time: 0:03:47
 Epoch: 137, lr: 1.0e-02, train_loss: 0.6423, train_acc: 0.7780 test_loss: 0.8419, test_acc: 0.7258, best: 0.7545, time: 0:03:47
 Epoch: 138, lr: 1.0e-02, train_loss: 0.6643, train_acc: 0.7672 test_loss: 0.8364, test_acc: 0.7238, best: 0.7545, time: 0:03:47
 Epoch: 139, lr: 1.0e-02, train_loss: 0.6339, train_acc: 0.7748 test_loss: 0.8069, test_acc: 0.7446, best: 0.7545, time: 0:03:47
 Epoch: 140, lr: 1.0e-02, train_loss: 0.6620, train_acc: 0.7680 test_loss: 0.7746, test_acc: 0.7516, best: 0.7545, time: 0:03:47
 Epoch: 141, lr: 1.0e-02, train_loss: 0.6414, train_acc: 0.7766 test_loss: 0.7796, test_acc: 0.7531, best: 0.7545, time: 0:03:47
 Epoch: 142, lr: 1.0e-02, train_loss: 0.6269, train_acc: 0.7802 test_loss: 0.8243, test_acc: 0.7348, best: 0.7545, time: 0:03:47
 Epoch: 143, lr: 1.0e-02, train_loss: 0.6225, train_acc: 0.7754 test_loss: 0.7629, test_acc: 0.7464, best: 0.7545, time: 0:03:47
 Epoch: 144, lr: 1.0e-02, train_loss: 0.6274, train_acc: 0.7778 test_loss: 0.7929, test_acc: 0.7454, best: 0.7545, time: 0:03:46
 Epoch: 145, lr: 1.0e-02, train_loss: 0.6407, train_acc: 0.7754 test_loss: 0.8432, test_acc: 0.7359, best: 0.7545, time: 0:03:47
 Epoch: 146, lr: 1.0e-02, train_loss: 0.6142, train_acc: 0.7838 test_loss: 0.8327, test_acc: 0.7340, best: 0.7545, time: 0:03:47
 Epoch: 147, lr: 1.0e-02, train_loss: 0.6103, train_acc: 0.7848 test_loss: 0.7498, test_acc: 0.7520, best: 0.7545, time: 0:03:47
 Epoch: 148, lr: 1.0e-02, train_loss: 0.6216, train_acc: 0.7812 test_loss: 0.7883, test_acc: 0.7481, best: 0.7545, time: 0:03:47
 Epoch: 149, lr: 1.0e-02, train_loss: 0.6276, train_acc: 0.7818 test_loss: 0.8119, test_acc: 0.7452, best: 0.7545, time: 0:03:47
 Epoch: 150, lr: 1.0e-02, train_loss: 0.6222, train_acc: 0.7850 test_loss: 0.8398, test_acc: 0.7296, best: 0.7545, time: 0:03:47
 Epoch: 151, lr: 1.0e-02, train_loss: 0.6158, train_acc: 0.7840 test_loss: 0.7848, test_acc: 0.7470, best: 0.7545, time: 0:03:47
 Epoch: 152, lr: 1.0e-02, train_loss: 0.6088, train_acc: 0.7892 test_loss: 0.7763, test_acc: 0.7516, best: 0.7545, time: 0:03:46
 Epoch: 153, lr: 1.0e-02, train_loss: 0.6095, train_acc: 0.7824 test_loss: 0.8206, test_acc: 0.7450, best: 0.7545, time: 0:03:46
 Epoch: 154, lr: 1.0e-02, train_loss: 0.6097, train_acc: 0.7826 test_loss: 0.7288, test_acc: 0.7592, best: 0.7592, time: 0:03:47
 Epoch: 155, lr: 1.0e-02, train_loss: 0.5924, train_acc: 0.7922 test_loss: 0.7473, test_acc: 0.7540, best: 0.7592, time: 0:03:47
 Epoch: 156, lr: 1.0e-02, train_loss: 0.6018, train_acc: 0.7894 test_loss: 0.7568, test_acc: 0.7528, best: 0.7592, time: 0:03:46
 Epoch: 157, lr: 1.0e-02, train_loss: 0.5971, train_acc: 0.7852 test_loss: 0.7728, test_acc: 0.7551, best: 0.7592, time: 0:03:47
 Epoch: 158, lr: 1.0e-02, train_loss: 0.5994, train_acc: 0.7876 test_loss: 0.7937, test_acc: 0.7414, best: 0.7592, time: 0:03:47
 Epoch: 159, lr: 1.0e-02, train_loss: 0.5937, train_acc: 0.7890 test_loss: 0.7804, test_acc: 0.7528, best: 0.7592, time: 0:03:47
 Epoch: 160, lr: 1.0e-02, train_loss: 0.5920, train_acc: 0.7942 test_loss: 0.8046, test_acc: 0.7470, best: 0.7592, time: 0:03:47
 Epoch: 161, lr: 1.0e-02, train_loss: 0.5548, train_acc: 0.8078 test_loss: 0.8101, test_acc: 0.7469, best: 0.7592, time: 0:03:47
 Epoch: 162, lr: 1.0e-02, train_loss: 0.5836, train_acc: 0.7910 test_loss: 0.8639, test_acc: 0.7364, best: 0.7592, time: 0:03:47
 Epoch: 163, lr: 1.0e-02, train_loss: 0.5731, train_acc: 0.7966 test_loss: 0.8132, test_acc: 0.7551, best: 0.7592, time: 0:03:46
 Epoch: 164, lr: 1.0e-02, train_loss: 0.5667, train_acc: 0.7998 test_loss: 0.7733, test_acc: 0.7462, best: 0.7592, time: 0:03:47
 Epoch: 165, lr: 1.0e-02, train_loss: 0.5840, train_acc: 0.7974 test_loss: 0.7720, test_acc: 0.7549, best: 0.7592, time: 0:03:47
 Epoch: 166, lr: 1.0e-02, train_loss: 0.5668, train_acc: 0.7966 test_loss: 0.7559, test_acc: 0.7572, best: 0.7592, time: 0:03:47
 Epoch: 167, lr: 1.0e-02, train_loss: 0.5624, train_acc: 0.8002 test_loss: 0.7549, test_acc: 0.7611, best: 0.7611, time: 0:03:47
 Epoch: 168, lr: 1.0e-02, train_loss: 0.5795, train_acc: 0.7970 test_loss: 0.7758, test_acc: 0.7546, best: 0.7611, time: 0:03:47
 Epoch: 169, lr: 1.0e-02, train_loss: 0.5703, train_acc: 0.7960 test_loss: 0.7692, test_acc: 0.7628, best: 0.7628, time: 0:03:47
 Epoch: 170, lr: 1.0e-02, train_loss: 0.5455, train_acc: 0.8146 test_loss: 0.7812, test_acc: 0.7482, best: 0.7628, time: 0:03:47
 Epoch: 171, lr: 1.0e-02, train_loss: 0.5726, train_acc: 0.8024 test_loss: 0.7449, test_acc: 0.7624, best: 0.7628, time: 0:03:47
 Epoch: 172, lr: 1.0e-02, train_loss: 0.5612, train_acc: 0.8040 test_loss: 0.8005, test_acc: 0.7454, best: 0.7628, time: 0:03:47
 Epoch: 173, lr: 1.0e-02, train_loss: 0.5562, train_acc: 0.8012 test_loss: 0.7653, test_acc: 0.7579, best: 0.7628, time: 0:03:47
 Epoch: 174, lr: 1.0e-02, train_loss: 0.5706, train_acc: 0.7942 test_loss: 0.8327, test_acc: 0.7522, best: 0.7628, time: 0:03:47
 Epoch: 175, lr: 1.0e-02, train_loss: 0.5490, train_acc: 0.8110 test_loss: 0.8706, test_acc: 0.7321, best: 0.7628, time: 0:03:47
 Epoch: 176, lr: 1.0e-02, train_loss: 0.5351, train_acc: 0.8134 test_loss: 0.7639, test_acc: 0.7684, best: 0.7684, time: 0:03:47
 Epoch: 177, lr: 1.0e-02, train_loss: 0.5372, train_acc: 0.8106 test_loss: 0.7629, test_acc: 0.7659, best: 0.7684, time: 0:03:47
 Epoch: 178, lr: 1.0e-02, train_loss: 0.5381, train_acc: 0.8138 test_loss: 0.8906, test_acc: 0.7336, best: 0.7684, time: 0:03:47
 Epoch: 179, lr: 1.0e-02, train_loss: 0.5608, train_acc: 0.8024 test_loss: 0.7739, test_acc: 0.7536, best: 0.7684, time: 0:03:47
 Epoch: 180, lr: 2.0e-03, train_loss: 0.4725, train_acc: 0.8360 test_loss: 0.7278, test_acc: 0.7776, best: 0.7776, time: 0:03:47
 Epoch: 181, lr: 2.0e-03, train_loss: 0.4385, train_acc: 0.8476 test_loss: 0.7473, test_acc: 0.7769, best: 0.7776, time: 0:03:47
 Epoch: 182, lr: 2.0e-03, train_loss: 0.4427, train_acc: 0.8444 test_loss: 0.7096, test_acc: 0.7850, best: 0.7850, time: 0:03:47
 Epoch: 183, lr: 2.0e-03, train_loss: 0.4357, train_acc: 0.8490 test_loss: 0.7418, test_acc: 0.7798, best: 0.7850, time: 0:03:47
 Epoch: 184, lr: 2.0e-03, train_loss: 0.4373, train_acc: 0.8488 test_loss: 0.7327, test_acc: 0.7829, best: 0.7850, time: 0:03:47
 Epoch: 185, lr: 2.0e-03, train_loss: 0.4060, train_acc: 0.8618 test_loss: 0.7258, test_acc: 0.7815, best: 0.7850, time: 0:03:47
 Epoch: 186, lr: 2.0e-03, train_loss: 0.4148, train_acc: 0.8594 test_loss: 0.7502, test_acc: 0.7805, best: 0.7850, time: 0:03:47
 Epoch: 187, lr: 2.0e-03, train_loss: 0.4117, train_acc: 0.8552 test_loss: 0.7034, test_acc: 0.7857, best: 0.7857, time: 0:03:47
 Epoch: 188, lr: 2.0e-03, train_loss: 0.3885, train_acc: 0.8620 test_loss: 0.7737, test_acc: 0.7722, best: 0.7857, time: 0:03:47
 Epoch: 189, lr: 2.0e-03, train_loss: 0.3964, train_acc: 0.8578 test_loss: 0.7395, test_acc: 0.7843, best: 0.7857, time: 0:03:47
 Epoch: 190, lr: 2.0e-03, train_loss: 0.3892, train_acc: 0.8630 test_loss: 0.7795, test_acc: 0.7705, best: 0.7857, time: 0:03:47
 Epoch: 191, lr: 2.0e-03, train_loss: 0.3903, train_acc: 0.8664 test_loss: 0.7436, test_acc: 0.7794, best: 0.7857, time: 0:03:47
 Epoch: 192, lr: 2.0e-03, train_loss: 0.3917, train_acc: 0.8662 test_loss: 0.7450, test_acc: 0.7802, best: 0.7857, time: 0:03:47
 Epoch: 193, lr: 2.0e-03, train_loss: 0.4009, train_acc: 0.8646 test_loss: 0.7286, test_acc: 0.7829, best: 0.7857, time: 0:03:47
 Epoch: 194, lr: 2.0e-03, train_loss: 0.3763, train_acc: 0.8728 test_loss: 0.7488, test_acc: 0.7819, best: 0.7857, time: 0:03:47
 Epoch: 195, lr: 2.0e-03, train_loss: 0.3966, train_acc: 0.8658 test_loss: 0.7602, test_acc: 0.7804, best: 0.7857, time: 0:03:47
 Epoch: 196, lr: 2.0e-03, train_loss: 0.3836, train_acc: 0.8670 test_loss: 0.7461, test_acc: 0.7830, best: 0.7857, time: 0:03:47
 Epoch: 197, lr: 2.0e-03, train_loss: 0.3674, train_acc: 0.8666 test_loss: 0.7761, test_acc: 0.7786, best: 0.7857, time: 0:03:46
 Epoch: 198, lr: 2.0e-03, train_loss: 0.3740, train_acc: 0.8670 test_loss: 0.7730, test_acc: 0.7823, best: 0.7857, time: 0:03:46
 Epoch: 199, lr: 2.0e-03, train_loss: 0.3962, train_acc: 0.8610 test_loss: 0.7479, test_acc: 0.7782, best: 0.7857, time: 0:03:46
 Epoch: 200, lr: 2.0e-03, train_loss: 0.3757, train_acc: 0.8710 test_loss: 0.7743, test_acc: 0.7770, best: 0.7857, time: 0:03:46
 Epoch: 201, lr: 2.0e-03, train_loss: 0.3691, train_acc: 0.8686 test_loss: 0.7599, test_acc: 0.7841, best: 0.7857, time: 0:03:46
 Epoch: 202, lr: 2.0e-03, train_loss: 0.3716, train_acc: 0.8686 test_loss: 0.7599, test_acc: 0.7798, best: 0.7857, time: 0:03:46
 Epoch: 203, lr: 2.0e-03, train_loss: 0.4055, train_acc: 0.8628 test_loss: 0.7349, test_acc: 0.7831, best: 0.7857, time: 0:03:46
 Epoch: 204, lr: 2.0e-03, train_loss: 0.3816, train_acc: 0.8656 test_loss: 0.7434, test_acc: 0.7856, best: 0.7857, time: 0:03:46
 Epoch: 205, lr: 2.0e-03, train_loss: 0.3629, train_acc: 0.8742 test_loss: 0.7686, test_acc: 0.7792, best: 0.7857, time: 0:03:46
 Epoch: 206, lr: 2.0e-03, train_loss: 0.3602, train_acc: 0.8760 test_loss: 0.8058, test_acc: 0.7760, best: 0.7857, time: 0:03:46
 Epoch: 207, lr: 2.0e-03, train_loss: 0.3617, train_acc: 0.8764 test_loss: 0.7711, test_acc: 0.7844, best: 0.7857, time: 0:03:46
 Epoch: 208, lr: 2.0e-03, train_loss: 0.3409, train_acc: 0.8844 test_loss: 0.7439, test_acc: 0.7845, best: 0.7857, time: 0:03:46
 Epoch: 209, lr: 2.0e-03, train_loss: 0.3544, train_acc: 0.8748 test_loss: 0.7731, test_acc: 0.7831, best: 0.7857, time: 0:03:46
 Epoch: 210, lr: 2.0e-03, train_loss: 0.3534, train_acc: 0.8724 test_loss: 0.7978, test_acc: 0.7804, best: 0.7857, time: 0:03:46
 Epoch: 211, lr: 2.0e-03, train_loss: 0.3413, train_acc: 0.8848 test_loss: 0.8233, test_acc: 0.7790, best: 0.7857, time: 0:03:46
 Epoch: 212, lr: 2.0e-03, train_loss: 0.3687, train_acc: 0.8752 test_loss: 0.8157, test_acc: 0.7729, best: 0.7857, time: 0:03:46
 Epoch: 213, lr: 2.0e-03, train_loss: 0.3499, train_acc: 0.8730 test_loss: 0.8048, test_acc: 0.7754, best: 0.7857, time: 0:03:46
 Epoch: 214, lr: 2.0e-03, train_loss: 0.3431, train_acc: 0.8828 test_loss: 0.7698, test_acc: 0.7851, best: 0.7857, time: 0:03:46
 Epoch: 215, lr: 2.0e-03, train_loss: 0.3652, train_acc: 0.8740 test_loss: 0.7445, test_acc: 0.7871, best: 0.7871, time: 0:03:46
 Epoch: 216, lr: 2.0e-03, train_loss: 0.3629, train_acc: 0.8746 test_loss: 0.7539, test_acc: 0.7854, best: 0.7871, time: 0:03:46
 Epoch: 217, lr: 2.0e-03, train_loss: 0.3545, train_acc: 0.8756 test_loss: 0.7633, test_acc: 0.7827, best: 0.7871, time: 0:03:46
 Epoch: 218, lr: 2.0e-03, train_loss: 0.3611, train_acc: 0.8744 test_loss: 0.7848, test_acc: 0.7798, best: 0.7871, time: 0:03:46
 Epoch: 219, lr: 2.0e-03, train_loss: 0.3751, train_acc: 0.8690 test_loss: 0.7929, test_acc: 0.7805, best: 0.7871, time: 0:03:46
 Epoch: 220, lr: 2.0e-03, train_loss: 0.3567, train_acc: 0.8760 test_loss: 0.7845, test_acc: 0.7795, best: 0.7871, time: 0:03:46
 Epoch: 221, lr: 2.0e-03, train_loss: 0.3603, train_acc: 0.8784 test_loss: 0.7817, test_acc: 0.7812, best: 0.7871, time: 0:03:46
 Epoch: 222, lr: 2.0e-03, train_loss: 0.3401, train_acc: 0.8822 test_loss: 0.7978, test_acc: 0.7827, best: 0.7871, time: 0:03:46
 Epoch: 223, lr: 2.0e-03, train_loss: 0.3466, train_acc: 0.8818 test_loss: 0.8140, test_acc: 0.7798, best: 0.7871, time: 0:03:46
 Epoch: 224, lr: 2.0e-03, train_loss: 0.3543, train_acc: 0.8768 test_loss: 0.8102, test_acc: 0.7798, best: 0.7871, time: 0:03:46
 Epoch: 225, lr: 2.0e-03, train_loss: 0.3586, train_acc: 0.8754 test_loss: 0.7990, test_acc: 0.7816, best: 0.7871, time: 0:03:46
 Epoch: 226, lr: 2.0e-03, train_loss: 0.3409, train_acc: 0.8806 test_loss: 0.8240, test_acc: 0.7706, best: 0.7871, time: 0:03:46
 Epoch: 227, lr: 2.0e-03, train_loss: 0.3495, train_acc: 0.8780 test_loss: 0.8000, test_acc: 0.7739, best: 0.7871, time: 0:03:46
 Epoch: 228, lr: 2.0e-03, train_loss: 0.3419, train_acc: 0.8828 test_loss: 0.7828, test_acc: 0.7784, best: 0.7871, time: 0:03:46
 Epoch: 229, lr: 2.0e-03, train_loss: 0.3451, train_acc: 0.8742 test_loss: 0.8143, test_acc: 0.7741, best: 0.7871, time: 0:03:46
 Epoch: 230, lr: 2.0e-03, train_loss: 0.3478, train_acc: 0.8776 test_loss: 0.7839, test_acc: 0.7836, best: 0.7871, time: 0:03:46
 Epoch: 231, lr: 2.0e-03, train_loss: 0.3466, train_acc: 0.8796 test_loss: 0.7929, test_acc: 0.7810, best: 0.7871, time: 0:03:46
 Epoch: 232, lr: 2.0e-03, train_loss: 0.3231, train_acc: 0.8840 test_loss: 0.7841, test_acc: 0.7856, best: 0.7871, time: 0:03:46
 Epoch: 233, lr: 2.0e-03, train_loss: 0.3511, train_acc: 0.8752 test_loss: 0.7887, test_acc: 0.7779, best: 0.7871, time: 0:03:46
 Epoch: 234, lr: 2.0e-03, train_loss: 0.3275, train_acc: 0.8848 test_loss: 0.8449, test_acc: 0.7725, best: 0.7871, time: 0:03:46
 Epoch: 235, lr: 2.0e-03, train_loss: 0.3446, train_acc: 0.8828 test_loss: 0.7846, test_acc: 0.7810, best: 0.7871, time: 0:03:46
 Epoch: 236, lr: 2.0e-03, train_loss: 0.3582, train_acc: 0.8736 test_loss: 0.7870, test_acc: 0.7806, best: 0.7871, time: 0:03:46
 Epoch: 237, lr: 2.0e-03, train_loss: 0.3454, train_acc: 0.8808 test_loss: 0.7793, test_acc: 0.7768, best: 0.7871, time: 0:03:46
 Epoch: 238, lr: 2.0e-03, train_loss: 0.3288, train_acc: 0.8872 test_loss: 0.7831, test_acc: 0.7806, best: 0.7871, time: 0:03:46
 Epoch: 239, lr: 2.0e-03, train_loss: 0.3282, train_acc: 0.8810 test_loss: 0.7842, test_acc: 0.7864, best: 0.7871, time: 0:03:46
 Epoch: 240, lr: 4.0e-04, train_loss: 0.3385, train_acc: 0.8824 test_loss: 0.7842, test_acc: 0.7831, best: 0.7871, time: 0:03:46
 Epoch: 241, lr: 4.0e-04, train_loss: 0.3162, train_acc: 0.8912 test_loss: 0.7655, test_acc: 0.7859, best: 0.7871, time: 0:03:46
 Epoch: 242, lr: 4.0e-04, train_loss: 0.3282, train_acc: 0.8848 test_loss: 0.7745, test_acc: 0.7845, best: 0.7871, time: 0:03:46
 Epoch: 243, lr: 4.0e-04, train_loss: 0.3413, train_acc: 0.8810 test_loss: 0.7829, test_acc: 0.7859, best: 0.7871, time: 0:03:46
 Epoch: 244, lr: 4.0e-04, train_loss: 0.3078, train_acc: 0.8922 test_loss: 0.7717, test_acc: 0.7840, best: 0.7871, time: 0:03:46
 Epoch: 245, lr: 4.0e-04, train_loss: 0.3329, train_acc: 0.8828 test_loss: 0.7746, test_acc: 0.7817, best: 0.7871, time: 0:03:46
 Epoch: 246, lr: 4.0e-04, train_loss: 0.3068, train_acc: 0.8928 test_loss: 0.7668, test_acc: 0.7835, best: 0.7871, time: 0:03:46
 Epoch: 247, lr: 4.0e-04, train_loss: 0.3365, train_acc: 0.8842 test_loss: 0.7815, test_acc: 0.7846, best: 0.7871, time: 0:03:46
 Epoch: 248, lr: 4.0e-04, train_loss: 0.3033, train_acc: 0.8974 test_loss: 0.7746, test_acc: 0.7837, best: 0.7871, time: 0:03:46
 Epoch: 249, lr: 4.0e-04, train_loss: 0.3241, train_acc: 0.8912 test_loss: 0.8155, test_acc: 0.7819, best: 0.7871, time: 0:03:46
 Epoch: 250, lr: 4.0e-04, train_loss: 0.3153, train_acc: 0.8924 test_loss: 0.7636, test_acc: 0.7880, best: 0.7880, time: 0:03:46
 Epoch: 251, lr: 4.0e-04, train_loss: 0.3079, train_acc: 0.8930 test_loss: 0.7886, test_acc: 0.7847, best: 0.7880, time: 0:03:47
 Epoch: 252, lr: 4.0e-04, train_loss: 0.3177, train_acc: 0.8942 test_loss: 0.7811, test_acc: 0.7871, best: 0.7880, time: 0:03:47
 Epoch: 253, lr: 4.0e-04, train_loss: 0.3198, train_acc: 0.8920 test_loss: 0.7913, test_acc: 0.7860, best: 0.7880, time: 0:03:46
 Epoch: 254, lr: 4.0e-04, train_loss: 0.3178, train_acc: 0.8878 test_loss: 0.7706, test_acc: 0.7863, best: 0.7880, time: 0:03:46
 Epoch: 255, lr: 4.0e-04, train_loss: 0.3114, train_acc: 0.8972 test_loss: 0.7649, test_acc: 0.7880, best: 0.7880, time: 0:03:46
 Epoch: 256, lr: 4.0e-04, train_loss: 0.3020, train_acc: 0.8948 test_loss: 0.7798, test_acc: 0.7884, best: 0.7884, time: 0:03:46
 Epoch: 257, lr: 4.0e-04, train_loss: 0.2959, train_acc: 0.8962 test_loss: 0.7762, test_acc: 0.7850, best: 0.7884, time: 0:03:46
 Epoch: 258, lr: 4.0e-04, train_loss: 0.2938, train_acc: 0.8938 test_loss: 0.7730, test_acc: 0.7869, best: 0.7884, time: 0:03:47
 Epoch: 259, lr: 4.0e-04, train_loss: 0.3047, train_acc: 0.8938 test_loss: 0.7778, test_acc: 0.7899, best: 0.7899, time: 0:03:46
 Epoch: 260, lr: 4.0e-04, train_loss: 0.2979, train_acc: 0.8920 test_loss: 0.7709, test_acc: 0.7855, best: 0.7899, time: 0:03:46
 Epoch: 261, lr: 4.0e-04, train_loss: 0.3207, train_acc: 0.8898 test_loss: 0.7803, test_acc: 0.7863, best: 0.7899, time: 0:03:46
 Epoch: 262, lr: 4.0e-04, train_loss: 0.2988, train_acc: 0.8942 test_loss: 0.7757, test_acc: 0.7884, best: 0.7899, time: 0:03:46
 Epoch: 263, lr: 4.0e-04, train_loss: 0.3280, train_acc: 0.8868 test_loss: 0.7684, test_acc: 0.7897, best: 0.7899, time: 0:03:46
 Epoch: 264, lr: 4.0e-04, train_loss: 0.3154, train_acc: 0.8942 test_loss: 0.8105, test_acc: 0.7844, best: 0.7899, time: 0:03:46
 Epoch: 265, lr: 4.0e-04, train_loss: 0.3071, train_acc: 0.8916 test_loss: 0.7739, test_acc: 0.7876, best: 0.7899, time: 0:03:46
 Epoch: 266, lr: 4.0e-04, train_loss: 0.3238, train_acc: 0.8876 test_loss: 0.7890, test_acc: 0.7825, best: 0.7899, time: 0:03:46
 Epoch: 267, lr: 4.0e-04, train_loss: 0.2996, train_acc: 0.8996 test_loss: 0.8033, test_acc: 0.7836, best: 0.7899, time: 0:03:46
 Epoch: 268, lr: 4.0e-04, train_loss: 0.3273, train_acc: 0.8872 test_loss: 0.7783, test_acc: 0.7889, best: 0.7899, time: 0:03:46
 Epoch: 269, lr: 4.0e-04, train_loss: 0.3165, train_acc: 0.8920 test_loss: 0.7860, test_acc: 0.7857, best: 0.7899, time: 0:03:46
 Epoch: 270, lr: 8.0e-05, train_loss: 0.3013, train_acc: 0.8964 test_loss: 0.7692, test_acc: 0.7875, best: 0.7899, time: 0:03:46
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2968, train_acc: 0.8962 test_loss: 0.7802, test_acc: 0.7855, best: 0.7899, time: 0:03:46
 Epoch: 272, lr: 8.0e-05, train_loss: 0.3055, train_acc: 0.8952 test_loss: 0.7736, test_acc: 0.7855, best: 0.7899, time: 0:03:46
 Epoch: 273, lr: 8.0e-05, train_loss: 0.3158, train_acc: 0.8864 test_loss: 0.7625, test_acc: 0.7887, best: 0.7899, time: 0:03:46
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2949, train_acc: 0.9002 test_loss: 0.7903, test_acc: 0.7867, best: 0.7899, time: 0:03:46
 Epoch: 275, lr: 8.0e-05, train_loss: 0.3140, train_acc: 0.8914 test_loss: 0.7621, test_acc: 0.7871, best: 0.7899, time: 0:03:46
 Epoch: 276, lr: 8.0e-05, train_loss: 0.2991, train_acc: 0.8990 test_loss: 0.7753, test_acc: 0.7863, best: 0.7899, time: 0:03:46
 Epoch: 277, lr: 8.0e-05, train_loss: 0.2880, train_acc: 0.9036 test_loss: 0.7865, test_acc: 0.7886, best: 0.7899, time: 0:03:47
 Epoch: 278, lr: 8.0e-05, train_loss: 0.2928, train_acc: 0.8964 test_loss: 0.7840, test_acc: 0.7856, best: 0.7899, time: 0:03:46
 Epoch: 279, lr: 8.0e-05, train_loss: 0.3076, train_acc: 0.8902 test_loss: 0.7777, test_acc: 0.7874, best: 0.7899, time: 0:03:46
 Epoch: 280, lr: 8.0e-05, train_loss: 0.2964, train_acc: 0.8992 test_loss: 0.7855, test_acc: 0.7867, best: 0.7899, time: 0:03:46
 Epoch: 281, lr: 8.0e-05, train_loss: 0.2881, train_acc: 0.8966 test_loss: 0.7837, test_acc: 0.7875, best: 0.7899, time: 0:03:47
 Epoch: 282, lr: 8.0e-05, train_loss: 0.3009, train_acc: 0.8954 test_loss: 0.7735, test_acc: 0.7869, best: 0.7899, time: 0:03:46
 Epoch: 283, lr: 8.0e-05, train_loss: 0.3160, train_acc: 0.8882 test_loss: 0.7747, test_acc: 0.7881, best: 0.7899, time: 0:03:46
 Epoch: 284, lr: 8.0e-05, train_loss: 0.3074, train_acc: 0.8962 test_loss: 0.7761, test_acc: 0.7880, best: 0.7899, time: 0:03:46
 Epoch: 285, lr: 8.0e-05, train_loss: 0.3041, train_acc: 0.8956 test_loss: 0.7739, test_acc: 0.7884, best: 0.7899, time: 0:03:47
 Epoch: 286, lr: 8.0e-05, train_loss: 0.3032, train_acc: 0.8956 test_loss: 0.7821, test_acc: 0.7876, best: 0.7899, time: 0:03:46
 Epoch: 287, lr: 8.0e-05, train_loss: 0.3209, train_acc: 0.8896 test_loss: 0.7720, test_acc: 0.7880, best: 0.7899, time: 0:03:46
 Epoch: 288, lr: 8.0e-05, train_loss: 0.3114, train_acc: 0.8924 test_loss: 0.7687, test_acc: 0.7894, best: 0.7899, time: 0:03:46
 Epoch: 289, lr: 8.0e-05, train_loss: 0.3125, train_acc: 0.8948 test_loss: 0.7717, test_acc: 0.7904, best: 0.7904, time: 0:03:47
 Epoch: 290, lr: 8.0e-05, train_loss: 0.2969, train_acc: 0.8982 test_loss: 0.7863, test_acc: 0.7864, best: 0.7904, time: 0:03:47
 Epoch: 291, lr: 8.0e-05, train_loss: 0.2961, train_acc: 0.8994 test_loss: 0.7961, test_acc: 0.7844, best: 0.7904, time: 0:03:46
 Epoch: 292, lr: 8.0e-05, train_loss: 0.2939, train_acc: 0.8982 test_loss: 0.7885, test_acc: 0.7873, best: 0.7904, time: 0:03:46
 Epoch: 293, lr: 8.0e-05, train_loss: 0.3138, train_acc: 0.8928 test_loss: 0.7801, test_acc: 0.7895, best: 0.7904, time: 0:03:46
 Epoch: 294, lr: 8.0e-05, train_loss: 0.2948, train_acc: 0.8960 test_loss: 0.7773, test_acc: 0.7883, best: 0.7904, time: 0:03:46
 Epoch: 295, lr: 8.0e-05, train_loss: 0.2982, train_acc: 0.8936 test_loss: 0.7946, test_acc: 0.7884, best: 0.7904, time: 0:03:46
 Epoch: 296, lr: 8.0e-05, train_loss: 0.3021, train_acc: 0.8952 test_loss: 0.7820, test_acc: 0.7876, best: 0.7904, time: 0:03:46
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2692, train_acc: 0.9108 test_loss: 0.8022, test_acc: 0.7840, best: 0.7904, time: 0:03:46
 Epoch: 298, lr: 8.0e-05, train_loss: 0.3150, train_acc: 0.8940 test_loss: 0.7864, test_acc: 0.7890, best: 0.7904, time: 0:03:46
 Epoch: 299, lr: 8.0e-05, train_loss: 0.3155, train_acc: 0.8916 test_loss: 0.7762, test_acc: 0.7877, best: 0.7904, time: 0:03:46
 Highest accuracy: 0.7904