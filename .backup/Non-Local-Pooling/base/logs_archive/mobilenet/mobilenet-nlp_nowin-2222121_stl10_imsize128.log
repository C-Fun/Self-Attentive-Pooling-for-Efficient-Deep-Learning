
 Run on time: 2022-07-03 17:01:15.480999

 Architecture: mobilenet-nlp_nowin-2222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 4,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 8,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 16,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 64,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP_NOWIN-2222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(128, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 64)
                  (col_embed): Embedding(256, 64)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5952, train_acc: 0.1532 test_loss: 2.1105, test_acc: 0.1854, best: 0.1854, time: 0:02:22
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1159, train_acc: 0.2056 test_loss: 1.9266, test_acc: 0.2661, best: 0.2661, time: 0:02:24
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0352, train_acc: 0.2222 test_loss: 1.7697, test_acc: 0.3025, best: 0.3025, time: 0:02:23
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9697, train_acc: 0.2426 test_loss: 1.8045, test_acc: 0.3139, best: 0.3139, time: 0:02:23
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9813, train_acc: 0.2440 test_loss: 1.7891, test_acc: 0.2734, best: 0.3139, time: 0:02:23
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9281, train_acc: 0.2688 test_loss: 1.8049, test_acc: 0.2762, best: 0.3139, time: 0:02:23
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9206, train_acc: 0.2628 test_loss: 1.7238, test_acc: 0.3499, best: 0.3499, time: 0:02:23
 Epoch: 8, lr: 1.0e-02, train_loss: 1.9519, train_acc: 0.2624 test_loss: 1.8644, test_acc: 0.2915, best: 0.3499, time: 0:02:23
 Epoch: 9, lr: 1.0e-02, train_loss: 1.9903, train_acc: 0.2482 test_loss: 1.7474, test_acc: 0.3145, best: 0.3499, time: 0:02:23
 Epoch: 10, lr: 1.0e-02, train_loss: 1.9378, train_acc: 0.2596 test_loss: 1.7421, test_acc: 0.3079, best: 0.3499, time: 0:02:23
 Epoch: 11, lr: 1.0e-02, train_loss: 1.9061, train_acc: 0.2696 test_loss: 1.7463, test_acc: 0.3306, best: 0.3499, time: 0:02:22
 Epoch: 12, lr: 1.0e-02, train_loss: 1.8946, train_acc: 0.2816 test_loss: 1.7136, test_acc: 0.3471, best: 0.3499, time: 0:02:22
 Epoch: 13, lr: 1.0e-02, train_loss: 1.8986, train_acc: 0.2786 test_loss: 1.6645, test_acc: 0.3529, best: 0.3529, time: 0:02:23
 Epoch: 14, lr: 1.0e-02, train_loss: 1.8664, train_acc: 0.2852 test_loss: 1.7095, test_acc: 0.3568, best: 0.3568, time: 0:02:23
 Epoch: 15, lr: 1.0e-02, train_loss: 1.8433, train_acc: 0.3036 test_loss: 1.6916, test_acc: 0.3609, best: 0.3609, time: 0:02:23
 Epoch: 16, lr: 1.0e-02, train_loss: 1.8361, train_acc: 0.3070 test_loss: 1.6145, test_acc: 0.3862, best: 0.3862, time: 0:02:23
 Epoch: 17, lr: 1.0e-02, train_loss: 1.7981, train_acc: 0.3140 test_loss: 1.6673, test_acc: 0.3673, best: 0.3862, time: 0:02:23
 Epoch: 18, lr: 1.0e-02, train_loss: 1.8197, train_acc: 0.3124 test_loss: 1.6152, test_acc: 0.3781, best: 0.3862, time: 0:02:22
 Epoch: 19, lr: 1.0e-02, train_loss: 1.7853, train_acc: 0.3228 test_loss: 1.6289, test_acc: 0.3875, best: 0.3875, time: 0:02:23
 Epoch: 20, lr: 1.0e-02, train_loss: 1.7627, train_acc: 0.3278 test_loss: 1.5849, test_acc: 0.4021, best: 0.4021, time: 0:02:22
 Epoch: 21, lr: 1.0e-02, train_loss: 1.7795, train_acc: 0.3264 test_loss: 1.6541, test_acc: 0.3690, best: 0.4021, time: 0:02:22
 Epoch: 22, lr: 1.0e-02, train_loss: 1.7530, train_acc: 0.3348 test_loss: 1.5764, test_acc: 0.3989, best: 0.4021, time: 0:02:22
 Epoch: 23, lr: 1.0e-02, train_loss: 1.7536, train_acc: 0.3438 test_loss: 1.6111, test_acc: 0.3994, best: 0.4021, time: 0:02:22
 Epoch: 24, lr: 1.0e-02, train_loss: 1.7868, train_acc: 0.3248 test_loss: 1.6246, test_acc: 0.3824, best: 0.4021, time: 0:02:22
 Epoch: 25, lr: 1.0e-02, train_loss: 1.7585, train_acc: 0.3224 test_loss: 1.5575, test_acc: 0.3980, best: 0.4021, time: 0:02:22
 Epoch: 26, lr: 1.0e-02, train_loss: 1.7661, train_acc: 0.3316 test_loss: 1.5761, test_acc: 0.4125, best: 0.4125, time: 0:02:22
 Epoch: 27, lr: 1.0e-02, train_loss: 1.7978, train_acc: 0.3264 test_loss: 1.6536, test_acc: 0.3757, best: 0.4125, time: 0:02:22
 Epoch: 28, lr: 1.0e-02, train_loss: 1.7384, train_acc: 0.3458 test_loss: 1.5910, test_acc: 0.3842, best: 0.4125, time: 0:02:22
 Epoch: 29, lr: 1.0e-02, train_loss: 1.7395, train_acc: 0.3452 test_loss: 1.5643, test_acc: 0.4041, best: 0.4125, time: 0:02:22
 Epoch: 30, lr: 1.0e-02, train_loss: 1.7418, train_acc: 0.3488 test_loss: 1.6055, test_acc: 0.3734, best: 0.4125, time: 0:02:22
 Epoch: 31, lr: 1.0e-02, train_loss: 1.7181, train_acc: 0.3518 test_loss: 1.5453, test_acc: 0.4218, best: 0.4218, time: 0:02:23
 Epoch: 32, lr: 1.0e-02, train_loss: 1.6726, train_acc: 0.3664 test_loss: 1.4833, test_acc: 0.4522, best: 0.4522, time: 0:02:22
 Epoch: 33, lr: 1.0e-02, train_loss: 1.6637, train_acc: 0.3708 test_loss: 1.5050, test_acc: 0.4318, best: 0.4522, time: 0:02:22
 Epoch: 34, lr: 1.0e-02, train_loss: 1.6319, train_acc: 0.3902 test_loss: 1.4670, test_acc: 0.4564, best: 0.4564, time: 0:02:22
 Epoch: 35, lr: 1.0e-02, train_loss: 1.6336, train_acc: 0.3916 test_loss: 1.5376, test_acc: 0.4324, best: 0.4564, time: 0:02:22
 Epoch: 36, lr: 1.0e-02, train_loss: 1.6309, train_acc: 0.3906 test_loss: 1.4515, test_acc: 0.4580, best: 0.4580, time: 0:02:22
 Epoch: 37, lr: 1.0e-02, train_loss: 1.6409, train_acc: 0.3734 test_loss: 1.4522, test_acc: 0.4605, best: 0.4605, time: 0:02:23
 Epoch: 38, lr: 1.0e-02, train_loss: 1.6263, train_acc: 0.3932 test_loss: 1.4572, test_acc: 0.4610, best: 0.4610, time: 0:02:22
 Epoch: 39, lr: 1.0e-02, train_loss: 1.5992, train_acc: 0.4050 test_loss: 1.4236, test_acc: 0.4844, best: 0.4844, time: 0:02:22
 Epoch: 40, lr: 1.0e-02, train_loss: 1.5876, train_acc: 0.4112 test_loss: 1.4866, test_acc: 0.4294, best: 0.4844, time: 0:02:22
 Epoch: 41, lr: 1.0e-02, train_loss: 1.6029, train_acc: 0.4028 test_loss: 1.4597, test_acc: 0.4555, best: 0.4844, time: 0:02:22
 Epoch: 42, lr: 1.0e-02, train_loss: 1.5917, train_acc: 0.4058 test_loss: 1.4211, test_acc: 0.4703, best: 0.4844, time: 0:02:23
 Epoch: 43, lr: 1.0e-02, train_loss: 1.5492, train_acc: 0.4202 test_loss: 1.3916, test_acc: 0.4795, best: 0.4844, time: 0:02:22
 Epoch: 44, lr: 1.0e-02, train_loss: 1.5559, train_acc: 0.4202 test_loss: 1.4257, test_acc: 0.4641, best: 0.4844, time: 0:02:22
 Epoch: 45, lr: 1.0e-02, train_loss: 1.5322, train_acc: 0.4326 test_loss: 1.3986, test_acc: 0.4835, best: 0.4844, time: 0:02:22
 Epoch: 46, lr: 1.0e-02, train_loss: 1.5181, train_acc: 0.4364 test_loss: 1.3378, test_acc: 0.5052, best: 0.5052, time: 0:02:23
 Epoch: 47, lr: 1.0e-02, train_loss: 1.5245, train_acc: 0.4356 test_loss: 1.4067, test_acc: 0.4838, best: 0.5052, time: 0:02:22
 Epoch: 48, lr: 1.0e-02, train_loss: 1.4899, train_acc: 0.4484 test_loss: 1.3585, test_acc: 0.4885, best: 0.5052, time: 0:02:22
 Epoch: 49, lr: 1.0e-02, train_loss: 1.5355, train_acc: 0.4224 test_loss: 1.4041, test_acc: 0.4853, best: 0.5052, time: 0:02:23
 Epoch: 50, lr: 1.0e-02, train_loss: 1.4850, train_acc: 0.4476 test_loss: 1.3041, test_acc: 0.5212, best: 0.5212, time: 0:02:23
 Epoch: 51, lr: 1.0e-02, train_loss: 1.5412, train_acc: 0.4286 test_loss: 1.3278, test_acc: 0.5116, best: 0.5212, time: 0:02:23
 Epoch: 52, lr: 1.0e-02, train_loss: 1.5556, train_acc: 0.4362 test_loss: 1.4814, test_acc: 0.4634, best: 0.5212, time: 0:02:23
 Epoch: 53, lr: 1.0e-02, train_loss: 1.5374, train_acc: 0.4278 test_loss: 1.4079, test_acc: 0.4803, best: 0.5212, time: 0:02:23
 Epoch: 54, lr: 1.0e-02, train_loss: 1.5138, train_acc: 0.4456 test_loss: 1.3725, test_acc: 0.4931, best: 0.5212, time: 0:02:23
 Epoch: 55, lr: 1.0e-02, train_loss: 1.5328, train_acc: 0.4258 test_loss: 1.3738, test_acc: 0.4969, best: 0.5212, time: 0:02:23
 Epoch: 56, lr: 1.0e-02, train_loss: 1.4832, train_acc: 0.4516 test_loss: 1.3330, test_acc: 0.5079, best: 0.5212, time: 0:02:23
 Epoch: 57, lr: 1.0e-02, train_loss: 1.4905, train_acc: 0.4546 test_loss: 1.2865, test_acc: 0.5288, best: 0.5288, time: 0:02:23
 Epoch: 58, lr: 1.0e-02, train_loss: 1.4673, train_acc: 0.4612 test_loss: 1.3401, test_acc: 0.5058, best: 0.5288, time: 0:02:23
 Epoch: 59, lr: 1.0e-02, train_loss: 1.4733, train_acc: 0.4650 test_loss: 1.2784, test_acc: 0.5236, best: 0.5288, time: 0:02:23
 Epoch: 60, lr: 1.0e-02, train_loss: 1.4768, train_acc: 0.4508 test_loss: 1.2987, test_acc: 0.5166, best: 0.5288, time: 0:02:23
 Epoch: 61, lr: 1.0e-02, train_loss: 1.4593, train_acc: 0.4626 test_loss: 1.3705, test_acc: 0.4923, best: 0.5288, time: 0:02:23
 Epoch: 62, lr: 1.0e-02, train_loss: 1.4548, train_acc: 0.4616 test_loss: 1.3153, test_acc: 0.5184, best: 0.5288, time: 0:02:23
 Epoch: 63, lr: 1.0e-02, train_loss: 1.4367, train_acc: 0.4714 test_loss: 1.2899, test_acc: 0.5272, best: 0.5288, time: 0:02:23
 Epoch: 64, lr: 1.0e-02, train_loss: 1.4667, train_acc: 0.4628 test_loss: 1.3457, test_acc: 0.5132, best: 0.5288, time: 0:02:23
 Epoch: 65, lr: 1.0e-02, train_loss: 1.4586, train_acc: 0.4570 test_loss: 1.2673, test_acc: 0.5320, best: 0.5320, time: 0:02:23
 Epoch: 66, lr: 1.0e-02, train_loss: 1.4306, train_acc: 0.4790 test_loss: 1.2718, test_acc: 0.5356, best: 0.5356, time: 0:02:23
 Epoch: 67, lr: 1.0e-02, train_loss: 1.3905, train_acc: 0.4778 test_loss: 1.3338, test_acc: 0.4981, best: 0.5356, time: 0:02:23
 Epoch: 68, lr: 1.0e-02, train_loss: 1.4350, train_acc: 0.4742 test_loss: 1.2905, test_acc: 0.5410, best: 0.5410, time: 0:02:23
 Epoch: 69, lr: 1.0e-02, train_loss: 1.4280, train_acc: 0.4722 test_loss: 1.2874, test_acc: 0.5315, best: 0.5410, time: 0:02:23
 Epoch: 70, lr: 1.0e-02, train_loss: 1.4414, train_acc: 0.4666 test_loss: 1.2435, test_acc: 0.5485, best: 0.5485, time: 0:02:23
 Epoch: 71, lr: 1.0e-02, train_loss: 1.4001, train_acc: 0.4816 test_loss: 1.2640, test_acc: 0.5311, best: 0.5485, time: 0:02:23
 Epoch: 72, lr: 1.0e-02, train_loss: 1.3781, train_acc: 0.4972 test_loss: 1.2151, test_acc: 0.5526, best: 0.5526, time: 0:02:23
 Epoch: 73, lr: 1.0e-02, train_loss: 1.3680, train_acc: 0.4954 test_loss: 1.2300, test_acc: 0.5511, best: 0.5526, time: 0:02:23
 Epoch: 74, lr: 1.0e-02, train_loss: 1.3765, train_acc: 0.4980 test_loss: 1.2073, test_acc: 0.5657, best: 0.5657, time: 0:02:23
 Epoch: 75, lr: 1.0e-02, train_loss: 1.3786, train_acc: 0.4904 test_loss: 1.3209, test_acc: 0.5250, best: 0.5657, time: 0:02:23
 Epoch: 76, lr: 1.0e-02, train_loss: 1.4077, train_acc: 0.4832 test_loss: 1.1978, test_acc: 0.5577, best: 0.5657, time: 0:02:23
 Epoch: 77, lr: 1.0e-02, train_loss: 1.3590, train_acc: 0.4988 test_loss: 1.1863, test_acc: 0.5627, best: 0.5657, time: 0:02:23
 Epoch: 78, lr: 1.0e-02, train_loss: 1.3607, train_acc: 0.5030 test_loss: 1.2171, test_acc: 0.5546, best: 0.5657, time: 0:02:23
 Epoch: 79, lr: 1.0e-02, train_loss: 1.3575, train_acc: 0.4950 test_loss: 1.1850, test_acc: 0.5679, best: 0.5679, time: 0:02:23
 Epoch: 80, lr: 1.0e-02, train_loss: 1.3361, train_acc: 0.5216 test_loss: 1.2729, test_acc: 0.5380, best: 0.5679, time: 0:02:23
 Epoch: 81, lr: 1.0e-02, train_loss: 1.3504, train_acc: 0.5086 test_loss: 1.1904, test_acc: 0.5709, best: 0.5709, time: 0:02:23
 Epoch: 82, lr: 1.0e-02, train_loss: 1.3276, train_acc: 0.5162 test_loss: 1.1871, test_acc: 0.5654, best: 0.5709, time: 0:02:23
 Epoch: 83, lr: 1.0e-02, train_loss: 1.3283, train_acc: 0.5214 test_loss: 1.1755, test_acc: 0.5766, best: 0.5766, time: 0:02:23
 Epoch: 84, lr: 1.0e-02, train_loss: 1.3268, train_acc: 0.5134 test_loss: 1.1853, test_acc: 0.5749, best: 0.5766, time: 0:02:23
 Epoch: 85, lr: 1.0e-02, train_loss: 1.3357, train_acc: 0.5134 test_loss: 1.2341, test_acc: 0.5539, best: 0.5766, time: 0:02:23
 Epoch: 86, lr: 1.0e-02, train_loss: 1.3129, train_acc: 0.5148 test_loss: 1.1950, test_acc: 0.5689, best: 0.5766, time: 0:02:23
 Epoch: 87, lr: 1.0e-02, train_loss: 1.3004, train_acc: 0.5210 test_loss: 1.2236, test_acc: 0.5520, best: 0.5766, time: 0:02:23
 Epoch: 88, lr: 1.0e-02, train_loss: 1.3058, train_acc: 0.5292 test_loss: 1.2212, test_acc: 0.5529, best: 0.5766, time: 0:02:23
 Epoch: 89, lr: 1.0e-02, train_loss: 1.2983, train_acc: 0.5284 test_loss: 1.1599, test_acc: 0.5829, best: 0.5829, time: 0:02:23
 Epoch: 90, lr: 1.0e-02, train_loss: 1.3010, train_acc: 0.5316 test_loss: 1.1848, test_acc: 0.5683, best: 0.5829, time: 0:02:23
 Epoch: 91, lr: 1.0e-02, train_loss: 1.3196, train_acc: 0.5146 test_loss: 1.1381, test_acc: 0.5846, best: 0.5846, time: 0:02:23
 Epoch: 92, lr: 1.0e-02, train_loss: 1.2838, train_acc: 0.5282 test_loss: 1.1939, test_acc: 0.5551, best: 0.5846, time: 0:02:23
 Epoch: 93, lr: 1.0e-02, train_loss: 1.3021, train_acc: 0.5190 test_loss: 1.1920, test_acc: 0.5597, best: 0.5846, time: 0:02:23
 Epoch: 94, lr: 1.0e-02, train_loss: 1.3390, train_acc: 0.5014 test_loss: 1.2255, test_acc: 0.5594, best: 0.5846, time: 0:02:23
 Epoch: 95, lr: 1.0e-02, train_loss: 1.3025, train_acc: 0.5204 test_loss: 1.2199, test_acc: 0.5605, best: 0.5846, time: 0:02:23
 Epoch: 96, lr: 1.0e-02, train_loss: 1.3133, train_acc: 0.5216 test_loss: 1.1892, test_acc: 0.5487, best: 0.5846, time: 0:02:23
 Epoch: 97, lr: 1.0e-02, train_loss: 1.3006, train_acc: 0.5302 test_loss: 1.1470, test_acc: 0.5870, best: 0.5870, time: 0:02:24
 Epoch: 98, lr: 1.0e-02, train_loss: 1.2890, train_acc: 0.5346 test_loss: 1.1746, test_acc: 0.5730, best: 0.5870, time: 0:02:23
 Epoch: 99, lr: 1.0e-02, train_loss: 1.2714, train_acc: 0.5352 test_loss: 1.1256, test_acc: 0.5817, best: 0.5870, time: 0:02:23
 Epoch: 100, lr: 1.0e-02, train_loss: 1.2672, train_acc: 0.5298 test_loss: 1.1227, test_acc: 0.5889, best: 0.5889, time: 0:02:23
 Epoch: 101, lr: 1.0e-02, train_loss: 1.2579, train_acc: 0.5436 test_loss: 1.1706, test_acc: 0.5684, best: 0.5889, time: 0:02:23
 Epoch: 102, lr: 1.0e-02, train_loss: 1.2569, train_acc: 0.5464 test_loss: 1.1319, test_acc: 0.5795, best: 0.5889, time: 0:02:23
 Epoch: 103, lr: 1.0e-02, train_loss: 1.2568, train_acc: 0.5390 test_loss: 1.1499, test_acc: 0.5831, best: 0.5889, time: 0:02:23
 Epoch: 104, lr: 1.0e-02, train_loss: 1.2240, train_acc: 0.5512 test_loss: 1.1198, test_acc: 0.5958, best: 0.5958, time: 0:02:24
 Epoch: 105, lr: 1.0e-02, train_loss: 1.2558, train_acc: 0.5380 test_loss: 1.2337, test_acc: 0.5519, best: 0.5958, time: 0:02:23
 Epoch: 106, lr: 1.0e-02, train_loss: 1.2779, train_acc: 0.5360 test_loss: 1.1339, test_acc: 0.5903, best: 0.5958, time: 0:02:23
 Epoch: 107, lr: 1.0e-02, train_loss: 1.2302, train_acc: 0.5566 test_loss: 1.1693, test_acc: 0.5736, best: 0.5958, time: 0:02:23
 Epoch: 108, lr: 1.0e-02, train_loss: 1.2494, train_acc: 0.5378 test_loss: 1.1100, test_acc: 0.5939, best: 0.5958, time: 0:02:23
 Epoch: 109, lr: 1.0e-02, train_loss: 1.2588, train_acc: 0.5352 test_loss: 1.1248, test_acc: 0.5864, best: 0.5958, time: 0:02:23
 Epoch: 110, lr: 1.0e-02, train_loss: 1.2354, train_acc: 0.5474 test_loss: 1.1104, test_acc: 0.5934, best: 0.5958, time: 0:02:23
 Epoch: 111, lr: 1.0e-02, train_loss: 1.2280, train_acc: 0.5548 test_loss: 1.0889, test_acc: 0.5938, best: 0.5958, time: 0:02:23
 Epoch: 112, lr: 1.0e-02, train_loss: 1.2350, train_acc: 0.5526 test_loss: 1.1203, test_acc: 0.5965, best: 0.5965, time: 0:02:23
 Epoch: 113, lr: 1.0e-02, train_loss: 1.2037, train_acc: 0.5496 test_loss: 1.0908, test_acc: 0.5991, best: 0.5991, time: 0:02:23
 Epoch: 114, lr: 1.0e-02, train_loss: 1.2058, train_acc: 0.5624 test_loss: 1.0984, test_acc: 0.5927, best: 0.5991, time: 0:02:23
 Epoch: 115, lr: 1.0e-02, train_loss: 1.2097, train_acc: 0.5588 test_loss: 1.0984, test_acc: 0.5964, best: 0.5991, time: 0:02:23
 Epoch: 116, lr: 1.0e-02, train_loss: 1.2566, train_acc: 0.5462 test_loss: 1.1157, test_acc: 0.5965, best: 0.5991, time: 0:02:23
 Epoch: 117, lr: 1.0e-02, train_loss: 1.2191, train_acc: 0.5528 test_loss: 1.1118, test_acc: 0.5934, best: 0.5991, time: 0:02:23
 Epoch: 118, lr: 1.0e-02, train_loss: 1.2025, train_acc: 0.5572 test_loss: 1.0720, test_acc: 0.6071, best: 0.6071, time: 0:02:23
 Epoch: 119, lr: 1.0e-02, train_loss: 1.2045, train_acc: 0.5566 test_loss: 1.0323, test_acc: 0.6215, best: 0.6215, time: 0:02:23
 Epoch: 120, lr: 1.0e-02, train_loss: 1.1964, train_acc: 0.5602 test_loss: 1.0648, test_acc: 0.6111, best: 0.6215, time: 0:02:23
 Epoch: 121, lr: 1.0e-02, train_loss: 1.2043, train_acc: 0.5652 test_loss: 1.1050, test_acc: 0.6066, best: 0.6215, time: 0:02:24
 Epoch: 122, lr: 1.0e-02, train_loss: 1.1776, train_acc: 0.5732 test_loss: 1.0711, test_acc: 0.6075, best: 0.6215, time: 0:02:24
 Epoch: 123, lr: 1.0e-02, train_loss: 1.1785, train_acc: 0.5712 test_loss: 1.0411, test_acc: 0.6300, best: 0.6300, time: 0:02:24
 Epoch: 124, lr: 1.0e-02, train_loss: 1.2028, train_acc: 0.5610 test_loss: 1.1730, test_acc: 0.5789, best: 0.6300, time: 0:02:24
 Epoch: 125, lr: 1.0e-02, train_loss: 1.2207, train_acc: 0.5516 test_loss: 1.0744, test_acc: 0.6139, best: 0.6300, time: 0:02:24
 Epoch: 126, lr: 1.0e-02, train_loss: 1.1964, train_acc: 0.5610 test_loss: 1.0669, test_acc: 0.6165, best: 0.6300, time: 0:02:23
 Epoch: 127, lr: 1.0e-02, train_loss: 1.1867, train_acc: 0.5726 test_loss: 1.2698, test_acc: 0.5353, best: 0.6300, time: 0:02:24
 Epoch: 128, lr: 1.0e-02, train_loss: 1.2596, train_acc: 0.5388 test_loss: 1.1998, test_acc: 0.5630, best: 0.6300, time: 0:02:24
 Epoch: 129, lr: 1.0e-02, train_loss: 1.2255, train_acc: 0.5552 test_loss: 1.1395, test_acc: 0.5893, best: 0.6300, time: 0:02:23
 Epoch: 130, lr: 1.0e-02, train_loss: 1.1902, train_acc: 0.5668 test_loss: 1.0829, test_acc: 0.6010, best: 0.6300, time: 0:02:23
 Epoch: 131, lr: 1.0e-02, train_loss: 1.1887, train_acc: 0.5612 test_loss: 1.0609, test_acc: 0.6256, best: 0.6300, time: 0:02:23
 Epoch: 132, lr: 1.0e-02, train_loss: 1.1760, train_acc: 0.5736 test_loss: 1.0711, test_acc: 0.6192, best: 0.6300, time: 0:02:23
 Epoch: 133, lr: 1.0e-02, train_loss: 1.1531, train_acc: 0.5766 test_loss: 1.0934, test_acc: 0.6029, best: 0.6300, time: 0:02:23
 Epoch: 134, lr: 1.0e-02, train_loss: 1.1563, train_acc: 0.5912 test_loss: 1.0531, test_acc: 0.6206, best: 0.6300, time: 0:02:23
 Epoch: 135, lr: 1.0e-02, train_loss: 1.1647, train_acc: 0.5714 test_loss: 1.0733, test_acc: 0.6115, best: 0.6300, time: 0:02:23
 Epoch: 136, lr: 1.0e-02, train_loss: 1.1703, train_acc: 0.5770 test_loss: 1.0461, test_acc: 0.6252, best: 0.6300, time: 0:02:23
 Epoch: 137, lr: 1.0e-02, train_loss: 1.1576, train_acc: 0.5796 test_loss: 1.1162, test_acc: 0.5970, best: 0.6300, time: 0:02:23
 Epoch: 138, lr: 1.0e-02, train_loss: 1.1473, train_acc: 0.5768 test_loss: 1.0692, test_acc: 0.6058, best: 0.6300, time: 0:02:23
 Epoch: 139, lr: 1.0e-02, train_loss: 1.1594, train_acc: 0.5754 test_loss: 1.0734, test_acc: 0.6079, best: 0.6300, time: 0:02:24
 Epoch: 140, lr: 1.0e-02, train_loss: 1.1201, train_acc: 0.5988 test_loss: 1.0739, test_acc: 0.6149, best: 0.6300, time: 0:02:23
 Epoch: 141, lr: 1.0e-02, train_loss: 1.1609, train_acc: 0.5802 test_loss: 1.0608, test_acc: 0.6098, best: 0.6300, time: 0:02:23
 Epoch: 142, lr: 1.0e-02, train_loss: 1.1714, train_acc: 0.5786 test_loss: 1.1082, test_acc: 0.5933, best: 0.6300, time: 0:02:23
 Epoch: 143, lr: 1.0e-02, train_loss: 1.1745, train_acc: 0.5780 test_loss: 1.0546, test_acc: 0.6144, best: 0.6300, time: 0:02:23
 Epoch: 144, lr: 1.0e-02, train_loss: 1.1451, train_acc: 0.5806 test_loss: 1.0380, test_acc: 0.6228, best: 0.6300, time: 0:02:23
 Epoch: 145, lr: 1.0e-02, train_loss: 1.1076, train_acc: 0.5952 test_loss: 1.0238, test_acc: 0.6266, best: 0.6300, time: 0:02:23
 Epoch: 146, lr: 1.0e-02, train_loss: 1.1009, train_acc: 0.6026 test_loss: 1.0218, test_acc: 0.6312, best: 0.6312, time: 0:02:24
 Epoch: 147, lr: 1.0e-02, train_loss: 1.1304, train_acc: 0.5920 test_loss: 1.0423, test_acc: 0.6199, best: 0.6312, time: 0:02:24
 Epoch: 148, lr: 1.0e-02, train_loss: 1.1492, train_acc: 0.5782 test_loss: 1.0735, test_acc: 0.6068, best: 0.6312, time: 0:02:23
 Epoch: 149, lr: 1.0e-02, train_loss: 1.0967, train_acc: 0.5982 test_loss: 1.0074, test_acc: 0.6351, best: 0.6351, time: 0:02:24
 Epoch: 150, lr: 1.0e-02, train_loss: 1.1367, train_acc: 0.5768 test_loss: 1.0743, test_acc: 0.6060, best: 0.6351, time: 0:02:23
 Epoch: 151, lr: 1.0e-02, train_loss: 1.1066, train_acc: 0.5926 test_loss: 1.0535, test_acc: 0.6131, best: 0.6351, time: 0:02:23
 Epoch: 152, lr: 1.0e-02, train_loss: 1.0950, train_acc: 0.5976 test_loss: 1.0323, test_acc: 0.6225, best: 0.6351, time: 0:02:24
 Epoch: 153, lr: 1.0e-02, train_loss: 1.1007, train_acc: 0.5952 test_loss: 1.0762, test_acc: 0.6035, best: 0.6351, time: 0:02:24
 Epoch: 154, lr: 1.0e-02, train_loss: 1.0799, train_acc: 0.6122 test_loss: 1.0548, test_acc: 0.6202, best: 0.6351, time: 0:02:24
 Epoch: 155, lr: 1.0e-02, train_loss: 1.0735, train_acc: 0.6058 test_loss: 1.0491, test_acc: 0.6180, best: 0.6351, time: 0:02:23
 Epoch: 156, lr: 1.0e-02, train_loss: 1.0571, train_acc: 0.6216 test_loss: 1.0165, test_acc: 0.6330, best: 0.6351, time: 0:02:24
 Epoch: 157, lr: 1.0e-02, train_loss: 1.0711, train_acc: 0.6188 test_loss: 1.0424, test_acc: 0.6249, best: 0.6351, time: 0:02:23
 Epoch: 158, lr: 1.0e-02, train_loss: 1.0937, train_acc: 0.5980 test_loss: 0.9928, test_acc: 0.6436, best: 0.6436, time: 0:02:24
 Epoch: 159, lr: 1.0e-02, train_loss: 1.0749, train_acc: 0.6128 test_loss: 1.0254, test_acc: 0.6209, best: 0.6436, time: 0:02:24
 Epoch: 160, lr: 1.0e-02, train_loss: 1.0593, train_acc: 0.6150 test_loss: 1.0395, test_acc: 0.6212, best: 0.6436, time: 0:02:24
 Epoch: 161, lr: 1.0e-02, train_loss: 1.0763, train_acc: 0.6108 test_loss: 0.9780, test_acc: 0.6502, best: 0.6502, time: 0:02:24
 Epoch: 162, lr: 1.0e-02, train_loss: 1.0436, train_acc: 0.6186 test_loss: 1.0219, test_acc: 0.6328, best: 0.6502, time: 0:02:24
 Epoch: 163, lr: 1.0e-02, train_loss: 1.0467, train_acc: 0.6244 test_loss: 1.0058, test_acc: 0.6402, best: 0.6502, time: 0:02:24
 Epoch: 164, lr: 1.0e-02, train_loss: 1.0589, train_acc: 0.6126 test_loss: 0.9749, test_acc: 0.6460, best: 0.6502, time: 0:02:24
 Epoch: 165, lr: 1.0e-02, train_loss: 1.0221, train_acc: 0.6362 test_loss: 0.9964, test_acc: 0.6382, best: 0.6502, time: 0:02:24
 Epoch: 166, lr: 1.0e-02, train_loss: 1.0547, train_acc: 0.6192 test_loss: 1.0110, test_acc: 0.6342, best: 0.6502, time: 0:02:24
 Epoch: 167, lr: 1.0e-02, train_loss: 1.0328, train_acc: 0.6272 test_loss: 1.0253, test_acc: 0.6308, best: 0.6502, time: 0:02:24
 Epoch: 168, lr: 1.0e-02, train_loss: 1.0773, train_acc: 0.6036 test_loss: 0.9810, test_acc: 0.6416, best: 0.6502, time: 0:02:24
 Epoch: 169, lr: 1.0e-02, train_loss: 1.0581, train_acc: 0.6100 test_loss: 1.0277, test_acc: 0.6250, best: 0.6502, time: 0:02:24
 Epoch: 170, lr: 1.0e-02, train_loss: 1.0595, train_acc: 0.6192 test_loss: 1.0088, test_acc: 0.6368, best: 0.6502, time: 0:02:24
 Epoch: 171, lr: 1.0e-02, train_loss: 1.1250, train_acc: 0.5880 test_loss: 1.0494, test_acc: 0.6126, best: 0.6502, time: 0:02:24
 Epoch: 172, lr: 1.0e-02, train_loss: 1.0952, train_acc: 0.5996 test_loss: 1.0608, test_acc: 0.6149, best: 0.6502, time: 0:02:24
 Epoch: 173, lr: 1.0e-02, train_loss: 1.0614, train_acc: 0.6154 test_loss: 1.0160, test_acc: 0.6322, best: 0.6502, time: 0:02:24
 Epoch: 174, lr: 1.0e-02, train_loss: 1.0604, train_acc: 0.6086 test_loss: 1.0469, test_acc: 0.6140, best: 0.6502, time: 0:02:24
 Epoch: 175, lr: 1.0e-02, train_loss: 1.0517, train_acc: 0.6158 test_loss: 1.0243, test_acc: 0.6295, best: 0.6502, time: 0:02:24
 Epoch: 176, lr: 1.0e-02, train_loss: 1.0573, train_acc: 0.6150 test_loss: 0.9938, test_acc: 0.6401, best: 0.6502, time: 0:02:24
 Epoch: 177, lr: 1.0e-02, train_loss: 1.0578, train_acc: 0.6208 test_loss: 1.0354, test_acc: 0.6279, best: 0.6502, time: 0:02:24
 Epoch: 178, lr: 1.0e-02, train_loss: 1.0856, train_acc: 0.6002 test_loss: 1.0072, test_acc: 0.6364, best: 0.6502, time: 0:02:24
 Epoch: 179, lr: 1.0e-02, train_loss: 1.0695, train_acc: 0.6232 test_loss: 1.1368, test_acc: 0.5873, best: 0.6502, time: 0:02:24
 Epoch: 180, lr: 2.0e-03, train_loss: 1.0893, train_acc: 0.6108 test_loss: 0.9634, test_acc: 0.6541, best: 0.6541, time: 0:02:24
 Epoch: 181, lr: 2.0e-03, train_loss: 0.9813, train_acc: 0.6434 test_loss: 0.9433, test_acc: 0.6595, best: 0.6595, time: 0:02:24
 Epoch: 182, lr: 2.0e-03, train_loss: 0.9733, train_acc: 0.6504 test_loss: 0.9343, test_acc: 0.6621, best: 0.6621, time: 0:02:24
 Epoch: 183, lr: 2.0e-03, train_loss: 0.9735, train_acc: 0.6508 test_loss: 0.9311, test_acc: 0.6640, best: 0.6640, time: 0:02:24
 Epoch: 184, lr: 2.0e-03, train_loss: 0.9384, train_acc: 0.6636 test_loss: 0.9275, test_acc: 0.6623, best: 0.6640, time: 0:02:24
 Epoch: 185, lr: 2.0e-03, train_loss: 0.9636, train_acc: 0.6536 test_loss: 0.9283, test_acc: 0.6680, best: 0.6680, time: 0:02:24
 Epoch: 186, lr: 2.0e-03, train_loss: 0.9301, train_acc: 0.6646 test_loss: 0.9168, test_acc: 0.6680, best: 0.6680, time: 0:02:24
 Epoch: 187, lr: 2.0e-03, train_loss: 0.9254, train_acc: 0.6730 test_loss: 0.9243, test_acc: 0.6671, best: 0.6680, time: 0:02:24
 Epoch: 188, lr: 2.0e-03, train_loss: 0.9295, train_acc: 0.6632 test_loss: 0.9314, test_acc: 0.6676, best: 0.6680, time: 0:02:24
 Epoch: 189, lr: 2.0e-03, train_loss: 0.9241, train_acc: 0.6662 test_loss: 0.9459, test_acc: 0.6590, best: 0.6680, time: 0:02:24
 Epoch: 190, lr: 2.0e-03, train_loss: 0.9256, train_acc: 0.6636 test_loss: 0.9327, test_acc: 0.6617, best: 0.6680, time: 0:02:24
 Epoch: 191, lr: 2.0e-03, train_loss: 0.9338, train_acc: 0.6566 test_loss: 0.9261, test_acc: 0.6711, best: 0.6711, time: 0:02:24
 Epoch: 192, lr: 2.0e-03, train_loss: 0.9006, train_acc: 0.6732 test_loss: 0.9244, test_acc: 0.6656, best: 0.6711, time: 0:02:24
 Epoch: 193, lr: 2.0e-03, train_loss: 0.9046, train_acc: 0.6670 test_loss: 0.9485, test_acc: 0.6594, best: 0.6711, time: 0:02:24
 Epoch: 194, lr: 2.0e-03, train_loss: 0.8898, train_acc: 0.6754 test_loss: 0.9248, test_acc: 0.6665, best: 0.6711, time: 0:02:24
 Epoch: 195, lr: 2.0e-03, train_loss: 0.8997, train_acc: 0.6804 test_loss: 0.9142, test_acc: 0.6685, best: 0.6711, time: 0:02:24
 Epoch: 196, lr: 2.0e-03, train_loss: 0.9024, train_acc: 0.6774 test_loss: 0.9201, test_acc: 0.6681, best: 0.6711, time: 0:02:24
 Epoch: 197, lr: 2.0e-03, train_loss: 0.8947, train_acc: 0.6760 test_loss: 0.9263, test_acc: 0.6717, best: 0.6717, time: 0:02:25
 Epoch: 198, lr: 2.0e-03, train_loss: 0.8883, train_acc: 0.6766 test_loss: 0.9182, test_acc: 0.6640, best: 0.6717, time: 0:02:24
 Epoch: 199, lr: 2.0e-03, train_loss: 0.8995, train_acc: 0.6774 test_loss: 0.9159, test_acc: 0.6693, best: 0.6717, time: 0:02:24
 Epoch: 200, lr: 2.0e-03, train_loss: 0.8821, train_acc: 0.6826 test_loss: 0.9115, test_acc: 0.6720, best: 0.6720, time: 0:02:25
 Epoch: 201, lr: 2.0e-03, train_loss: 0.8835, train_acc: 0.6752 test_loss: 0.9424, test_acc: 0.6644, best: 0.6720, time: 0:02:24
 Epoch: 202, lr: 2.0e-03, train_loss: 0.8922, train_acc: 0.6722 test_loss: 0.9151, test_acc: 0.6734, best: 0.6734, time: 0:02:24
 Epoch: 203, lr: 2.0e-03, train_loss: 0.8699, train_acc: 0.6886 test_loss: 0.9250, test_acc: 0.6716, best: 0.6734, time: 0:02:24
 Epoch: 204, lr: 2.0e-03, train_loss: 0.8897, train_acc: 0.6832 test_loss: 0.9401, test_acc: 0.6630, best: 0.6734, time: 0:02:24
 Epoch: 205, lr: 2.0e-03, train_loss: 0.9024, train_acc: 0.6730 test_loss: 0.9190, test_acc: 0.6659, best: 0.6734, time: 0:02:24
 Epoch: 206, lr: 2.0e-03, train_loss: 0.8984, train_acc: 0.6746 test_loss: 0.9004, test_acc: 0.6754, best: 0.6754, time: 0:02:24
 Epoch: 207, lr: 2.0e-03, train_loss: 0.8715, train_acc: 0.6826 test_loss: 0.9135, test_acc: 0.6715, best: 0.6754, time: 0:02:24
 Epoch: 208, lr: 2.0e-03, train_loss: 0.8884, train_acc: 0.6822 test_loss: 0.9145, test_acc: 0.6710, best: 0.6754, time: 0:02:24
 Epoch: 209, lr: 2.0e-03, train_loss: 0.8682, train_acc: 0.6820 test_loss: 0.9021, test_acc: 0.6760, best: 0.6760, time: 0:02:24
 Epoch: 210, lr: 2.0e-03, train_loss: 0.8643, train_acc: 0.6904 test_loss: 0.8995, test_acc: 0.6766, best: 0.6766, time: 0:02:24
 Epoch: 211, lr: 2.0e-03, train_loss: 0.8723, train_acc: 0.6870 test_loss: 0.9125, test_acc: 0.6727, best: 0.6766, time: 0:02:24
 Epoch: 212, lr: 2.0e-03, train_loss: 0.8828, train_acc: 0.6784 test_loss: 0.9109, test_acc: 0.6749, best: 0.6766, time: 0:02:24
 Epoch: 213, lr: 2.0e-03, train_loss: 0.8668, train_acc: 0.6904 test_loss: 0.9335, test_acc: 0.6684, best: 0.6766, time: 0:02:24
 Epoch: 214, lr: 2.0e-03, train_loss: 0.8678, train_acc: 0.6906 test_loss: 0.9227, test_acc: 0.6729, best: 0.6766, time: 0:02:24
 Epoch: 215, lr: 2.0e-03, train_loss: 0.8723, train_acc: 0.6880 test_loss: 0.9109, test_acc: 0.6727, best: 0.6766, time: 0:02:24
 Epoch: 216, lr: 2.0e-03, train_loss: 0.8673, train_acc: 0.6862 test_loss: 0.9336, test_acc: 0.6703, best: 0.6766, time: 0:02:24
 Epoch: 217, lr: 2.0e-03, train_loss: 0.8946, train_acc: 0.6782 test_loss: 0.9248, test_acc: 0.6660, best: 0.6766, time: 0:02:24
 Epoch: 218, lr: 2.0e-03, train_loss: 0.8436, train_acc: 0.6964 test_loss: 0.9074, test_acc: 0.6736, best: 0.6766, time: 0:02:24
 Epoch: 219, lr: 2.0e-03, train_loss: 0.8907, train_acc: 0.6752 test_loss: 0.9134, test_acc: 0.6733, best: 0.6766, time: 0:02:25
 Epoch: 220, lr: 2.0e-03, train_loss: 0.8563, train_acc: 0.6890 test_loss: 0.9128, test_acc: 0.6746, best: 0.6766, time: 0:02:24
 Epoch: 221, lr: 2.0e-03, train_loss: 0.8672, train_acc: 0.6842 test_loss: 0.9210, test_acc: 0.6707, best: 0.6766, time: 0:02:25
 Epoch: 222, lr: 2.0e-03, train_loss: 0.8338, train_acc: 0.6964 test_loss: 0.9263, test_acc: 0.6706, best: 0.6766, time: 0:02:24
 Epoch: 223, lr: 2.0e-03, train_loss: 0.8663, train_acc: 0.6922 test_loss: 0.9180, test_acc: 0.6783, best: 0.6783, time: 0:02:24
 Epoch: 224, lr: 2.0e-03, train_loss: 0.8735, train_acc: 0.6882 test_loss: 0.9440, test_acc: 0.6695, best: 0.6783, time: 0:02:24
 Epoch: 225, lr: 2.0e-03, train_loss: 0.8587, train_acc: 0.6898 test_loss: 0.9334, test_acc: 0.6704, best: 0.6783, time: 0:02:24
 Epoch: 226, lr: 2.0e-03, train_loss: 0.8518, train_acc: 0.6938 test_loss: 0.9319, test_acc: 0.6646, best: 0.6783, time: 0:02:24
 Epoch: 227, lr: 2.0e-03, train_loss: 0.8487, train_acc: 0.7028 test_loss: 0.9036, test_acc: 0.6761, best: 0.6783, time: 0:02:24
 Epoch: 228, lr: 2.0e-03, train_loss: 0.8604, train_acc: 0.6896 test_loss: 0.9324, test_acc: 0.6716, best: 0.6783, time: 0:02:24
 Epoch: 229, lr: 2.0e-03, train_loss: 0.8665, train_acc: 0.6840 test_loss: 0.9127, test_acc: 0.6726, best: 0.6783, time: 0:02:24
 Epoch: 230, lr: 2.0e-03, train_loss: 0.8347, train_acc: 0.7006 test_loss: 0.9233, test_acc: 0.6687, best: 0.6783, time: 0:02:24
 Epoch: 231, lr: 2.0e-03, train_loss: 0.8375, train_acc: 0.7030 test_loss: 0.9129, test_acc: 0.6709, best: 0.6783, time: 0:02:25
 Epoch: 232, lr: 2.0e-03, train_loss: 0.8434, train_acc: 0.6922 test_loss: 0.9410, test_acc: 0.6657, best: 0.6783, time: 0:02:24
 Epoch: 233, lr: 2.0e-03, train_loss: 0.8472, train_acc: 0.6942 test_loss: 0.9288, test_acc: 0.6663, best: 0.6783, time: 0:02:24
 Epoch: 234, lr: 2.0e-03, train_loss: 0.8303, train_acc: 0.7018 test_loss: 0.9086, test_acc: 0.6717, best: 0.6783, time: 0:02:24
 Epoch: 235, lr: 2.0e-03, train_loss: 0.8532, train_acc: 0.6952 test_loss: 0.9263, test_acc: 0.6711, best: 0.6783, time: 0:02:24
 Epoch: 236, lr: 2.0e-03, train_loss: 0.8371, train_acc: 0.6938 test_loss: 0.9186, test_acc: 0.6729, best: 0.6783, time: 0:02:24
 Epoch: 237, lr: 2.0e-03, train_loss: 0.8342, train_acc: 0.6974 test_loss: 0.9364, test_acc: 0.6679, best: 0.6783, time: 0:02:24
 Epoch: 238, lr: 2.0e-03, train_loss: 0.8490, train_acc: 0.6948 test_loss: 0.9200, test_acc: 0.6734, best: 0.6783, time: 0:02:24
 Epoch: 239, lr: 2.0e-03, train_loss: 0.8422, train_acc: 0.7018 test_loss: 0.9160, test_acc: 0.6759, best: 0.6783, time: 0:02:24
 Epoch: 240, lr: 4.0e-04, train_loss: 0.8286, train_acc: 0.7010 test_loss: 0.9243, test_acc: 0.6737, best: 0.6783, time: 0:02:24
 Epoch: 241, lr: 4.0e-04, train_loss: 0.8220, train_acc: 0.7114 test_loss: 0.9097, test_acc: 0.6790, best: 0.6790, time: 0:02:24
 Epoch: 242, lr: 4.0e-04, train_loss: 0.8166, train_acc: 0.7122 test_loss: 0.9102, test_acc: 0.6754, best: 0.6790, time: 0:02:24
 Epoch: 243, lr: 4.0e-04, train_loss: 0.7955, train_acc: 0.7154 test_loss: 0.9130, test_acc: 0.6790, best: 0.6790, time: 0:02:24
 Epoch: 244, lr: 4.0e-04, train_loss: 0.8058, train_acc: 0.7098 test_loss: 0.9057, test_acc: 0.6821, best: 0.6821, time: 0:02:24
 Epoch: 245, lr: 4.0e-04, train_loss: 0.8101, train_acc: 0.7112 test_loss: 0.9115, test_acc: 0.6777, best: 0.6821, time: 0:02:24
 Epoch: 246, lr: 4.0e-04, train_loss: 0.8027, train_acc: 0.7096 test_loss: 0.9155, test_acc: 0.6747, best: 0.6821, time: 0:02:24
 Epoch: 247, lr: 4.0e-04, train_loss: 0.8019, train_acc: 0.7164 test_loss: 0.9033, test_acc: 0.6765, best: 0.6821, time: 0:02:24
 Epoch: 248, lr: 4.0e-04, train_loss: 0.8146, train_acc: 0.7098 test_loss: 0.9145, test_acc: 0.6715, best: 0.6821, time: 0:02:24
 Epoch: 249, lr: 4.0e-04, train_loss: 0.7970, train_acc: 0.7050 test_loss: 0.9065, test_acc: 0.6785, best: 0.6821, time: 0:02:24
 Epoch: 250, lr: 4.0e-04, train_loss: 0.7889, train_acc: 0.7280 test_loss: 0.9123, test_acc: 0.6790, best: 0.6821, time: 0:02:25
 Epoch: 251, lr: 4.0e-04, train_loss: 0.7831, train_acc: 0.7174 test_loss: 0.9107, test_acc: 0.6790, best: 0.6821, time: 0:02:24
 Epoch: 252, lr: 4.0e-04, train_loss: 0.8172, train_acc: 0.7026 test_loss: 0.9109, test_acc: 0.6794, best: 0.6821, time: 0:02:24
 Epoch: 253, lr: 4.0e-04, train_loss: 0.8106, train_acc: 0.7106 test_loss: 0.9045, test_acc: 0.6769, best: 0.6821, time: 0:02:24
 Epoch: 254, lr: 4.0e-04, train_loss: 0.7892, train_acc: 0.7186 test_loss: 0.9071, test_acc: 0.6751, best: 0.6821, time: 0:02:24
 Epoch: 255, lr: 4.0e-04, train_loss: 0.7854, train_acc: 0.7166 test_loss: 0.9109, test_acc: 0.6804, best: 0.6821, time: 0:02:24
 Epoch: 256, lr: 4.0e-04, train_loss: 0.8014, train_acc: 0.7184 test_loss: 0.8969, test_acc: 0.6831, best: 0.6831, time: 0:02:24
 Epoch: 257, lr: 4.0e-04, train_loss: 0.7839, train_acc: 0.7198 test_loss: 0.9053, test_acc: 0.6780, best: 0.6831, time: 0:02:24
 Epoch: 258, lr: 4.0e-04, train_loss: 0.7871, train_acc: 0.7200 test_loss: 0.8949, test_acc: 0.6837, best: 0.6837, time: 0:02:24
 Epoch: 259, lr: 4.0e-04, train_loss: 0.7975, train_acc: 0.7124 test_loss: 0.9081, test_acc: 0.6810, best: 0.6837, time: 0:02:25
 Epoch: 260, lr: 4.0e-04, train_loss: 0.7931, train_acc: 0.7122 test_loss: 0.9001, test_acc: 0.6776, best: 0.6837, time: 0:02:24
 Epoch: 261, lr: 4.0e-04, train_loss: 0.7784, train_acc: 0.7230 test_loss: 0.9074, test_acc: 0.6797, best: 0.6837, time: 0:02:25
 Epoch: 262, lr: 4.0e-04, train_loss: 0.8104, train_acc: 0.7078 test_loss: 0.9024, test_acc: 0.6816, best: 0.6837, time: 0:02:24
 Epoch: 263, lr: 4.0e-04, train_loss: 0.7832, train_acc: 0.7206 test_loss: 0.9184, test_acc: 0.6770, best: 0.6837, time: 0:02:25
 Epoch: 264, lr: 4.0e-04, train_loss: 0.7847, train_acc: 0.7184 test_loss: 0.9129, test_acc: 0.6813, best: 0.6837, time: 0:02:25
 Epoch: 265, lr: 4.0e-04, train_loss: 0.8001, train_acc: 0.7134 test_loss: 0.9052, test_acc: 0.6764, best: 0.6837, time: 0:02:24
 Epoch: 266, lr: 4.0e-04, train_loss: 0.7990, train_acc: 0.7174 test_loss: 0.8893, test_acc: 0.6846, best: 0.6846, time: 0:02:24
 Epoch: 267, lr: 4.0e-04, train_loss: 0.8039, train_acc: 0.7188 test_loss: 0.9070, test_acc: 0.6777, best: 0.6846, time: 0:02:24
 Epoch: 268, lr: 4.0e-04, train_loss: 0.7997, train_acc: 0.7144 test_loss: 0.9005, test_acc: 0.6781, best: 0.6846, time: 0:02:25
 Epoch: 269, lr: 4.0e-04, train_loss: 0.7768, train_acc: 0.7252 test_loss: 0.9051, test_acc: 0.6807, best: 0.6846, time: 0:02:24
 Epoch: 270, lr: 8.0e-05, train_loss: 0.7860, train_acc: 0.7212 test_loss: 0.9014, test_acc: 0.6785, best: 0.6846, time: 0:02:24
 Epoch: 271, lr: 8.0e-05, train_loss: 0.7848, train_acc: 0.7220 test_loss: 0.9022, test_acc: 0.6809, best: 0.6846, time: 0:02:25
 Epoch: 272, lr: 8.0e-05, train_loss: 0.7828, train_acc: 0.7266 test_loss: 0.9158, test_acc: 0.6816, best: 0.6846, time: 0:02:25
 Epoch: 273, lr: 8.0e-05, train_loss: 0.7894, train_acc: 0.7260 test_loss: 0.9057, test_acc: 0.6763, best: 0.6846, time: 0:02:25
 Epoch: 274, lr: 8.0e-05, train_loss: 0.7693, train_acc: 0.7242 test_loss: 0.9048, test_acc: 0.6829, best: 0.6846, time: 0:02:25
 Epoch: 275, lr: 8.0e-05, train_loss: 0.7962, train_acc: 0.7142 test_loss: 0.9077, test_acc: 0.6781, best: 0.6846, time: 0:02:24
 Epoch: 276, lr: 8.0e-05, train_loss: 0.7760, train_acc: 0.7284 test_loss: 0.9083, test_acc: 0.6775, best: 0.6846, time: 0:02:24
 Epoch: 277, lr: 8.0e-05, train_loss: 0.7698, train_acc: 0.7250 test_loss: 0.8994, test_acc: 0.6794, best: 0.6846, time: 0:02:25
 Epoch: 278, lr: 8.0e-05, train_loss: 0.7798, train_acc: 0.7192 test_loss: 0.9097, test_acc: 0.6780, best: 0.6846, time: 0:02:25
 Epoch: 279, lr: 8.0e-05, train_loss: 0.7747, train_acc: 0.7278 test_loss: 0.9108, test_acc: 0.6763, best: 0.6846, time: 0:02:25
 Epoch: 280, lr: 8.0e-05, train_loss: 0.7659, train_acc: 0.7330 test_loss: 0.8984, test_acc: 0.6807, best: 0.6846, time: 0:02:25
 Epoch: 281, lr: 8.0e-05, train_loss: 0.8008, train_acc: 0.7156 test_loss: 0.9078, test_acc: 0.6763, best: 0.6846, time: 0:02:25
 Epoch: 282, lr: 8.0e-05, train_loss: 0.7897, train_acc: 0.7206 test_loss: 0.9006, test_acc: 0.6793, best: 0.6846, time: 0:02:26
 Epoch: 283, lr: 8.0e-05, train_loss: 0.7803, train_acc: 0.7172 test_loss: 0.9120, test_acc: 0.6790, best: 0.6846, time: 0:02:25
 Epoch: 284, lr: 8.0e-05, train_loss: 0.7548, train_acc: 0.7292 test_loss: 0.9018, test_acc: 0.6800, best: 0.6846, time: 0:02:26
 Epoch: 285, lr: 8.0e-05, train_loss: 0.7878, train_acc: 0.7194 test_loss: 0.9005, test_acc: 0.6795, best: 0.6846, time: 0:02:25
 Epoch: 286, lr: 8.0e-05, train_loss: 0.7554, train_acc: 0.7254 test_loss: 0.9093, test_acc: 0.6799, best: 0.6846, time: 0:02:26
 Epoch: 287, lr: 8.0e-05, train_loss: 0.7580, train_acc: 0.7296 test_loss: 0.9038, test_acc: 0.6780, best: 0.6846, time: 0:02:26
 Epoch: 288, lr: 8.0e-05, train_loss: 0.7991, train_acc: 0.7082 test_loss: 0.9163, test_acc: 0.6801, best: 0.6846, time: 0:02:26
 Epoch: 289, lr: 8.0e-05, train_loss: 0.7577, train_acc: 0.7258 test_loss: 0.8969, test_acc: 0.6814, best: 0.6846, time: 0:02:25
 Epoch: 290, lr: 8.0e-05, train_loss: 0.7704, train_acc: 0.7260 test_loss: 0.9027, test_acc: 0.6770, best: 0.6846, time: 0:02:25
 Epoch: 291, lr: 8.0e-05, train_loss: 0.7955, train_acc: 0.7094 test_loss: 0.9030, test_acc: 0.6805, best: 0.6846, time: 0:02:25
 Epoch: 292, lr: 8.0e-05, train_loss: 0.7781, train_acc: 0.7198 test_loss: 0.9137, test_acc: 0.6765, best: 0.6846, time: 0:02:26
 Epoch: 293, lr: 8.0e-05, train_loss: 0.7716, train_acc: 0.7270 test_loss: 0.8989, test_acc: 0.6803, best: 0.6846, time: 0:02:25
 Epoch: 294, lr: 8.0e-05, train_loss: 0.7715, train_acc: 0.7266 test_loss: 0.9035, test_acc: 0.6790, best: 0.6846, time: 0:02:25
 Epoch: 295, lr: 8.0e-05, train_loss: 0.7598, train_acc: 0.7304 test_loss: 0.9041, test_acc: 0.6809, best: 0.6846, time: 0:02:25
 Epoch: 296, lr: 8.0e-05, train_loss: 0.7652, train_acc: 0.7270 test_loss: 0.8995, test_acc: 0.6799, best: 0.6846, time: 0:02:25
 Epoch: 297, lr: 8.0e-05, train_loss: 0.7569, train_acc: 0.7264 test_loss: 0.9010, test_acc: 0.6800, best: 0.6846, time: 0:02:25
 Epoch: 298, lr: 8.0e-05, train_loss: 0.7694, train_acc: 0.7204 test_loss: 0.9064, test_acc: 0.6807, best: 0.6846, time: 0:02:25
 Epoch: 299, lr: 8.0e-05, train_loss: 0.7770, train_acc: 0.7184 test_loss: 0.9074, test_acc: 0.6817, best: 0.6846, time: 0:02:26
 Highest accuracy: 0.6846