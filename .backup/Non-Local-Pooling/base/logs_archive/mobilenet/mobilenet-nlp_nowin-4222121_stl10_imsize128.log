
 Run on time: 2022-07-03 17:02:18.497941

 Architecture: mobilenet-nlp_nowin-4222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 4,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 4,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 8,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 16,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 64,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-NLP_NOWIN-4222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (4): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(128, 96, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 64)
                  (col_embed): Embedding(256, 64)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.2041, train_acc: 0.1148 test_loss: 2.7431, test_acc: 0.1165, best: 0.1165, time: 0:02:12
 Epoch: 2, lr: 1.0e-02, train_loss: 2.5347, train_acc: 0.1078 test_loss: 2.3668, test_acc: 0.1061, best: 0.1165, time: 0:02:11
 Epoch: 3, lr: 1.0e-02, train_loss: 2.3583, train_acc: 0.1246 test_loss: 2.2695, test_acc: 0.1359, best: 0.1359, time: 0:02:11
 Epoch: 4, lr: 1.0e-02, train_loss: 2.3108, train_acc: 0.1298 test_loss: 2.3224, test_acc: 0.1616, best: 0.1616, time: 0:02:11
 Epoch: 5, lr: 1.0e-02, train_loss: 2.2980, train_acc: 0.1280 test_loss: 2.3083, test_acc: 0.1159, best: 0.1616, time: 0:02:14
 Epoch: 6, lr: 1.0e-02, train_loss: 2.3090, train_acc: 0.1244 test_loss: 2.2793, test_acc: 0.1441, best: 0.1616, time: 0:02:15
 Epoch: 7, lr: 1.0e-02, train_loss: 2.3016, train_acc: 0.1228 test_loss: 2.5199, test_acc: 0.0980, best: 0.1616, time: 0:02:15
 Epoch: 8, lr: 1.0e-02, train_loss: 2.3185, train_acc: 0.1060 test_loss: 2.3153, test_acc: 0.1041, best: 0.1616, time: 0:02:12
 Epoch: 9, lr: 1.0e-02, train_loss: 2.3061, train_acc: 0.1148 test_loss: 2.3059, test_acc: 0.1000, best: 0.1616, time: 0:02:12
 Epoch: 10, lr: 1.0e-02, train_loss: 2.3055, train_acc: 0.1132 test_loss: 2.3019, test_acc: 0.1364, best: 0.1616, time: 0:02:12
 Epoch: 11, lr: 1.0e-02, train_loss: 2.2862, train_acc: 0.1288 test_loss: 2.2859, test_acc: 0.1445, best: 0.1616, time: 0:02:12
 Epoch: 12, lr: 1.0e-02, train_loss: 2.2989, train_acc: 0.1168 test_loss: 2.3083, test_acc: 0.1000, best: 0.1616, time: 0:02:12
 Epoch: 13, lr: 1.0e-02, train_loss: 2.3056, train_acc: 0.1032 test_loss: 2.2994, test_acc: 0.1240, best: 0.1616, time: 0:02:12
 Epoch: 14, lr: 1.0e-02, train_loss: 2.2899, train_acc: 0.1222 test_loss: 2.2927, test_acc: 0.1191, best: 0.1616, time: 0:02:12
 Epoch: 15, lr: 1.0e-02, train_loss: 2.2812, train_acc: 0.1332 test_loss: 2.2855, test_acc: 0.1330, best: 0.1616, time: 0:02:12
 Epoch: 16, lr: 1.0e-02, train_loss: 2.2707, train_acc: 0.1366 test_loss: 2.2745, test_acc: 0.1341, best: 0.1616, time: 0:02:11
 Epoch: 17, lr: 1.0e-02, train_loss: 2.2576, train_acc: 0.1476 test_loss: 2.2805, test_acc: 0.1143, best: 0.1616, time: 0:02:12
 Epoch: 18, lr: 1.0e-02, train_loss: 2.2976, train_acc: 0.1114 test_loss: 2.3057, test_acc: 0.0984, best: 0.1616, time: 0:02:12
 Epoch: 19, lr: 1.0e-02, train_loss: 2.2967, train_acc: 0.1244 test_loss: 2.2911, test_acc: 0.1298, best: 0.1616, time: 0:02:12
 Epoch: 20, lr: 1.0e-02, train_loss: 2.2776, train_acc: 0.1320 test_loss: 2.2643, test_acc: 0.1471, best: 0.1616, time: 0:02:12
 Epoch: 21, lr: 1.0e-02, train_loss: 2.2687, train_acc: 0.1368 test_loss: 2.2746, test_acc: 0.1432, best: 0.1616, time: 0:02:11
 Epoch: 22, lr: 1.0e-02, train_loss: 2.2817, train_acc: 0.1304 test_loss: 2.3127, test_acc: 0.0974, best: 0.1616, time: 0:02:11
 Epoch: 23, lr: 1.0e-02, train_loss: 2.3071, train_acc: 0.1074 test_loss: 2.3015, test_acc: 0.1080, best: 0.1616, time: 0:02:12
 Epoch: 24, lr: 1.0e-02, train_loss: 2.2896, train_acc: 0.1254 test_loss: 2.2882, test_acc: 0.1141, best: 0.1616, time: 0:02:11
 Epoch: 25, lr: 1.0e-02, train_loss: 2.2861, train_acc: 0.1264 test_loss: 2.2927, test_acc: 0.1134, best: 0.1616, time: 0:02:12
 Epoch: 26, lr: 1.0e-02, train_loss: 2.2790, train_acc: 0.1268 test_loss: 2.2660, test_acc: 0.1671, best: 0.1671, time: 0:02:12
 Epoch: 27, lr: 1.0e-02, train_loss: 2.2773, train_acc: 0.1336 test_loss: 2.2765, test_acc: 0.1323, best: 0.1671, time: 0:02:12
 Epoch: 28, lr: 1.0e-02, train_loss: 2.2828, train_acc: 0.1324 test_loss: 2.2934, test_acc: 0.1084, best: 0.1671, time: 0:02:11
 Epoch: 29, lr: 1.0e-02, train_loss: 2.2787, train_acc: 0.1388 test_loss: 2.2751, test_acc: 0.1301, best: 0.1671, time: 0:02:12
 Epoch: 30, lr: 1.0e-02, train_loss: 2.2806, train_acc: 0.1366 test_loss: 2.2755, test_acc: 0.1196, best: 0.1671, time: 0:02:11
 Epoch: 31, lr: 1.0e-02, train_loss: 2.2705, train_acc: 0.1488 test_loss: 2.2691, test_acc: 0.1378, best: 0.1671, time: 0:02:11
 Epoch: 32, lr: 1.0e-02, train_loss: 2.2652, train_acc: 0.1342 test_loss: 2.2535, test_acc: 0.1510, best: 0.1671, time: 0:02:11
 Epoch: 33, lr: 1.0e-02, train_loss: 2.2645, train_acc: 0.1344 test_loss: 2.2656, test_acc: 0.1615, best: 0.1671, time: 0:02:11
 Epoch: 34, lr: 1.0e-02, train_loss: 2.2612, train_acc: 0.1406 test_loss: 2.2865, test_acc: 0.0985, best: 0.1671, time: 0:02:11
 Epoch: 35, lr: 1.0e-02, train_loss: 2.2773, train_acc: 0.1354 test_loss: 2.2817, test_acc: 0.1221, best: 0.1671, time: 0:02:12
 Epoch: 36, lr: 1.0e-02, train_loss: 2.2633, train_acc: 0.1396 test_loss: 2.2815, test_acc: 0.1250, best: 0.1671, time: 0:02:12
 Epoch: 37, lr: 1.0e-02, train_loss: 2.2590, train_acc: 0.1436 test_loss: 2.2499, test_acc: 0.1636, best: 0.1671, time: 0:02:12
 Epoch: 38, lr: 1.0e-02, train_loss: 2.2611, train_acc: 0.1504 test_loss: 2.2522, test_acc: 0.1599, best: 0.1671, time: 0:02:11
 Epoch: 39, lr: 1.0e-02, train_loss: 2.2551, train_acc: 0.1556 test_loss: 2.2615, test_acc: 0.1195, best: 0.1671, time: 0:02:11
 Epoch: 40, lr: 1.0e-02, train_loss: 2.2382, train_acc: 0.1638 test_loss: 2.2511, test_acc: 0.1669, best: 0.1671, time: 0:02:11
 Epoch: 41, lr: 1.0e-02, train_loss: 2.2268, train_acc: 0.1630 test_loss: 2.2081, test_acc: 0.1811, best: 0.1811, time: 0:02:12
 Epoch: 42, lr: 1.0e-02, train_loss: 2.2241, train_acc: 0.1590 test_loss: 2.2051, test_acc: 0.1772, best: 0.1811, time: 0:02:11
 Epoch: 43, lr: 1.0e-02, train_loss: 2.2257, train_acc: 0.1636 test_loss: 2.2076, test_acc: 0.1807, best: 0.1811, time: 0:02:12
 Epoch: 44, lr: 1.0e-02, train_loss: 2.2200, train_acc: 0.1706 test_loss: 2.2067, test_acc: 0.1786, best: 0.1811, time: 0:02:11
 Epoch: 45, lr: 1.0e-02, train_loss: 2.2143, train_acc: 0.1662 test_loss: 2.1930, test_acc: 0.1623, best: 0.1811, time: 0:02:12
 Epoch: 46, lr: 1.0e-02, train_loss: 2.2091, train_acc: 0.1672 test_loss: 2.2188, test_acc: 0.1700, best: 0.1811, time: 0:02:11
 Epoch: 47, lr: 1.0e-02, train_loss: 2.2445, train_acc: 0.1576 test_loss: 2.2947, test_acc: 0.1278, best: 0.1811, time: 0:02:12
 Epoch: 48, lr: 1.0e-02, train_loss: 2.3037, train_acc: 0.1070 test_loss: 2.2992, test_acc: 0.1128, best: 0.1811, time: 0:02:11
 Epoch: 49, lr: 1.0e-02, train_loss: 2.2999, train_acc: 0.1102 test_loss: 2.3023, test_acc: 0.1089, best: 0.1811, time: 0:02:11
 Epoch: 50, lr: 1.0e-02, train_loss: 2.2934, train_acc: 0.1210 test_loss: 2.3052, test_acc: 0.1016, best: 0.1811, time: 0:02:12
 Epoch: 51, lr: 1.0e-02, train_loss: 2.3003, train_acc: 0.1202 test_loss: 2.2966, test_acc: 0.1084, best: 0.1811, time: 0:02:12
 Epoch: 52, lr: 1.0e-02, train_loss: 2.2964, train_acc: 0.1180 test_loss: 2.2943, test_acc: 0.1321, best: 0.1811, time: 0:02:12
 Epoch: 53, lr: 1.0e-02, train_loss: 2.3019, train_acc: 0.1128 test_loss: 2.2913, test_acc: 0.1271, best: 0.1811, time: 0:02:12
 Epoch: 54, lr: 1.0e-02, train_loss: 2.3005, train_acc: 0.1166 test_loss: 2.2879, test_acc: 0.1403, best: 0.1811, time: 0:02:11
 Epoch: 55, lr: 1.0e-02, train_loss: 2.2941, train_acc: 0.1284 test_loss: 2.3032, test_acc: 0.1051, best: 0.1811, time: 0:02:11
 Epoch: 56, lr: 1.0e-02, train_loss: 2.2898, train_acc: 0.1210 test_loss: 2.3012, test_acc: 0.1061, best: 0.1811, time: 0:02:11
 Epoch: 57, lr: 1.0e-02, train_loss: 2.2951, train_acc: 0.1114 test_loss: 2.3034, test_acc: 0.1077, best: 0.1811, time: 0:02:12
 Epoch: 58, lr: 1.0e-02, train_loss: 2.3008, train_acc: 0.1098 test_loss: 2.2986, test_acc: 0.1035, best: 0.1811, time: 0:02:12
 Epoch: 59, lr: 1.0e-02, train_loss: 2.2866, train_acc: 0.1236 test_loss: 2.2715, test_acc: 0.1237, best: 0.1811, time: 0:02:12
 Epoch: 60, lr: 1.0e-02, train_loss: 2.2858, train_acc: 0.1250 test_loss: 2.2794, test_acc: 0.1356, best: 0.1811, time: 0:02:11
 Epoch: 61, lr: 1.0e-02, train_loss: 2.2779, train_acc: 0.1358 test_loss: 2.2798, test_acc: 0.1403, best: 0.1811, time: 0:02:12
 Epoch: 62, lr: 1.0e-02, train_loss: 2.2803, train_acc: 0.1212 test_loss: 2.2659, test_acc: 0.1431, best: 0.1811, time: 0:02:11
 Epoch: 63, lr: 1.0e-02, train_loss: 2.2792, train_acc: 0.1240 test_loss: 2.2891, test_acc: 0.1212, best: 0.1811, time: 0:02:12
 Epoch: 64, lr: 1.0e-02, train_loss: 2.2902, train_acc: 0.1146 test_loss: 2.2823, test_acc: 0.1241, best: 0.1811, time: 0:02:12
 Epoch: 65, lr: 1.0e-02, train_loss: 2.2762, train_acc: 0.1308 test_loss: 2.2682, test_acc: 0.1379, best: 0.1811, time: 0:02:12
 Epoch: 66, lr: 1.0e-02, train_loss: 2.2501, train_acc: 0.1366 test_loss: 2.2592, test_acc: 0.1450, best: 0.1811, time: 0:02:11
 Epoch: 67, lr: 1.0e-02, train_loss: 2.2479, train_acc: 0.1430 test_loss: 2.2190, test_acc: 0.1769, best: 0.1811, time: 0:02:11
 Epoch: 68, lr: 1.0e-02, train_loss: 2.2263, train_acc: 0.1516 test_loss: 2.1994, test_acc: 0.1800, best: 0.1811, time: 0:02:12
 Epoch: 69, lr: 1.0e-02, train_loss: 2.2176, train_acc: 0.1610 test_loss: 2.1963, test_acc: 0.1825, best: 0.1825, time: 0:02:11
 Epoch: 70, lr: 1.0e-02, train_loss: 2.2167, train_acc: 0.1640 test_loss: 2.2159, test_acc: 0.1595, best: 0.1825, time: 0:02:11
 Epoch: 71, lr: 1.0e-02, train_loss: 2.2252, train_acc: 0.1474 test_loss: 2.1973, test_acc: 0.1718, best: 0.1825, time: 0:02:11
 Epoch: 72, lr: 1.0e-02, train_loss: 2.2121, train_acc: 0.1530 test_loss: 2.2167, test_acc: 0.1441, best: 0.1825, time: 0:02:12
 Epoch: 73, lr: 1.0e-02, train_loss: 2.1958, train_acc: 0.1560 test_loss: 2.1718, test_acc: 0.1414, best: 0.1825, time: 0:02:11
 Epoch: 74, lr: 1.0e-02, train_loss: 2.1680, train_acc: 0.1774 test_loss: 2.2567, test_acc: 0.1414, best: 0.1825, time: 0:02:11
 Epoch: 75, lr: 1.0e-02, train_loss: 2.1570, train_acc: 0.1796 test_loss: 2.1664, test_acc: 0.1481, best: 0.1825, time: 0:02:11
 Epoch: 76, lr: 1.0e-02, train_loss: 2.1609, train_acc: 0.1772 test_loss: 2.1708, test_acc: 0.1406, best: 0.1825, time: 0:02:11
 Epoch: 77, lr: 1.0e-02, train_loss: 2.1526, train_acc: 0.1928 test_loss: 2.1754, test_acc: 0.1715, best: 0.1825, time: 0:02:11
 Epoch: 78, lr: 1.0e-02, train_loss: 2.1630, train_acc: 0.1800 test_loss: 2.1450, test_acc: 0.2030, best: 0.2030, time: 0:02:12
 Epoch: 79, lr: 1.0e-02, train_loss: 2.1547, train_acc: 0.1846 test_loss: 2.1423, test_acc: 0.1988, best: 0.2030, time: 0:02:12
 Epoch: 80, lr: 1.0e-02, train_loss: 2.1567, train_acc: 0.1862 test_loss: 2.1564, test_acc: 0.1852, best: 0.2030, time: 0:02:11
 Epoch: 81, lr: 1.0e-02, train_loss: 2.1441, train_acc: 0.1856 test_loss: 2.1743, test_acc: 0.1814, best: 0.2030, time: 0:02:12
 Epoch: 82, lr: 1.0e-02, train_loss: 2.1635, train_acc: 0.1738 test_loss: 2.2329, test_acc: 0.1330, best: 0.2030, time: 0:02:11
 Epoch: 83, lr: 1.0e-02, train_loss: 2.2009, train_acc: 0.1758 test_loss: 2.2073, test_acc: 0.1482, best: 0.2030, time: 0:02:11
 Epoch: 84, lr: 1.0e-02, train_loss: 2.1786, train_acc: 0.1844 test_loss: 2.1786, test_acc: 0.1375, best: 0.2030, time: 0:02:12
 Epoch: 85, lr: 1.0e-02, train_loss: 2.1493, train_acc: 0.1870 test_loss: 2.1316, test_acc: 0.1945, best: 0.2030, time: 0:02:11
 Epoch: 86, lr: 1.0e-02, train_loss: 2.1395, train_acc: 0.1950 test_loss: 2.1311, test_acc: 0.2328, best: 0.2328, time: 0:02:12
 Epoch: 87, lr: 1.0e-02, train_loss: 2.1508, train_acc: 0.1922 test_loss: 2.1319, test_acc: 0.2169, best: 0.2328, time: 0:02:12
 Epoch: 88, lr: 1.0e-02, train_loss: 2.1396, train_acc: 0.1926 test_loss: 2.1462, test_acc: 0.1898, best: 0.2328, time: 0:02:11
 Epoch: 89, lr: 1.0e-02, train_loss: 2.1419, train_acc: 0.1884 test_loss: 2.1270, test_acc: 0.2201, best: 0.2328, time: 0:02:11
 Epoch: 90, lr: 1.0e-02, train_loss: 2.1449, train_acc: 0.1892 test_loss: 2.1171, test_acc: 0.2115, best: 0.2328, time: 0:02:11
 Epoch: 91, lr: 1.0e-02, train_loss: 2.1312, train_acc: 0.1966 test_loss: 2.0989, test_acc: 0.2301, best: 0.2328, time: 0:02:11
 Epoch: 92, lr: 1.0e-02, train_loss: 2.1327, train_acc: 0.1928 test_loss: 2.1358, test_acc: 0.2089, best: 0.2328, time: 0:02:11
 Epoch: 93, lr: 1.0e-02, train_loss: 2.1310, train_acc: 0.2028 test_loss: 2.1362, test_acc: 0.1935, best: 0.2328, time: 0:02:12
 Epoch: 94, lr: 1.0e-02, train_loss: 2.1229, train_acc: 0.1974 test_loss: 2.1354, test_acc: 0.2084, best: 0.2328, time: 0:02:12
 Epoch: 95, lr: 1.0e-02, train_loss: 2.1277, train_acc: 0.2088 test_loss: 2.1004, test_acc: 0.2506, best: 0.2506, time: 0:02:12
 Epoch: 96, lr: 1.0e-02, train_loss: 2.1554, train_acc: 0.1898 test_loss: 2.1375, test_acc: 0.2050, best: 0.2506, time: 0:02:12
 Epoch: 97, lr: 1.0e-02, train_loss: 2.1356, train_acc: 0.1912 test_loss: 2.0936, test_acc: 0.2410, best: 0.2506, time: 0:02:12
 Epoch: 98, lr: 1.0e-02, train_loss: 2.1242, train_acc: 0.1932 test_loss: 2.1219, test_acc: 0.2447, best: 0.2506, time: 0:02:11
 Epoch: 99, lr: 1.0e-02, train_loss: 2.1410, train_acc: 0.2020 test_loss: 2.1352, test_acc: 0.2185, best: 0.2506, time: 0:02:11
 Epoch: 100, lr: 1.0e-02, train_loss: 2.1411, train_acc: 0.1986 test_loss: 2.1560, test_acc: 0.2084, best: 0.2506, time: 0:02:11
 Epoch: 101, lr: 1.0e-02, train_loss: 2.1328, train_acc: 0.1966 test_loss: 2.1180, test_acc: 0.2313, best: 0.2506, time: 0:02:11
 Epoch: 102, lr: 1.0e-02, train_loss: 2.1334, train_acc: 0.1886 test_loss: 2.1207, test_acc: 0.2164, best: 0.2506, time: 0:02:11
 Epoch: 103, lr: 1.0e-02, train_loss: 2.1577, train_acc: 0.1900 test_loss: 2.1280, test_acc: 0.2052, best: 0.2506, time: 0:02:13
 Epoch: 104, lr: 1.0e-02, train_loss: 2.1380, train_acc: 0.1858 test_loss: 2.0994, test_acc: 0.1958, best: 0.2506, time: 0:02:12
 Epoch: 105, lr: 1.0e-02, train_loss: 2.1564, train_acc: 0.1778 test_loss: 2.1468, test_acc: 0.2079, best: 0.2506, time: 0:02:11
 Epoch: 106, lr: 1.0e-02, train_loss: 2.1576, train_acc: 0.1864 test_loss: 2.1358, test_acc: 0.1986, best: 0.2506, time: 0:02:12
 Epoch: 107, lr: 1.0e-02, train_loss: 2.1761, train_acc: 0.1808 test_loss: 2.1515, test_acc: 0.2044, best: 0.2506, time: 0:02:11
 Epoch: 108, lr: 1.0e-02, train_loss: 2.1563, train_acc: 0.1728 test_loss: 2.1369, test_acc: 0.1888, best: 0.2506, time: 0:02:11
 Epoch: 109, lr: 1.0e-02, train_loss: 2.1423, train_acc: 0.1786 test_loss: 2.1316, test_acc: 0.2095, best: 0.2506, time: 0:02:12
 Epoch: 110, lr: 1.0e-02, train_loss: 2.1457, train_acc: 0.1864 test_loss: 2.1173, test_acc: 0.2276, best: 0.2506, time: 0:02:11
 Epoch: 111, lr: 1.0e-02, train_loss: 2.1591, train_acc: 0.1888 test_loss: 2.1446, test_acc: 0.2071, best: 0.2506, time: 0:02:12
 Epoch: 112, lr: 1.0e-02, train_loss: 2.1446, train_acc: 0.1874 test_loss: 2.1368, test_acc: 0.2209, best: 0.2506, time: 0:02:12
 Epoch: 113, lr: 1.0e-02, train_loss: 2.1384, train_acc: 0.1814 test_loss: 2.1490, test_acc: 0.2013, best: 0.2506, time: 0:02:11
 Epoch: 114, lr: 1.0e-02, train_loss: 2.1640, train_acc: 0.1860 test_loss: 2.1711, test_acc: 0.1925, best: 0.2506, time: 0:02:12
 Epoch: 115, lr: 1.0e-02, train_loss: 2.1538, train_acc: 0.1756 test_loss: 2.1079, test_acc: 0.2243, best: 0.2506, time: 0:02:11
 Epoch: 116, lr: 1.0e-02, train_loss: 2.1386, train_acc: 0.1956 test_loss: 2.1154, test_acc: 0.2030, best: 0.2506, time: 0:02:12
 Epoch: 117, lr: 1.0e-02, train_loss: 2.1439, train_acc: 0.1902 test_loss: 2.1326, test_acc: 0.2195, best: 0.2506, time: 0:02:12
 Epoch: 118, lr: 1.0e-02, train_loss: 2.1372, train_acc: 0.1930 test_loss: 2.1272, test_acc: 0.1795, best: 0.2506, time: 0:02:11
 Epoch: 119, lr: 1.0e-02, train_loss: 2.1324, train_acc: 0.2004 test_loss: 2.0900, test_acc: 0.2164, best: 0.2506, time: 0:02:12
 Epoch: 120, lr: 1.0e-02, train_loss: 2.1369, train_acc: 0.1900 test_loss: 2.1164, test_acc: 0.2057, best: 0.2506, time: 0:02:11
 Epoch: 121, lr: 1.0e-02, train_loss: 2.1354, train_acc: 0.1924 test_loss: 2.1155, test_acc: 0.2350, best: 0.2506, time: 0:02:11
 Epoch: 122, lr: 1.0e-02, train_loss: 2.1353, train_acc: 0.2022 test_loss: 2.1329, test_acc: 0.1746, best: 0.2506, time: 0:02:12
 Epoch: 123, lr: 1.0e-02, train_loss: 2.1500, train_acc: 0.1912 test_loss: 2.1204, test_acc: 0.2279, best: 0.2506, time: 0:02:12
 Epoch: 124, lr: 1.0e-02, train_loss: 2.1135, train_acc: 0.1972 test_loss: 2.0923, test_acc: 0.2246, best: 0.2506, time: 0:02:11
 Epoch: 125, lr: 1.0e-02, train_loss: 2.1389, train_acc: 0.1914 test_loss: 2.1051, test_acc: 0.1810, best: 0.2506, time: 0:02:11
 Epoch: 126, lr: 1.0e-02, train_loss: 2.1465, train_acc: 0.1954 test_loss: 2.1249, test_acc: 0.2074, best: 0.2506, time: 0:02:11
 Epoch: 127, lr: 1.0e-02, train_loss: 2.1299, train_acc: 0.1956 test_loss: 2.0842, test_acc: 0.2211, best: 0.2506, time: 0:02:12
 Epoch: 128, lr: 1.0e-02, train_loss: 2.1507, train_acc: 0.1888 test_loss: 2.1161, test_acc: 0.2134, best: 0.2506, time: 0:02:12
 Epoch: 129, lr: 1.0e-02, train_loss: 2.1560, train_acc: 0.1890 test_loss: 2.1208, test_acc: 0.2070, best: 0.2506, time: 0:02:11
 Epoch: 130, lr: 1.0e-02, train_loss: 2.1666, train_acc: 0.1866 test_loss: 2.1174, test_acc: 0.2250, best: 0.2506, time: 0:02:11
 Epoch: 131, lr: 1.0e-02, train_loss: 2.1289, train_acc: 0.2014 test_loss: 2.1085, test_acc: 0.2236, best: 0.2506, time: 0:02:11
 Epoch: 132, lr: 1.0e-02, train_loss: 2.1193, train_acc: 0.2062 test_loss: 2.0760, test_acc: 0.2061, best: 0.2506, time: 0:02:11
 Epoch: 133, lr: 1.0e-02, train_loss: 2.1173, train_acc: 0.1990 test_loss: 2.0793, test_acc: 0.2381, best: 0.2506, time: 0:02:12
 Epoch: 134, lr: 1.0e-02, train_loss: 2.1124, train_acc: 0.2118 test_loss: 2.0645, test_acc: 0.2495, best: 0.2506, time: 0:02:11
 Epoch: 135, lr: 1.0e-02, train_loss: 2.1053, train_acc: 0.2138 test_loss: 2.1019, test_acc: 0.2551, best: 0.2551, time: 0:02:12
 Epoch: 136, lr: 1.0e-02, train_loss: 2.1016, train_acc: 0.2088 test_loss: 2.0739, test_acc: 0.2355, best: 0.2551, time: 0:02:11
 Epoch: 137, lr: 1.0e-02, train_loss: 2.1013, train_acc: 0.2098 test_loss: 2.0822, test_acc: 0.2323, best: 0.2551, time: 0:02:11
 Epoch: 138, lr: 1.0e-02, train_loss: 2.0979, train_acc: 0.2124 test_loss: 2.0716, test_acc: 0.2471, best: 0.2551, time: 0:02:11
 Epoch: 139, lr: 1.0e-02, train_loss: 2.1009, train_acc: 0.2114 test_loss: 2.0631, test_acc: 0.2574, best: 0.2574, time: 0:02:12
 Epoch: 140, lr: 1.0e-02, train_loss: 2.0880, train_acc: 0.2150 test_loss: 2.0446, test_acc: 0.2565, best: 0.2574, time: 0:02:11
 Epoch: 141, lr: 1.0e-02, train_loss: 2.0936, train_acc: 0.2144 test_loss: 2.0548, test_acc: 0.2594, best: 0.2594, time: 0:02:12
 Epoch: 142, lr: 1.0e-02, train_loss: 2.1404, train_acc: 0.1728 test_loss: 2.1274, test_acc: 0.1674, best: 0.2594, time: 0:02:12
 Epoch: 143, lr: 1.0e-02, train_loss: 2.1389, train_acc: 0.1792 test_loss: 2.0921, test_acc: 0.2047, best: 0.2594, time: 0:02:12
 Epoch: 144, lr: 1.0e-02, train_loss: 2.1590, train_acc: 0.1800 test_loss: 2.1172, test_acc: 0.1881, best: 0.2594, time: 0:02:11
 Epoch: 145, lr: 1.0e-02, train_loss: 2.1172, train_acc: 0.1984 test_loss: 2.0731, test_acc: 0.2065, best: 0.2594, time: 0:02:12
 Epoch: 146, lr: 1.0e-02, train_loss: 2.1177, train_acc: 0.1978 test_loss: 2.0732, test_acc: 0.2402, best: 0.2594, time: 0:02:12
 Epoch: 147, lr: 1.0e-02, train_loss: 2.1164, train_acc: 0.1944 test_loss: 2.0141, test_acc: 0.2551, best: 0.2594, time: 0:02:11
 Epoch: 148, lr: 1.0e-02, train_loss: 2.1050, train_acc: 0.1986 test_loss: 2.0439, test_acc: 0.2469, best: 0.2594, time: 0:02:12
 Epoch: 149, lr: 1.0e-02, train_loss: 2.0998, train_acc: 0.2004 test_loss: 2.1152, test_acc: 0.2248, best: 0.2594, time: 0:02:12
 Epoch: 150, lr: 1.0e-02, train_loss: 2.0978, train_acc: 0.2024 test_loss: 2.0596, test_acc: 0.2426, best: 0.2594, time: 0:02:12
 Epoch: 151, lr: 1.0e-02, train_loss: 2.0913, train_acc: 0.1984 test_loss: 2.0367, test_acc: 0.2449, best: 0.2594, time: 0:02:11
 Epoch: 152, lr: 1.0e-02, train_loss: 2.0890, train_acc: 0.2044 test_loss: 2.0454, test_acc: 0.2591, best: 0.2594, time: 0:02:11
 Epoch: 153, lr: 1.0e-02, train_loss: 2.0798, train_acc: 0.2094 test_loss: 2.0218, test_acc: 0.2471, best: 0.2594, time: 0:02:11
 Epoch: 154, lr: 1.0e-02, train_loss: 2.0717, train_acc: 0.2100 test_loss: 2.0355, test_acc: 0.2599, best: 0.2599, time: 0:02:11
 Epoch: 155, lr: 1.0e-02, train_loss: 2.0874, train_acc: 0.2110 test_loss: 2.0377, test_acc: 0.2526, best: 0.2599, time: 0:02:11
 Epoch: 156, lr: 1.0e-02, train_loss: 2.0881, train_acc: 0.2078 test_loss: 2.0503, test_acc: 0.2626, best: 0.2626, time: 0:02:12
 Epoch: 157, lr: 1.0e-02, train_loss: 2.0690, train_acc: 0.2166 test_loss: 2.0201, test_acc: 0.2656, best: 0.2656, time: 0:02:12
 Epoch: 158, lr: 1.0e-02, train_loss: 2.0841, train_acc: 0.2160 test_loss: 2.0505, test_acc: 0.2575, best: 0.2656, time: 0:02:11
 Epoch: 159, lr: 1.0e-02, train_loss: 2.0735, train_acc: 0.2236 test_loss: 2.0135, test_acc: 0.2511, best: 0.2656, time: 0:02:11
 Epoch: 160, lr: 1.0e-02, train_loss: 2.0726, train_acc: 0.2100 test_loss: 2.0200, test_acc: 0.2465, best: 0.2656, time: 0:02:11
 Epoch: 161, lr: 1.0e-02, train_loss: 2.0732, train_acc: 0.2162 test_loss: 2.0236, test_acc: 0.2719, best: 0.2719, time: 0:02:12
 Epoch: 162, lr: 1.0e-02, train_loss: 2.0542, train_acc: 0.2264 test_loss: 1.9842, test_acc: 0.2627, best: 0.2719, time: 0:02:12
 Epoch: 163, lr: 1.0e-02, train_loss: 2.0743, train_acc: 0.2160 test_loss: 2.0388, test_acc: 0.2714, best: 0.2719, time: 0:02:11
 Epoch: 164, lr: 1.0e-02, train_loss: 2.0751, train_acc: 0.2196 test_loss: 2.0385, test_acc: 0.2521, best: 0.2719, time: 0:02:12
 Epoch: 165, lr: 1.0e-02, train_loss: 2.0739, train_acc: 0.2116 test_loss: 2.0415, test_acc: 0.2501, best: 0.2719, time: 0:02:11
 Epoch: 166, lr: 1.0e-02, train_loss: 2.0583, train_acc: 0.2228 test_loss: 2.0374, test_acc: 0.2541, best: 0.2719, time: 0:02:11
 Epoch: 167, lr: 1.0e-02, train_loss: 2.0502, train_acc: 0.2206 test_loss: 2.0137, test_acc: 0.2699, best: 0.2719, time: 0:02:11
 Epoch: 168, lr: 1.0e-02, train_loss: 2.0688, train_acc: 0.2116 test_loss: 2.0187, test_acc: 0.2400, best: 0.2719, time: 0:02:11
 Epoch: 169, lr: 1.0e-02, train_loss: 2.0810, train_acc: 0.2088 test_loss: 2.0360, test_acc: 0.2637, best: 0.2719, time: 0:02:11
 Epoch: 170, lr: 1.0e-02, train_loss: 2.0640, train_acc: 0.2212 test_loss: 2.0176, test_acc: 0.2621, best: 0.2719, time: 0:02:11
 Epoch: 171, lr: 1.0e-02, train_loss: 2.0723, train_acc: 0.2220 test_loss: 2.0390, test_acc: 0.2464, best: 0.2719, time: 0:02:11
 Epoch: 172, lr: 1.0e-02, train_loss: 2.0553, train_acc: 0.2246 test_loss: 1.9824, test_acc: 0.2629, best: 0.2719, time: 0:02:11
 Epoch: 173, lr: 1.0e-02, train_loss: 2.0539, train_acc: 0.2288 test_loss: 1.9855, test_acc: 0.2585, best: 0.2719, time: 0:02:11
 Epoch: 174, lr: 1.0e-02, train_loss: 2.0559, train_acc: 0.2158 test_loss: 2.0085, test_acc: 0.2795, best: 0.2795, time: 0:02:12
 Epoch: 175, lr: 1.0e-02, train_loss: 2.0555, train_acc: 0.2212 test_loss: 2.0153, test_acc: 0.2705, best: 0.2795, time: 0:02:11
 Epoch: 176, lr: 1.0e-02, train_loss: 2.0449, train_acc: 0.2288 test_loss: 2.0242, test_acc: 0.2400, best: 0.2795, time: 0:02:11
 Epoch: 177, lr: 1.0e-02, train_loss: 2.0331, train_acc: 0.2374 test_loss: 2.0040, test_acc: 0.2652, best: 0.2795, time: 0:02:12
 Epoch: 178, lr: 1.0e-02, train_loss: 2.0440, train_acc: 0.2244 test_loss: 2.0254, test_acc: 0.2539, best: 0.2795, time: 0:02:11
 Epoch: 179, lr: 1.0e-02, train_loss: 2.0426, train_acc: 0.2286 test_loss: 2.0089, test_acc: 0.2781, best: 0.2795, time: 0:02:11
 Epoch: 180, lr: 2.0e-03, train_loss: 2.0255, train_acc: 0.2412 test_loss: 1.9968, test_acc: 0.2886, best: 0.2886, time: 0:02:11
 Epoch: 181, lr: 2.0e-03, train_loss: 2.0220, train_acc: 0.2370 test_loss: 2.0034, test_acc: 0.2906, best: 0.2906, time: 0:02:12
 Epoch: 182, lr: 2.0e-03, train_loss: 2.0308, train_acc: 0.2392 test_loss: 1.9989, test_acc: 0.2968, best: 0.2968, time: 0:02:12
 Epoch: 183, lr: 2.0e-03, train_loss: 2.0234, train_acc: 0.2454 test_loss: 1.9846, test_acc: 0.2971, best: 0.2971, time: 0:02:12
 Epoch: 184, lr: 2.0e-03, train_loss: 2.0204, train_acc: 0.2406 test_loss: 1.9537, test_acc: 0.2985, best: 0.2985, time: 0:02:12
 Epoch: 185, lr: 2.0e-03, train_loss: 2.0376, train_acc: 0.2416 test_loss: 2.0030, test_acc: 0.2990, best: 0.2990, time: 0:02:12
 Epoch: 186, lr: 2.0e-03, train_loss: 2.0212, train_acc: 0.2406 test_loss: 2.0013, test_acc: 0.2983, best: 0.2990, time: 0:02:11
 Epoch: 187, lr: 2.0e-03, train_loss: 2.0111, train_acc: 0.2458 test_loss: 1.9917, test_acc: 0.2913, best: 0.2990, time: 0:02:12
 Epoch: 188, lr: 2.0e-03, train_loss: 2.0170, train_acc: 0.2536 test_loss: 1.9682, test_acc: 0.2993, best: 0.2993, time: 0:02:12
 Epoch: 189, lr: 2.0e-03, train_loss: 2.0213, train_acc: 0.2518 test_loss: 1.9857, test_acc: 0.3081, best: 0.3081, time: 0:02:12
 Epoch: 190, lr: 2.0e-03, train_loss: 2.0204, train_acc: 0.2444 test_loss: 1.9855, test_acc: 0.3055, best: 0.3081, time: 0:02:11
 Epoch: 191, lr: 2.0e-03, train_loss: 2.0115, train_acc: 0.2524 test_loss: 1.9865, test_acc: 0.2974, best: 0.3081, time: 0:02:11
 Epoch: 192, lr: 2.0e-03, train_loss: 2.0147, train_acc: 0.2474 test_loss: 1.9683, test_acc: 0.3024, best: 0.3081, time: 0:02:11
 Epoch: 193, lr: 2.0e-03, train_loss: 2.0140, train_acc: 0.2508 test_loss: 1.9706, test_acc: 0.2995, best: 0.3081, time: 0:02:11
 Epoch: 194, lr: 2.0e-03, train_loss: 2.0095, train_acc: 0.2572 test_loss: 1.9865, test_acc: 0.3074, best: 0.3081, time: 0:02:12
 Epoch: 195, lr: 2.0e-03, train_loss: 2.0178, train_acc: 0.2488 test_loss: 1.9890, test_acc: 0.2943, best: 0.3081, time: 0:02:11
 Epoch: 196, lr: 2.0e-03, train_loss: 2.0170, train_acc: 0.2442 test_loss: 1.9750, test_acc: 0.3045, best: 0.3081, time: 0:02:12
 Epoch: 197, lr: 2.0e-03, train_loss: 2.0105, train_acc: 0.2494 test_loss: 1.9902, test_acc: 0.2900, best: 0.3081, time: 0:02:11
 Epoch: 198, lr: 2.0e-03, train_loss: 2.0028, train_acc: 0.2536 test_loss: 1.9787, test_acc: 0.2935, best: 0.3081, time: 0:02:12
 Epoch: 199, lr: 2.0e-03, train_loss: 2.0081, train_acc: 0.2486 test_loss: 1.9760, test_acc: 0.3035, best: 0.3081, time: 0:02:11
 Epoch: 200, lr: 2.0e-03, train_loss: 2.0193, train_acc: 0.2454 test_loss: 1.9560, test_acc: 0.3080, best: 0.3081, time: 0:02:11
 Epoch: 201, lr: 2.0e-03, train_loss: 2.0024, train_acc: 0.2580 test_loss: 1.9740, test_acc: 0.3006, best: 0.3081, time: 0:02:12
 Epoch: 202, lr: 2.0e-03, train_loss: 2.0206, train_acc: 0.2384 test_loss: 1.9828, test_acc: 0.3049, best: 0.3081, time: 0:02:11
 Epoch: 203, lr: 2.0e-03, train_loss: 2.0075, train_acc: 0.2548 test_loss: 1.9571, test_acc: 0.3074, best: 0.3081, time: 0:02:11
 Epoch: 204, lr: 2.0e-03, train_loss: 2.0003, train_acc: 0.2490 test_loss: 1.9202, test_acc: 0.3074, best: 0.3081, time: 0:02:12
 Epoch: 205, lr: 2.0e-03, train_loss: 2.0105, train_acc: 0.2460 test_loss: 1.9673, test_acc: 0.3063, best: 0.3081, time: 0:02:12
 Epoch: 206, lr: 2.0e-03, train_loss: 2.0127, train_acc: 0.2526 test_loss: 1.9887, test_acc: 0.3020, best: 0.3081, time: 0:02:11
 Epoch: 207, lr: 2.0e-03, train_loss: 2.0060, train_acc: 0.2494 test_loss: 1.9743, test_acc: 0.3035, best: 0.3081, time: 0:02:11
 Epoch: 208, lr: 2.0e-03, train_loss: 2.0062, train_acc: 0.2496 test_loss: 1.9836, test_acc: 0.2964, best: 0.3081, time: 0:02:12
 Epoch: 209, lr: 2.0e-03, train_loss: 1.9946, train_acc: 0.2466 test_loss: 1.9407, test_acc: 0.3038, best: 0.3081, time: 0:02:11
 Epoch: 210, lr: 2.0e-03, train_loss: 2.0040, train_acc: 0.2490 test_loss: 1.9669, test_acc: 0.2981, best: 0.3081, time: 0:02:11
 Epoch: 211, lr: 2.0e-03, train_loss: 1.9917, train_acc: 0.2520 test_loss: 1.9522, test_acc: 0.3094, best: 0.3094, time: 0:02:12
 Epoch: 212, lr: 2.0e-03, train_loss: 2.0066, train_acc: 0.2454 test_loss: 1.9302, test_acc: 0.3104, best: 0.3104, time: 0:02:12
 Epoch: 213, lr: 2.0e-03, train_loss: 2.0024, train_acc: 0.2558 test_loss: 1.9207, test_acc: 0.3079, best: 0.3104, time: 0:02:12
 Epoch: 214, lr: 2.0e-03, train_loss: 1.9969, train_acc: 0.2486 test_loss: 1.9499, test_acc: 0.3051, best: 0.3104, time: 0:02:11
 Epoch: 215, lr: 2.0e-03, train_loss: 1.9819, train_acc: 0.2518 test_loss: 1.9377, test_acc: 0.3089, best: 0.3104, time: 0:02:12
 Epoch: 216, lr: 2.0e-03, train_loss: 1.9824, train_acc: 0.2548 test_loss: 1.9181, test_acc: 0.3152, best: 0.3152, time: 0:02:12
 Epoch: 217, lr: 2.0e-03, train_loss: 1.9793, train_acc: 0.2504 test_loss: 1.9100, test_acc: 0.3171, best: 0.3171, time: 0:02:12
 Epoch: 218, lr: 2.0e-03, train_loss: 1.9781, train_acc: 0.2548 test_loss: 1.9435, test_acc: 0.3046, best: 0.3171, time: 0:02:11
 Epoch: 219, lr: 2.0e-03, train_loss: 1.9782, train_acc: 0.2652 test_loss: 1.9431, test_acc: 0.3038, best: 0.3171, time: 0:02:11
 Epoch: 220, lr: 2.0e-03, train_loss: 2.0019, train_acc: 0.2472 test_loss: 1.9435, test_acc: 0.3196, best: 0.3196, time: 0:02:12
 Epoch: 221, lr: 2.0e-03, train_loss: 2.0005, train_acc: 0.2490 test_loss: 1.9438, test_acc: 0.3129, best: 0.3196, time: 0:02:11
 Epoch: 222, lr: 2.0e-03, train_loss: 1.9718, train_acc: 0.2626 test_loss: 1.9273, test_acc: 0.3065, best: 0.3196, time: 0:02:11
 Epoch: 223, lr: 2.0e-03, train_loss: 1.9802, train_acc: 0.2512 test_loss: 1.9319, test_acc: 0.3088, best: 0.3196, time: 0:02:11
 Epoch: 224, lr: 2.0e-03, train_loss: 1.9941, train_acc: 0.2512 test_loss: 1.9582, test_acc: 0.3100, best: 0.3196, time: 0:02:12
 Epoch: 225, lr: 2.0e-03, train_loss: 1.9719, train_acc: 0.2684 test_loss: 1.9338, test_acc: 0.3132, best: 0.3196, time: 0:02:11
 Epoch: 226, lr: 2.0e-03, train_loss: 1.9839, train_acc: 0.2464 test_loss: 1.9191, test_acc: 0.3126, best: 0.3196, time: 0:02:11
 Epoch: 227, lr: 2.0e-03, train_loss: 1.9802, train_acc: 0.2616 test_loss: 1.9385, test_acc: 0.3157, best: 0.3196, time: 0:02:11
 Epoch: 228, lr: 2.0e-03, train_loss: 1.9794, train_acc: 0.2668 test_loss: 1.9363, test_acc: 0.3146, best: 0.3196, time: 0:02:11
 Epoch: 229, lr: 2.0e-03, train_loss: 1.9802, train_acc: 0.2560 test_loss: 1.9370, test_acc: 0.3157, best: 0.3196, time: 0:02:11
 Epoch: 230, lr: 2.0e-03, train_loss: 1.9870, train_acc: 0.2528 test_loss: 1.9295, test_acc: 0.3235, best: 0.3235, time: 0:02:12
 Epoch: 231, lr: 2.0e-03, train_loss: 1.9844, train_acc: 0.2562 test_loss: 1.9333, test_acc: 0.3249, best: 0.3249, time: 0:02:11
 Epoch: 232, lr: 2.0e-03, train_loss: 1.9658, train_acc: 0.2598 test_loss: 1.9248, test_acc: 0.3259, best: 0.3259, time: 0:02:12
 Epoch: 233, lr: 2.0e-03, train_loss: 1.9654, train_acc: 0.2668 test_loss: 1.9058, test_acc: 0.3241, best: 0.3259, time: 0:02:11
 Epoch: 234, lr: 2.0e-03, train_loss: 1.9678, train_acc: 0.2582 test_loss: 1.9361, test_acc: 0.3119, best: 0.3259, time: 0:02:11
 Epoch: 235, lr: 2.0e-03, train_loss: 1.9882, train_acc: 0.2530 test_loss: 1.9374, test_acc: 0.3124, best: 0.3259, time: 0:02:11
 Epoch: 236, lr: 2.0e-03, train_loss: 1.9569, train_acc: 0.2662 test_loss: 1.9110, test_acc: 0.3156, best: 0.3259, time: 0:02:12
 Epoch: 237, lr: 2.0e-03, train_loss: 1.9682, train_acc: 0.2628 test_loss: 1.9374, test_acc: 0.3141, best: 0.3259, time: 0:02:11
 Epoch: 238, lr: 2.0e-03, train_loss: 1.9699, train_acc: 0.2700 test_loss: 1.9346, test_acc: 0.3127, best: 0.3259, time: 0:02:12
 Epoch: 239, lr: 2.0e-03, train_loss: 1.9707, train_acc: 0.2618 test_loss: 1.9532, test_acc: 0.3146, best: 0.3259, time: 0:02:11
 Epoch: 240, lr: 4.0e-04, train_loss: 1.9642, train_acc: 0.2584 test_loss: 1.9160, test_acc: 0.3202, best: 0.3259, time: 0:02:11
 Epoch: 241, lr: 4.0e-04, train_loss: 1.9646, train_acc: 0.2576 test_loss: 1.9262, test_acc: 0.3212, best: 0.3259, time: 0:02:11
 Epoch: 242, lr: 4.0e-04, train_loss: 1.9559, train_acc: 0.2736 test_loss: 1.9125, test_acc: 0.3235, best: 0.3259, time: 0:02:11
 Epoch: 243, lr: 4.0e-04, train_loss: 1.9477, train_acc: 0.2662 test_loss: 1.9013, test_acc: 0.3207, best: 0.3259, time: 0:02:11
 Epoch: 244, lr: 4.0e-04, train_loss: 1.9562, train_acc: 0.2786 test_loss: 1.9282, test_acc: 0.3219, best: 0.3259, time: 0:02:11
 Epoch: 245, lr: 4.0e-04, train_loss: 1.9532, train_acc: 0.2702 test_loss: 1.9117, test_acc: 0.3274, best: 0.3274, time: 0:02:11
 Epoch: 246, lr: 4.0e-04, train_loss: 1.9489, train_acc: 0.2692 test_loss: 1.9082, test_acc: 0.3209, best: 0.3274, time: 0:02:12
 Epoch: 247, lr: 4.0e-04, train_loss: 1.9712, train_acc: 0.2582 test_loss: 1.9238, test_acc: 0.3256, best: 0.3274, time: 0:02:11
 Epoch: 248, lr: 4.0e-04, train_loss: 1.9587, train_acc: 0.2708 test_loss: 1.9026, test_acc: 0.3221, best: 0.3274, time: 0:02:12
 Epoch: 249, lr: 4.0e-04, train_loss: 1.9560, train_acc: 0.2616 test_loss: 1.9124, test_acc: 0.3309, best: 0.3309, time: 0:02:12
 Epoch: 250, lr: 4.0e-04, train_loss: 1.9501, train_acc: 0.2634 test_loss: 1.8980, test_acc: 0.3225, best: 0.3309, time: 0:02:11
 Epoch: 251, lr: 4.0e-04, train_loss: 1.9567, train_acc: 0.2644 test_loss: 1.8960, test_acc: 0.3299, best: 0.3309, time: 0:02:11
 Epoch: 252, lr: 4.0e-04, train_loss: 1.9522, train_acc: 0.2674 test_loss: 1.9035, test_acc: 0.3266, best: 0.3309, time: 0:02:12
 Epoch: 253, lr: 4.0e-04, train_loss: 1.9591, train_acc: 0.2690 test_loss: 1.8904, test_acc: 0.3276, best: 0.3309, time: 0:02:12
 Epoch: 254, lr: 4.0e-04, train_loss: 1.9506, train_acc: 0.2676 test_loss: 1.9126, test_acc: 0.3204, best: 0.3309, time: 0:02:11
 Epoch: 255, lr: 4.0e-04, train_loss: 1.9646, train_acc: 0.2716 test_loss: 1.9069, test_acc: 0.3259, best: 0.3309, time: 0:02:11
 Epoch: 256, lr: 4.0e-04, train_loss: 1.9458, train_acc: 0.2716 test_loss: 1.9133, test_acc: 0.3229, best: 0.3309, time: 0:02:11
 Epoch: 257, lr: 4.0e-04, train_loss: 1.9546, train_acc: 0.2684 test_loss: 1.8971, test_acc: 0.3204, best: 0.3309, time: 0:02:11
 Epoch: 258, lr: 4.0e-04, train_loss: 1.9504, train_acc: 0.2648 test_loss: 1.8899, test_acc: 0.3284, best: 0.3309, time: 0:02:12
 Epoch: 259, lr: 4.0e-04, train_loss: 1.9343, train_acc: 0.2692 test_loss: 1.8988, test_acc: 0.3224, best: 0.3309, time: 0:02:11
 Epoch: 260, lr: 4.0e-04, train_loss: 1.9452, train_acc: 0.2764 test_loss: 1.9072, test_acc: 0.3185, best: 0.3309, time: 0:02:11
 Epoch: 261, lr: 4.0e-04, train_loss: 1.9417, train_acc: 0.2684 test_loss: 1.9135, test_acc: 0.3222, best: 0.3309, time: 0:02:11
 Epoch: 262, lr: 4.0e-04, train_loss: 1.9565, train_acc: 0.2726 test_loss: 1.9099, test_acc: 0.3224, best: 0.3309, time: 0:02:12
 Epoch: 263, lr: 4.0e-04, train_loss: 1.9726, train_acc: 0.2630 test_loss: 1.9029, test_acc: 0.3289, best: 0.3309, time: 0:02:12
 Epoch: 264, lr: 4.0e-04, train_loss: 1.9575, train_acc: 0.2632 test_loss: 1.8943, test_acc: 0.3245, best: 0.3309, time: 0:02:12
 Epoch: 265, lr: 4.0e-04, train_loss: 1.9596, train_acc: 0.2610 test_loss: 1.9041, test_acc: 0.3249, best: 0.3309, time: 0:02:12
 Epoch: 266, lr: 4.0e-04, train_loss: 1.9456, train_acc: 0.2656 test_loss: 1.9009, test_acc: 0.3236, best: 0.3309, time: 0:02:12
 Epoch: 267, lr: 4.0e-04, train_loss: 1.9496, train_acc: 0.2598 test_loss: 1.8960, test_acc: 0.3284, best: 0.3309, time: 0:02:11
 Epoch: 268, lr: 4.0e-04, train_loss: 1.9627, train_acc: 0.2686 test_loss: 1.9283, test_acc: 0.3164, best: 0.3309, time: 0:02:12
 Epoch: 269, lr: 4.0e-04, train_loss: 1.9645, train_acc: 0.2620 test_loss: 1.9115, test_acc: 0.3234, best: 0.3309, time: 0:02:11
 Epoch: 270, lr: 8.0e-05, train_loss: 1.9521, train_acc: 0.2650 test_loss: 1.9352, test_acc: 0.3132, best: 0.3309, time: 0:02:12
 Epoch: 271, lr: 8.0e-05, train_loss: 1.9532, train_acc: 0.2632 test_loss: 1.9071, test_acc: 0.3296, best: 0.3309, time: 0:02:11
 Epoch: 272, lr: 8.0e-05, train_loss: 1.9406, train_acc: 0.2738 test_loss: 1.8936, test_acc: 0.3277, best: 0.3309, time: 0:02:12
 Epoch: 273, lr: 8.0e-05, train_loss: 1.9606, train_acc: 0.2674 test_loss: 1.9010, test_acc: 0.3254, best: 0.3309, time: 0:02:12
 Epoch: 274, lr: 8.0e-05, train_loss: 1.9362, train_acc: 0.2724 test_loss: 1.8962, test_acc: 0.3269, best: 0.3309, time: 0:02:11
 Epoch: 275, lr: 8.0e-05, train_loss: 1.9370, train_acc: 0.2756 test_loss: 1.9099, test_acc: 0.3181, best: 0.3309, time: 0:02:11
 Epoch: 276, lr: 8.0e-05, train_loss: 1.9517, train_acc: 0.2668 test_loss: 1.9129, test_acc: 0.3312, best: 0.3312, time: 0:02:11
 Epoch: 277, lr: 8.0e-05, train_loss: 1.9540, train_acc: 0.2642 test_loss: 1.9017, test_acc: 0.3241, best: 0.3312, time: 0:02:12
 Epoch: 278, lr: 8.0e-05, train_loss: 1.9407, train_acc: 0.2730 test_loss: 1.8985, test_acc: 0.3184, best: 0.3312, time: 0:02:11
 Epoch: 279, lr: 8.0e-05, train_loss: 1.9359, train_acc: 0.2714 test_loss: 1.9025, test_acc: 0.3255, best: 0.3312, time: 0:02:11
 Epoch: 280, lr: 8.0e-05, train_loss: 1.9511, train_acc: 0.2636 test_loss: 1.9091, test_acc: 0.3216, best: 0.3312, time: 0:02:11
 Epoch: 281, lr: 8.0e-05, train_loss: 1.9563, train_acc: 0.2662 test_loss: 1.9175, test_acc: 0.3232, best: 0.3312, time: 0:02:11
 Epoch: 282, lr: 8.0e-05, train_loss: 1.9576, train_acc: 0.2658 test_loss: 1.9053, test_acc: 0.3267, best: 0.3312, time: 0:02:11
 Epoch: 283, lr: 8.0e-05, train_loss: 1.9493, train_acc: 0.2700 test_loss: 1.9038, test_acc: 0.3257, best: 0.3312, time: 0:02:11
 Epoch: 284, lr: 8.0e-05, train_loss: 1.9542, train_acc: 0.2636 test_loss: 1.9042, test_acc: 0.3236, best: 0.3312, time: 0:02:11
 Epoch: 285, lr: 8.0e-05, train_loss: 1.9357, train_acc: 0.2710 test_loss: 1.9073, test_acc: 0.3252, best: 0.3312, time: 0:02:11
 Epoch: 286, lr: 8.0e-05, train_loss: 1.9483, train_acc: 0.2716 test_loss: 1.8844, test_acc: 0.3267, best: 0.3312, time: 0:02:11
 Epoch: 287, lr: 8.0e-05, train_loss: 1.9604, train_acc: 0.2622 test_loss: 1.8971, test_acc: 0.3261, best: 0.3312, time: 0:02:11
 Epoch: 288, lr: 8.0e-05, train_loss: 1.9477, train_acc: 0.2680 test_loss: 1.9000, test_acc: 0.3230, best: 0.3312, time: 0:02:11
 Epoch: 289, lr: 8.0e-05, train_loss: 1.9445, train_acc: 0.2700 test_loss: 1.9036, test_acc: 0.3259, best: 0.3312, time: 0:02:11
 Epoch: 290, lr: 8.0e-05, train_loss: 1.9480, train_acc: 0.2602 test_loss: 1.8889, test_acc: 0.3239, best: 0.3312, time: 0:02:11
 Epoch: 291, lr: 8.0e-05, train_loss: 1.9624, train_acc: 0.2662 test_loss: 1.9089, test_acc: 0.3237, best: 0.3312, time: 0:02:11
 Epoch: 292, lr: 8.0e-05, train_loss: 1.9418, train_acc: 0.2706 test_loss: 1.9011, test_acc: 0.3309, best: 0.3312, time: 0:02:11
 Epoch: 293, lr: 8.0e-05, train_loss: 1.9440, train_acc: 0.2678 test_loss: 1.9028, test_acc: 0.3275, best: 0.3312, time: 0:02:11
 Epoch: 294, lr: 8.0e-05, train_loss: 1.9382, train_acc: 0.2782 test_loss: 1.9028, test_acc: 0.3249, best: 0.3312, time: 0:02:11
 Epoch: 295, lr: 8.0e-05, train_loss: 1.9487, train_acc: 0.2718 test_loss: 1.8999, test_acc: 0.3330, best: 0.3330, time: 0:02:11
 Epoch: 296, lr: 8.0e-05, train_loss: 1.9531, train_acc: 0.2696 test_loss: 1.8929, test_acc: 0.3260, best: 0.3330, time: 0:02:11
 Epoch: 297, lr: 8.0e-05, train_loss: 1.9445, train_acc: 0.2708 test_loss: 1.9023, test_acc: 0.3264, best: 0.3330, time: 0:02:11
 Epoch: 298, lr: 8.0e-05, train_loss: 1.9499, train_acc: 0.2678 test_loss: 1.9057, test_acc: 0.3281, best: 0.3330, time: 0:02:11
 Epoch: 299, lr: 8.0e-05, train_loss: 1.9496, train_acc: 0.2746 test_loss: 1.8910, test_acc: 0.3286, best: 0.3330, time: 0:02:11
 Highest accuracy: 0.3330