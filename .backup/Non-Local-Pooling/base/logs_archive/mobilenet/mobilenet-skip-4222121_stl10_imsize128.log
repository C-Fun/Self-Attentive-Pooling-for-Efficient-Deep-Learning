
 Run on time: 2022-07-03 01:04:40.023509

 Architecture: mobilenet-skip-4222121

 Pool Config: {
    "arch": "mobilenet",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 4,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET-SKIP-4222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.2641, train_acc: 0.1212 test_loss: 2.4499, test_acc: 0.1027, best: 0.1027, time: 0:04:08
 Epoch: 2, lr: 1.0e-02, train_loss: 2.4830, train_acc: 0.1284 test_loss: 2.2995, test_acc: 0.1556, best: 0.1556, time: 0:01:59
 Epoch: 3, lr: 1.0e-02, train_loss: 2.3222, train_acc: 0.1438 test_loss: 2.1868, test_acc: 0.1871, best: 0.1871, time: 0:03:13
 Epoch: 4, lr: 1.0e-02, train_loss: 2.2571, train_acc: 0.1534 test_loss: 2.2814, test_acc: 0.1598, best: 0.1871, time: 0:02:46
 Epoch: 5, lr: 1.0e-02, train_loss: 2.2632, train_acc: 0.1470 test_loss: 2.1657, test_acc: 0.1913, best: 0.1913, time: 0:02:55
 Epoch: 6, lr: 1.0e-02, train_loss: 2.1941, train_acc: 0.1636 test_loss: 2.1725, test_acc: 0.1837, best: 0.1913, time: 0:01:35
 Epoch: 7, lr: 1.0e-02, train_loss: 2.2148, train_acc: 0.1576 test_loss: 2.2383, test_acc: 0.1817, best: 0.1913, time: 0:02:50
 Epoch: 8, lr: 1.0e-02, train_loss: 2.2268, train_acc: 0.1570 test_loss: 2.2194, test_acc: 0.1616, best: 0.1913, time: 0:01:35
 Epoch: 9, lr: 1.0e-02, train_loss: 2.2319, train_acc: 0.1496 test_loss: 2.1862, test_acc: 0.1955, best: 0.1955, time: 0:02:24
 Epoch: 10, lr: 1.0e-02, train_loss: 2.1940, train_acc: 0.1604 test_loss: 2.1731, test_acc: 0.2036, best: 0.2036, time: 0:02:11
 Epoch: 11, lr: 1.0e-02, train_loss: 2.1748, train_acc: 0.1624 test_loss: 2.2432, test_acc: 0.1688, best: 0.2036, time: 0:01:26
 Epoch: 12, lr: 1.0e-02, train_loss: 2.1882, train_acc: 0.1630 test_loss: 2.1648, test_acc: 0.1884, best: 0.2036, time: 0:01:25
 Epoch: 13, lr: 1.0e-02, train_loss: 2.1498, train_acc: 0.1804 test_loss: 2.1343, test_acc: 0.2029, best: 0.2036, time: 0:01:17
 Epoch: 14, lr: 1.0e-02, train_loss: 2.1327, train_acc: 0.1854 test_loss: 2.1324, test_acc: 0.1955, best: 0.2036, time: 0:01:24
 Epoch: 15, lr: 1.0e-02, train_loss: 2.1167, train_acc: 0.1858 test_loss: 2.0610, test_acc: 0.2125, best: 0.2125, time: 0:01:31
 Epoch: 16, lr: 1.0e-02, train_loss: 2.0607, train_acc: 0.2072 test_loss: 2.0709, test_acc: 0.2341, best: 0.2341, time: 0:01:21
 Epoch: 17, lr: 1.0e-02, train_loss: 2.1132, train_acc: 0.1828 test_loss: 2.0758, test_acc: 0.2015, best: 0.2341, time: 0:01:22
 Epoch: 18, lr: 1.0e-02, train_loss: 2.0916, train_acc: 0.1888 test_loss: 2.0614, test_acc: 0.2023, best: 0.2341, time: 0:01:20
 Epoch: 19, lr: 1.0e-02, train_loss: 2.0783, train_acc: 0.2002 test_loss: 2.1100, test_acc: 0.2177, best: 0.2341, time: 0:01:16
 Epoch: 20, lr: 1.0e-02, train_loss: 2.1109, train_acc: 0.1970 test_loss: 2.1342, test_acc: 0.2055, best: 0.2341, time: 0:01:21
 Epoch: 21, lr: 1.0e-02, train_loss: 2.0571, train_acc: 0.1984 test_loss: 1.9953, test_acc: 0.2521, best: 0.2521, time: 0:01:21
 Epoch: 22, lr: 1.0e-02, train_loss: 2.0500, train_acc: 0.2052 test_loss: 2.0352, test_acc: 0.2214, best: 0.2521, time: 0:01:21
 Epoch: 23, lr: 1.0e-02, train_loss: 2.0949, train_acc: 0.1968 test_loss: 2.0027, test_acc: 0.2276, best: 0.2521, time: 0:01:21
 Epoch: 24, lr: 1.0e-02, train_loss: 2.0497, train_acc: 0.2066 test_loss: 1.9949, test_acc: 0.2582, best: 0.2582, time: 0:01:23
 Epoch: 25, lr: 1.0e-02, train_loss: 2.0554, train_acc: 0.1984 test_loss: 2.1048, test_acc: 0.2100, best: 0.2582, time: 0:01:26
 Epoch: 26, lr: 1.0e-02, train_loss: 2.0537, train_acc: 0.2054 test_loss: 2.0591, test_acc: 0.2211, best: 0.2582, time: 0:01:23
 Epoch: 27, lr: 1.0e-02, train_loss: 2.0516, train_acc: 0.2024 test_loss: 2.0055, test_acc: 0.2416, best: 0.2582, time: 0:01:17
 Epoch: 28, lr: 1.0e-02, train_loss: 2.0329, train_acc: 0.2106 test_loss: 2.0173, test_acc: 0.2299, best: 0.2582, time: 0:01:28
 Epoch: 29, lr: 1.0e-02, train_loss: 2.0409, train_acc: 0.2098 test_loss: 2.0023, test_acc: 0.2622, best: 0.2622, time: 0:01:20
 Epoch: 30, lr: 1.0e-02, train_loss: 1.9950, train_acc: 0.2196 test_loss: 1.9935, test_acc: 0.2430, best: 0.2622, time: 0:01:29
 Epoch: 31, lr: 1.0e-02, train_loss: 2.0076, train_acc: 0.2226 test_loss: 1.9609, test_acc: 0.2447, best: 0.2622, time: 0:01:21
 Epoch: 32, lr: 1.0e-02, train_loss: 2.0082, train_acc: 0.2200 test_loss: 1.9557, test_acc: 0.2507, best: 0.2622, time: 0:01:17
 Epoch: 33, lr: 1.0e-02, train_loss: 2.0088, train_acc: 0.2188 test_loss: 2.0675, test_acc: 0.1812, best: 0.2622, time: 0:01:22
 Epoch: 34, lr: 1.0e-02, train_loss: 2.0557, train_acc: 0.2182 test_loss: 1.9789, test_acc: 0.2384, best: 0.2622, time: 0:01:18
 Epoch: 35, lr: 1.0e-02, train_loss: 2.0519, train_acc: 0.2132 test_loss: 2.0165, test_acc: 0.2395, best: 0.2622, time: 0:01:23
 Epoch: 36, lr: 1.0e-02, train_loss: 2.0166, train_acc: 0.2248 test_loss: 1.9847, test_acc: 0.2471, best: 0.2622, time: 0:01:28
 Epoch: 37, lr: 1.0e-02, train_loss: 2.0317, train_acc: 0.2122 test_loss: 1.9963, test_acc: 0.2376, best: 0.2622, time: 0:01:26
 Epoch: 38, lr: 1.0e-02, train_loss: 1.9791, train_acc: 0.2272 test_loss: 1.8973, test_acc: 0.2700, best: 0.2700, time: 0:01:27
 Epoch: 39, lr: 1.0e-02, train_loss: 1.9789, train_acc: 0.2230 test_loss: 1.9391, test_acc: 0.2709, best: 0.2709, time: 0:01:32
 Epoch: 40, lr: 1.0e-02, train_loss: 2.0013, train_acc: 0.2242 test_loss: 1.9312, test_acc: 0.2755, best: 0.2755, time: 0:01:29
 Epoch: 41, lr: 1.0e-02, train_loss: 1.9979, train_acc: 0.2162 test_loss: 1.9572, test_acc: 0.2457, best: 0.2755, time: 0:01:37
 Epoch: 42, lr: 1.0e-02, train_loss: 1.9858, train_acc: 0.2188 test_loss: 1.9378, test_acc: 0.2484, best: 0.2755, time: 0:01:24
 Epoch: 43, lr: 1.0e-02, train_loss: 1.9777, train_acc: 0.2220 test_loss: 1.9514, test_acc: 0.2343, best: 0.2755, time: 0:01:35
 Epoch: 44, lr: 1.0e-02, train_loss: 1.9696, train_acc: 0.2288 test_loss: 1.9255, test_acc: 0.2652, best: 0.2755, time: 0:01:40
 Epoch: 45, lr: 1.0e-02, train_loss: 2.0093, train_acc: 0.2266 test_loss: 1.9250, test_acc: 0.2372, best: 0.2755, time: 0:01:20
 Epoch: 46, lr: 1.0e-02, train_loss: 1.9955, train_acc: 0.2210 test_loss: 1.9150, test_acc: 0.2756, best: 0.2756, time: 0:01:27
 Epoch: 47, lr: 1.0e-02, train_loss: 1.9616, train_acc: 0.2294 test_loss: 2.0529, test_acc: 0.2111, best: 0.2756, time: 0:01:19
 Epoch: 48, lr: 1.0e-02, train_loss: 2.0511, train_acc: 0.2092 test_loss: 1.9701, test_acc: 0.2377, best: 0.2756, time: 0:01:24
 Epoch: 49, lr: 1.0e-02, train_loss: 1.9993, train_acc: 0.2260 test_loss: 1.9068, test_acc: 0.2831, best: 0.2831, time: 0:01:20
 Epoch: 50, lr: 1.0e-02, train_loss: 1.9909, train_acc: 0.2258 test_loss: 1.9787, test_acc: 0.2251, best: 0.2831, time: 0:01:21
 Epoch: 51, lr: 1.0e-02, train_loss: 2.0125, train_acc: 0.2314 test_loss: 1.9875, test_acc: 0.2479, best: 0.2831, time: 0:01:21
 Epoch: 52, lr: 1.0e-02, train_loss: 2.0622, train_acc: 0.1906 test_loss: 2.0039, test_acc: 0.2074, best: 0.2831, time: 0:01:25
 Epoch: 53, lr: 1.0e-02, train_loss: 2.0248, train_acc: 0.2000 test_loss: 2.0607, test_acc: 0.1762, best: 0.2831, time: 0:01:18
 Epoch: 54, lr: 1.0e-02, train_loss: 2.0248, train_acc: 0.2116 test_loss: 1.9658, test_acc: 0.2436, best: 0.2831, time: 0:01:26
 Epoch: 55, lr: 1.0e-02, train_loss: 1.9890, train_acc: 0.2222 test_loss: 1.8948, test_acc: 0.2761, best: 0.2831, time: 0:01:20
 Epoch: 56, lr: 1.0e-02, train_loss: 1.9930, train_acc: 0.2210 test_loss: 1.9248, test_acc: 0.2630, best: 0.2831, time: 0:01:22
 Epoch: 57, lr: 1.0e-02, train_loss: 1.9775, train_acc: 0.2294 test_loss: 2.0143, test_acc: 0.2154, best: 0.2831, time: 0:01:26
 Epoch: 58, lr: 1.0e-02, train_loss: 2.0022, train_acc: 0.2304 test_loss: 1.8652, test_acc: 0.2656, best: 0.2831, time: 0:01:40
 Epoch: 59, lr: 1.0e-02, train_loss: 1.9489, train_acc: 0.2322 test_loss: 1.8884, test_acc: 0.2562, best: 0.2831, time: 0:01:15
 Epoch: 60, lr: 1.0e-02, train_loss: 1.9839, train_acc: 0.2204 test_loss: 1.9420, test_acc: 0.2502, best: 0.2831, time: 0:01:15
 Epoch: 61, lr: 1.0e-02, train_loss: 2.0113, train_acc: 0.2192 test_loss: 1.9181, test_acc: 0.2577, best: 0.2831, time: 0:01:15
 Epoch: 62, lr: 1.0e-02, train_loss: 1.9637, train_acc: 0.2286 test_loss: 1.8742, test_acc: 0.2787, best: 0.2831, time: 0:01:17
 Epoch: 63, lr: 1.0e-02, train_loss: 1.9544, train_acc: 0.2326 test_loss: 1.8533, test_acc: 0.2621, best: 0.2831, time: 0:01:19
 Epoch: 64, lr: 1.0e-02, train_loss: 1.9681, train_acc: 0.2404 test_loss: 1.9142, test_acc: 0.2764, best: 0.2831, time: 0:01:26
 Epoch: 65, lr: 1.0e-02, train_loss: 1.9530, train_acc: 0.2420 test_loss: 1.8718, test_acc: 0.2724, best: 0.2831, time: 0:01:18
 Epoch: 66, lr: 1.0e-02, train_loss: 1.9409, train_acc: 0.2398 test_loss: 1.8921, test_acc: 0.2505, best: 0.2831, time: 0:01:16
 Epoch: 67, lr: 1.0e-02, train_loss: 1.9448, train_acc: 0.2418 test_loss: 1.9068, test_acc: 0.2674, best: 0.2831, time: 0:01:16
 Epoch: 68, lr: 1.0e-02, train_loss: 1.9420, train_acc: 0.2528 test_loss: 1.8510, test_acc: 0.2699, best: 0.2831, time: 0:01:17
 Epoch: 69, lr: 1.0e-02, train_loss: 1.9263, train_acc: 0.2542 test_loss: 1.8614, test_acc: 0.2805, best: 0.2831, time: 0:01:17
 Epoch: 70, lr: 1.0e-02, train_loss: 1.9357, train_acc: 0.2546 test_loss: 1.8689, test_acc: 0.2834, best: 0.2834, time: 0:01:31
 Epoch: 71, lr: 1.0e-02, train_loss: 1.9497, train_acc: 0.2496 test_loss: 1.8928, test_acc: 0.2377, best: 0.2834, time: 0:01:16
 Epoch: 72, lr: 1.0e-02, train_loss: 1.9460, train_acc: 0.2494 test_loss: 1.8551, test_acc: 0.2964, best: 0.2964, time: 0:01:16
 Epoch: 73, lr: 1.0e-02, train_loss: 1.9424, train_acc: 0.2476 test_loss: 1.8848, test_acc: 0.2686, best: 0.2964, time: 0:01:16
 Epoch: 74, lr: 1.0e-02, train_loss: 1.9311, train_acc: 0.2432 test_loss: 1.9253, test_acc: 0.2582, best: 0.2964, time: 0:01:21
 Epoch: 75, lr: 1.0e-02, train_loss: 1.9459, train_acc: 0.2430 test_loss: 1.8606, test_acc: 0.2657, best: 0.2964, time: 0:01:21
 Epoch: 76, lr: 1.0e-02, train_loss: 1.9352, train_acc: 0.2546 test_loss: 1.8683, test_acc: 0.2624, best: 0.2964, time: 0:01:26
 Epoch: 77, lr: 1.0e-02, train_loss: 1.8974, train_acc: 0.2556 test_loss: 1.8267, test_acc: 0.2913, best: 0.2964, time: 0:01:19
 Epoch: 78, lr: 1.0e-02, train_loss: 1.9111, train_acc: 0.2646 test_loss: 1.8674, test_acc: 0.2976, best: 0.2976, time: 0:01:15
 Epoch: 79, lr: 1.0e-02, train_loss: 1.8950, train_acc: 0.2620 test_loss: 1.8908, test_acc: 0.2717, best: 0.2976, time: 0:01:14
 Epoch: 80, lr: 1.0e-02, train_loss: 1.9569, train_acc: 0.2434 test_loss: 1.9114, test_acc: 0.2690, best: 0.2976, time: 0:01:13
 Epoch: 81, lr: 1.0e-02, train_loss: 1.9528, train_acc: 0.2466 test_loss: 1.9306, test_acc: 0.2766, best: 0.2976, time: 0:01:14
 Epoch: 82, lr: 1.0e-02, train_loss: 1.9456, train_acc: 0.2468 test_loss: 1.8262, test_acc: 0.2903, best: 0.2976, time: 0:01:18
 Epoch: 83, lr: 1.0e-02, train_loss: 1.8901, train_acc: 0.2620 test_loss: 1.7983, test_acc: 0.2905, best: 0.2976, time: 0:01:22
 Epoch: 84, lr: 1.0e-02, train_loss: 1.9086, train_acc: 0.2588 test_loss: 1.8398, test_acc: 0.3033, best: 0.3033, time: 0:01:28
 Epoch: 85, lr: 1.0e-02, train_loss: 1.9463, train_acc: 0.2584 test_loss: 1.9379, test_acc: 0.2740, best: 0.3033, time: 0:01:20
 Epoch: 86, lr: 1.0e-02, train_loss: 1.9928, train_acc: 0.2376 test_loss: 1.9009, test_acc: 0.2925, best: 0.3033, time: 0:01:33
 Epoch: 87, lr: 1.0e-02, train_loss: 2.0128, train_acc: 0.2392 test_loss: 1.9172, test_acc: 0.2860, best: 0.3033, time: 0:01:44
 Epoch: 88, lr: 1.0e-02, train_loss: 1.9351, train_acc: 0.2512 test_loss: 1.8745, test_acc: 0.2755, best: 0.3033, time: 0:01:25
 Epoch: 89, lr: 1.0e-02, train_loss: 1.9057, train_acc: 0.2674 test_loss: 1.8452, test_acc: 0.2976, best: 0.3033, time: 0:01:28
 Epoch: 90, lr: 1.0e-02, train_loss: 1.9051, train_acc: 0.2734 test_loss: 1.8242, test_acc: 0.3083, best: 0.3083, time: 0:01:31
 Epoch: 91, lr: 1.0e-02, train_loss: 1.9111, train_acc: 0.2670 test_loss: 1.8535, test_acc: 0.3049, best: 0.3083, time: 0:01:29
 Epoch: 92, lr: 1.0e-02, train_loss: 1.9039, train_acc: 0.2574 test_loss: 1.8023, test_acc: 0.2840, best: 0.3083, time: 0:01:23
 Epoch: 93, lr: 1.0e-02, train_loss: 1.9067, train_acc: 0.2554 test_loss: 1.8167, test_acc: 0.2954, best: 0.3083, time: 0:01:25
 Epoch: 94, lr: 1.0e-02, train_loss: 1.8834, train_acc: 0.2720 test_loss: 1.8553, test_acc: 0.2682, best: 0.3083, time: 0:01:28
 Epoch: 95, lr: 1.0e-02, train_loss: 1.8783, train_acc: 0.2650 test_loss: 1.8258, test_acc: 0.3040, best: 0.3083, time: 0:01:22
 Epoch: 96, lr: 1.0e-02, train_loss: 1.9919, train_acc: 0.2386 test_loss: 1.9870, test_acc: 0.2635, best: 0.3083, time: 0:01:24
 Epoch: 97, lr: 1.0e-02, train_loss: 2.0133, train_acc: 0.2356 test_loss: 1.9698, test_acc: 0.2414, best: 0.3083, time: 0:01:19
 Epoch: 98, lr: 1.0e-02, train_loss: 1.9814, train_acc: 0.2406 test_loss: 1.9037, test_acc: 0.2878, best: 0.3083, time: 0:01:18
 Epoch: 99, lr: 1.0e-02, train_loss: 1.9531, train_acc: 0.2626 test_loss: 1.9365, test_acc: 0.2696, best: 0.3083, time: 0:01:18
 Epoch: 100, lr: 1.0e-02, train_loss: 1.9658, train_acc: 0.2618 test_loss: 1.9170, test_acc: 0.2891, best: 0.3083, time: 0:01:21
 Epoch: 101, lr: 1.0e-02, train_loss: 2.1102, train_acc: 0.2086 test_loss: 2.0204, test_acc: 0.2415, best: 0.3083, time: 0:01:19
 Epoch: 102, lr: 1.0e-02, train_loss: 2.0416, train_acc: 0.2300 test_loss: 2.0072, test_acc: 0.2599, best: 0.3083, time: 0:01:17
 Epoch: 103, lr: 1.0e-02, train_loss: 2.0426, train_acc: 0.2326 test_loss: 2.0138, test_acc: 0.2525, best: 0.3083, time: 0:01:19
 Epoch: 104, lr: 1.0e-02, train_loss: 2.0134, train_acc: 0.2314 test_loss: 2.0492, test_acc: 0.2050, best: 0.3083, time: 0:01:23
 Epoch: 105, lr: 1.0e-02, train_loss: 2.0406, train_acc: 0.2254 test_loss: 1.9828, test_acc: 0.2460, best: 0.3083, time: 0:01:24
 Epoch: 106, lr: 1.0e-02, train_loss: 2.0134, train_acc: 0.2396 test_loss: 1.9040, test_acc: 0.2786, best: 0.3083, time: 0:01:19
 Epoch: 107, lr: 1.0e-02, train_loss: 1.9669, train_acc: 0.2542 test_loss: 1.8701, test_acc: 0.3084, best: 0.3084, time: 0:01:18
 Epoch: 108, lr: 1.0e-02, train_loss: 1.9716, train_acc: 0.2514 test_loss: 1.8899, test_acc: 0.2820, best: 0.3084, time: 0:01:19
 Epoch: 109, lr: 1.0e-02, train_loss: 1.9672, train_acc: 0.2528 test_loss: 1.9272, test_acc: 0.2911, best: 0.3084, time: 0:01:19
 Epoch: 110, lr: 1.0e-02, train_loss: 1.9579, train_acc: 0.2660 test_loss: 1.9321, test_acc: 0.2893, best: 0.3084, time: 0:01:17
 Epoch: 111, lr: 1.0e-02, train_loss: 1.9618, train_acc: 0.2564 test_loss: 1.9100, test_acc: 0.2823, best: 0.3084, time: 0:01:22
 Epoch: 112, lr: 1.0e-02, train_loss: 1.9785, train_acc: 0.2360 test_loss: 1.9394, test_acc: 0.2369, best: 0.3084, time: 0:01:17
 Epoch: 113, lr: 1.0e-02, train_loss: 1.9553, train_acc: 0.2550 test_loss: 1.8637, test_acc: 0.2995, best: 0.3084, time: 0:01:23
 Epoch: 114, lr: 1.0e-02, train_loss: 1.9368, train_acc: 0.2652 test_loss: 1.8537, test_acc: 0.2908, best: 0.3084, time: 0:01:19
 Epoch: 115, lr: 1.0e-02, train_loss: 1.9829, train_acc: 0.2424 test_loss: 1.8951, test_acc: 0.2894, best: 0.3084, time: 0:01:24
 Epoch: 116, lr: 1.0e-02, train_loss: 1.9497, train_acc: 0.2522 test_loss: 1.8046, test_acc: 0.3134, best: 0.3134, time: 0:01:23
 Epoch: 117, lr: 1.0e-02, train_loss: 1.9458, train_acc: 0.2494 test_loss: 1.8656, test_acc: 0.2941, best: 0.3134, time: 0:01:20
 Epoch: 118, lr: 1.0e-02, train_loss: 1.9303, train_acc: 0.2602 test_loss: 1.8389, test_acc: 0.3265, best: 0.3265, time: 0:01:17
 Epoch: 119, lr: 1.0e-02, train_loss: 1.9280, train_acc: 0.2698 test_loss: 1.8290, test_acc: 0.3114, best: 0.3265, time: 0:01:17
 Epoch: 120, lr: 1.0e-02, train_loss: 1.9176, train_acc: 0.2662 test_loss: 1.8233, test_acc: 0.2859, best: 0.3265, time: 0:01:22
 Epoch: 121, lr: 1.0e-02, train_loss: 1.9252, train_acc: 0.2600 test_loss: 1.8053, test_acc: 0.3220, best: 0.3265, time: 0:01:29
 Epoch: 122, lr: 1.0e-02, train_loss: 1.9081, train_acc: 0.2738 test_loss: 1.8732, test_acc: 0.2971, best: 0.3265, time: 0:01:21
 Epoch: 123, lr: 1.0e-02, train_loss: 1.9061, train_acc: 0.2686 test_loss: 1.7814, test_acc: 0.3086, best: 0.3265, time: 0:01:22
 Epoch: 124, lr: 1.0e-02, train_loss: 1.8924, train_acc: 0.2746 test_loss: 1.7822, test_acc: 0.3109, best: 0.3265, time: 0:01:23
 Epoch: 125, lr: 1.0e-02, train_loss: 1.9094, train_acc: 0.2784 test_loss: 1.8032, test_acc: 0.3279, best: 0.3279, time: 0:01:24
 Epoch: 126, lr: 1.0e-02, train_loss: 1.9081, train_acc: 0.2748 test_loss: 1.7813, test_acc: 0.3231, best: 0.3279, time: 0:01:20
 Epoch: 127, lr: 1.0e-02, train_loss: 1.8813, train_acc: 0.2782 test_loss: 1.7695, test_acc: 0.3200, best: 0.3279, time: 0:01:18
 Epoch: 128, lr: 1.0e-02, train_loss: 1.9019, train_acc: 0.2712 test_loss: 1.7880, test_acc: 0.3316, best: 0.3316, time: 0:01:20
 Epoch: 129, lr: 1.0e-02, train_loss: 1.8850, train_acc: 0.2810 test_loss: 1.7655, test_acc: 0.3279, best: 0.3316, time: 0:01:17
 Epoch: 130, lr: 1.0e-02, train_loss: 1.8715, train_acc: 0.2790 test_loss: 1.8101, test_acc: 0.3365, best: 0.3365, time: 0:01:22
 Epoch: 131, lr: 1.0e-02, train_loss: 1.9046, train_acc: 0.2656 test_loss: 1.8478, test_acc: 0.3073, best: 0.3365, time: 0:01:20
 Epoch: 132, lr: 1.0e-02, train_loss: 1.8787, train_acc: 0.2806 test_loss: 1.8067, test_acc: 0.3359, best: 0.3365, time: 0:01:18
 Epoch: 133, lr: 1.0e-02, train_loss: 1.8926, train_acc: 0.2648 test_loss: 1.8517, test_acc: 0.2641, best: 0.3365, time: 0:01:21
 Epoch: 134, lr: 1.0e-02, train_loss: 1.9077, train_acc: 0.2562 test_loss: 1.8011, test_acc: 0.3296, best: 0.3365, time: 0:01:37
 Epoch: 135, lr: 1.0e-02, train_loss: 1.8778, train_acc: 0.2744 test_loss: 1.7618, test_acc: 0.3249, best: 0.3365, time: 0:01:20
 Epoch: 136, lr: 1.0e-02, train_loss: 1.8879, train_acc: 0.2766 test_loss: 1.8193, test_acc: 0.3201, best: 0.3365, time: 0:01:19
 Epoch: 137, lr: 1.0e-02, train_loss: 1.8779, train_acc: 0.2852 test_loss: 1.7804, test_acc: 0.3111, best: 0.3365, time: 0:01:17
 Epoch: 138, lr: 1.0e-02, train_loss: 1.8769, train_acc: 0.2716 test_loss: 1.8306, test_acc: 0.3175, best: 0.3365, time: 0:01:16
 Epoch: 139, lr: 1.0e-02, train_loss: 1.8733, train_acc: 0.2816 test_loss: 1.8070, test_acc: 0.3212, best: 0.3365, time: 0:01:17
 Epoch: 140, lr: 1.0e-02, train_loss: 1.8670, train_acc: 0.2792 test_loss: 1.7429, test_acc: 0.3463, best: 0.3463, time: 0:01:16
 Epoch: 141, lr: 1.0e-02, train_loss: 1.8421, train_acc: 0.2852 test_loss: 1.7425, test_acc: 0.3528, best: 0.3528, time: 0:01:18
 Epoch: 142, lr: 1.0e-02, train_loss: 1.8335, train_acc: 0.2932 test_loss: 1.7501, test_acc: 0.3280, best: 0.3528, time: 0:01:19
 Epoch: 143, lr: 1.0e-02, train_loss: 1.9009, train_acc: 0.2694 test_loss: 1.7746, test_acc: 0.3352, best: 0.3528, time: 0:01:17
 Epoch: 144, lr: 1.0e-02, train_loss: 1.8632, train_acc: 0.2910 test_loss: 1.7813, test_acc: 0.3185, best: 0.3528, time: 0:01:14
 Epoch: 145, lr: 1.0e-02, train_loss: 1.8630, train_acc: 0.2858 test_loss: 1.7378, test_acc: 0.3324, best: 0.3528, time: 0:01:15
 Epoch: 146, lr: 1.0e-02, train_loss: 1.8595, train_acc: 0.2888 test_loss: 1.7395, test_acc: 0.3474, best: 0.3528, time: 0:01:15
 Epoch: 147, lr: 1.0e-02, train_loss: 1.8348, train_acc: 0.2896 test_loss: 1.7592, test_acc: 0.3335, best: 0.3528, time: 0:01:18
 Epoch: 148, lr: 1.0e-02, train_loss: 1.8288, train_acc: 0.2950 test_loss: 1.7173, test_acc: 0.3534, best: 0.3534, time: 0:01:16
 Epoch: 149, lr: 1.0e-02, train_loss: 1.8296, train_acc: 0.3036 test_loss: 1.7770, test_acc: 0.3335, best: 0.3534, time: 0:01:15
 Epoch: 150, lr: 1.0e-02, train_loss: 1.8327, train_acc: 0.2966 test_loss: 1.7851, test_acc: 0.3204, best: 0.3534, time: 0:01:15
 Epoch: 151, lr: 1.0e-02, train_loss: 1.8520, train_acc: 0.2846 test_loss: 1.7725, test_acc: 0.3089, best: 0.3534, time: 0:01:18
 Epoch: 152, lr: 1.0e-02, train_loss: 1.8455, train_acc: 0.2860 test_loss: 1.7782, test_acc: 0.3187, best: 0.3534, time: 0:01:22
 Epoch: 153, lr: 1.0e-02, train_loss: 1.8427, train_acc: 0.2860 test_loss: 1.7455, test_acc: 0.3234, best: 0.3534, time: 0:01:18
 Epoch: 154, lr: 1.0e-02, train_loss: 1.8675, train_acc: 0.2840 test_loss: 1.7700, test_acc: 0.3336, best: 0.3534, time: 0:01:18
 Epoch: 155, lr: 1.0e-02, train_loss: 1.8623, train_acc: 0.2762 test_loss: 1.7440, test_acc: 0.3485, best: 0.3534, time: 0:01:25
 Epoch: 156, lr: 1.0e-02, train_loss: 1.8430, train_acc: 0.2870 test_loss: 1.7510, test_acc: 0.3345, best: 0.3534, time: 0:01:17
 Epoch: 157, lr: 1.0e-02, train_loss: 1.8467, train_acc: 0.2892 test_loss: 1.7260, test_acc: 0.3541, best: 0.3541, time: 0:01:18
 Epoch: 158, lr: 1.0e-02, train_loss: 1.8372, train_acc: 0.2882 test_loss: 1.7617, test_acc: 0.3649, best: 0.3649, time: 0:01:24
 Epoch: 159, lr: 1.0e-02, train_loss: 1.8239, train_acc: 0.2970 test_loss: 1.7620, test_acc: 0.3236, best: 0.3649, time: 0:01:18
 Epoch: 160, lr: 1.0e-02, train_loss: 1.8496, train_acc: 0.2826 test_loss: 1.7730, test_acc: 0.3229, best: 0.3649, time: 0:01:18
 Epoch: 161, lr: 1.0e-02, train_loss: 1.8282, train_acc: 0.2950 test_loss: 1.7408, test_acc: 0.3604, best: 0.3649, time: 0:01:17
 Epoch: 162, lr: 1.0e-02, train_loss: 1.8371, train_acc: 0.2918 test_loss: 1.7466, test_acc: 0.3546, best: 0.3649, time: 0:01:18
 Epoch: 163, lr: 1.0e-02, train_loss: 1.8545, train_acc: 0.2836 test_loss: 1.7515, test_acc: 0.3605, best: 0.3649, time: 0:01:19
 Epoch: 164, lr: 1.0e-02, train_loss: 1.9668, train_acc: 0.2502 test_loss: 1.9124, test_acc: 0.2525, best: 0.3649, time: 0:01:19
 Epoch: 165, lr: 1.0e-02, train_loss: 1.9726, train_acc: 0.2446 test_loss: 1.8964, test_acc: 0.2774, best: 0.3649, time: 0:01:17
 Epoch: 166, lr: 1.0e-02, train_loss: 1.9897, train_acc: 0.2406 test_loss: 1.9053, test_acc: 0.2815, best: 0.3649, time: 0:01:17
 Epoch: 167, lr: 1.0e-02, train_loss: 1.9967, train_acc: 0.2370 test_loss: 1.9194, test_acc: 0.2717, best: 0.3649, time: 0:01:18
 Epoch: 168, lr: 1.0e-02, train_loss: 2.1853, train_acc: 0.1666 test_loss: 2.2394, test_acc: 0.1369, best: 0.3649, time: 0:01:18
 Epoch: 169, lr: 1.0e-02, train_loss: 2.2070, train_acc: 0.1544 test_loss: 2.1943, test_acc: 0.1661, best: 0.3649, time: 0:01:19
 Epoch: 170, lr: 1.0e-02, train_loss: 2.1852, train_acc: 0.1654 test_loss: 2.1758, test_acc: 0.1691, best: 0.3649, time: 0:01:29
 Epoch: 171, lr: 1.0e-02, train_loss: 2.1570, train_acc: 0.1862 test_loss: 2.1312, test_acc: 0.2046, best: 0.3649, time: 0:01:19
 Epoch: 172, lr: 1.0e-02, train_loss: 2.1486, train_acc: 0.1802 test_loss: 2.1403, test_acc: 0.1953, best: 0.3649, time: 0:01:23
 Epoch: 173, lr: 1.0e-02, train_loss: 2.1144, train_acc: 0.1832 test_loss: 2.0484, test_acc: 0.2386, best: 0.3649, time: 0:01:18
 Epoch: 174, lr: 1.0e-02, train_loss: 2.1151, train_acc: 0.1982 test_loss: 2.0694, test_acc: 0.2279, best: 0.3649, time: 0:01:19
 Epoch: 175, lr: 1.0e-02, train_loss: 2.0769, train_acc: 0.1972 test_loss: 2.1032, test_acc: 0.2164, best: 0.3649, time: 0:01:24
 Epoch: 176, lr: 1.0e-02, train_loss: 2.0781, train_acc: 0.2090 test_loss: 2.0570, test_acc: 0.2372, best: 0.3649, time: 0:01:19
 Epoch: 177, lr: 1.0e-02, train_loss: 2.0751, train_acc: 0.2006 test_loss: 2.0386, test_acc: 0.2077, best: 0.3649, time: 0:01:20
 Epoch: 178, lr: 1.0e-02, train_loss: 2.0901, train_acc: 0.1980 test_loss: 2.0645, test_acc: 0.2289, best: 0.3649, time: 0:01:17
 Epoch: 179, lr: 1.0e-02, train_loss: 2.0870, train_acc: 0.2054 test_loss: 2.0349, test_acc: 0.2404, best: 0.3649, time: 0:01:18
 Epoch: 180, lr: 2.0e-03, train_loss: 2.0409, train_acc: 0.2280 test_loss: 2.0083, test_acc: 0.2599, best: 0.3649, time: 0:01:20
 Epoch: 181, lr: 2.0e-03, train_loss: 2.0406, train_acc: 0.2328 test_loss: 1.9568, test_acc: 0.2706, best: 0.3649, time: 0:01:17
 Epoch: 182, lr: 2.0e-03, train_loss: 2.0235, train_acc: 0.2342 test_loss: 1.9557, test_acc: 0.2685, best: 0.3649, time: 0:01:17
 Epoch: 183, lr: 2.0e-03, train_loss: 2.0132, train_acc: 0.2320 test_loss: 1.9407, test_acc: 0.2818, best: 0.3649, time: 0:01:18
 Epoch: 184, lr: 2.0e-03, train_loss: 2.1202, train_acc: 0.2046 test_loss: 2.2393, test_acc: 0.1258, best: 0.3649, time: 0:01:25
 Epoch: 185, lr: 2.0e-03, train_loss: 2.2183, train_acc: 0.1558 test_loss: 2.1628, test_acc: 0.1854, best: 0.3649, time: 0:01:17
 Epoch: 186, lr: 2.0e-03, train_loss: 2.1659, train_acc: 0.1736 test_loss: 2.1138, test_acc: 0.2126, best: 0.3649, time: 0:01:20
 Epoch: 187, lr: 2.0e-03, train_loss: 2.1559, train_acc: 0.1852 test_loss: 2.1061, test_acc: 0.2057, best: 0.3649, time: 0:01:18
 Epoch: 188, lr: 2.0e-03, train_loss: 2.1464, train_acc: 0.1888 test_loss: 2.1651, test_acc: 0.1845, best: 0.3649, time: 0:01:31
 Epoch: 189, lr: 2.0e-03, train_loss: 2.1515, train_acc: 0.1824 test_loss: 2.1096, test_acc: 0.1966, best: 0.3649, time: 0:01:19
 Epoch: 190, lr: 2.0e-03, train_loss: 2.1175, train_acc: 0.1886 test_loss: 2.0744, test_acc: 0.2117, best: 0.3649, time: 0:01:21
 Epoch: 191, lr: 2.0e-03, train_loss: 2.1164, train_acc: 0.1868 test_loss: 2.0947, test_acc: 0.2082, best: 0.3649, time: 0:01:22
 Epoch: 192, lr: 2.0e-03, train_loss: 2.1118, train_acc: 0.1920 test_loss: 2.0607, test_acc: 0.2161, best: 0.3649, time: 0:01:19
 Epoch: 193, lr: 2.0e-03, train_loss: 2.0969, train_acc: 0.2026 test_loss: 2.0628, test_acc: 0.2177, best: 0.3649, time: 0:01:17
 Epoch: 194, lr: 2.0e-03, train_loss: 2.0847, train_acc: 0.2038 test_loss: 2.0502, test_acc: 0.2216, best: 0.3649, time: 0:01:18
 Epoch: 195, lr: 2.0e-03, train_loss: 2.1188, train_acc: 0.1982 test_loss: 2.0518, test_acc: 0.2255, best: 0.3649, time: 0:01:17
 Epoch: 196, lr: 2.0e-03, train_loss: 2.1010, train_acc: 0.2044 test_loss: 2.0374, test_acc: 0.2284, best: 0.3649, time: 0:01:18
 Epoch: 197, lr: 2.0e-03, train_loss: 2.0853, train_acc: 0.2004 test_loss: 2.0325, test_acc: 0.2265, best: 0.3649, time: 0:01:19
 Epoch: 198, lr: 2.0e-03, train_loss: 2.0813, train_acc: 0.2020 test_loss: 2.0423, test_acc: 0.2117, best: 0.3649, time: 0:01:18
 Epoch: 199, lr: 2.0e-03, train_loss: 2.0705, train_acc: 0.2102 test_loss: 2.0572, test_acc: 0.2155, best: 0.3649, time: 0:01:18
 Epoch: 200, lr: 2.0e-03, train_loss: 2.0880, train_acc: 0.2020 test_loss: 2.0593, test_acc: 0.2106, best: 0.3649, time: 0:01:19
 Epoch: 201, lr: 2.0e-03, train_loss: 2.0655, train_acc: 0.2056 test_loss: 2.0389, test_acc: 0.2230, best: 0.3649, time: 0:01:20
 Epoch: 202, lr: 2.0e-03, train_loss: 2.0716, train_acc: 0.2090 test_loss: 2.0229, test_acc: 0.2229, best: 0.3649, time: 0:01:19
 Epoch: 203, lr: 2.0e-03, train_loss: 2.0587, train_acc: 0.2102 test_loss: 1.9998, test_acc: 0.2364, best: 0.3649, time: 0:01:22
 Epoch: 204, lr: 2.0e-03, train_loss: 2.0389, train_acc: 0.2212 test_loss: 1.9837, test_acc: 0.2365, best: 0.3649, time: 0:01:28
 Epoch: 205, lr: 2.0e-03, train_loss: 2.0453, train_acc: 0.2184 test_loss: 1.9821, test_acc: 0.2445, best: 0.3649, time: 0:01:23
 Epoch: 206, lr: 2.0e-03, train_loss: 2.0394, train_acc: 0.2092 test_loss: 1.9924, test_acc: 0.2390, best: 0.3649, time: 0:01:17
 Epoch: 207, lr: 2.0e-03, train_loss: 2.0251, train_acc: 0.2278 test_loss: 1.9781, test_acc: 0.2421, best: 0.3649, time: 0:01:18
 Epoch: 208, lr: 2.0e-03, train_loss: 2.0310, train_acc: 0.2196 test_loss: 1.9873, test_acc: 0.2350, best: 0.3649, time: 0:01:29
 Epoch: 209, lr: 2.0e-03, train_loss: 2.0307, train_acc: 0.2190 test_loss: 1.9842, test_acc: 0.2444, best: 0.3649, time: 0:01:19
 Epoch: 210, lr: 2.0e-03, train_loss: 2.0301, train_acc: 0.2172 test_loss: 1.9811, test_acc: 0.2544, best: 0.3649, time: 0:01:19
 Epoch: 211, lr: 2.0e-03, train_loss: 2.0227, train_acc: 0.2150 test_loss: 1.9614, test_acc: 0.2484, best: 0.3649, time: 0:01:19
 Epoch: 212, lr: 2.0e-03, train_loss: 2.0233, train_acc: 0.2118 test_loss: 2.0012, test_acc: 0.2407, best: 0.3649, time: 0:01:19
 Epoch: 213, lr: 2.0e-03, train_loss: 2.0339, train_acc: 0.2254 test_loss: 1.9995, test_acc: 0.2365, best: 0.3649, time: 0:01:19
 Epoch: 214, lr: 2.0e-03, train_loss: 2.0404, train_acc: 0.2160 test_loss: 1.9878, test_acc: 0.2521, best: 0.3649, time: 0:01:18
 Epoch: 215, lr: 2.0e-03, train_loss: 2.0377, train_acc: 0.2272 test_loss: 1.9697, test_acc: 0.2666, best: 0.3649, time: 0:01:20
 Epoch: 216, lr: 2.0e-03, train_loss: 2.0273, train_acc: 0.2210 test_loss: 1.9758, test_acc: 0.2365, best: 0.3649, time: 0:01:17
 Epoch: 217, lr: 2.0e-03, train_loss: 1.9959, train_acc: 0.2286 test_loss: 1.9521, test_acc: 0.2637, best: 0.3649, time: 0:01:18
 Epoch: 218, lr: 2.0e-03, train_loss: 2.0059, train_acc: 0.2216 test_loss: 1.9621, test_acc: 0.2629, best: 0.3649, time: 0:01:17
 Epoch: 219, lr: 2.0e-03, train_loss: 1.9937, train_acc: 0.2398 test_loss: 1.9442, test_acc: 0.2590, best: 0.3649, time: 0:01:20
 Epoch: 220, lr: 2.0e-03, train_loss: 2.0010, train_acc: 0.2296 test_loss: 1.9510, test_acc: 0.2721, best: 0.3649, time: 0:01:22
 Epoch: 221, lr: 2.0e-03, train_loss: 2.0049, train_acc: 0.2368 test_loss: 1.9445, test_acc: 0.2597, best: 0.3649, time: 0:01:23
 Epoch: 222, lr: 2.0e-03, train_loss: 1.9993, train_acc: 0.2294 test_loss: 1.9364, test_acc: 0.2585, best: 0.3649, time: 0:01:27
 Epoch: 223, lr: 2.0e-03, train_loss: 1.9856, train_acc: 0.2328 test_loss: 1.9490, test_acc: 0.2629, best: 0.3649, time: 0:01:18
 Epoch: 224, lr: 2.0e-03, train_loss: 1.9839, train_acc: 0.2420 test_loss: 1.9301, test_acc: 0.2710, best: 0.3649, time: 0:01:18
 Epoch: 225, lr: 2.0e-03, train_loss: 1.9919, train_acc: 0.2424 test_loss: 1.9334, test_acc: 0.2749, best: 0.3649, time: 0:01:26
 Epoch: 226, lr: 2.0e-03, train_loss: 1.9878, train_acc: 0.2372 test_loss: 1.9289, test_acc: 0.2670, best: 0.3649, time: 0:01:21
 Epoch: 227, lr: 2.0e-03, train_loss: 1.9793, train_acc: 0.2392 test_loss: 1.9123, test_acc: 0.2681, best: 0.3649, time: 0:01:32
 Epoch: 228, lr: 2.0e-03, train_loss: 1.9858, train_acc: 0.2474 test_loss: 1.8807, test_acc: 0.2840, best: 0.3649, time: 0:01:19
 Epoch: 229, lr: 2.0e-03, train_loss: 1.9649, train_acc: 0.2422 test_loss: 1.8953, test_acc: 0.2823, best: 0.3649, time: 0:01:27
 Epoch: 230, lr: 2.0e-03, train_loss: 1.9617, train_acc: 0.2404 test_loss: 1.8639, test_acc: 0.2853, best: 0.3649, time: 0:01:17
 Epoch: 231, lr: 2.0e-03, train_loss: 1.9804, train_acc: 0.2318 test_loss: 1.8956, test_acc: 0.2789, best: 0.3649, time: 0:01:22
 Epoch: 232, lr: 2.0e-03, train_loss: 1.9755, train_acc: 0.2440 test_loss: 1.8948, test_acc: 0.2789, best: 0.3649, time: 0:01:19
 Epoch: 233, lr: 2.0e-03, train_loss: 1.9694, train_acc: 0.2324 test_loss: 1.9056, test_acc: 0.2731, best: 0.3649, time: 0:01:18
 Epoch: 234, lr: 2.0e-03, train_loss: 1.9765, train_acc: 0.2396 test_loss: 1.8978, test_acc: 0.2732, best: 0.3649, time: 0:01:20
 Epoch: 235, lr: 2.0e-03, train_loss: 1.9892, train_acc: 0.2362 test_loss: 1.8946, test_acc: 0.2794, best: 0.3649, time: 0:01:17
 Epoch: 236, lr: 2.0e-03, train_loss: 1.9691, train_acc: 0.2452 test_loss: 1.8736, test_acc: 0.2742, best: 0.3649, time: 0:01:29
 Epoch: 237, lr: 2.0e-03, train_loss: 1.9616, train_acc: 0.2416 test_loss: 1.8900, test_acc: 0.2829, best: 0.3649, time: 0:01:22
 Epoch: 238, lr: 2.0e-03, train_loss: 1.9638, train_acc: 0.2472 test_loss: 1.8672, test_acc: 0.2879, best: 0.3649, time: 0:01:21
 Epoch: 239, lr: 2.0e-03, train_loss: 1.9513, train_acc: 0.2482 test_loss: 1.8972, test_acc: 0.2838, best: 0.3649, time: 0:01:20
 Epoch: 240, lr: 4.0e-04, train_loss: 1.9525, train_acc: 0.2590 test_loss: 1.8553, test_acc: 0.3050, best: 0.3649, time: 0:01:19
 Epoch: 241, lr: 4.0e-04, train_loss: 1.9342, train_acc: 0.2666 test_loss: 1.8645, test_acc: 0.2881, best: 0.3649, time: 0:01:17
 Epoch: 242, lr: 4.0e-04, train_loss: 1.9458, train_acc: 0.2592 test_loss: 1.8596, test_acc: 0.3030, best: 0.3649, time: 0:01:23
 Epoch: 243, lr: 4.0e-04, train_loss: 1.9579, train_acc: 0.2516 test_loss: 1.9015, test_acc: 0.2876, best: 0.3649, time: 0:01:24
 Epoch: 244, lr: 4.0e-04, train_loss: 1.9392, train_acc: 0.2494 test_loss: 1.8662, test_acc: 0.3016, best: 0.3649, time: 0:01:18
 Epoch: 245, lr: 4.0e-04, train_loss: 1.9543, train_acc: 0.2592 test_loss: 1.8583, test_acc: 0.3000, best: 0.3649, time: 0:01:27
 Epoch: 246, lr: 4.0e-04, train_loss: 1.9465, train_acc: 0.2500 test_loss: 1.9032, test_acc: 0.2863, best: 0.3649, time: 0:01:17
 Epoch: 247, lr: 4.0e-04, train_loss: 1.9270, train_acc: 0.2602 test_loss: 1.8702, test_acc: 0.2931, best: 0.3649, time: 0:01:17
 Epoch: 248, lr: 4.0e-04, train_loss: 1.9518, train_acc: 0.2548 test_loss: 1.9150, test_acc: 0.2870, best: 0.3649, time: 0:01:21
 Epoch: 249, lr: 4.0e-04, train_loss: 1.9317, train_acc: 0.2662 test_loss: 1.8576, test_acc: 0.3054, best: 0.3649, time: 0:01:18
 Epoch: 250, lr: 4.0e-04, train_loss: 1.9354, train_acc: 0.2582 test_loss: 1.8439, test_acc: 0.3100, best: 0.3649, time: 0:01:18
 Epoch: 251, lr: 4.0e-04, train_loss: 1.9559, train_acc: 0.2592 test_loss: 1.8554, test_acc: 0.3041, best: 0.3649, time: 0:01:18
 Epoch: 252, lr: 4.0e-04, train_loss: 1.9377, train_acc: 0.2602 test_loss: 1.8407, test_acc: 0.3132, best: 0.3649, time: 0:01:25
 Epoch: 253, lr: 4.0e-04, train_loss: 1.9399, train_acc: 0.2570 test_loss: 1.8687, test_acc: 0.3104, best: 0.3649, time: 0:01:22
 Epoch: 254, lr: 4.0e-04, train_loss: 1.9342, train_acc: 0.2618 test_loss: 1.8634, test_acc: 0.3003, best: 0.3649, time: 0:01:22
 Epoch: 255, lr: 4.0e-04, train_loss: 1.9493, train_acc: 0.2468 test_loss: 1.8660, test_acc: 0.2969, best: 0.3649, time: 0:01:21
 Epoch: 256, lr: 4.0e-04, train_loss: 1.9332, train_acc: 0.2566 test_loss: 1.8455, test_acc: 0.3038, best: 0.3649, time: 0:01:22
 Epoch: 257, lr: 4.0e-04, train_loss: 1.9279, train_acc: 0.2532 test_loss: 1.8773, test_acc: 0.2920, best: 0.3649, time: 0:01:27
 Epoch: 258, lr: 4.0e-04, train_loss: 1.9324, train_acc: 0.2718 test_loss: 1.8630, test_acc: 0.3059, best: 0.3649, time: 0:01:20
 Epoch: 259, lr: 4.0e-04, train_loss: 1.9340, train_acc: 0.2562 test_loss: 1.8477, test_acc: 0.3038, best: 0.3649, time: 0:01:20
 Epoch: 260, lr: 4.0e-04, train_loss: 1.9387, train_acc: 0.2618 test_loss: 1.8455, test_acc: 0.3046, best: 0.3649, time: 0:01:23
 Epoch: 261, lr: 4.0e-04, train_loss: 1.9454, train_acc: 0.2622 test_loss: 1.8445, test_acc: 0.3076, best: 0.3649, time: 0:01:18
 Epoch: 262, lr: 4.0e-04, train_loss: 1.9435, train_acc: 0.2550 test_loss: 1.8550, test_acc: 0.3049, best: 0.3649, time: 0:01:24
 Epoch: 263, lr: 4.0e-04, train_loss: 1.9222, train_acc: 0.2726 test_loss: 1.8562, test_acc: 0.3054, best: 0.3649, time: 0:01:22
 Epoch: 264, lr: 4.0e-04, train_loss: 1.9224, train_acc: 0.2630 test_loss: 1.8461, test_acc: 0.3080, best: 0.3649, time: 0:01:22
 Epoch: 265, lr: 4.0e-04, train_loss: 1.9304, train_acc: 0.2584 test_loss: 1.8586, test_acc: 0.3078, best: 0.3649, time: 0:01:19
 Epoch: 266, lr: 4.0e-04, train_loss: 1.9301, train_acc: 0.2594 test_loss: 1.8512, test_acc: 0.3093, best: 0.3649, time: 0:01:20
 Epoch: 267, lr: 4.0e-04, train_loss: 1.9220, train_acc: 0.2768 test_loss: 1.8552, test_acc: 0.3036, best: 0.3649, time: 0:01:23
 Epoch: 268, lr: 4.0e-04, train_loss: 1.9268, train_acc: 0.2740 test_loss: 1.8484, test_acc: 0.3137, best: 0.3649, time: 0:01:20
 Epoch: 269, lr: 4.0e-04, train_loss: 1.9339, train_acc: 0.2638 test_loss: 1.8358, test_acc: 0.3152, best: 0.3649, time: 0:01:23
 Epoch: 270, lr: 8.0e-05, train_loss: 1.9307, train_acc: 0.2612 test_loss: 1.8574, test_acc: 0.3108, best: 0.3649, time: 0:01:27
 Epoch: 271, lr: 8.0e-05, train_loss: 1.9242, train_acc: 0.2714 test_loss: 1.8502, test_acc: 0.3127, best: 0.3649, time: 0:01:21
 Epoch: 272, lr: 8.0e-05, train_loss: 1.9359, train_acc: 0.2640 test_loss: 1.8328, test_acc: 0.3195, best: 0.3649, time: 0:01:19
 Epoch: 273, lr: 8.0e-05, train_loss: 1.9194, train_acc: 0.2626 test_loss: 1.8292, test_acc: 0.3202, best: 0.3649, time: 0:01:19
 Epoch: 274, lr: 8.0e-05, train_loss: 1.9199, train_acc: 0.2662 test_loss: 1.8340, test_acc: 0.3144, best: 0.3649, time: 0:01:25
 Epoch: 275, lr: 8.0e-05, train_loss: 1.9352, train_acc: 0.2584 test_loss: 1.8643, test_acc: 0.3069, best: 0.3649, time: 0:01:18
 Epoch: 276, lr: 8.0e-05, train_loss: 1.9367, train_acc: 0.2564 test_loss: 1.8498, test_acc: 0.3131, best: 0.3649, time: 0:01:18
 Epoch: 277, lr: 8.0e-05, train_loss: 1.9244, train_acc: 0.2660 test_loss: 1.8613, test_acc: 0.2979, best: 0.3649, time: 0:01:26
 Epoch: 278, lr: 8.0e-05, train_loss: 1.9219, train_acc: 0.2738 test_loss: 1.8604, test_acc: 0.2984, best: 0.3649, time: 0:01:27
 Epoch: 279, lr: 8.0e-05, train_loss: 1.9348, train_acc: 0.2684 test_loss: 1.8417, test_acc: 0.3119, best: 0.3649, time: 0:01:18
 Epoch: 280, lr: 8.0e-05, train_loss: 1.9357, train_acc: 0.2664 test_loss: 1.8435, test_acc: 0.3055, best: 0.3649, time: 0:01:18
 Epoch: 281, lr: 8.0e-05, train_loss: 1.9261, train_acc: 0.2648 test_loss: 1.8445, test_acc: 0.3125, best: 0.3649, time: 0:01:18
 Epoch: 282, lr: 8.0e-05, train_loss: 1.9243, train_acc: 0.2632 test_loss: 1.8487, test_acc: 0.3161, best: 0.3649, time: 0:01:17
 Epoch: 283, lr: 8.0e-05, train_loss: 1.9238, train_acc: 0.2610 test_loss: 1.8501, test_acc: 0.3131, best: 0.3649, time: 0:01:18
 Epoch: 284, lr: 8.0e-05, train_loss: 1.9221, train_acc: 0.2706 test_loss: 1.8581, test_acc: 0.3078, best: 0.3649, time: 0:01:20
 Epoch: 285, lr: 8.0e-05, train_loss: 1.9280, train_acc: 0.2594 test_loss: 1.8617, test_acc: 0.3105, best: 0.3649, time: 0:01:25
 Epoch: 286, lr: 8.0e-05, train_loss: 1.9175, train_acc: 0.2638 test_loss: 1.8509, test_acc: 0.3164, best: 0.3649, time: 0:01:20
 Epoch: 287, lr: 8.0e-05, train_loss: 1.9353, train_acc: 0.2666 test_loss: 1.8574, test_acc: 0.3090, best: 0.3649, time: 0:01:17
 Epoch: 288, lr: 8.0e-05, train_loss: 1.9388, train_acc: 0.2588 test_loss: 1.8860, test_acc: 0.2976, best: 0.3649, time: 0:01:20
 Epoch: 289, lr: 8.0e-05, train_loss: 1.9193, train_acc: 0.2658 test_loss: 1.8429, test_acc: 0.3160, best: 0.3649, time: 0:01:22
 Epoch: 290, lr: 8.0e-05, train_loss: 1.9376, train_acc: 0.2612 test_loss: 1.8416, test_acc: 0.3192, best: 0.3649, time: 0:01:25
 Epoch: 291, lr: 8.0e-05, train_loss: 1.9300, train_acc: 0.2646 test_loss: 1.8261, test_acc: 0.3206, best: 0.3649, time: 0:01:17
 Epoch: 292, lr: 8.0e-05, train_loss: 1.9307, train_acc: 0.2584 test_loss: 1.8425, test_acc: 0.3249, best: 0.3649, time: 0:01:26
 Epoch: 293, lr: 8.0e-05, train_loss: 1.9379, train_acc: 0.2562 test_loss: 1.8317, test_acc: 0.3212, best: 0.3649, time: 0:01:20
 Epoch: 294, lr: 8.0e-05, train_loss: 1.9311, train_acc: 0.2710 test_loss: 1.8733, test_acc: 0.3036, best: 0.3649, time: 0:01:17
 Epoch: 295, lr: 8.0e-05, train_loss: 1.9066, train_acc: 0.2684 test_loss: 1.8469, test_acc: 0.3147, best: 0.3649, time: 0:01:33
 Epoch: 296, lr: 8.0e-05, train_loss: 1.9358, train_acc: 0.2634 test_loss: 1.8590, test_acc: 0.3058, best: 0.3649, time: 0:01:24
 Epoch: 297, lr: 8.0e-05, train_loss: 1.9244, train_acc: 0.2578 test_loss: 1.8505, test_acc: 0.3189, best: 0.3649, time: 0:01:17
 Epoch: 298, lr: 8.0e-05, train_loss: 1.9243, train_acc: 0.2686 test_loss: 1.8449, test_acc: 0.3123, best: 0.3649, time: 0:01:23
 Epoch: 299, lr: 8.0e-05, train_loss: 1.9281, train_acc: 0.2636 test_loss: 1.8398, test_acc: 0.3189, best: 0.3649, time: 0:01:19
 Highest accuracy: 0.3649