
 Run on time: 2022-07-03 01:04:49.754676

 Architecture: mobilenet_v2-gaussian_pool-1222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "gaussian_pool",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "gaussian_pool",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "gaussian_pool",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "gaussian_pool",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET_V2-GAUSSIAN_POOL-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(24, 12, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(12, 24, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(12, 24, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5214, train_acc: 0.1762 test_loss: 1.9140, test_acc: 0.2551, best: 0.2551, time: 0:01:06
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0309, train_acc: 0.2366 test_loss: 1.8018, test_acc: 0.3169, best: 0.3169, time: 0:01:06
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9265, train_acc: 0.2518 test_loss: 1.7122, test_acc: 0.3475, best: 0.3475, time: 0:01:06
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8792, train_acc: 0.2890 test_loss: 1.6296, test_acc: 0.3814, best: 0.3814, time: 0:01:05
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8414, train_acc: 0.3112 test_loss: 1.6611, test_acc: 0.3596, best: 0.3814, time: 0:01:05
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8014, train_acc: 0.3234 test_loss: 1.5469, test_acc: 0.4065, best: 0.4065, time: 0:01:05
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7699, train_acc: 0.3452 test_loss: 1.5386, test_acc: 0.3996, best: 0.4065, time: 0:01:05
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7349, train_acc: 0.3558 test_loss: 1.5405, test_acc: 0.4027, best: 0.4065, time: 0:01:04
 Epoch: 9, lr: 1.0e-02, train_loss: 1.6828, train_acc: 0.3720 test_loss: 1.5227, test_acc: 0.3990, best: 0.4065, time: 0:01:04
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6739, train_acc: 0.3798 test_loss: 1.5014, test_acc: 0.4386, best: 0.4386, time: 0:01:04
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6473, train_acc: 0.3878 test_loss: 1.4360, test_acc: 0.4675, best: 0.4675, time: 0:01:05
 Epoch: 12, lr: 1.0e-02, train_loss: 1.5736, train_acc: 0.4238 test_loss: 1.3515, test_acc: 0.4864, best: 0.4864, time: 0:01:04
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5549, train_acc: 0.4270 test_loss: 1.2655, test_acc: 0.5375, best: 0.5375, time: 0:01:04
 Epoch: 14, lr: 1.0e-02, train_loss: 1.4986, train_acc: 0.4512 test_loss: 1.3387, test_acc: 0.5062, best: 0.5375, time: 0:01:04
 Epoch: 15, lr: 1.0e-02, train_loss: 1.4747, train_acc: 0.4656 test_loss: 1.2116, test_acc: 0.5577, best: 0.5577, time: 0:01:04
 Epoch: 16, lr: 1.0e-02, train_loss: 1.4647, train_acc: 0.4568 test_loss: 1.2002, test_acc: 0.5571, best: 0.5577, time: 0:01:04
 Epoch: 17, lr: 1.0e-02, train_loss: 1.4409, train_acc: 0.4718 test_loss: 1.1953, test_acc: 0.5626, best: 0.5626, time: 0:01:04
 Epoch: 18, lr: 1.0e-02, train_loss: 1.4052, train_acc: 0.4882 test_loss: 1.2829, test_acc: 0.5371, best: 0.5626, time: 0:01:04
 Epoch: 19, lr: 1.0e-02, train_loss: 1.3854, train_acc: 0.4944 test_loss: 1.2090, test_acc: 0.5681, best: 0.5681, time: 0:01:04
 Epoch: 20, lr: 1.0e-02, train_loss: 1.3604, train_acc: 0.5072 test_loss: 1.2017, test_acc: 0.5633, best: 0.5681, time: 0:01:04
 Epoch: 21, lr: 1.0e-02, train_loss: 1.3483, train_acc: 0.5074 test_loss: 1.1676, test_acc: 0.5839, best: 0.5839, time: 0:01:04
 Epoch: 22, lr: 1.0e-02, train_loss: 1.3357, train_acc: 0.5130 test_loss: 1.1583, test_acc: 0.5847, best: 0.5847, time: 0:01:04
 Epoch: 23, lr: 1.0e-02, train_loss: 1.3028, train_acc: 0.5286 test_loss: 1.1433, test_acc: 0.5825, best: 0.5847, time: 0:01:04
 Epoch: 24, lr: 1.0e-02, train_loss: 1.2913, train_acc: 0.5350 test_loss: 1.0967, test_acc: 0.6025, best: 0.6025, time: 0:01:04
 Epoch: 25, lr: 1.0e-02, train_loss: 1.2629, train_acc: 0.5386 test_loss: 1.1166, test_acc: 0.5980, best: 0.6025, time: 0:01:04
 Epoch: 26, lr: 1.0e-02, train_loss: 1.2398, train_acc: 0.5502 test_loss: 1.2243, test_acc: 0.5620, best: 0.6025, time: 0:01:04
 Epoch: 27, lr: 1.0e-02, train_loss: 1.2450, train_acc: 0.5468 test_loss: 1.0681, test_acc: 0.6154, best: 0.6154, time: 0:01:04
 Epoch: 28, lr: 1.0e-02, train_loss: 1.2190, train_acc: 0.5644 test_loss: 1.0577, test_acc: 0.6109, best: 0.6154, time: 0:01:04
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2018, train_acc: 0.5572 test_loss: 1.0675, test_acc: 0.6120, best: 0.6154, time: 0:01:04
 Epoch: 30, lr: 1.0e-02, train_loss: 1.1710, train_acc: 0.5784 test_loss: 1.0228, test_acc: 0.6276, best: 0.6276, time: 0:01:04
 Epoch: 31, lr: 1.0e-02, train_loss: 1.1586, train_acc: 0.5872 test_loss: 0.9723, test_acc: 0.6489, best: 0.6489, time: 0:01:04
 Epoch: 32, lr: 1.0e-02, train_loss: 1.1387, train_acc: 0.5860 test_loss: 1.0053, test_acc: 0.6326, best: 0.6489, time: 0:01:04
 Epoch: 33, lr: 1.0e-02, train_loss: 1.1410, train_acc: 0.5848 test_loss: 0.9580, test_acc: 0.6595, best: 0.6595, time: 0:01:04
 Epoch: 34, lr: 1.0e-02, train_loss: 1.1128, train_acc: 0.5900 test_loss: 0.9943, test_acc: 0.6441, best: 0.6595, time: 0:01:03
 Epoch: 35, lr: 1.0e-02, train_loss: 1.1073, train_acc: 0.6032 test_loss: 1.0263, test_acc: 0.6429, best: 0.6595, time: 0:01:03
 Epoch: 36, lr: 1.0e-02, train_loss: 1.1171, train_acc: 0.5926 test_loss: 0.8980, test_acc: 0.6770, best: 0.6770, time: 0:01:03
 Epoch: 37, lr: 1.0e-02, train_loss: 1.0911, train_acc: 0.6060 test_loss: 1.0423, test_acc: 0.6281, best: 0.6770, time: 0:01:03
 Epoch: 38, lr: 1.0e-02, train_loss: 1.0778, train_acc: 0.6040 test_loss: 0.9936, test_acc: 0.6420, best: 0.6770, time: 0:01:04
 Epoch: 39, lr: 1.0e-02, train_loss: 1.0859, train_acc: 0.6052 test_loss: 0.9770, test_acc: 0.6545, best: 0.6770, time: 0:01:03
 Epoch: 40, lr: 1.0e-02, train_loss: 1.0569, train_acc: 0.6128 test_loss: 0.9167, test_acc: 0.6760, best: 0.6770, time: 0:01:03
 Epoch: 41, lr: 1.0e-02, train_loss: 1.0592, train_acc: 0.6186 test_loss: 0.9825, test_acc: 0.6525, best: 0.6770, time: 0:01:03
 Epoch: 42, lr: 1.0e-02, train_loss: 1.0402, train_acc: 0.6292 test_loss: 0.9747, test_acc: 0.6478, best: 0.6770, time: 0:01:03
 Epoch: 43, lr: 1.0e-02, train_loss: 1.0420, train_acc: 0.6258 test_loss: 0.8983, test_acc: 0.6715, best: 0.6770, time: 0:01:03
 Epoch: 44, lr: 1.0e-02, train_loss: 1.0313, train_acc: 0.6320 test_loss: 1.0244, test_acc: 0.6452, best: 0.6770, time: 0:01:03
 Epoch: 45, lr: 1.0e-02, train_loss: 1.0122, train_acc: 0.6366 test_loss: 0.8942, test_acc: 0.6851, best: 0.6851, time: 0:01:04
 Epoch: 46, lr: 1.0e-02, train_loss: 0.9938, train_acc: 0.6434 test_loss: 0.8836, test_acc: 0.6921, best: 0.6921, time: 0:01:04
 Epoch: 47, lr: 1.0e-02, train_loss: 0.9688, train_acc: 0.6466 test_loss: 0.9006, test_acc: 0.6879, best: 0.6921, time: 0:01:03
 Epoch: 48, lr: 1.0e-02, train_loss: 0.9700, train_acc: 0.6500 test_loss: 0.8393, test_acc: 0.6989, best: 0.6989, time: 0:01:03
 Epoch: 49, lr: 1.0e-02, train_loss: 0.9734, train_acc: 0.6518 test_loss: 0.8577, test_acc: 0.6876, best: 0.6989, time: 0:01:03
 Epoch: 50, lr: 1.0e-02, train_loss: 0.9787, train_acc: 0.6450 test_loss: 0.8462, test_acc: 0.6999, best: 0.6999, time: 0:01:03
 Epoch: 51, lr: 1.0e-02, train_loss: 0.9618, train_acc: 0.6512 test_loss: 0.9032, test_acc: 0.6804, best: 0.6999, time: 0:01:03
 Epoch: 52, lr: 1.0e-02, train_loss: 0.9614, train_acc: 0.6520 test_loss: 0.8587, test_acc: 0.7000, best: 0.7000, time: 0:01:03
 Epoch: 53, lr: 1.0e-02, train_loss: 0.9409, train_acc: 0.6620 test_loss: 0.8499, test_acc: 0.6965, best: 0.7000, time: 0:01:04
 Epoch: 54, lr: 1.0e-02, train_loss: 0.9320, train_acc: 0.6586 test_loss: 0.8367, test_acc: 0.7024, best: 0.7024, time: 0:01:04
 Epoch: 55, lr: 1.0e-02, train_loss: 0.9261, train_acc: 0.6654 test_loss: 0.9477, test_acc: 0.6609, best: 0.7024, time: 0:01:03
 Epoch: 56, lr: 1.0e-02, train_loss: 0.9176, train_acc: 0.6744 test_loss: 0.8588, test_acc: 0.6984, best: 0.7024, time: 0:01:03
 Epoch: 57, lr: 1.0e-02, train_loss: 0.8993, train_acc: 0.6762 test_loss: 0.9205, test_acc: 0.6859, best: 0.7024, time: 0:01:03
 Epoch: 58, lr: 1.0e-02, train_loss: 0.8941, train_acc: 0.6784 test_loss: 0.8606, test_acc: 0.6993, best: 0.7024, time: 0:01:03
 Epoch: 59, lr: 1.0e-02, train_loss: 0.8883, train_acc: 0.6842 test_loss: 0.8299, test_acc: 0.7105, best: 0.7105, time: 0:01:03
 Epoch: 60, lr: 1.0e-02, train_loss: 0.8721, train_acc: 0.6862 test_loss: 0.8419, test_acc: 0.7099, best: 0.7105, time: 0:01:03
 Epoch: 61, lr: 1.0e-02, train_loss: 0.8800, train_acc: 0.6882 test_loss: 0.8611, test_acc: 0.7004, best: 0.7105, time: 0:01:03
 Epoch: 62, lr: 1.0e-02, train_loss: 0.8691, train_acc: 0.6932 test_loss: 0.8316, test_acc: 0.7095, best: 0.7105, time: 0:01:03
 Epoch: 63, lr: 1.0e-02, train_loss: 0.8603, train_acc: 0.6932 test_loss: 0.8749, test_acc: 0.7009, best: 0.7105, time: 0:01:03
 Epoch: 64, lr: 1.0e-02, train_loss: 0.8642, train_acc: 0.6828 test_loss: 0.9016, test_acc: 0.6873, best: 0.7105, time: 0:01:03
 Epoch: 65, lr: 1.0e-02, train_loss: 0.8520, train_acc: 0.6918 test_loss: 0.7875, test_acc: 0.7224, best: 0.7224, time: 0:01:03
 Epoch: 66, lr: 1.0e-02, train_loss: 0.8625, train_acc: 0.6926 test_loss: 0.7832, test_acc: 0.7278, best: 0.7278, time: 0:01:03
 Epoch: 67, lr: 1.0e-02, train_loss: 0.8542, train_acc: 0.6984 test_loss: 0.7461, test_acc: 0.7404, best: 0.7404, time: 0:01:03
 Epoch: 68, lr: 1.0e-02, train_loss: 0.8327, train_acc: 0.7028 test_loss: 0.8732, test_acc: 0.7036, best: 0.7404, time: 0:01:03
 Epoch: 69, lr: 1.0e-02, train_loss: 0.8435, train_acc: 0.6978 test_loss: 0.7954, test_acc: 0.7266, best: 0.7404, time: 0:01:03
 Epoch: 70, lr: 1.0e-02, train_loss: 0.8194, train_acc: 0.7026 test_loss: 0.8062, test_acc: 0.7239, best: 0.7404, time: 0:01:03
 Epoch: 71, lr: 1.0e-02, train_loss: 0.7924, train_acc: 0.7150 test_loss: 0.8014, test_acc: 0.7242, best: 0.7404, time: 0:01:03
 Epoch: 72, lr: 1.0e-02, train_loss: 0.8029, train_acc: 0.7122 test_loss: 0.8171, test_acc: 0.7269, best: 0.7404, time: 0:01:03
 Epoch: 73, lr: 1.0e-02, train_loss: 0.7953, train_acc: 0.7164 test_loss: 0.7849, test_acc: 0.7254, best: 0.7404, time: 0:01:03
 Epoch: 74, lr: 1.0e-02, train_loss: 0.7754, train_acc: 0.7238 test_loss: 0.7509, test_acc: 0.7395, best: 0.7404, time: 0:01:03
 Epoch: 75, lr: 1.0e-02, train_loss: 0.7801, train_acc: 0.7196 test_loss: 0.7261, test_acc: 0.7494, best: 0.7494, time: 0:01:03
 Epoch: 76, lr: 1.0e-02, train_loss: 0.7801, train_acc: 0.7192 test_loss: 0.7439, test_acc: 0.7508, best: 0.7508, time: 0:01:03
 Epoch: 77, lr: 1.0e-02, train_loss: 0.7621, train_acc: 0.7330 test_loss: 0.8804, test_acc: 0.7144, best: 0.7508, time: 0:01:03
 Epoch: 78, lr: 1.0e-02, train_loss: 0.7744, train_acc: 0.7190 test_loss: 0.8146, test_acc: 0.7270, best: 0.7508, time: 0:01:03
 Epoch: 79, lr: 1.0e-02, train_loss: 0.7458, train_acc: 0.7312 test_loss: 0.7580, test_acc: 0.7401, best: 0.7508, time: 0:01:03
 Epoch: 80, lr: 1.0e-02, train_loss: 0.7472, train_acc: 0.7318 test_loss: 0.7551, test_acc: 0.7430, best: 0.7508, time: 0:01:03
 Epoch: 81, lr: 1.0e-02, train_loss: 0.7489, train_acc: 0.7312 test_loss: 0.7843, test_acc: 0.7445, best: 0.7508, time: 0:01:03
 Epoch: 82, lr: 1.0e-02, train_loss: 0.7570, train_acc: 0.7258 test_loss: 0.7712, test_acc: 0.7421, best: 0.7508, time: 0:01:03
 Epoch: 83, lr: 1.0e-02, train_loss: 0.7473, train_acc: 0.7280 test_loss: 0.7357, test_acc: 0.7508, best: 0.7508, time: 0:01:03
 Epoch: 84, lr: 1.0e-02, train_loss: 0.7397, train_acc: 0.7316 test_loss: 0.7939, test_acc: 0.7359, best: 0.7508, time: 0:01:03
 Epoch: 85, lr: 1.0e-02, train_loss: 0.7049, train_acc: 0.7500 test_loss: 0.7523, test_acc: 0.7460, best: 0.7508, time: 0:01:03
 Epoch: 86, lr: 1.0e-02, train_loss: 0.7108, train_acc: 0.7484 test_loss: 0.7259, test_acc: 0.7518, best: 0.7518, time: 0:01:03
 Epoch: 87, lr: 1.0e-02, train_loss: 0.7298, train_acc: 0.7430 test_loss: 0.7465, test_acc: 0.7522, best: 0.7522, time: 0:01:03
 Epoch: 88, lr: 1.0e-02, train_loss: 0.7066, train_acc: 0.7408 test_loss: 0.7804, test_acc: 0.7466, best: 0.7522, time: 0:01:03
 Epoch: 89, lr: 1.0e-02, train_loss: 0.7413, train_acc: 0.7350 test_loss: 0.7447, test_acc: 0.7532, best: 0.7532, time: 0:01:03
 Epoch: 90, lr: 1.0e-02, train_loss: 0.7096, train_acc: 0.7542 test_loss: 0.7511, test_acc: 0.7508, best: 0.7532, time: 0:01:03
 Epoch: 91, lr: 1.0e-02, train_loss: 0.6895, train_acc: 0.7510 test_loss: 0.7824, test_acc: 0.7392, best: 0.7532, time: 0:01:03
 Epoch: 92, lr: 1.0e-02, train_loss: 0.7191, train_acc: 0.7454 test_loss: 0.8545, test_acc: 0.7321, best: 0.7532, time: 0:01:03
 Epoch: 93, lr: 1.0e-02, train_loss: 0.7055, train_acc: 0.7518 test_loss: 0.7349, test_acc: 0.7546, best: 0.7546, time: 0:01:03
 Epoch: 94, lr: 1.0e-02, train_loss: 0.6934, train_acc: 0.7560 test_loss: 0.7933, test_acc: 0.7428, best: 0.7546, time: 0:01:03
 Epoch: 95, lr: 1.0e-02, train_loss: 0.6728, train_acc: 0.7598 test_loss: 0.7758, test_acc: 0.7465, best: 0.7546, time: 0:01:03
 Epoch: 96, lr: 1.0e-02, train_loss: 0.6786, train_acc: 0.7604 test_loss: 0.7033, test_acc: 0.7696, best: 0.7696, time: 0:01:03
 Epoch: 97, lr: 1.0e-02, train_loss: 0.6507, train_acc: 0.7650 test_loss: 0.7603, test_acc: 0.7529, best: 0.7696, time: 0:01:03
 Epoch: 98, lr: 1.0e-02, train_loss: 0.6897, train_acc: 0.7532 test_loss: 0.7320, test_acc: 0.7601, best: 0.7696, time: 0:01:03
 Epoch: 99, lr: 1.0e-02, train_loss: 0.6654, train_acc: 0.7582 test_loss: 0.7698, test_acc: 0.7550, best: 0.7696, time: 0:01:03
 Epoch: 100, lr: 1.0e-02, train_loss: 0.6422, train_acc: 0.7718 test_loss: 0.7607, test_acc: 0.7556, best: 0.7696, time: 0:01:03
 Epoch: 101, lr: 1.0e-02, train_loss: 0.6535, train_acc: 0.7682 test_loss: 0.7417, test_acc: 0.7515, best: 0.7696, time: 0:01:03
 Epoch: 102, lr: 1.0e-02, train_loss: 0.6611, train_acc: 0.7696 test_loss: 0.7362, test_acc: 0.7672, best: 0.7696, time: 0:01:03
 Epoch: 103, lr: 1.0e-02, train_loss: 0.6444, train_acc: 0.7754 test_loss: 0.6951, test_acc: 0.7746, best: 0.7746, time: 0:01:03
 Epoch: 104, lr: 1.0e-02, train_loss: 0.6216, train_acc: 0.7786 test_loss: 0.7648, test_acc: 0.7565, best: 0.7746, time: 0:01:03
 Epoch: 105, lr: 1.0e-02, train_loss: 0.6518, train_acc: 0.7652 test_loss: 0.7846, test_acc: 0.7475, best: 0.7746, time: 0:01:03
 Epoch: 106, lr: 1.0e-02, train_loss: 0.6350, train_acc: 0.7754 test_loss: 0.7366, test_acc: 0.7640, best: 0.7746, time: 0:01:03
 Epoch: 107, lr: 1.0e-02, train_loss: 0.6490, train_acc: 0.7632 test_loss: 0.7573, test_acc: 0.7568, best: 0.7746, time: 0:01:03
 Epoch: 108, lr: 1.0e-02, train_loss: 0.6485, train_acc: 0.7614 test_loss: 0.7522, test_acc: 0.7555, best: 0.7746, time: 0:01:03
 Epoch: 109, lr: 1.0e-02, train_loss: 0.6492, train_acc: 0.7668 test_loss: 0.7178, test_acc: 0.7646, best: 0.7746, time: 0:01:03
 Epoch: 110, lr: 1.0e-02, train_loss: 0.6154, train_acc: 0.7798 test_loss: 0.7398, test_acc: 0.7602, best: 0.7746, time: 0:01:03
 Epoch: 111, lr: 1.0e-02, train_loss: 0.6218, train_acc: 0.7822 test_loss: 0.7391, test_acc: 0.7602, best: 0.7746, time: 0:01:03
 Epoch: 112, lr: 1.0e-02, train_loss: 0.6106, train_acc: 0.7832 test_loss: 0.7474, test_acc: 0.7649, best: 0.7746, time: 0:01:03
 Epoch: 113, lr: 1.0e-02, train_loss: 0.6122, train_acc: 0.7868 test_loss: 0.7103, test_acc: 0.7738, best: 0.7746, time: 0:01:03
 Epoch: 114, lr: 1.0e-02, train_loss: 0.6203, train_acc: 0.7794 test_loss: 0.7511, test_acc: 0.7641, best: 0.7746, time: 0:01:03
 Epoch: 115, lr: 1.0e-02, train_loss: 0.5977, train_acc: 0.7920 test_loss: 0.7198, test_acc: 0.7672, best: 0.7746, time: 0:01:03
 Epoch: 116, lr: 1.0e-02, train_loss: 0.6034, train_acc: 0.7840 test_loss: 0.7442, test_acc: 0.7615, best: 0.7746, time: 0:01:03
 Epoch: 117, lr: 1.0e-02, train_loss: 0.5766, train_acc: 0.7970 test_loss: 0.7608, test_acc: 0.7595, best: 0.7746, time: 0:01:03
 Epoch: 118, lr: 1.0e-02, train_loss: 0.5893, train_acc: 0.7878 test_loss: 0.7718, test_acc: 0.7544, best: 0.7746, time: 0:01:03
 Epoch: 119, lr: 1.0e-02, train_loss: 0.5942, train_acc: 0.7910 test_loss: 0.6849, test_acc: 0.7812, best: 0.7812, time: 0:01:03
 Epoch: 120, lr: 1.0e-02, train_loss: 0.5823, train_acc: 0.7916 test_loss: 0.7577, test_acc: 0.7591, best: 0.7812, time: 0:01:03
 Epoch: 121, lr: 1.0e-02, train_loss: 0.5827, train_acc: 0.7936 test_loss: 0.7258, test_acc: 0.7741, best: 0.7812, time: 0:01:03
 Epoch: 122, lr: 1.0e-02, train_loss: 0.5662, train_acc: 0.8014 test_loss: 0.7577, test_acc: 0.7634, best: 0.7812, time: 0:01:03
 Epoch: 123, lr: 1.0e-02, train_loss: 0.5683, train_acc: 0.7946 test_loss: 0.7378, test_acc: 0.7665, best: 0.7812, time: 0:01:03
 Epoch: 124, lr: 1.0e-02, train_loss: 0.5744, train_acc: 0.7954 test_loss: 0.6804, test_acc: 0.7738, best: 0.7812, time: 0:01:03
 Epoch: 125, lr: 1.0e-02, train_loss: 0.5778, train_acc: 0.7944 test_loss: 0.7779, test_acc: 0.7641, best: 0.7812, time: 0:01:03
 Epoch: 126, lr: 1.0e-02, train_loss: 0.5893, train_acc: 0.7918 test_loss: 0.8393, test_acc: 0.7502, best: 0.7812, time: 0:01:03
 Epoch: 127, lr: 1.0e-02, train_loss: 0.5606, train_acc: 0.8034 test_loss: 0.7299, test_acc: 0.7712, best: 0.7812, time: 0:01:03
 Epoch: 128, lr: 1.0e-02, train_loss: 0.5710, train_acc: 0.7956 test_loss: 0.7311, test_acc: 0.7765, best: 0.7812, time: 0:01:03
 Epoch: 129, lr: 1.0e-02, train_loss: 0.5573, train_acc: 0.8028 test_loss: 0.7438, test_acc: 0.7721, best: 0.7812, time: 0:01:03
 Epoch: 130, lr: 1.0e-02, train_loss: 0.5654, train_acc: 0.7986 test_loss: 0.7036, test_acc: 0.7764, best: 0.7812, time: 0:01:03
 Epoch: 131, lr: 1.0e-02, train_loss: 0.5571, train_acc: 0.8036 test_loss: 0.7498, test_acc: 0.7635, best: 0.7812, time: 0:01:03
 Epoch: 132, lr: 1.0e-02, train_loss: 0.5471, train_acc: 0.8078 test_loss: 0.6531, test_acc: 0.7840, best: 0.7840, time: 0:01:03
 Epoch: 133, lr: 1.0e-02, train_loss: 0.5562, train_acc: 0.8006 test_loss: 0.6694, test_acc: 0.7821, best: 0.7840, time: 0:01:03
 Epoch: 134, lr: 1.0e-02, train_loss: 0.5417, train_acc: 0.8090 test_loss: 0.7656, test_acc: 0.7674, best: 0.7840, time: 0:01:03
 Epoch: 135, lr: 1.0e-02, train_loss: 0.5229, train_acc: 0.8124 test_loss: 0.7550, test_acc: 0.7678, best: 0.7840, time: 0:01:03
 Epoch: 136, lr: 1.0e-02, train_loss: 0.5595, train_acc: 0.7988 test_loss: 0.8456, test_acc: 0.7432, best: 0.7840, time: 0:01:03
 Epoch: 137, lr: 1.0e-02, train_loss: 0.5248, train_acc: 0.8178 test_loss: 0.8681, test_acc: 0.7492, best: 0.7840, time: 0:01:03
 Epoch: 138, lr: 1.0e-02, train_loss: 0.5276, train_acc: 0.8148 test_loss: 0.7399, test_acc: 0.7750, best: 0.7840, time: 0:01:03
 Epoch: 139, lr: 1.0e-02, train_loss: 0.5393, train_acc: 0.8048 test_loss: 0.7474, test_acc: 0.7741, best: 0.7840, time: 0:01:03
 Epoch: 140, lr: 1.0e-02, train_loss: 0.5445, train_acc: 0.8102 test_loss: 0.6916, test_acc: 0.7843, best: 0.7843, time: 0:01:03
 Epoch: 141, lr: 1.0e-02, train_loss: 0.5294, train_acc: 0.8120 test_loss: 0.7743, test_acc: 0.7621, best: 0.7843, time: 0:01:03
 Epoch: 142, lr: 1.0e-02, train_loss: 0.5396, train_acc: 0.8122 test_loss: 0.7153, test_acc: 0.7745, best: 0.7843, time: 0:01:03
 Epoch: 143, lr: 1.0e-02, train_loss: 0.5246, train_acc: 0.8168 test_loss: 0.8102, test_acc: 0.7630, best: 0.7843, time: 0:01:03
 Epoch: 144, lr: 1.0e-02, train_loss: 0.5284, train_acc: 0.8192 test_loss: 0.7706, test_acc: 0.7608, best: 0.7843, time: 0:01:03
 Epoch: 145, lr: 1.0e-02, train_loss: 0.5216, train_acc: 0.8200 test_loss: 0.7139, test_acc: 0.7825, best: 0.7843, time: 0:01:03
 Epoch: 146, lr: 1.0e-02, train_loss: 0.5121, train_acc: 0.8194 test_loss: 0.7900, test_acc: 0.7729, best: 0.7843, time: 0:01:03
 Epoch: 147, lr: 1.0e-02, train_loss: 0.5413, train_acc: 0.8092 test_loss: 0.8223, test_acc: 0.7558, best: 0.7843, time: 0:01:03
 Epoch: 148, lr: 1.0e-02, train_loss: 0.5002, train_acc: 0.8274 test_loss: 0.7466, test_acc: 0.7825, best: 0.7843, time: 0:01:03
 Epoch: 149, lr: 1.0e-02, train_loss: 0.5024, train_acc: 0.8226 test_loss: 0.7600, test_acc: 0.7738, best: 0.7843, time: 0:01:03
 Epoch: 150, lr: 1.0e-02, train_loss: 0.5199, train_acc: 0.8218 test_loss: 0.7043, test_acc: 0.7829, best: 0.7843, time: 0:01:03
 Epoch: 151, lr: 1.0e-02, train_loss: 0.4973, train_acc: 0.8196 test_loss: 0.7325, test_acc: 0.7849, best: 0.7849, time: 0:01:03
 Epoch: 152, lr: 1.0e-02, train_loss: 0.4979, train_acc: 0.8278 test_loss: 0.6964, test_acc: 0.7895, best: 0.7895, time: 0:01:03
 Epoch: 153, lr: 1.0e-02, train_loss: 0.4808, train_acc: 0.8272 test_loss: 0.7501, test_acc: 0.7769, best: 0.7895, time: 0:01:03
 Epoch: 154, lr: 1.0e-02, train_loss: 0.5040, train_acc: 0.8244 test_loss: 0.7222, test_acc: 0.7844, best: 0.7895, time: 0:01:03
 Epoch: 155, lr: 1.0e-02, train_loss: 0.4972, train_acc: 0.8202 test_loss: 0.7761, test_acc: 0.7766, best: 0.7895, time: 0:01:03
 Epoch: 156, lr: 1.0e-02, train_loss: 0.4932, train_acc: 0.8302 test_loss: 0.7292, test_acc: 0.7883, best: 0.7895, time: 0:01:03
 Epoch: 157, lr: 1.0e-02, train_loss: 0.5113, train_acc: 0.8130 test_loss: 0.8145, test_acc: 0.7616, best: 0.7895, time: 0:01:03
 Epoch: 158, lr: 1.0e-02, train_loss: 0.4737, train_acc: 0.8330 test_loss: 0.7350, test_acc: 0.7850, best: 0.7895, time: 0:01:03
 Epoch: 159, lr: 1.0e-02, train_loss: 0.4719, train_acc: 0.8384 test_loss: 0.7689, test_acc: 0.7820, best: 0.7895, time: 0:01:03
 Epoch: 160, lr: 1.0e-02, train_loss: 0.4900, train_acc: 0.8278 test_loss: 0.7826, test_acc: 0.7676, best: 0.7895, time: 0:01:03
 Epoch: 161, lr: 1.0e-02, train_loss: 0.4672, train_acc: 0.8392 test_loss: 0.6957, test_acc: 0.7850, best: 0.7895, time: 0:01:03
 Epoch: 162, lr: 1.0e-02, train_loss: 0.4937, train_acc: 0.8252 test_loss: 0.7429, test_acc: 0.7851, best: 0.7895, time: 0:01:03
 Epoch: 163, lr: 1.0e-02, train_loss: 0.4736, train_acc: 0.8360 test_loss: 0.7230, test_acc: 0.7805, best: 0.7895, time: 0:01:03
 Epoch: 164, lr: 1.0e-02, train_loss: 0.4788, train_acc: 0.8298 test_loss: 0.7191, test_acc: 0.7819, best: 0.7895, time: 0:01:03
 Epoch: 165, lr: 1.0e-02, train_loss: 0.4840, train_acc: 0.8260 test_loss: 0.7292, test_acc: 0.7812, best: 0.7895, time: 0:01:03
 Epoch: 166, lr: 1.0e-02, train_loss: 0.4613, train_acc: 0.8366 test_loss: 0.8189, test_acc: 0.7678, best: 0.7895, time: 0:01:03
 Epoch: 167, lr: 1.0e-02, train_loss: 0.4782, train_acc: 0.8298 test_loss: 0.7651, test_acc: 0.7692, best: 0.7895, time: 0:01:03
 Epoch: 168, lr: 1.0e-02, train_loss: 0.4749, train_acc: 0.8330 test_loss: 0.7973, test_acc: 0.7732, best: 0.7895, time: 0:01:03
 Epoch: 169, lr: 1.0e-02, train_loss: 0.4502, train_acc: 0.8418 test_loss: 0.7627, test_acc: 0.7714, best: 0.7895, time: 0:01:03
 Epoch: 170, lr: 1.0e-02, train_loss: 0.4425, train_acc: 0.8424 test_loss: 0.7327, test_acc: 0.7911, best: 0.7911, time: 0:01:03
 Epoch: 171, lr: 1.0e-02, train_loss: 0.4707, train_acc: 0.8326 test_loss: 0.7291, test_acc: 0.7860, best: 0.7911, time: 0:01:03
 Epoch: 172, lr: 1.0e-02, train_loss: 0.4532, train_acc: 0.8382 test_loss: 0.7746, test_acc: 0.7810, best: 0.7911, time: 0:01:03
 Epoch: 173, lr: 1.0e-02, train_loss: 0.4619, train_acc: 0.8380 test_loss: 0.8588, test_acc: 0.7628, best: 0.7911, time: 0:01:03
 Epoch: 174, lr: 1.0e-02, train_loss: 0.4690, train_acc: 0.8340 test_loss: 0.7580, test_acc: 0.7789, best: 0.7911, time: 0:01:03
 Epoch: 175, lr: 1.0e-02, train_loss: 0.4677, train_acc: 0.8366 test_loss: 0.7447, test_acc: 0.7866, best: 0.7911, time: 0:01:03
 Epoch: 176, lr: 1.0e-02, train_loss: 0.4310, train_acc: 0.8442 test_loss: 0.7584, test_acc: 0.7825, best: 0.7911, time: 0:01:03
 Epoch: 177, lr: 1.0e-02, train_loss: 0.4335, train_acc: 0.8472 test_loss: 0.7600, test_acc: 0.7827, best: 0.7911, time: 0:01:03
 Epoch: 178, lr: 1.0e-02, train_loss: 0.4583, train_acc: 0.8410 test_loss: 0.7108, test_acc: 0.7875, best: 0.7911, time: 0:01:03
 Epoch: 179, lr: 1.0e-02, train_loss: 0.4480, train_acc: 0.8414 test_loss: 0.7350, test_acc: 0.7904, best: 0.7911, time: 0:01:03
 Epoch: 180, lr: 2.0e-03, train_loss: 0.3858, train_acc: 0.8672 test_loss: 0.7487, test_acc: 0.7984, best: 0.7984, time: 0:01:03
 Epoch: 181, lr: 2.0e-03, train_loss: 0.3572, train_acc: 0.8794 test_loss: 0.6920, test_acc: 0.8015, best: 0.8015, time: 0:01:03
 Epoch: 182, lr: 2.0e-03, train_loss: 0.3511, train_acc: 0.8774 test_loss: 0.7294, test_acc: 0.8040, best: 0.8040, time: 0:01:03
 Epoch: 183, lr: 2.0e-03, train_loss: 0.3307, train_acc: 0.8838 test_loss: 0.7100, test_acc: 0.8037, best: 0.8040, time: 0:01:03
 Epoch: 184, lr: 2.0e-03, train_loss: 0.3435, train_acc: 0.8838 test_loss: 0.7354, test_acc: 0.8049, best: 0.8049, time: 0:01:03
 Epoch: 185, lr: 2.0e-03, train_loss: 0.3308, train_acc: 0.8860 test_loss: 0.7213, test_acc: 0.8074, best: 0.8074, time: 0:01:03
 Epoch: 186, lr: 2.0e-03, train_loss: 0.3294, train_acc: 0.8826 test_loss: 0.7164, test_acc: 0.8049, best: 0.8074, time: 0:01:03
 Epoch: 187, lr: 2.0e-03, train_loss: 0.3435, train_acc: 0.8794 test_loss: 0.6986, test_acc: 0.8090, best: 0.8090, time: 0:01:03
 Epoch: 188, lr: 2.0e-03, train_loss: 0.3348, train_acc: 0.8826 test_loss: 0.7346, test_acc: 0.8014, best: 0.8090, time: 0:01:03
 Epoch: 189, lr: 2.0e-03, train_loss: 0.3317, train_acc: 0.8862 test_loss: 0.7192, test_acc: 0.8106, best: 0.8106, time: 0:01:03
 Epoch: 190, lr: 2.0e-03, train_loss: 0.3351, train_acc: 0.8776 test_loss: 0.7056, test_acc: 0.8083, best: 0.8106, time: 0:01:03
 Epoch: 191, lr: 2.0e-03, train_loss: 0.3170, train_acc: 0.8866 test_loss: 0.7375, test_acc: 0.8049, best: 0.8106, time: 0:01:03
 Epoch: 192, lr: 2.0e-03, train_loss: 0.3148, train_acc: 0.8870 test_loss: 0.7045, test_acc: 0.8049, best: 0.8106, time: 0:01:03
 Epoch: 193, lr: 2.0e-03, train_loss: 0.3225, train_acc: 0.8914 test_loss: 0.7152, test_acc: 0.8054, best: 0.8106, time: 0:01:03
 Epoch: 194, lr: 2.0e-03, train_loss: 0.3173, train_acc: 0.8948 test_loss: 0.7213, test_acc: 0.8087, best: 0.8106, time: 0:01:03
 Epoch: 195, lr: 2.0e-03, train_loss: 0.3242, train_acc: 0.8890 test_loss: 0.7192, test_acc: 0.8061, best: 0.8106, time: 0:01:03
 Epoch: 196, lr: 2.0e-03, train_loss: 0.3023, train_acc: 0.8990 test_loss: 0.7461, test_acc: 0.8031, best: 0.8106, time: 0:01:03
 Epoch: 197, lr: 2.0e-03, train_loss: 0.3038, train_acc: 0.8922 test_loss: 0.7285, test_acc: 0.8013, best: 0.8106, time: 0:01:03
 Epoch: 198, lr: 2.0e-03, train_loss: 0.3019, train_acc: 0.8948 test_loss: 0.7331, test_acc: 0.8080, best: 0.8106, time: 0:01:03
 Epoch: 199, lr: 2.0e-03, train_loss: 0.3164, train_acc: 0.8902 test_loss: 0.7126, test_acc: 0.8083, best: 0.8106, time: 0:01:03
 Epoch: 200, lr: 2.0e-03, train_loss: 0.3103, train_acc: 0.8930 test_loss: 0.7331, test_acc: 0.8095, best: 0.8106, time: 0:01:03
 Epoch: 201, lr: 2.0e-03, train_loss: 0.3102, train_acc: 0.8906 test_loss: 0.7218, test_acc: 0.8064, best: 0.8106, time: 0:01:03
 Epoch: 202, lr: 2.0e-03, train_loss: 0.3042, train_acc: 0.8982 test_loss: 0.7145, test_acc: 0.8083, best: 0.8106, time: 0:01:03
 Epoch: 203, lr: 2.0e-03, train_loss: 0.2869, train_acc: 0.8972 test_loss: 0.7369, test_acc: 0.8070, best: 0.8106, time: 0:01:03
 Epoch: 204, lr: 2.0e-03, train_loss: 0.2945, train_acc: 0.9008 test_loss: 0.7158, test_acc: 0.8070, best: 0.8106, time: 0:01:03
 Epoch: 205, lr: 2.0e-03, train_loss: 0.2941, train_acc: 0.9006 test_loss: 0.7980, test_acc: 0.8015, best: 0.8106, time: 0:01:03
 Epoch: 206, lr: 2.0e-03, train_loss: 0.3084, train_acc: 0.8914 test_loss: 0.7331, test_acc: 0.8027, best: 0.8106, time: 0:01:03
 Epoch: 207, lr: 2.0e-03, train_loss: 0.3009, train_acc: 0.8946 test_loss: 0.7664, test_acc: 0.7994, best: 0.8106, time: 0:01:03
 Epoch: 208, lr: 2.0e-03, train_loss: 0.3182, train_acc: 0.8928 test_loss: 0.7366, test_acc: 0.8046, best: 0.8106, time: 0:01:03
 Epoch: 209, lr: 2.0e-03, train_loss: 0.3057, train_acc: 0.8936 test_loss: 0.7116, test_acc: 0.8053, best: 0.8106, time: 0:01:03
 Epoch: 210, lr: 2.0e-03, train_loss: 0.2978, train_acc: 0.8930 test_loss: 0.7583, test_acc: 0.8044, best: 0.8106, time: 0:01:03
 Epoch: 211, lr: 2.0e-03, train_loss: 0.2892, train_acc: 0.8992 test_loss: 0.7445, test_acc: 0.8053, best: 0.8106, time: 0:01:03
 Epoch: 212, lr: 2.0e-03, train_loss: 0.3051, train_acc: 0.8916 test_loss: 0.7578, test_acc: 0.8031, best: 0.8106, time: 0:01:03
 Epoch: 213, lr: 2.0e-03, train_loss: 0.2966, train_acc: 0.8958 test_loss: 0.7392, test_acc: 0.8065, best: 0.8106, time: 0:01:03
 Epoch: 214, lr: 2.0e-03, train_loss: 0.2930, train_acc: 0.8996 test_loss: 0.7767, test_acc: 0.8043, best: 0.8106, time: 0:01:03
 Epoch: 215, lr: 2.0e-03, train_loss: 0.3102, train_acc: 0.8918 test_loss: 0.7488, test_acc: 0.8036, best: 0.8106, time: 0:01:03
 Epoch: 216, lr: 2.0e-03, train_loss: 0.2913, train_acc: 0.9010 test_loss: 0.7377, test_acc: 0.8083, best: 0.8106, time: 0:01:03
 Epoch: 217, lr: 2.0e-03, train_loss: 0.2970, train_acc: 0.8980 test_loss: 0.7517, test_acc: 0.8031, best: 0.8106, time: 0:01:03
 Epoch: 218, lr: 2.0e-03, train_loss: 0.3073, train_acc: 0.8940 test_loss: 0.7257, test_acc: 0.8050, best: 0.8106, time: 0:01:03
 Epoch: 219, lr: 2.0e-03, train_loss: 0.2849, train_acc: 0.9030 test_loss: 0.7344, test_acc: 0.8070, best: 0.8106, time: 0:01:03
 Epoch: 220, lr: 2.0e-03, train_loss: 0.2953, train_acc: 0.8962 test_loss: 0.7676, test_acc: 0.8036, best: 0.8106, time: 0:01:03
 Epoch: 221, lr: 2.0e-03, train_loss: 0.3089, train_acc: 0.8928 test_loss: 0.7451, test_acc: 0.8046, best: 0.8106, time: 0:01:03
 Epoch: 222, lr: 2.0e-03, train_loss: 0.2820, train_acc: 0.9068 test_loss: 0.7389, test_acc: 0.8043, best: 0.8106, time: 0:01:03
 Epoch: 223, lr: 2.0e-03, train_loss: 0.3170, train_acc: 0.8900 test_loss: 0.7601, test_acc: 0.8035, best: 0.8106, time: 0:01:03
 Epoch: 224, lr: 2.0e-03, train_loss: 0.2926, train_acc: 0.9000 test_loss: 0.7404, test_acc: 0.8059, best: 0.8106, time: 0:01:03
 Epoch: 225, lr: 2.0e-03, train_loss: 0.3001, train_acc: 0.8994 test_loss: 0.7319, test_acc: 0.8089, best: 0.8106, time: 0:01:03
 Epoch: 226, lr: 2.0e-03, train_loss: 0.2896, train_acc: 0.9062 test_loss: 0.7605, test_acc: 0.8046, best: 0.8106, time: 0:01:03
 Epoch: 227, lr: 2.0e-03, train_loss: 0.2821, train_acc: 0.9020 test_loss: 0.7433, test_acc: 0.8044, best: 0.8106, time: 0:01:03
 Epoch: 228, lr: 2.0e-03, train_loss: 0.2883, train_acc: 0.8968 test_loss: 0.7553, test_acc: 0.8049, best: 0.8106, time: 0:01:03
 Epoch: 229, lr: 2.0e-03, train_loss: 0.2940, train_acc: 0.9002 test_loss: 0.7700, test_acc: 0.8034, best: 0.8106, time: 0:01:03
 Epoch: 230, lr: 2.0e-03, train_loss: 0.2798, train_acc: 0.9022 test_loss: 0.7674, test_acc: 0.8046, best: 0.8106, time: 0:01:03
 Epoch: 231, lr: 2.0e-03, train_loss: 0.2964, train_acc: 0.8968 test_loss: 0.7313, test_acc: 0.8079, best: 0.8106, time: 0:01:03
 Epoch: 232, lr: 2.0e-03, train_loss: 0.2905, train_acc: 0.8942 test_loss: 0.7299, test_acc: 0.8091, best: 0.8106, time: 0:01:03
 Epoch: 233, lr: 2.0e-03, train_loss: 0.2832, train_acc: 0.8972 test_loss: 0.7719, test_acc: 0.8000, best: 0.8106, time: 0:01:03
 Epoch: 234, lr: 2.0e-03, train_loss: 0.2685, train_acc: 0.9080 test_loss: 0.7714, test_acc: 0.8003, best: 0.8106, time: 0:01:03
 Epoch: 235, lr: 2.0e-03, train_loss: 0.2644, train_acc: 0.9086 test_loss: 0.7999, test_acc: 0.8016, best: 0.8106, time: 0:01:03
 Epoch: 236, lr: 2.0e-03, train_loss: 0.2658, train_acc: 0.9038 test_loss: 0.7873, test_acc: 0.8057, best: 0.8106, time: 0:01:03
 Epoch: 237, lr: 2.0e-03, train_loss: 0.2900, train_acc: 0.8964 test_loss: 0.7458, test_acc: 0.8037, best: 0.8106, time: 0:01:03
 Epoch: 238, lr: 2.0e-03, train_loss: 0.2727, train_acc: 0.9064 test_loss: 0.7599, test_acc: 0.8093, best: 0.8106, time: 0:01:03
 Epoch: 239, lr: 2.0e-03, train_loss: 0.2602, train_acc: 0.9098 test_loss: 0.7476, test_acc: 0.8096, best: 0.8106, time: 0:01:03
 Epoch: 240, lr: 4.0e-04, train_loss: 0.2808, train_acc: 0.9038 test_loss: 0.7340, test_acc: 0.8099, best: 0.8106, time: 0:01:03
 Epoch: 241, lr: 4.0e-04, train_loss: 0.2612, train_acc: 0.9100 test_loss: 0.7486, test_acc: 0.8073, best: 0.8106, time: 0:01:03
 Epoch: 242, lr: 4.0e-04, train_loss: 0.2653, train_acc: 0.9116 test_loss: 0.7515, test_acc: 0.8090, best: 0.8106, time: 0:01:03
 Epoch: 243, lr: 4.0e-04, train_loss: 0.2634, train_acc: 0.9074 test_loss: 0.7575, test_acc: 0.8093, best: 0.8106, time: 0:01:03
 Epoch: 244, lr: 4.0e-04, train_loss: 0.2643, train_acc: 0.9060 test_loss: 0.7237, test_acc: 0.8137, best: 0.8137, time: 0:01:03
 Epoch: 245, lr: 4.0e-04, train_loss: 0.2479, train_acc: 0.9182 test_loss: 0.7586, test_acc: 0.8106, best: 0.8137, time: 0:01:03
 Epoch: 246, lr: 4.0e-04, train_loss: 0.2587, train_acc: 0.9102 test_loss: 0.7552, test_acc: 0.8099, best: 0.8137, time: 0:01:03
 Epoch: 247, lr: 4.0e-04, train_loss: 0.2609, train_acc: 0.9080 test_loss: 0.7785, test_acc: 0.8055, best: 0.8137, time: 0:01:03
 Epoch: 248, lr: 4.0e-04, train_loss: 0.2677, train_acc: 0.9100 test_loss: 0.7594, test_acc: 0.8077, best: 0.8137, time: 0:01:03
 Epoch: 249, lr: 4.0e-04, train_loss: 0.2648, train_acc: 0.9070 test_loss: 0.7502, test_acc: 0.8065, best: 0.8137, time: 0:01:03
 Epoch: 250, lr: 4.0e-04, train_loss: 0.2579, train_acc: 0.9128 test_loss: 0.7265, test_acc: 0.8116, best: 0.8137, time: 0:01:03
 Epoch: 251, lr: 4.0e-04, train_loss: 0.2612, train_acc: 0.9088 test_loss: 0.7273, test_acc: 0.8150, best: 0.8150, time: 0:01:03
 Epoch: 252, lr: 4.0e-04, train_loss: 0.2607, train_acc: 0.9098 test_loss: 0.7553, test_acc: 0.8097, best: 0.8150, time: 0:01:03
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2650, train_acc: 0.9086 test_loss: 0.7606, test_acc: 0.8073, best: 0.8150, time: 0:01:03
 Epoch: 254, lr: 4.0e-04, train_loss: 0.2549, train_acc: 0.9096 test_loss: 0.7511, test_acc: 0.8134, best: 0.8150, time: 0:01:03
 Epoch: 255, lr: 4.0e-04, train_loss: 0.2676, train_acc: 0.9050 test_loss: 0.7524, test_acc: 0.8125, best: 0.8150, time: 0:01:03
 Epoch: 256, lr: 4.0e-04, train_loss: 0.2531, train_acc: 0.9120 test_loss: 0.7453, test_acc: 0.8077, best: 0.8150, time: 0:01:03
 Epoch: 257, lr: 4.0e-04, train_loss: 0.2514, train_acc: 0.9154 test_loss: 0.7414, test_acc: 0.8111, best: 0.8150, time: 0:01:03
 Epoch: 258, lr: 4.0e-04, train_loss: 0.2528, train_acc: 0.9112 test_loss: 0.7450, test_acc: 0.8103, best: 0.8150, time: 0:01:03
 Epoch: 259, lr: 4.0e-04, train_loss: 0.2613, train_acc: 0.9110 test_loss: 0.7474, test_acc: 0.8117, best: 0.8150, time: 0:01:03
 Epoch: 260, lr: 4.0e-04, train_loss: 0.2452, train_acc: 0.9126 test_loss: 0.7566, test_acc: 0.8139, best: 0.8150, time: 0:01:03
 Epoch: 261, lr: 4.0e-04, train_loss: 0.2607, train_acc: 0.9130 test_loss: 0.7465, test_acc: 0.8111, best: 0.8150, time: 0:01:00
 Epoch: 262, lr: 4.0e-04, train_loss: 0.2574, train_acc: 0.9110 test_loss: 0.7495, test_acc: 0.8099, best: 0.8150, time: 0:00:59
 Epoch: 263, lr: 4.0e-04, train_loss: 0.2503, train_acc: 0.9152 test_loss: 0.7406, test_acc: 0.8117, best: 0.8150, time: 0:00:59
 Epoch: 264, lr: 4.0e-04, train_loss: 0.2476, train_acc: 0.9186 test_loss: 0.7282, test_acc: 0.8110, best: 0.8150, time: 0:00:59
 Epoch: 265, lr: 4.0e-04, train_loss: 0.2391, train_acc: 0.9130 test_loss: 0.7432, test_acc: 0.8105, best: 0.8150, time: 0:00:58
 Epoch: 266, lr: 4.0e-04, train_loss: 0.2572, train_acc: 0.9132 test_loss: 0.7434, test_acc: 0.8119, best: 0.8150, time: 0:00:58
 Epoch: 267, lr: 4.0e-04, train_loss: 0.2499, train_acc: 0.9116 test_loss: 0.7525, test_acc: 0.8120, best: 0.8150, time: 0:00:58
 Epoch: 268, lr: 4.0e-04, train_loss: 0.2446, train_acc: 0.9148 test_loss: 0.7601, test_acc: 0.8114, best: 0.8150, time: 0:00:58
 Epoch: 269, lr: 4.0e-04, train_loss: 0.2549, train_acc: 0.9098 test_loss: 0.7581, test_acc: 0.8104, best: 0.8150, time: 0:00:58
 Epoch: 270, lr: 8.0e-05, train_loss: 0.2514, train_acc: 0.9154 test_loss: 0.7713, test_acc: 0.8085, best: 0.8150, time: 0:00:58
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2518, train_acc: 0.9118 test_loss: 0.7489, test_acc: 0.8095, best: 0.8150, time: 0:00:58
 Epoch: 272, lr: 8.0e-05, train_loss: 0.2563, train_acc: 0.9104 test_loss: 0.7616, test_acc: 0.8084, best: 0.8150, time: 0:00:58
 Epoch: 273, lr: 8.0e-05, train_loss: 0.2572, train_acc: 0.9120 test_loss: 0.7644, test_acc: 0.8085, best: 0.8150, time: 0:00:58
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2657, train_acc: 0.9098 test_loss: 0.7507, test_acc: 0.8081, best: 0.8150, time: 0:00:58
 Epoch: 275, lr: 8.0e-05, train_loss: 0.2667, train_acc: 0.9072 test_loss: 0.7342, test_acc: 0.8117, best: 0.8150, time: 0:00:58
 Epoch: 276, lr: 8.0e-05, train_loss: 0.2548, train_acc: 0.9118 test_loss: 0.7604, test_acc: 0.8087, best: 0.8150, time: 0:00:58
 Epoch: 277, lr: 8.0e-05, train_loss: 0.2389, train_acc: 0.9142 test_loss: 0.7621, test_acc: 0.8107, best: 0.8150, time: 0:00:58
 Epoch: 278, lr: 8.0e-05, train_loss: 0.2456, train_acc: 0.9162 test_loss: 0.7594, test_acc: 0.8109, best: 0.8150, time: 0:00:58
 Epoch: 279, lr: 8.0e-05, train_loss: 0.2373, train_acc: 0.9178 test_loss: 0.7739, test_acc: 0.8099, best: 0.8150, time: 0:00:58
 Epoch: 280, lr: 8.0e-05, train_loss: 0.2399, train_acc: 0.9188 test_loss: 0.7456, test_acc: 0.8121, best: 0.8150, time: 0:00:58
 Epoch: 281, lr: 8.0e-05, train_loss: 0.2400, train_acc: 0.9156 test_loss: 0.7444, test_acc: 0.8100, best: 0.8150, time: 0:00:58
 Epoch: 282, lr: 8.0e-05, train_loss: 0.2480, train_acc: 0.9152 test_loss: 0.7442, test_acc: 0.8115, best: 0.8150, time: 0:00:58
 Epoch: 283, lr: 8.0e-05, train_loss: 0.2468, train_acc: 0.9150 test_loss: 0.7591, test_acc: 0.8106, best: 0.8150, time: 0:00:58
 Epoch: 284, lr: 8.0e-05, train_loss: 0.2487, train_acc: 0.9114 test_loss: 0.7386, test_acc: 0.8131, best: 0.8150, time: 0:00:58
 Epoch: 285, lr: 8.0e-05, train_loss: 0.2514, train_acc: 0.9108 test_loss: 0.7646, test_acc: 0.8097, best: 0.8150, time: 0:00:58
 Epoch: 286, lr: 8.0e-05, train_loss: 0.2493, train_acc: 0.9150 test_loss: 0.7370, test_acc: 0.8101, best: 0.8150, time: 0:00:58
 Epoch: 287, lr: 8.0e-05, train_loss: 0.2403, train_acc: 0.9126 test_loss: 0.7503, test_acc: 0.8114, best: 0.8150, time: 0:00:58
 Epoch: 288, lr: 8.0e-05, train_loss: 0.2618, train_acc: 0.9070 test_loss: 0.7579, test_acc: 0.8115, best: 0.8150, time: 0:00:58
 Epoch: 289, lr: 8.0e-05, train_loss: 0.2354, train_acc: 0.9178 test_loss: 0.7732, test_acc: 0.8091, best: 0.8150, time: 0:00:58
 Epoch: 290, lr: 8.0e-05, train_loss: 0.2523, train_acc: 0.9150 test_loss: 0.7501, test_acc: 0.8100, best: 0.8150, time: 0:00:58
 Epoch: 291, lr: 8.0e-05, train_loss: 0.2548, train_acc: 0.9124 test_loss: 0.7545, test_acc: 0.8083, best: 0.8150, time: 0:00:58
 Epoch: 292, lr: 8.0e-05, train_loss: 0.2544, train_acc: 0.9138 test_loss: 0.7679, test_acc: 0.8075, best: 0.8150, time: 0:00:58
 Epoch: 293, lr: 8.0e-05, train_loss: 0.2489, train_acc: 0.9154 test_loss: 0.7454, test_acc: 0.8119, best: 0.8150, time: 0:00:58
 Epoch: 294, lr: 8.0e-05, train_loss: 0.2603, train_acc: 0.9096 test_loss: 0.7505, test_acc: 0.8097, best: 0.8150, time: 0:00:58
 Epoch: 295, lr: 8.0e-05, train_loss: 0.2425, train_acc: 0.9158 test_loss: 0.7785, test_acc: 0.8047, best: 0.8150, time: 0:00:58
 Epoch: 296, lr: 8.0e-05, train_loss: 0.2279, train_acc: 0.9208 test_loss: 0.7662, test_acc: 0.8097, best: 0.8150, time: 0:00:58
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2382, train_acc: 0.9158 test_loss: 0.7677, test_acc: 0.8081, best: 0.8150, time: 0:00:58
 Epoch: 298, lr: 8.0e-05, train_loss: 0.2408, train_acc: 0.9166 test_loss: 0.7474, test_acc: 0.8105, best: 0.8150, time: 0:00:58
 Epoch: 299, lr: 8.0e-05, train_loss: 0.2434, train_acc: 0.9142 test_loss: 0.7636, test_acc: 0.8085, best: 0.8150, time: 0:00:58
 Highest accuracy: 0.8150