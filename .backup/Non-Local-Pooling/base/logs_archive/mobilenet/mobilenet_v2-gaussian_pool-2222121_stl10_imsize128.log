
 Run on time: 2022-07-03 01:05:00.187350

 Architecture: mobilenet_v2-gaussian_pool-2222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "gaussian_pool",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "gaussian_pool",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "gaussian_pool",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "gaussian_pool",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "gaussian_pool",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET_V2-GAUSSIAN_POOL-2222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(24, 12, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(12, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(12, 24, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(12, 24, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(160, 80, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(80, 160, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5766, train_acc: 0.1648 test_loss: 1.9249, test_acc: 0.2444, best: 0.2444, time: 0:00:58
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1547, train_acc: 0.1966 test_loss: 1.8767, test_acc: 0.2710, best: 0.2710, time: 0:00:58
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0777, train_acc: 0.2070 test_loss: 1.8661, test_acc: 0.2731, best: 0.2731, time: 0:00:58
 Epoch: 4, lr: 1.0e-02, train_loss: 2.0227, train_acc: 0.2286 test_loss: 1.8419, test_acc: 0.3116, best: 0.3116, time: 0:00:58
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9881, train_acc: 0.2362 test_loss: 1.7380, test_acc: 0.3220, best: 0.3220, time: 0:00:57
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9591, train_acc: 0.2518 test_loss: 1.8660, test_acc: 0.2581, best: 0.3220, time: 0:00:58
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9286, train_acc: 0.2650 test_loss: 1.7410, test_acc: 0.3305, best: 0.3305, time: 0:00:58
 Epoch: 8, lr: 1.0e-02, train_loss: 1.8981, train_acc: 0.2728 test_loss: 1.7366, test_acc: 0.3230, best: 0.3305, time: 0:00:57
 Epoch: 9, lr: 1.0e-02, train_loss: 1.9186, train_acc: 0.2646 test_loss: 1.7345, test_acc: 0.3275, best: 0.3305, time: 0:00:57
 Epoch: 10, lr: 1.0e-02, train_loss: 1.9314, train_acc: 0.2626 test_loss: 1.7426, test_acc: 0.3140, best: 0.3305, time: 0:00:57
 Epoch: 11, lr: 1.0e-02, train_loss: 1.8894, train_acc: 0.2758 test_loss: 1.6688, test_acc: 0.3711, best: 0.3711, time: 0:00:57
 Epoch: 12, lr: 1.0e-02, train_loss: 1.8739, train_acc: 0.2836 test_loss: 1.6826, test_acc: 0.3664, best: 0.3711, time: 0:00:58
 Epoch: 13, lr: 1.0e-02, train_loss: 1.8686, train_acc: 0.2796 test_loss: 1.6858, test_acc: 0.3705, best: 0.3711, time: 0:00:57
 Epoch: 14, lr: 1.0e-02, train_loss: 1.8292, train_acc: 0.3012 test_loss: 1.6159, test_acc: 0.3942, best: 0.3942, time: 0:00:58
 Epoch: 15, lr: 1.0e-02, train_loss: 1.8170, train_acc: 0.3038 test_loss: 1.6244, test_acc: 0.3836, best: 0.3942, time: 0:00:58
 Epoch: 16, lr: 1.0e-02, train_loss: 1.8503, train_acc: 0.2968 test_loss: 1.7342, test_acc: 0.3397, best: 0.3942, time: 0:00:57
 Epoch: 17, lr: 1.0e-02, train_loss: 1.8509, train_acc: 0.3040 test_loss: 1.6282, test_acc: 0.3751, best: 0.3942, time: 0:00:58
 Epoch: 18, lr: 1.0e-02, train_loss: 1.8130, train_acc: 0.3134 test_loss: 1.6173, test_acc: 0.3733, best: 0.3942, time: 0:00:57
 Epoch: 19, lr: 1.0e-02, train_loss: 1.7790, train_acc: 0.3212 test_loss: 1.5660, test_acc: 0.4066, best: 0.4066, time: 0:00:57
 Epoch: 20, lr: 1.0e-02, train_loss: 1.7560, train_acc: 0.3326 test_loss: 1.5437, test_acc: 0.4131, best: 0.4131, time: 0:00:58
 Epoch: 21, lr: 1.0e-02, train_loss: 1.7458, train_acc: 0.3384 test_loss: 1.6183, test_acc: 0.3956, best: 0.4131, time: 0:00:57
 Epoch: 22, lr: 1.0e-02, train_loss: 1.7357, train_acc: 0.3388 test_loss: 1.5631, test_acc: 0.3795, best: 0.4131, time: 0:00:57
 Epoch: 23, lr: 1.0e-02, train_loss: 1.7239, train_acc: 0.3422 test_loss: 1.5102, test_acc: 0.4209, best: 0.4209, time: 0:00:58
 Epoch: 24, lr: 1.0e-02, train_loss: 1.7084, train_acc: 0.3510 test_loss: 1.5181, test_acc: 0.4214, best: 0.4214, time: 0:00:58
 Epoch: 25, lr: 1.0e-02, train_loss: 1.6976, train_acc: 0.3586 test_loss: 1.4986, test_acc: 0.4233, best: 0.4233, time: 0:00:58
 Epoch: 26, lr: 1.0e-02, train_loss: 1.7146, train_acc: 0.3500 test_loss: 1.5292, test_acc: 0.4260, best: 0.4260, time: 0:00:58
 Epoch: 27, lr: 1.0e-02, train_loss: 1.6790, train_acc: 0.3674 test_loss: 1.4722, test_acc: 0.4439, best: 0.4439, time: 0:00:58
 Epoch: 28, lr: 1.0e-02, train_loss: 1.6575, train_acc: 0.3770 test_loss: 1.5040, test_acc: 0.4336, best: 0.4439, time: 0:00:58
 Epoch: 29, lr: 1.0e-02, train_loss: 1.6809, train_acc: 0.3642 test_loss: 1.5175, test_acc: 0.4280, best: 0.4439, time: 0:00:57
 Epoch: 30, lr: 1.0e-02, train_loss: 1.7014, train_acc: 0.3680 test_loss: 1.5072, test_acc: 0.4354, best: 0.4439, time: 0:00:58
 Epoch: 31, lr: 1.0e-02, train_loss: 1.6695, train_acc: 0.3678 test_loss: 1.5016, test_acc: 0.4417, best: 0.4439, time: 0:00:58
 Epoch: 32, lr: 1.0e-02, train_loss: 1.6777, train_acc: 0.3716 test_loss: 1.4596, test_acc: 0.4430, best: 0.4439, time: 0:00:57
 Epoch: 33, lr: 1.0e-02, train_loss: 1.6439, train_acc: 0.3802 test_loss: 1.5021, test_acc: 0.4356, best: 0.4439, time: 0:00:57
 Epoch: 34, lr: 1.0e-02, train_loss: 1.6039, train_acc: 0.4072 test_loss: 1.4367, test_acc: 0.4670, best: 0.4670, time: 0:00:57
 Epoch: 35, lr: 1.0e-02, train_loss: 1.6074, train_acc: 0.3980 test_loss: 1.3841, test_acc: 0.4859, best: 0.4859, time: 0:00:57
 Epoch: 36, lr: 1.0e-02, train_loss: 1.5947, train_acc: 0.4100 test_loss: 1.4207, test_acc: 0.4723, best: 0.4859, time: 0:00:57
 Epoch: 37, lr: 1.0e-02, train_loss: 1.6710, train_acc: 0.3762 test_loss: 1.4516, test_acc: 0.4689, best: 0.4859, time: 0:00:57
 Epoch: 38, lr: 1.0e-02, train_loss: 1.7038, train_acc: 0.3618 test_loss: 1.4626, test_acc: 0.4532, best: 0.4859, time: 0:00:57
 Epoch: 39, lr: 1.0e-02, train_loss: 1.6117, train_acc: 0.4046 test_loss: 1.3774, test_acc: 0.4926, best: 0.4926, time: 0:00:56
 Epoch: 40, lr: 1.0e-02, train_loss: 1.6097, train_acc: 0.4086 test_loss: 1.3569, test_acc: 0.5101, best: 0.5101, time: 0:00:57
 Epoch: 41, lr: 1.0e-02, train_loss: 1.5673, train_acc: 0.4200 test_loss: 1.4809, test_acc: 0.4566, best: 0.5101, time: 0:00:56
 Epoch: 42, lr: 1.0e-02, train_loss: 1.5711, train_acc: 0.4158 test_loss: 1.3765, test_acc: 0.4890, best: 0.5101, time: 0:00:57
 Epoch: 43, lr: 1.0e-02, train_loss: 1.5141, train_acc: 0.4458 test_loss: 1.3281, test_acc: 0.5080, best: 0.5101, time: 0:00:57
 Epoch: 44, lr: 1.0e-02, train_loss: 1.5778, train_acc: 0.4176 test_loss: 1.3684, test_acc: 0.4980, best: 0.5101, time: 0:00:56
 Epoch: 45, lr: 1.0e-02, train_loss: 1.5377, train_acc: 0.4416 test_loss: 1.4773, test_acc: 0.4524, best: 0.5101, time: 0:00:57
 Epoch: 46, lr: 1.0e-02, train_loss: 1.5521, train_acc: 0.4264 test_loss: 1.3903, test_acc: 0.4923, best: 0.5101, time: 0:00:56
 Epoch: 47, lr: 1.0e-02, train_loss: 1.5343, train_acc: 0.4378 test_loss: 1.2942, test_acc: 0.5200, best: 0.5200, time: 0:00:56
 Epoch: 48, lr: 1.0e-02, train_loss: 1.5136, train_acc: 0.4324 test_loss: 1.3563, test_acc: 0.5019, best: 0.5200, time: 0:00:56
 Epoch: 49, lr: 1.0e-02, train_loss: 1.4659, train_acc: 0.4602 test_loss: 1.2916, test_acc: 0.5129, best: 0.5200, time: 0:00:56
 Epoch: 50, lr: 1.0e-02, train_loss: 1.4660, train_acc: 0.4612 test_loss: 1.2385, test_acc: 0.5465, best: 0.5465, time: 0:00:57
 Epoch: 51, lr: 1.0e-02, train_loss: 1.5076, train_acc: 0.4368 test_loss: 1.5256, test_acc: 0.4266, best: 0.5465, time: 0:00:56
 Epoch: 52, lr: 1.0e-02, train_loss: 1.5966, train_acc: 0.4028 test_loss: 1.4080, test_acc: 0.4783, best: 0.5465, time: 0:00:56
 Epoch: 53, lr: 1.0e-02, train_loss: 1.5380, train_acc: 0.4292 test_loss: 1.3748, test_acc: 0.4926, best: 0.5465, time: 0:00:56
 Epoch: 54, lr: 1.0e-02, train_loss: 1.4914, train_acc: 0.4434 test_loss: 1.2657, test_acc: 0.5260, best: 0.5465, time: 0:00:55
 Epoch: 55, lr: 1.0e-02, train_loss: 1.5109, train_acc: 0.4424 test_loss: 1.2685, test_acc: 0.5295, best: 0.5465, time: 0:00:56
 Epoch: 56, lr: 1.0e-02, train_loss: 1.4576, train_acc: 0.4572 test_loss: 1.2249, test_acc: 0.5473, best: 0.5473, time: 0:00:55
 Epoch: 57, lr: 1.0e-02, train_loss: 1.4454, train_acc: 0.4662 test_loss: 1.1921, test_acc: 0.5575, best: 0.5575, time: 0:00:56
 Epoch: 58, lr: 1.0e-02, train_loss: 1.4044, train_acc: 0.4812 test_loss: 1.1765, test_acc: 0.5620, best: 0.5620, time: 0:00:55
 Epoch: 59, lr: 1.0e-02, train_loss: 1.3801, train_acc: 0.4950 test_loss: 1.1744, test_acc: 0.5690, best: 0.5690, time: 0:00:56
 Epoch: 60, lr: 1.0e-02, train_loss: 1.4150, train_acc: 0.4864 test_loss: 1.2210, test_acc: 0.5545, best: 0.5690, time: 0:00:56
 Epoch: 61, lr: 1.0e-02, train_loss: 1.3769, train_acc: 0.4894 test_loss: 1.2266, test_acc: 0.5469, best: 0.5690, time: 0:00:56
 Epoch: 62, lr: 1.0e-02, train_loss: 1.3438, train_acc: 0.5148 test_loss: 1.2203, test_acc: 0.5606, best: 0.5690, time: 0:00:56
 Epoch: 63, lr: 1.0e-02, train_loss: 1.3397, train_acc: 0.5088 test_loss: 1.0947, test_acc: 0.6080, best: 0.6080, time: 0:00:56
 Epoch: 64, lr: 1.0e-02, train_loss: 1.3651, train_acc: 0.5044 test_loss: 1.1425, test_acc: 0.5864, best: 0.6080, time: 0:00:55
 Epoch: 65, lr: 1.0e-02, train_loss: 1.3433, train_acc: 0.5052 test_loss: 1.1941, test_acc: 0.5703, best: 0.6080, time: 0:00:55
 Epoch: 66, lr: 1.0e-02, train_loss: 1.3413, train_acc: 0.5076 test_loss: 1.1255, test_acc: 0.5951, best: 0.6080, time: 0:00:56
 Epoch: 67, lr: 1.0e-02, train_loss: 1.3181, train_acc: 0.5212 test_loss: 1.1462, test_acc: 0.5824, best: 0.6080, time: 0:00:55
 Epoch: 68, lr: 1.0e-02, train_loss: 1.3482, train_acc: 0.5072 test_loss: 1.2015, test_acc: 0.5625, best: 0.6080, time: 0:00:56
 Epoch: 69, lr: 1.0e-02, train_loss: 1.3465, train_acc: 0.5084 test_loss: 1.1831, test_acc: 0.5753, best: 0.6080, time: 0:00:55
 Epoch: 70, lr: 1.0e-02, train_loss: 1.3163, train_acc: 0.5134 test_loss: 1.1043, test_acc: 0.6098, best: 0.6098, time: 0:00:56
 Epoch: 71, lr: 1.0e-02, train_loss: 1.3077, train_acc: 0.5194 test_loss: 1.1287, test_acc: 0.5889, best: 0.6098, time: 0:00:55
 Epoch: 72, lr: 1.0e-02, train_loss: 1.3158, train_acc: 0.5244 test_loss: 1.1429, test_acc: 0.5883, best: 0.6098, time: 0:00:55
 Epoch: 73, lr: 1.0e-02, train_loss: 1.2671, train_acc: 0.5376 test_loss: 1.0690, test_acc: 0.6130, best: 0.6130, time: 0:00:55
 Epoch: 74, lr: 1.0e-02, train_loss: 1.2588, train_acc: 0.5436 test_loss: 1.0729, test_acc: 0.6099, best: 0.6130, time: 0:00:56
 Epoch: 75, lr: 1.0e-02, train_loss: 1.2639, train_acc: 0.5456 test_loss: 1.0777, test_acc: 0.6045, best: 0.6130, time: 0:00:55
 Epoch: 76, lr: 1.0e-02, train_loss: 1.2511, train_acc: 0.5440 test_loss: 1.0633, test_acc: 0.6106, best: 0.6130, time: 0:00:55
 Epoch: 77, lr: 1.0e-02, train_loss: 1.2504, train_acc: 0.5498 test_loss: 1.1576, test_acc: 0.5965, best: 0.6130, time: 0:00:56
 Epoch: 78, lr: 1.0e-02, train_loss: 1.3034, train_acc: 0.5214 test_loss: 1.1807, test_acc: 0.5666, best: 0.6130, time: 0:00:55
 Epoch: 79, lr: 1.0e-02, train_loss: 1.3356, train_acc: 0.5134 test_loss: 1.2796, test_acc: 0.5241, best: 0.6130, time: 0:00:55
 Epoch: 80, lr: 1.0e-02, train_loss: 1.2700, train_acc: 0.5336 test_loss: 1.0832, test_acc: 0.6125, best: 0.6130, time: 0:00:55
 Epoch: 81, lr: 1.0e-02, train_loss: 1.2677, train_acc: 0.5350 test_loss: 1.0729, test_acc: 0.6209, best: 0.6209, time: 0:00:56
 Epoch: 82, lr: 1.0e-02, train_loss: 1.2122, train_acc: 0.5530 test_loss: 1.0819, test_acc: 0.6110, best: 0.6209, time: 0:00:56
 Epoch: 83, lr: 1.0e-02, train_loss: 1.3436, train_acc: 0.5132 test_loss: 1.4021, test_acc: 0.4875, best: 0.6209, time: 0:00:55
 Epoch: 84, lr: 1.0e-02, train_loss: 1.3675, train_acc: 0.4976 test_loss: 1.1197, test_acc: 0.5958, best: 0.6209, time: 0:00:55
 Epoch: 85, lr: 1.0e-02, train_loss: 1.2882, train_acc: 0.5200 test_loss: 1.1109, test_acc: 0.6015, best: 0.6209, time: 0:00:55
 Epoch: 86, lr: 1.0e-02, train_loss: 1.2803, train_acc: 0.5336 test_loss: 1.0767, test_acc: 0.6086, best: 0.6209, time: 0:00:55
 Epoch: 87, lr: 1.0e-02, train_loss: 1.2598, train_acc: 0.5314 test_loss: 1.0814, test_acc: 0.6142, best: 0.6209, time: 0:00:55
 Epoch: 88, lr: 1.0e-02, train_loss: 1.2439, train_acc: 0.5434 test_loss: 1.0958, test_acc: 0.6011, best: 0.6209, time: 0:00:55
 Epoch: 89, lr: 1.0e-02, train_loss: 1.2441, train_acc: 0.5544 test_loss: 1.0869, test_acc: 0.6112, best: 0.6209, time: 0:00:56
 Epoch: 90, lr: 1.0e-02, train_loss: 1.2032, train_acc: 0.5588 test_loss: 1.0497, test_acc: 0.6176, best: 0.6209, time: 0:00:55
 Epoch: 91, lr: 1.0e-02, train_loss: 1.1883, train_acc: 0.5668 test_loss: 1.0421, test_acc: 0.6229, best: 0.6229, time: 0:00:56
 Epoch: 92, lr: 1.0e-02, train_loss: 1.1804, train_acc: 0.5772 test_loss: 1.0189, test_acc: 0.6285, best: 0.6285, time: 0:00:55
 Epoch: 93, lr: 1.0e-02, train_loss: 1.1886, train_acc: 0.5708 test_loss: 0.9858, test_acc: 0.6461, best: 0.6461, time: 0:00:55
 Epoch: 94, lr: 1.0e-02, train_loss: 1.1961, train_acc: 0.5646 test_loss: 1.0519, test_acc: 0.6226, best: 0.6461, time: 0:00:55
 Epoch: 95, lr: 1.0e-02, train_loss: 1.1783, train_acc: 0.5740 test_loss: 1.0853, test_acc: 0.6115, best: 0.6461, time: 0:00:55
 Epoch: 96, lr: 1.0e-02, train_loss: 1.1477, train_acc: 0.5844 test_loss: 1.0229, test_acc: 0.6339, best: 0.6461, time: 0:00:55
 Epoch: 97, lr: 1.0e-02, train_loss: 1.1572, train_acc: 0.5796 test_loss: 1.0150, test_acc: 0.6329, best: 0.6461, time: 0:00:56
 Epoch: 98, lr: 1.0e-02, train_loss: 1.1335, train_acc: 0.5872 test_loss: 1.0191, test_acc: 0.6368, best: 0.6461, time: 0:00:55
 Epoch: 99, lr: 1.0e-02, train_loss: 1.1330, train_acc: 0.5870 test_loss: 0.9865, test_acc: 0.6389, best: 0.6461, time: 0:00:55
 Epoch: 100, lr: 1.0e-02, train_loss: 1.1170, train_acc: 0.5958 test_loss: 0.9567, test_acc: 0.6637, best: 0.6637, time: 0:00:55
 Epoch: 101, lr: 1.0e-02, train_loss: 1.1106, train_acc: 0.5948 test_loss: 1.1356, test_acc: 0.6030, best: 0.6637, time: 0:00:55
 Epoch: 102, lr: 1.0e-02, train_loss: 1.2345, train_acc: 0.5526 test_loss: 1.0482, test_acc: 0.6204, best: 0.6637, time: 0:00:55
 Epoch: 103, lr: 1.0e-02, train_loss: 1.1973, train_acc: 0.5710 test_loss: 0.9967, test_acc: 0.6374, best: 0.6637, time: 0:00:55
 Epoch: 104, lr: 1.0e-02, train_loss: 1.1400, train_acc: 0.5796 test_loss: 1.0883, test_acc: 0.6100, best: 0.6637, time: 0:00:55
 Epoch: 105, lr: 1.0e-02, train_loss: 1.1475, train_acc: 0.5860 test_loss: 1.0168, test_acc: 0.6379, best: 0.6637, time: 0:00:55
 Epoch: 106, lr: 1.0e-02, train_loss: 1.1479, train_acc: 0.5912 test_loss: 0.9917, test_acc: 0.6399, best: 0.6637, time: 0:00:55
 Epoch: 107, lr: 1.0e-02, train_loss: 1.1371, train_acc: 0.5840 test_loss: 0.9556, test_acc: 0.6580, best: 0.6637, time: 0:00:55
 Epoch: 108, lr: 1.0e-02, train_loss: 1.1389, train_acc: 0.5892 test_loss: 0.9954, test_acc: 0.6522, best: 0.6637, time: 0:00:55
 Epoch: 109, lr: 1.0e-02, train_loss: 1.1178, train_acc: 0.5960 test_loss: 1.0096, test_acc: 0.6408, best: 0.6637, time: 0:00:55
 Epoch: 110, lr: 1.0e-02, train_loss: 1.1586, train_acc: 0.5812 test_loss: 0.9975, test_acc: 0.6330, best: 0.6637, time: 0:00:55
 Epoch: 111, lr: 1.0e-02, train_loss: 1.0925, train_acc: 0.6060 test_loss: 0.9791, test_acc: 0.6479, best: 0.6637, time: 0:00:55
 Epoch: 112, lr: 1.0e-02, train_loss: 1.0947, train_acc: 0.6070 test_loss: 1.0450, test_acc: 0.6345, best: 0.6637, time: 0:00:55
 Epoch: 113, lr: 1.0e-02, train_loss: 1.1012, train_acc: 0.6008 test_loss: 1.1401, test_acc: 0.5959, best: 0.6637, time: 0:00:55
 Epoch: 114, lr: 1.0e-02, train_loss: 1.1360, train_acc: 0.5898 test_loss: 0.9673, test_acc: 0.6498, best: 0.6637, time: 0:00:55
 Epoch: 115, lr: 1.0e-02, train_loss: 1.1076, train_acc: 0.5996 test_loss: 0.9659, test_acc: 0.6466, best: 0.6637, time: 0:00:55
 Epoch: 116, lr: 1.0e-02, train_loss: 1.0729, train_acc: 0.6118 test_loss: 1.0485, test_acc: 0.6329, best: 0.6637, time: 0:00:55
 Epoch: 117, lr: 1.0e-02, train_loss: 1.0855, train_acc: 0.6054 test_loss: 0.9555, test_acc: 0.6561, best: 0.6637, time: 0:00:55
 Epoch: 118, lr: 1.0e-02, train_loss: 1.0740, train_acc: 0.6138 test_loss: 1.0011, test_acc: 0.6454, best: 0.6637, time: 0:00:55
 Epoch: 119, lr: 1.0e-02, train_loss: 1.0766, train_acc: 0.6088 test_loss: 0.9544, test_acc: 0.6616, best: 0.6637, time: 0:00:55
 Epoch: 120, lr: 1.0e-02, train_loss: 1.0442, train_acc: 0.6268 test_loss: 1.0284, test_acc: 0.6264, best: 0.6637, time: 0:00:55
 Epoch: 121, lr: 1.0e-02, train_loss: 1.0621, train_acc: 0.6134 test_loss: 0.9724, test_acc: 0.6504, best: 0.6637, time: 0:00:55
 Epoch: 122, lr: 1.0e-02, train_loss: 1.0474, train_acc: 0.6302 test_loss: 0.9297, test_acc: 0.6716, best: 0.6716, time: 0:00:55
 Epoch: 123, lr: 1.0e-02, train_loss: 1.0453, train_acc: 0.6242 test_loss: 0.9531, test_acc: 0.6625, best: 0.6716, time: 0:00:55
 Epoch: 124, lr: 1.0e-02, train_loss: 1.0432, train_acc: 0.6252 test_loss: 0.9258, test_acc: 0.6729, best: 0.6729, time: 0:00:55
 Epoch: 125, lr: 1.0e-02, train_loss: 1.0472, train_acc: 0.6278 test_loss: 0.9152, test_acc: 0.6694, best: 0.6729, time: 0:00:55
 Epoch: 126, lr: 1.0e-02, train_loss: 1.0365, train_acc: 0.6304 test_loss: 1.0500, test_acc: 0.6310, best: 0.6729, time: 0:00:55
 Epoch: 127, lr: 1.0e-02, train_loss: 1.0261, train_acc: 0.6326 test_loss: 0.9709, test_acc: 0.6600, best: 0.6729, time: 0:00:55
 Epoch: 128, lr: 1.0e-02, train_loss: 1.0028, train_acc: 0.6350 test_loss: 0.8984, test_acc: 0.6843, best: 0.6843, time: 0:00:56
 Epoch: 129, lr: 1.0e-02, train_loss: 1.0044, train_acc: 0.6292 test_loss: 0.9095, test_acc: 0.6805, best: 0.6843, time: 0:00:55
 Epoch: 130, lr: 1.0e-02, train_loss: 0.9930, train_acc: 0.6424 test_loss: 0.9800, test_acc: 0.6514, best: 0.6843, time: 0:00:55
 Epoch: 131, lr: 1.0e-02, train_loss: 0.9927, train_acc: 0.6462 test_loss: 0.9237, test_acc: 0.6789, best: 0.6843, time: 0:00:55
 Epoch: 132, lr: 1.0e-02, train_loss: 0.9862, train_acc: 0.6448 test_loss: 0.8958, test_acc: 0.6774, best: 0.6843, time: 0:00:55
 Epoch: 133, lr: 1.0e-02, train_loss: 1.0104, train_acc: 0.6358 test_loss: 0.9114, test_acc: 0.6774, best: 0.6843, time: 0:00:56
 Epoch: 134, lr: 1.0e-02, train_loss: 0.9831, train_acc: 0.6436 test_loss: 0.9163, test_acc: 0.6729, best: 0.6843, time: 0:00:55
 Epoch: 135, lr: 1.0e-02, train_loss: 0.9996, train_acc: 0.6410 test_loss: 0.9143, test_acc: 0.6674, best: 0.6843, time: 0:00:56
 Epoch: 136, lr: 1.0e-02, train_loss: 0.9858, train_acc: 0.6454 test_loss: 0.9340, test_acc: 0.6706, best: 0.6843, time: 0:00:55
 Epoch: 137, lr: 1.0e-02, train_loss: 0.9849, train_acc: 0.6512 test_loss: 0.9450, test_acc: 0.6613, best: 0.6843, time: 0:00:55
 Epoch: 138, lr: 1.0e-02, train_loss: 0.9581, train_acc: 0.6596 test_loss: 0.9747, test_acc: 0.6576, best: 0.6843, time: 0:00:55
 Epoch: 139, lr: 1.0e-02, train_loss: 0.9706, train_acc: 0.6522 test_loss: 0.8588, test_acc: 0.6944, best: 0.6944, time: 0:00:55
 Epoch: 140, lr: 1.0e-02, train_loss: 1.0471, train_acc: 0.6194 test_loss: 0.9317, test_acc: 0.6695, best: 0.6944, time: 0:00:55
 Epoch: 141, lr: 1.0e-02, train_loss: 1.0150, train_acc: 0.6318 test_loss: 0.9444, test_acc: 0.6675, best: 0.6944, time: 0:00:55
 Epoch: 142, lr: 1.0e-02, train_loss: 1.0015, train_acc: 0.6352 test_loss: 0.9200, test_acc: 0.6691, best: 0.6944, time: 0:00:55
 Epoch: 143, lr: 1.0e-02, train_loss: 0.9784, train_acc: 0.6434 test_loss: 0.9570, test_acc: 0.6549, best: 0.6944, time: 0:00:55
 Epoch: 144, lr: 1.0e-02, train_loss: 0.9725, train_acc: 0.6490 test_loss: 0.8750, test_acc: 0.6825, best: 0.6944, time: 0:00:55
 Epoch: 145, lr: 1.0e-02, train_loss: 0.9486, train_acc: 0.6542 test_loss: 0.8624, test_acc: 0.6911, best: 0.6944, time: 0:00:55
 Epoch: 146, lr: 1.0e-02, train_loss: 0.9686, train_acc: 0.6532 test_loss: 0.9018, test_acc: 0.6786, best: 0.6944, time: 0:00:56
 Epoch: 147, lr: 1.0e-02, train_loss: 0.9625, train_acc: 0.6594 test_loss: 0.9003, test_acc: 0.6843, best: 0.6944, time: 0:00:55
 Epoch: 148, lr: 1.0e-02, train_loss: 0.9584, train_acc: 0.6502 test_loss: 0.9320, test_acc: 0.6749, best: 0.6944, time: 0:00:56
 Epoch: 149, lr: 1.0e-02, train_loss: 0.9375, train_acc: 0.6616 test_loss: 0.8819, test_acc: 0.6836, best: 0.6944, time: 0:00:56
 Epoch: 150, lr: 1.0e-02, train_loss: 0.9292, train_acc: 0.6672 test_loss: 0.9237, test_acc: 0.6807, best: 0.6944, time: 0:00:56
 Epoch: 151, lr: 1.0e-02, train_loss: 0.9215, train_acc: 0.6674 test_loss: 0.8935, test_acc: 0.6835, best: 0.6944, time: 0:00:55
 Epoch: 152, lr: 1.0e-02, train_loss: 0.9382, train_acc: 0.6600 test_loss: 0.8608, test_acc: 0.6943, best: 0.6944, time: 0:00:56
 Epoch: 153, lr: 1.0e-02, train_loss: 0.9191, train_acc: 0.6684 test_loss: 0.9101, test_acc: 0.6849, best: 0.6944, time: 0:00:55
 Epoch: 154, lr: 1.0e-02, train_loss: 0.9222, train_acc: 0.6750 test_loss: 0.8526, test_acc: 0.7017, best: 0.7017, time: 0:00:56
 Epoch: 155, lr: 1.0e-02, train_loss: 0.9054, train_acc: 0.6756 test_loss: 0.8726, test_acc: 0.6941, best: 0.7017, time: 0:00:56
 Epoch: 156, lr: 1.0e-02, train_loss: 0.9745, train_acc: 0.6508 test_loss: 0.8624, test_acc: 0.6894, best: 0.7017, time: 0:00:56
 Epoch: 157, lr: 1.0e-02, train_loss: 0.9583, train_acc: 0.6558 test_loss: 0.9283, test_acc: 0.6635, best: 0.7017, time: 0:00:56
 Epoch: 158, lr: 1.0e-02, train_loss: 0.9305, train_acc: 0.6680 test_loss: 0.9174, test_acc: 0.6759, best: 0.7017, time: 0:00:55
 Epoch: 159, lr: 1.0e-02, train_loss: 0.8900, train_acc: 0.6830 test_loss: 0.8764, test_acc: 0.6899, best: 0.7017, time: 0:00:55
 Epoch: 160, lr: 1.0e-02, train_loss: 0.9136, train_acc: 0.6668 test_loss: 0.9127, test_acc: 0.6714, best: 0.7017, time: 0:00:55
 Epoch: 161, lr: 1.0e-02, train_loss: 0.8994, train_acc: 0.6814 test_loss: 0.8569, test_acc: 0.6916, best: 0.7017, time: 0:00:55
 Epoch: 162, lr: 1.0e-02, train_loss: 0.9065, train_acc: 0.6654 test_loss: 0.8524, test_acc: 0.7033, best: 0.7033, time: 0:00:56
 Epoch: 163, lr: 1.0e-02, train_loss: 0.8895, train_acc: 0.6764 test_loss: 0.8481, test_acc: 0.7010, best: 0.7033, time: 0:00:55
 Epoch: 164, lr: 1.0e-02, train_loss: 0.8754, train_acc: 0.6862 test_loss: 0.9900, test_acc: 0.6545, best: 0.7033, time: 0:00:55
 Epoch: 165, lr: 1.0e-02, train_loss: 0.9243, train_acc: 0.6634 test_loss: 0.8251, test_acc: 0.7050, best: 0.7050, time: 0:00:56
 Epoch: 166, lr: 1.0e-02, train_loss: 0.8891, train_acc: 0.6818 test_loss: 0.8490, test_acc: 0.6919, best: 0.7050, time: 0:00:55
 Epoch: 167, lr: 1.0e-02, train_loss: 0.8767, train_acc: 0.6890 test_loss: 0.8587, test_acc: 0.6955, best: 0.7050, time: 0:00:56
 Epoch: 168, lr: 1.0e-02, train_loss: 0.9032, train_acc: 0.6754 test_loss: 0.8486, test_acc: 0.6951, best: 0.7050, time: 0:00:55
 Epoch: 169, lr: 1.0e-02, train_loss: 0.8619, train_acc: 0.6846 test_loss: 0.8156, test_acc: 0.7053, best: 0.7053, time: 0:00:56
 Epoch: 170, lr: 1.0e-02, train_loss: 0.8815, train_acc: 0.6834 test_loss: 0.8271, test_acc: 0.7076, best: 0.7076, time: 0:00:56
 Epoch: 171, lr: 1.0e-02, train_loss: 0.8663, train_acc: 0.6934 test_loss: 0.8256, test_acc: 0.7064, best: 0.7076, time: 0:00:55
 Epoch: 172, lr: 1.0e-02, train_loss: 0.8348, train_acc: 0.6988 test_loss: 0.9058, test_acc: 0.6824, best: 0.7076, time: 0:00:56
 Epoch: 173, lr: 1.0e-02, train_loss: 0.8732, train_acc: 0.6846 test_loss: 0.9521, test_acc: 0.6715, best: 0.7076, time: 0:00:55
 Epoch: 174, lr: 1.0e-02, train_loss: 0.8690, train_acc: 0.6924 test_loss: 0.8839, test_acc: 0.6906, best: 0.7076, time: 0:00:55
 Epoch: 175, lr: 1.0e-02, train_loss: 0.8579, train_acc: 0.6936 test_loss: 0.8101, test_acc: 0.7116, best: 0.7116, time: 0:00:56
 Epoch: 176, lr: 1.0e-02, train_loss: 0.8459, train_acc: 0.6908 test_loss: 0.8328, test_acc: 0.7047, best: 0.7116, time: 0:00:56
 Epoch: 177, lr: 1.0e-02, train_loss: 0.8457, train_acc: 0.6972 test_loss: 0.8337, test_acc: 0.7090, best: 0.7116, time: 0:00:55
 Epoch: 178, lr: 1.0e-02, train_loss: 0.8286, train_acc: 0.7036 test_loss: 0.8690, test_acc: 0.6996, best: 0.7116, time: 0:00:56
 Epoch: 179, lr: 1.0e-02, train_loss: 0.8478, train_acc: 0.6936 test_loss: 0.8386, test_acc: 0.7070, best: 0.7116, time: 0:00:55
 Epoch: 180, lr: 2.0e-03, train_loss: 0.7756, train_acc: 0.7248 test_loss: 0.8022, test_acc: 0.7159, best: 0.7159, time: 0:00:56
 Epoch: 181, lr: 2.0e-03, train_loss: 0.7236, train_acc: 0.7458 test_loss: 0.7693, test_acc: 0.7332, best: 0.7332, time: 0:00:56
 Epoch: 182, lr: 2.0e-03, train_loss: 0.7146, train_acc: 0.7428 test_loss: 0.8137, test_acc: 0.7269, best: 0.7332, time: 0:00:56
 Epoch: 183, lr: 2.0e-03, train_loss: 0.7129, train_acc: 0.7434 test_loss: 0.8136, test_acc: 0.7220, best: 0.7332, time: 0:00:55
 Epoch: 184, lr: 2.0e-03, train_loss: 0.6998, train_acc: 0.7482 test_loss: 0.7832, test_acc: 0.7305, best: 0.7332, time: 0:00:55
 Epoch: 185, lr: 2.0e-03, train_loss: 0.7061, train_acc: 0.7442 test_loss: 0.7922, test_acc: 0.7330, best: 0.7332, time: 0:00:55
 Epoch: 186, lr: 2.0e-03, train_loss: 0.7085, train_acc: 0.7410 test_loss: 0.7925, test_acc: 0.7368, best: 0.7368, time: 0:00:56
 Epoch: 187, lr: 2.0e-03, train_loss: 0.6929, train_acc: 0.7444 test_loss: 0.8107, test_acc: 0.7294, best: 0.7368, time: 0:00:56
 Epoch: 188, lr: 2.0e-03, train_loss: 0.7261, train_acc: 0.7388 test_loss: 0.7916, test_acc: 0.7249, best: 0.7368, time: 0:00:55
 Epoch: 189, lr: 2.0e-03, train_loss: 0.7177, train_acc: 0.7408 test_loss: 0.8133, test_acc: 0.7230, best: 0.7368, time: 0:00:56
 Epoch: 190, lr: 2.0e-03, train_loss: 0.7033, train_acc: 0.7468 test_loss: 0.7774, test_acc: 0.7346, best: 0.7368, time: 0:00:55
 Epoch: 191, lr: 2.0e-03, train_loss: 0.6919, train_acc: 0.7462 test_loss: 0.7928, test_acc: 0.7369, best: 0.7369, time: 0:00:56
 Epoch: 192, lr: 2.0e-03, train_loss: 0.6877, train_acc: 0.7510 test_loss: 0.7958, test_acc: 0.7344, best: 0.7369, time: 0:00:55
 Epoch: 193, lr: 2.0e-03, train_loss: 0.6676, train_acc: 0.7626 test_loss: 0.7884, test_acc: 0.7344, best: 0.7369, time: 0:00:55
 Epoch: 194, lr: 2.0e-03, train_loss: 0.6835, train_acc: 0.7522 test_loss: 0.7944, test_acc: 0.7285, best: 0.7369, time: 0:00:56
 Epoch: 195, lr: 2.0e-03, train_loss: 0.6983, train_acc: 0.7526 test_loss: 0.7798, test_acc: 0.7369, best: 0.7369, time: 0:00:56
 Epoch: 196, lr: 2.0e-03, train_loss: 0.6694, train_acc: 0.7580 test_loss: 0.8027, test_acc: 0.7334, best: 0.7369, time: 0:00:55
 Epoch: 197, lr: 2.0e-03, train_loss: 0.6797, train_acc: 0.7574 test_loss: 0.7968, test_acc: 0.7325, best: 0.7369, time: 0:00:55
 Epoch: 198, lr: 2.0e-03, train_loss: 0.6615, train_acc: 0.7588 test_loss: 0.8129, test_acc: 0.7310, best: 0.7369, time: 0:00:56
 Epoch: 199, lr: 2.0e-03, train_loss: 0.6705, train_acc: 0.7634 test_loss: 0.7908, test_acc: 0.7338, best: 0.7369, time: 0:00:55
 Epoch: 200, lr: 2.0e-03, train_loss: 0.6633, train_acc: 0.7604 test_loss: 0.8039, test_acc: 0.7301, best: 0.7369, time: 0:00:55
 Epoch: 201, lr: 2.0e-03, train_loss: 0.6583, train_acc: 0.7596 test_loss: 0.8179, test_acc: 0.7302, best: 0.7369, time: 0:00:55
 Epoch: 202, lr: 2.0e-03, train_loss: 0.6784, train_acc: 0.7568 test_loss: 0.8184, test_acc: 0.7295, best: 0.7369, time: 0:00:56
 Epoch: 203, lr: 2.0e-03, train_loss: 0.6537, train_acc: 0.7666 test_loss: 0.7999, test_acc: 0.7345, best: 0.7369, time: 0:00:55
 Epoch: 204, lr: 2.0e-03, train_loss: 0.6581, train_acc: 0.7608 test_loss: 0.8018, test_acc: 0.7286, best: 0.7369, time: 0:00:56
 Epoch: 205, lr: 2.0e-03, train_loss: 0.6683, train_acc: 0.7650 test_loss: 0.8228, test_acc: 0.7334, best: 0.7369, time: 0:00:56
 Epoch: 206, lr: 2.0e-03, train_loss: 0.6701, train_acc: 0.7554 test_loss: 0.8312, test_acc: 0.7251, best: 0.7369, time: 0:00:55
 Epoch: 207, lr: 2.0e-03, train_loss: 0.6679, train_acc: 0.7598 test_loss: 0.8121, test_acc: 0.7315, best: 0.7369, time: 0:00:55
 Epoch: 208, lr: 2.0e-03, train_loss: 0.6543, train_acc: 0.7620 test_loss: 0.7881, test_acc: 0.7371, best: 0.7371, time: 0:00:56
 Epoch: 209, lr: 2.0e-03, train_loss: 0.6385, train_acc: 0.7676 test_loss: 0.7943, test_acc: 0.7318, best: 0.7371, time: 0:00:56
 Epoch: 210, lr: 2.0e-03, train_loss: 0.6495, train_acc: 0.7680 test_loss: 0.8241, test_acc: 0.7261, best: 0.7371, time: 0:00:55
 Epoch: 211, lr: 2.0e-03, train_loss: 0.6469, train_acc: 0.7730 test_loss: 0.8011, test_acc: 0.7358, best: 0.7371, time: 0:00:56
 Epoch: 212, lr: 2.0e-03, train_loss: 0.6578, train_acc: 0.7680 test_loss: 0.7920, test_acc: 0.7350, best: 0.7371, time: 0:00:56
 Epoch: 213, lr: 2.0e-03, train_loss: 0.6458, train_acc: 0.7716 test_loss: 0.7930, test_acc: 0.7338, best: 0.7371, time: 0:00:56
 Epoch: 214, lr: 2.0e-03, train_loss: 0.6492, train_acc: 0.7618 test_loss: 0.7868, test_acc: 0.7345, best: 0.7371, time: 0:00:56
 Epoch: 215, lr: 2.0e-03, train_loss: 0.6558, train_acc: 0.7590 test_loss: 0.7980, test_acc: 0.7349, best: 0.7371, time: 0:00:55
 Epoch: 216, lr: 2.0e-03, train_loss: 0.6454, train_acc: 0.7690 test_loss: 0.8241, test_acc: 0.7300, best: 0.7371, time: 0:00:55
 Epoch: 217, lr: 2.0e-03, train_loss: 0.6369, train_acc: 0.7744 test_loss: 0.7897, test_acc: 0.7349, best: 0.7371, time: 0:00:55
 Epoch: 218, lr: 2.0e-03, train_loss: 0.6224, train_acc: 0.7758 test_loss: 0.8061, test_acc: 0.7348, best: 0.7371, time: 0:00:56
 Epoch: 219, lr: 2.0e-03, train_loss: 0.6265, train_acc: 0.7742 test_loss: 0.8224, test_acc: 0.7325, best: 0.7371, time: 0:00:56
 Epoch: 220, lr: 2.0e-03, train_loss: 0.6229, train_acc: 0.7750 test_loss: 0.8281, test_acc: 0.7310, best: 0.7371, time: 0:00:56
 Epoch: 221, lr: 2.0e-03, train_loss: 0.6490, train_acc: 0.7704 test_loss: 0.8008, test_acc: 0.7346, best: 0.7371, time: 0:00:55
 Epoch: 222, lr: 2.0e-03, train_loss: 0.6105, train_acc: 0.7822 test_loss: 0.8171, test_acc: 0.7291, best: 0.7371, time: 0:00:56
 Epoch: 223, lr: 2.0e-03, train_loss: 0.6504, train_acc: 0.7678 test_loss: 0.8341, test_acc: 0.7245, best: 0.7371, time: 0:00:56
 Epoch: 224, lr: 2.0e-03, train_loss: 0.6570, train_acc: 0.7610 test_loss: 0.7903, test_acc: 0.7358, best: 0.7371, time: 0:00:56
 Epoch: 225, lr: 2.0e-03, train_loss: 0.6326, train_acc: 0.7704 test_loss: 0.7959, test_acc: 0.7344, best: 0.7371, time: 0:00:56
 Epoch: 226, lr: 2.0e-03, train_loss: 0.6233, train_acc: 0.7800 test_loss: 0.8074, test_acc: 0.7330, best: 0.7371, time: 0:00:56
 Epoch: 227, lr: 2.0e-03, train_loss: 0.6559, train_acc: 0.7620 test_loss: 0.7878, test_acc: 0.7398, best: 0.7398, time: 0:00:55
 Epoch: 228, lr: 2.0e-03, train_loss: 0.6364, train_acc: 0.7724 test_loss: 0.8370, test_acc: 0.7285, best: 0.7398, time: 0:00:55
 Epoch: 229, lr: 2.0e-03, train_loss: 0.6207, train_acc: 0.7770 test_loss: 0.8186, test_acc: 0.7294, best: 0.7398, time: 0:00:55
 Epoch: 230, lr: 2.0e-03, train_loss: 0.6306, train_acc: 0.7758 test_loss: 0.7813, test_acc: 0.7409, best: 0.7409, time: 0:00:56
 Epoch: 231, lr: 2.0e-03, train_loss: 0.6416, train_acc: 0.7704 test_loss: 0.8243, test_acc: 0.7298, best: 0.7409, time: 0:00:56
 Epoch: 232, lr: 2.0e-03, train_loss: 0.6086, train_acc: 0.7868 test_loss: 0.8445, test_acc: 0.7291, best: 0.7409, time: 0:00:55
 Epoch: 233, lr: 2.0e-03, train_loss: 0.6309, train_acc: 0.7704 test_loss: 0.8399, test_acc: 0.7291, best: 0.7409, time: 0:00:55
 Epoch: 234, lr: 2.0e-03, train_loss: 0.6206, train_acc: 0.7812 test_loss: 0.7955, test_acc: 0.7396, best: 0.7409, time: 0:00:55
 Epoch: 235, lr: 2.0e-03, train_loss: 0.6181, train_acc: 0.7792 test_loss: 0.8033, test_acc: 0.7378, best: 0.7409, time: 0:00:55
 Epoch: 236, lr: 2.0e-03, train_loss: 0.6326, train_acc: 0.7724 test_loss: 0.8444, test_acc: 0.7272, best: 0.7409, time: 0:00:55
 Epoch: 237, lr: 2.0e-03, train_loss: 0.6007, train_acc: 0.7830 test_loss: 0.8265, test_acc: 0.7315, best: 0.7409, time: 0:00:55
 Epoch: 238, lr: 2.0e-03, train_loss: 0.5813, train_acc: 0.7886 test_loss: 0.7988, test_acc: 0.7351, best: 0.7409, time: 0:00:55
 Epoch: 239, lr: 2.0e-03, train_loss: 0.6123, train_acc: 0.7876 test_loss: 0.8152, test_acc: 0.7320, best: 0.7409, time: 0:00:55
 Epoch: 240, lr: 4.0e-04, train_loss: 0.5879, train_acc: 0.7914 test_loss: 0.7954, test_acc: 0.7408, best: 0.7409, time: 0:00:56
 Epoch: 241, lr: 4.0e-04, train_loss: 0.6049, train_acc: 0.7836 test_loss: 0.8118, test_acc: 0.7358, best: 0.7409, time: 0:00:55
 Epoch: 242, lr: 4.0e-04, train_loss: 0.6146, train_acc: 0.7846 test_loss: 0.7877, test_acc: 0.7408, best: 0.7409, time: 0:00:55
 Epoch: 243, lr: 4.0e-04, train_loss: 0.5950, train_acc: 0.7876 test_loss: 0.7953, test_acc: 0.7371, best: 0.7409, time: 0:00:55
 Epoch: 244, lr: 4.0e-04, train_loss: 0.5880, train_acc: 0.7856 test_loss: 0.7886, test_acc: 0.7370, best: 0.7409, time: 0:00:55
 Epoch: 245, lr: 4.0e-04, train_loss: 0.5726, train_acc: 0.7912 test_loss: 0.8342, test_acc: 0.7330, best: 0.7409, time: 0:00:55
 Epoch: 246, lr: 4.0e-04, train_loss: 0.5935, train_acc: 0.7872 test_loss: 0.8078, test_acc: 0.7396, best: 0.7409, time: 0:00:55
 Epoch: 247, lr: 4.0e-04, train_loss: 0.5784, train_acc: 0.8014 test_loss: 0.8354, test_acc: 0.7364, best: 0.7409, time: 0:00:55
 Epoch: 248, lr: 4.0e-04, train_loss: 0.5892, train_acc: 0.7918 test_loss: 0.8343, test_acc: 0.7339, best: 0.7409, time: 0:00:55
 Epoch: 249, lr: 4.0e-04, train_loss: 0.5734, train_acc: 0.7984 test_loss: 0.8222, test_acc: 0.7378, best: 0.7409, time: 0:00:55
 Epoch: 250, lr: 4.0e-04, train_loss: 0.5789, train_acc: 0.7862 test_loss: 0.8069, test_acc: 0.7401, best: 0.7409, time: 0:00:56
 Epoch: 251, lr: 4.0e-04, train_loss: 0.5935, train_acc: 0.7916 test_loss: 0.8156, test_acc: 0.7356, best: 0.7409, time: 0:00:55
 Epoch: 252, lr: 4.0e-04, train_loss: 0.5568, train_acc: 0.8056 test_loss: 0.8285, test_acc: 0.7370, best: 0.7409, time: 0:00:55
 Epoch: 253, lr: 4.0e-04, train_loss: 0.5863, train_acc: 0.7958 test_loss: 0.8238, test_acc: 0.7374, best: 0.7409, time: 0:00:55
 Epoch: 254, lr: 4.0e-04, train_loss: 0.5830, train_acc: 0.7904 test_loss: 0.8058, test_acc: 0.7428, best: 0.7428, time: 0:00:55
 Epoch: 255, lr: 4.0e-04, train_loss: 0.6006, train_acc: 0.7850 test_loss: 0.8126, test_acc: 0.7366, best: 0.7428, time: 0:00:55
 Epoch: 256, lr: 4.0e-04, train_loss: 0.5807, train_acc: 0.7900 test_loss: 0.8087, test_acc: 0.7386, best: 0.7428, time: 0:00:55
 Epoch: 257, lr: 4.0e-04, train_loss: 0.5723, train_acc: 0.7994 test_loss: 0.8218, test_acc: 0.7369, best: 0.7428, time: 0:00:55
 Epoch: 258, lr: 4.0e-04, train_loss: 0.6019, train_acc: 0.7852 test_loss: 0.8148, test_acc: 0.7406, best: 0.7428, time: 0:00:55
 Epoch: 259, lr: 4.0e-04, train_loss: 0.5775, train_acc: 0.7968 test_loss: 0.8122, test_acc: 0.7380, best: 0.7428, time: 0:00:55
 Epoch: 260, lr: 4.0e-04, train_loss: 0.5884, train_acc: 0.7828 test_loss: 0.8054, test_acc: 0.7421, best: 0.7428, time: 0:00:55
 Epoch: 261, lr: 4.0e-04, train_loss: 0.5730, train_acc: 0.7952 test_loss: 0.7954, test_acc: 0.7436, best: 0.7436, time: 0:00:55
 Epoch: 262, lr: 4.0e-04, train_loss: 0.5672, train_acc: 0.8012 test_loss: 0.7936, test_acc: 0.7418, best: 0.7436, time: 0:00:55
 Epoch: 263, lr: 4.0e-04, train_loss: 0.5842, train_acc: 0.7926 test_loss: 0.8048, test_acc: 0.7422, best: 0.7436, time: 0:00:55
 Epoch: 264, lr: 4.0e-04, train_loss: 0.5691, train_acc: 0.7962 test_loss: 0.8092, test_acc: 0.7365, best: 0.7436, time: 0:00:55
 Epoch: 265, lr: 4.0e-04, train_loss: 0.5711, train_acc: 0.7950 test_loss: 0.8200, test_acc: 0.7386, best: 0.7436, time: 0:00:55
 Epoch: 266, lr: 4.0e-04, train_loss: 0.5634, train_acc: 0.8010 test_loss: 0.8000, test_acc: 0.7449, best: 0.7449, time: 0:00:55
 Epoch: 267, lr: 4.0e-04, train_loss: 0.5702, train_acc: 0.7958 test_loss: 0.8124, test_acc: 0.7414, best: 0.7449, time: 0:00:55
 Epoch: 268, lr: 4.0e-04, train_loss: 0.5892, train_acc: 0.7888 test_loss: 0.8347, test_acc: 0.7374, best: 0.7449, time: 0:00:55
 Epoch: 269, lr: 4.0e-04, train_loss: 0.5520, train_acc: 0.8044 test_loss: 0.7994, test_acc: 0.7420, best: 0.7449, time: 0:00:55
 Epoch: 270, lr: 8.0e-05, train_loss: 0.5947, train_acc: 0.7946 test_loss: 0.8133, test_acc: 0.7406, best: 0.7449, time: 0:00:55
 Epoch: 271, lr: 8.0e-05, train_loss: 0.5500, train_acc: 0.8050 test_loss: 0.8022, test_acc: 0.7419, best: 0.7449, time: 0:00:55
 Epoch: 272, lr: 8.0e-05, train_loss: 0.5763, train_acc: 0.7890 test_loss: 0.8167, test_acc: 0.7411, best: 0.7449, time: 0:00:55
 Epoch: 273, lr: 8.0e-05, train_loss: 0.5723, train_acc: 0.7992 test_loss: 0.8237, test_acc: 0.7421, best: 0.7449, time: 0:00:55
 Epoch: 274, lr: 8.0e-05, train_loss: 0.5980, train_acc: 0.7916 test_loss: 0.8040, test_acc: 0.7414, best: 0.7449, time: 0:00:55
 Epoch: 275, lr: 8.0e-05, train_loss: 0.5632, train_acc: 0.7994 test_loss: 0.8120, test_acc: 0.7439, best: 0.7449, time: 0:00:55
 Epoch: 276, lr: 8.0e-05, train_loss: 0.5705, train_acc: 0.7942 test_loss: 0.8208, test_acc: 0.7400, best: 0.7449, time: 0:00:55
 Epoch: 277, lr: 8.0e-05, train_loss: 0.5722, train_acc: 0.7990 test_loss: 0.8223, test_acc: 0.7405, best: 0.7449, time: 0:00:55
 Epoch: 278, lr: 8.0e-05, train_loss: 0.5862, train_acc: 0.7886 test_loss: 0.8090, test_acc: 0.7421, best: 0.7449, time: 0:00:55
 Epoch: 279, lr: 8.0e-05, train_loss: 0.5767, train_acc: 0.7982 test_loss: 0.8112, test_acc: 0.7384, best: 0.7449, time: 0:00:55
 Epoch: 280, lr: 8.0e-05, train_loss: 0.5591, train_acc: 0.8044 test_loss: 0.7865, test_acc: 0.7432, best: 0.7449, time: 0:00:55
 Epoch: 281, lr: 8.0e-05, train_loss: 0.5721, train_acc: 0.7926 test_loss: 0.8071, test_acc: 0.7425, best: 0.7449, time: 0:00:55
 Epoch: 282, lr: 8.0e-05, train_loss: 0.5637, train_acc: 0.7996 test_loss: 0.8055, test_acc: 0.7434, best: 0.7449, time: 0:00:55
 Epoch: 283, lr: 8.0e-05, train_loss: 0.5783, train_acc: 0.7966 test_loss: 0.8089, test_acc: 0.7370, best: 0.7449, time: 0:00:55
 Epoch: 284, lr: 8.0e-05, train_loss: 0.5604, train_acc: 0.7996 test_loss: 0.8013, test_acc: 0.7424, best: 0.7449, time: 0:00:55
 Epoch: 285, lr: 8.0e-05, train_loss: 0.5534, train_acc: 0.8082 test_loss: 0.8274, test_acc: 0.7411, best: 0.7449, time: 0:00:55
 Epoch: 286, lr: 8.0e-05, train_loss: 0.5706, train_acc: 0.7992 test_loss: 0.8098, test_acc: 0.7428, best: 0.7449, time: 0:00:55
 Epoch: 287, lr: 8.0e-05, train_loss: 0.5707, train_acc: 0.7950 test_loss: 0.8072, test_acc: 0.7426, best: 0.7449, time: 0:00:55
 Epoch: 288, lr: 8.0e-05, train_loss: 0.5829, train_acc: 0.7870 test_loss: 0.8108, test_acc: 0.7440, best: 0.7449, time: 0:00:56
 Epoch: 289, lr: 8.0e-05, train_loss: 0.5849, train_acc: 0.7968 test_loss: 0.8145, test_acc: 0.7406, best: 0.7449, time: 0:00:56
 Epoch: 290, lr: 8.0e-05, train_loss: 0.5472, train_acc: 0.8032 test_loss: 0.8091, test_acc: 0.7444, best: 0.7449, time: 0:00:56
 Epoch: 291, lr: 8.0e-05, train_loss: 0.5643, train_acc: 0.7980 test_loss: 0.8107, test_acc: 0.7418, best: 0.7449, time: 0:00:55
 Epoch: 292, lr: 8.0e-05, train_loss: 0.5702, train_acc: 0.7990 test_loss: 0.7997, test_acc: 0.7456, best: 0.7456, time: 0:00:56
 Epoch: 293, lr: 8.0e-05, train_loss: 0.5731, train_acc: 0.8008 test_loss: 0.7920, test_acc: 0.7445, best: 0.7456, time: 0:00:55
 Epoch: 294, lr: 8.0e-05, train_loss: 0.5670, train_acc: 0.7930 test_loss: 0.8156, test_acc: 0.7436, best: 0.7456, time: 0:00:55
 Epoch: 295, lr: 8.0e-05, train_loss: 0.5773, train_acc: 0.7960 test_loss: 0.8097, test_acc: 0.7414, best: 0.7456, time: 0:00:54
 Epoch: 296, lr: 8.0e-05, train_loss: 0.5600, train_acc: 0.8014 test_loss: 0.8016, test_acc: 0.7438, best: 0.7456, time: 0:00:52
 Epoch: 297, lr: 8.0e-05, train_loss: 0.5484, train_acc: 0.8090 test_loss: 0.7949, test_acc: 0.7414, best: 0.7456, time: 0:00:52
 Epoch: 298, lr: 8.0e-05, train_loss: 0.5764, train_acc: 0.7968 test_loss: 0.8172, test_acc: 0.7408, best: 0.7456, time: 0:00:52
 Epoch: 299, lr: 8.0e-05, train_loss: 0.5551, train_acc: 0.8086 test_loss: 0.8196, test_acc: 0.7402, best: 0.7456, time: 0:00:52
 Highest accuracy: 0.7456