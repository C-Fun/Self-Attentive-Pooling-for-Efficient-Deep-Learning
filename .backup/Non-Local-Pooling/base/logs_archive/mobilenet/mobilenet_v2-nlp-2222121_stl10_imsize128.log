
 Run on time: 2022-07-03 16:35:57.129932

 Architecture: mobilenet_v2-nlp-2222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 4,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 8,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 16,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 64,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET_V2-NLP-2222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 32)
                  (col_embed): Embedding(256, 32)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(128, 160, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 64)
                  (col_embed): Embedding(256, 64)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5654, train_acc: 0.1556 test_loss: 2.0558, test_acc: 0.2066, best: 0.2066, time: 0:02:05
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1500, train_acc: 0.1938 test_loss: 1.9588, test_acc: 0.2228, best: 0.2228, time: 0:02:05
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0967, train_acc: 0.2018 test_loss: 1.8933, test_acc: 0.2567, best: 0.2567, time: 0:02:05
 Epoch: 4, lr: 1.0e-02, train_loss: 2.0293, train_acc: 0.2178 test_loss: 1.9205, test_acc: 0.2569, best: 0.2569, time: 0:02:05
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9934, train_acc: 0.2400 test_loss: 1.8284, test_acc: 0.2860, best: 0.2860, time: 0:02:05
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9615, train_acc: 0.2418 test_loss: 1.7181, test_acc: 0.3174, best: 0.3174, time: 0:02:05
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9388, train_acc: 0.2614 test_loss: 1.8140, test_acc: 0.2871, best: 0.3174, time: 0:02:05
 Epoch: 8, lr: 1.0e-02, train_loss: 1.9459, train_acc: 0.2610 test_loss: 1.7894, test_acc: 0.3182, best: 0.3182, time: 0:02:05
 Epoch: 9, lr: 1.0e-02, train_loss: 1.9125, train_acc: 0.2714 test_loss: 1.7783, test_acc: 0.3434, best: 0.3434, time: 0:02:05
 Epoch: 10, lr: 1.0e-02, train_loss: 1.9001, train_acc: 0.2786 test_loss: 1.7187, test_acc: 0.3336, best: 0.3434, time: 0:02:05
 Epoch: 11, lr: 1.0e-02, train_loss: 1.8873, train_acc: 0.2802 test_loss: 1.7061, test_acc: 0.3438, best: 0.3438, time: 0:02:05
 Epoch: 12, lr: 1.0e-02, train_loss: 1.8537, train_acc: 0.2842 test_loss: 1.6221, test_acc: 0.3870, best: 0.3870, time: 0:02:05
 Epoch: 13, lr: 1.0e-02, train_loss: 1.8292, train_acc: 0.2970 test_loss: 1.6313, test_acc: 0.3715, best: 0.3870, time: 0:02:04
 Epoch: 14, lr: 1.0e-02, train_loss: 1.8020, train_acc: 0.3204 test_loss: 1.6190, test_acc: 0.3770, best: 0.3870, time: 0:02:04
 Epoch: 15, lr: 1.0e-02, train_loss: 1.7859, train_acc: 0.3082 test_loss: 1.5775, test_acc: 0.3969, best: 0.3969, time: 0:02:05
 Epoch: 16, lr: 1.0e-02, train_loss: 1.7785, train_acc: 0.3316 test_loss: 1.6287, test_acc: 0.3852, best: 0.3969, time: 0:02:05
 Epoch: 17, lr: 1.0e-02, train_loss: 1.7535, train_acc: 0.3234 test_loss: 1.6595, test_acc: 0.3691, best: 0.3969, time: 0:02:04
 Epoch: 18, lr: 1.0e-02, train_loss: 1.7517, train_acc: 0.3286 test_loss: 1.5415, test_acc: 0.4050, best: 0.4050, time: 0:02:05
 Epoch: 19, lr: 1.0e-02, train_loss: 1.7454, train_acc: 0.3352 test_loss: 1.5451, test_acc: 0.4091, best: 0.4091, time: 0:02:05
 Epoch: 20, lr: 1.0e-02, train_loss: 1.7551, train_acc: 0.3334 test_loss: 1.5181, test_acc: 0.4059, best: 0.4091, time: 0:02:05
 Epoch: 21, lr: 1.0e-02, train_loss: 1.7154, train_acc: 0.3514 test_loss: 1.5399, test_acc: 0.3950, best: 0.4091, time: 0:02:05
 Epoch: 22, lr: 1.0e-02, train_loss: 1.6978, train_acc: 0.3588 test_loss: 1.5045, test_acc: 0.4291, best: 0.4291, time: 0:02:05
 Epoch: 23, lr: 1.0e-02, train_loss: 1.6883, train_acc: 0.3532 test_loss: 1.6224, test_acc: 0.3780, best: 0.4291, time: 0:02:05
 Epoch: 24, lr: 1.0e-02, train_loss: 1.6692, train_acc: 0.3642 test_loss: 1.5835, test_acc: 0.4054, best: 0.4291, time: 0:02:05
 Epoch: 25, lr: 1.0e-02, train_loss: 1.6651, train_acc: 0.3680 test_loss: 1.5477, test_acc: 0.4088, best: 0.4291, time: 0:02:05
 Epoch: 26, lr: 1.0e-02, train_loss: 1.6338, train_acc: 0.3768 test_loss: 1.4424, test_acc: 0.4496, best: 0.4496, time: 0:02:05
 Epoch: 27, lr: 1.0e-02, train_loss: 1.6361, train_acc: 0.3802 test_loss: 1.4654, test_acc: 0.4439, best: 0.4496, time: 0:02:05
 Epoch: 28, lr: 1.0e-02, train_loss: 1.6058, train_acc: 0.3822 test_loss: 1.4599, test_acc: 0.4505, best: 0.4505, time: 0:02:05
 Epoch: 29, lr: 1.0e-02, train_loss: 1.7245, train_acc: 0.3456 test_loss: 1.5292, test_acc: 0.4191, best: 0.4505, time: 0:02:05
 Epoch: 30, lr: 1.0e-02, train_loss: 1.6953, train_acc: 0.3506 test_loss: 1.5203, test_acc: 0.4211, best: 0.4505, time: 0:02:05
 Epoch: 31, lr: 1.0e-02, train_loss: 1.6394, train_acc: 0.3822 test_loss: 1.4612, test_acc: 0.4426, best: 0.4505, time: 0:02:05
 Epoch: 32, lr: 1.0e-02, train_loss: 1.6347, train_acc: 0.3778 test_loss: 1.4258, test_acc: 0.4667, best: 0.4667, time: 0:02:05
 Epoch: 33, lr: 1.0e-02, train_loss: 1.5991, train_acc: 0.3958 test_loss: 1.4141, test_acc: 0.4681, best: 0.4681, time: 0:02:05
 Epoch: 34, lr: 1.0e-02, train_loss: 1.5566, train_acc: 0.4166 test_loss: 1.3977, test_acc: 0.4791, best: 0.4791, time: 0:02:05
 Epoch: 35, lr: 1.0e-02, train_loss: 1.5562, train_acc: 0.4214 test_loss: 1.4117, test_acc: 0.4783, best: 0.4791, time: 0:02:05
 Epoch: 36, lr: 1.0e-02, train_loss: 1.5432, train_acc: 0.4224 test_loss: 1.3608, test_acc: 0.4975, best: 0.4975, time: 0:02:05
 Epoch: 37, lr: 1.0e-02, train_loss: 1.5451, train_acc: 0.4254 test_loss: 1.2871, test_acc: 0.5258, best: 0.5258, time: 0:02:05
 Epoch: 38, lr: 1.0e-02, train_loss: 1.5167, train_acc: 0.4290 test_loss: 1.4394, test_acc: 0.4650, best: 0.5258, time: 0:02:05
 Epoch: 39, lr: 1.0e-02, train_loss: 1.5550, train_acc: 0.4226 test_loss: 1.4363, test_acc: 0.4677, best: 0.5258, time: 0:02:05
 Epoch: 40, lr: 1.0e-02, train_loss: 1.5072, train_acc: 0.4346 test_loss: 1.3592, test_acc: 0.5099, best: 0.5258, time: 0:02:05
 Epoch: 41, lr: 1.0e-02, train_loss: 1.4968, train_acc: 0.4356 test_loss: 1.3643, test_acc: 0.4986, best: 0.5258, time: 0:02:05
 Epoch: 42, lr: 1.0e-02, train_loss: 1.4822, train_acc: 0.4546 test_loss: 1.3799, test_acc: 0.4956, best: 0.5258, time: 0:02:04
 Epoch: 43, lr: 1.0e-02, train_loss: 1.4540, train_acc: 0.4552 test_loss: 1.3525, test_acc: 0.5016, best: 0.5258, time: 0:02:05
 Epoch: 44, lr: 1.0e-02, train_loss: 1.4316, train_acc: 0.4698 test_loss: 1.3160, test_acc: 0.5200, best: 0.5258, time: 0:02:05
 Epoch: 45, lr: 1.0e-02, train_loss: 1.4243, train_acc: 0.4682 test_loss: 1.3064, test_acc: 0.5325, best: 0.5325, time: 0:02:05
 Epoch: 46, lr: 1.0e-02, train_loss: 1.4202, train_acc: 0.4746 test_loss: 1.3085, test_acc: 0.5179, best: 0.5325, time: 0:02:05
 Epoch: 47, lr: 1.0e-02, train_loss: 1.4184, train_acc: 0.4742 test_loss: 1.2995, test_acc: 0.5190, best: 0.5325, time: 0:02:05
 Epoch: 48, lr: 1.0e-02, train_loss: 1.4067, train_acc: 0.4786 test_loss: 1.1896, test_acc: 0.5689, best: 0.5689, time: 0:02:05
 Epoch: 49, lr: 1.0e-02, train_loss: 1.3857, train_acc: 0.4840 test_loss: 1.2017, test_acc: 0.5535, best: 0.5689, time: 0:02:05
 Epoch: 50, lr: 1.0e-02, train_loss: 1.3921, train_acc: 0.4890 test_loss: 1.1764, test_acc: 0.5680, best: 0.5689, time: 0:02:05
 Epoch: 51, lr: 1.0e-02, train_loss: 1.3692, train_acc: 0.4980 test_loss: 1.1777, test_acc: 0.5714, best: 0.5714, time: 0:02:05
 Epoch: 52, lr: 1.0e-02, train_loss: 1.3573, train_acc: 0.5008 test_loss: 1.2135, test_acc: 0.5560, best: 0.5714, time: 0:02:05
 Epoch: 53, lr: 1.0e-02, train_loss: 1.3442, train_acc: 0.4996 test_loss: 1.1641, test_acc: 0.5806, best: 0.5806, time: 0:02:05
 Epoch: 54, lr: 1.0e-02, train_loss: 1.3331, train_acc: 0.5128 test_loss: 1.1931, test_acc: 0.5605, best: 0.5806, time: 0:02:05
 Epoch: 55, lr: 1.0e-02, train_loss: 1.3253, train_acc: 0.5146 test_loss: 1.2025, test_acc: 0.5647, best: 0.5806, time: 0:02:05
 Epoch: 56, lr: 1.0e-02, train_loss: 1.3088, train_acc: 0.5266 test_loss: 1.1450, test_acc: 0.5919, best: 0.5919, time: 0:02:05
 Epoch: 57, lr: 1.0e-02, train_loss: 1.3456, train_acc: 0.5138 test_loss: 1.1750, test_acc: 0.5766, best: 0.5919, time: 0:02:05
 Epoch: 58, lr: 1.0e-02, train_loss: 1.3363, train_acc: 0.5154 test_loss: 1.2103, test_acc: 0.5591, best: 0.5919, time: 0:02:05
 Epoch: 59, lr: 1.0e-02, train_loss: 1.3229, train_acc: 0.5188 test_loss: 1.1377, test_acc: 0.5853, best: 0.5919, time: 0:02:05
 Epoch: 60, lr: 1.0e-02, train_loss: 1.3204, train_acc: 0.5134 test_loss: 1.1614, test_acc: 0.5851, best: 0.5919, time: 0:02:05
 Epoch: 61, lr: 1.0e-02, train_loss: 1.2983, train_acc: 0.5186 test_loss: 1.1822, test_acc: 0.5774, best: 0.5919, time: 0:02:05
 Epoch: 62, lr: 1.0e-02, train_loss: 1.2627, train_acc: 0.5398 test_loss: 1.1457, test_acc: 0.5813, best: 0.5919, time: 0:02:05
 Epoch: 63, lr: 1.0e-02, train_loss: 1.3004, train_acc: 0.5250 test_loss: 1.1149, test_acc: 0.5920, best: 0.5920, time: 0:02:05
 Epoch: 64, lr: 1.0e-02, train_loss: 1.2817, train_acc: 0.5316 test_loss: 1.1054, test_acc: 0.6030, best: 0.6030, time: 0:02:05
 Epoch: 65, lr: 1.0e-02, train_loss: 1.2976, train_acc: 0.5288 test_loss: 1.1547, test_acc: 0.5899, best: 0.6030, time: 0:02:05
 Epoch: 66, lr: 1.0e-02, train_loss: 1.2940, train_acc: 0.5282 test_loss: 1.1412, test_acc: 0.5791, best: 0.6030, time: 0:02:05
 Epoch: 67, lr: 1.0e-02, train_loss: 1.2706, train_acc: 0.5298 test_loss: 1.1197, test_acc: 0.5887, best: 0.6030, time: 0:02:05
 Epoch: 68, lr: 1.0e-02, train_loss: 1.2662, train_acc: 0.5332 test_loss: 1.0660, test_acc: 0.6184, best: 0.6184, time: 0:02:05
 Epoch: 69, lr: 1.0e-02, train_loss: 1.2529, train_acc: 0.5294 test_loss: 1.0938, test_acc: 0.6106, best: 0.6184, time: 0:02:05
 Epoch: 70, lr: 1.0e-02, train_loss: 1.2158, train_acc: 0.5546 test_loss: 1.1357, test_acc: 0.5893, best: 0.6184, time: 0:02:05
 Epoch: 71, lr: 1.0e-02, train_loss: 1.2343, train_acc: 0.5442 test_loss: 1.1593, test_acc: 0.5857, best: 0.6184, time: 0:02:05
 Epoch: 72, lr: 1.0e-02, train_loss: 1.2229, train_acc: 0.5550 test_loss: 1.0347, test_acc: 0.6260, best: 0.6260, time: 0:02:06
 Epoch: 73, lr: 1.0e-02, train_loss: 1.2274, train_acc: 0.5560 test_loss: 1.0371, test_acc: 0.6148, best: 0.6260, time: 0:02:05
 Epoch: 74, lr: 1.0e-02, train_loss: 1.2077, train_acc: 0.5540 test_loss: 1.0585, test_acc: 0.6189, best: 0.6260, time: 0:02:05
 Epoch: 75, lr: 1.0e-02, train_loss: 1.2014, train_acc: 0.5662 test_loss: 1.0238, test_acc: 0.6308, best: 0.6308, time: 0:02:06
 Epoch: 76, lr: 1.0e-02, train_loss: 1.2237, train_acc: 0.5562 test_loss: 0.9965, test_acc: 0.6408, best: 0.6408, time: 0:02:05
 Epoch: 77, lr: 1.0e-02, train_loss: 1.1857, train_acc: 0.5670 test_loss: 1.0394, test_acc: 0.6232, best: 0.6408, time: 0:02:05
 Epoch: 78, lr: 1.0e-02, train_loss: 1.1625, train_acc: 0.5762 test_loss: 1.0017, test_acc: 0.6342, best: 0.6408, time: 0:02:05
 Epoch: 79, lr: 1.0e-02, train_loss: 1.1681, train_acc: 0.5702 test_loss: 1.0597, test_acc: 0.6169, best: 0.6408, time: 0:02:05
 Epoch: 80, lr: 1.0e-02, train_loss: 1.1830, train_acc: 0.5614 test_loss: 1.0194, test_acc: 0.6339, best: 0.6408, time: 0:02:05
 Epoch: 81, lr: 1.0e-02, train_loss: 1.1698, train_acc: 0.5742 test_loss: 1.0972, test_acc: 0.6062, best: 0.6408, time: 0:02:05
 Epoch: 82, lr: 1.0e-02, train_loss: 1.1621, train_acc: 0.5804 test_loss: 1.0456, test_acc: 0.6202, best: 0.6408, time: 0:02:05
 Epoch: 83, lr: 1.0e-02, train_loss: 1.1702, train_acc: 0.5738 test_loss: 1.0676, test_acc: 0.6182, best: 0.6408, time: 0:02:05
 Epoch: 84, lr: 1.0e-02, train_loss: 1.1993, train_acc: 0.5636 test_loss: 1.0351, test_acc: 0.6289, best: 0.6408, time: 0:02:05
 Epoch: 85, lr: 1.0e-02, train_loss: 1.1504, train_acc: 0.5792 test_loss: 1.0945, test_acc: 0.6072, best: 0.6408, time: 0:02:05
 Epoch: 86, lr: 1.0e-02, train_loss: 1.1233, train_acc: 0.5998 test_loss: 0.9969, test_acc: 0.6421, best: 0.6421, time: 0:02:05
 Epoch: 87, lr: 1.0e-02, train_loss: 1.1542, train_acc: 0.5730 test_loss: 0.9899, test_acc: 0.6439, best: 0.6439, time: 0:02:05
 Epoch: 88, lr: 1.0e-02, train_loss: 1.1285, train_acc: 0.5864 test_loss: 1.0642, test_acc: 0.6179, best: 0.6439, time: 0:02:05
 Epoch: 89, lr: 1.0e-02, train_loss: 1.0913, train_acc: 0.6040 test_loss: 1.0191, test_acc: 0.6309, best: 0.6439, time: 0:02:05
 Epoch: 90, lr: 1.0e-02, train_loss: 1.1308, train_acc: 0.5838 test_loss: 1.0228, test_acc: 0.6325, best: 0.6439, time: 0:02:05
 Epoch: 91, lr: 1.0e-02, train_loss: 1.1226, train_acc: 0.5954 test_loss: 0.9916, test_acc: 0.6428, best: 0.6439, time: 0:02:05
 Epoch: 92, lr: 1.0e-02, train_loss: 1.0962, train_acc: 0.6062 test_loss: 1.0395, test_acc: 0.6329, best: 0.6439, time: 0:02:05
 Epoch: 93, lr: 1.0e-02, train_loss: 1.0961, train_acc: 0.5968 test_loss: 1.0084, test_acc: 0.6414, best: 0.6439, time: 0:02:05
 Epoch: 94, lr: 1.0e-02, train_loss: 1.0690, train_acc: 0.6226 test_loss: 1.0173, test_acc: 0.6402, best: 0.6439, time: 0:02:05
 Epoch: 95, lr: 1.0e-02, train_loss: 1.0874, train_acc: 0.6096 test_loss: 0.9883, test_acc: 0.6441, best: 0.6441, time: 0:02:05
 Epoch: 96, lr: 1.0e-02, train_loss: 1.1017, train_acc: 0.6014 test_loss: 1.0283, test_acc: 0.6374, best: 0.6441, time: 0:02:05
 Epoch: 97, lr: 1.0e-02, train_loss: 1.0697, train_acc: 0.6154 test_loss: 1.0362, test_acc: 0.6304, best: 0.6441, time: 0:02:05
 Epoch: 98, lr: 1.0e-02, train_loss: 1.0821, train_acc: 0.6078 test_loss: 0.9762, test_acc: 0.6470, best: 0.6470, time: 0:02:05
 Epoch: 99, lr: 1.0e-02, train_loss: 1.0525, train_acc: 0.6264 test_loss: 0.9678, test_acc: 0.6565, best: 0.6565, time: 0:02:05
 Epoch: 100, lr: 1.0e-02, train_loss: 1.0647, train_acc: 0.6114 test_loss: 1.0329, test_acc: 0.6372, best: 0.6565, time: 0:02:05
 Epoch: 101, lr: 1.0e-02, train_loss: 1.0704, train_acc: 0.6170 test_loss: 0.9945, test_acc: 0.6461, best: 0.6565, time: 0:02:05
 Epoch: 102, lr: 1.0e-02, train_loss: 1.0329, train_acc: 0.6224 test_loss: 0.9673, test_acc: 0.6514, best: 0.6565, time: 0:02:05
 Epoch: 103, lr: 1.0e-02, train_loss: 1.0578, train_acc: 0.6088 test_loss: 0.9677, test_acc: 0.6552, best: 0.6565, time: 0:02:05
 Epoch: 104, lr: 1.0e-02, train_loss: 1.0847, train_acc: 0.6076 test_loss: 1.0481, test_acc: 0.6281, best: 0.6565, time: 0:02:05
 Epoch: 105, lr: 1.0e-02, train_loss: 1.0885, train_acc: 0.6010 test_loss: 0.9771, test_acc: 0.6395, best: 0.6565, time: 0:02:05
 Epoch: 106, lr: 1.0e-02, train_loss: 1.0409, train_acc: 0.6282 test_loss: 0.9739, test_acc: 0.6518, best: 0.6565, time: 0:02:05
 Epoch: 107, lr: 1.0e-02, train_loss: 1.0301, train_acc: 0.6256 test_loss: 1.0065, test_acc: 0.6399, best: 0.6565, time: 0:02:05
 Epoch: 108, lr: 1.0e-02, train_loss: 1.0361, train_acc: 0.6288 test_loss: 0.8911, test_acc: 0.6793, best: 0.6793, time: 0:02:05
 Epoch: 109, lr: 1.0e-02, train_loss: 1.0045, train_acc: 0.6404 test_loss: 1.1013, test_acc: 0.6152, best: 0.6793, time: 0:02:05
 Epoch: 110, lr: 1.0e-02, train_loss: 1.0174, train_acc: 0.6338 test_loss: 0.9333, test_acc: 0.6627, best: 0.6793, time: 0:02:05
 Epoch: 111, lr: 1.0e-02, train_loss: 1.0164, train_acc: 0.6304 test_loss: 0.9659, test_acc: 0.6468, best: 0.6793, time: 0:02:05
 Epoch: 112, lr: 1.0e-02, train_loss: 1.0132, train_acc: 0.6330 test_loss: 0.9017, test_acc: 0.6805, best: 0.6805, time: 0:02:05
 Epoch: 113, lr: 1.0e-02, train_loss: 1.0173, train_acc: 0.6332 test_loss: 0.9004, test_acc: 0.6810, best: 0.6810, time: 0:02:05
 Epoch: 114, lr: 1.0e-02, train_loss: 1.0019, train_acc: 0.6388 test_loss: 0.9309, test_acc: 0.6665, best: 0.6810, time: 0:02:05
 Epoch: 115, lr: 1.0e-02, train_loss: 1.0136, train_acc: 0.6400 test_loss: 0.9723, test_acc: 0.6569, best: 0.6810, time: 0:02:05
 Epoch: 116, lr: 1.0e-02, train_loss: 1.0083, train_acc: 0.6406 test_loss: 0.9317, test_acc: 0.6665, best: 0.6810, time: 0:02:05
 Epoch: 117, lr: 1.0e-02, train_loss: 0.9769, train_acc: 0.6504 test_loss: 0.8948, test_acc: 0.6755, best: 0.6810, time: 0:02:05
 Epoch: 118, lr: 1.0e-02, train_loss: 0.9886, train_acc: 0.6366 test_loss: 0.9131, test_acc: 0.6673, best: 0.6810, time: 0:02:05
 Epoch: 119, lr: 1.0e-02, train_loss: 0.9871, train_acc: 0.6416 test_loss: 0.9656, test_acc: 0.6544, best: 0.6810, time: 0:02:05
 Epoch: 120, lr: 1.0e-02, train_loss: 0.9760, train_acc: 0.6456 test_loss: 1.0180, test_acc: 0.6368, best: 0.6810, time: 0:02:05
 Epoch: 121, lr: 1.0e-02, train_loss: 0.9550, train_acc: 0.6550 test_loss: 0.9031, test_acc: 0.6731, best: 0.6810, time: 0:02:06
 Epoch: 122, lr: 1.0e-02, train_loss: 0.9522, train_acc: 0.6542 test_loss: 0.8834, test_acc: 0.6783, best: 0.6810, time: 0:02:05
 Epoch: 123, lr: 1.0e-02, train_loss: 0.9611, train_acc: 0.6532 test_loss: 0.8904, test_acc: 0.6860, best: 0.6860, time: 0:02:05
 Epoch: 124, lr: 1.0e-02, train_loss: 0.9573, train_acc: 0.6458 test_loss: 0.9069, test_acc: 0.6801, best: 0.6860, time: 0:02:05
 Epoch: 125, lr: 1.0e-02, train_loss: 0.9543, train_acc: 0.6592 test_loss: 0.9285, test_acc: 0.6747, best: 0.6860, time: 0:02:05
 Epoch: 126, lr: 1.0e-02, train_loss: 0.9442, train_acc: 0.6576 test_loss: 0.9161, test_acc: 0.6759, best: 0.6860, time: 0:02:05
 Epoch: 127, lr: 1.0e-02, train_loss: 0.9306, train_acc: 0.6632 test_loss: 0.8874, test_acc: 0.6801, best: 0.6860, time: 0:02:05
 Epoch: 128, lr: 1.0e-02, train_loss: 0.9397, train_acc: 0.6640 test_loss: 0.9139, test_acc: 0.6770, best: 0.6860, time: 0:02:05
 Epoch: 129, lr: 1.0e-02, train_loss: 0.9513, train_acc: 0.6572 test_loss: 0.9713, test_acc: 0.6530, best: 0.6860, time: 0:02:05
 Epoch: 130, lr: 1.0e-02, train_loss: 0.9387, train_acc: 0.6510 test_loss: 0.8863, test_acc: 0.6890, best: 0.6890, time: 0:02:05
 Epoch: 131, lr: 1.0e-02, train_loss: 0.9549, train_acc: 0.6522 test_loss: 0.8825, test_acc: 0.6857, best: 0.6890, time: 0:02:05
 Epoch: 132, lr: 1.0e-02, train_loss: 0.9355, train_acc: 0.6638 test_loss: 0.8635, test_acc: 0.6930, best: 0.6930, time: 0:02:05
 Epoch: 133, lr: 1.0e-02, train_loss: 0.9207, train_acc: 0.6650 test_loss: 0.8893, test_acc: 0.6865, best: 0.6930, time: 0:02:05
 Epoch: 134, lr: 1.0e-02, train_loss: 0.9176, train_acc: 0.6670 test_loss: 0.9053, test_acc: 0.6764, best: 0.6930, time: 0:02:05
 Epoch: 135, lr: 1.0e-02, train_loss: 0.9079, train_acc: 0.6752 test_loss: 0.9485, test_acc: 0.6709, best: 0.6930, time: 0:02:05
 Epoch: 136, lr: 1.0e-02, train_loss: 0.9354, train_acc: 0.6626 test_loss: 0.8648, test_acc: 0.6899, best: 0.6930, time: 0:02:05
 Epoch: 137, lr: 1.0e-02, train_loss: 0.9286, train_acc: 0.6720 test_loss: 0.9439, test_acc: 0.6617, best: 0.6930, time: 0:02:05
 Epoch: 138, lr: 1.0e-02, train_loss: 0.9222, train_acc: 0.6708 test_loss: 0.8907, test_acc: 0.6780, best: 0.6930, time: 0:02:05
 Epoch: 139, lr: 1.0e-02, train_loss: 0.8907, train_acc: 0.6788 test_loss: 0.8540, test_acc: 0.6916, best: 0.6930, time: 0:02:05
 Epoch: 140, lr: 1.0e-02, train_loss: 0.8919, train_acc: 0.6804 test_loss: 0.9268, test_acc: 0.6720, best: 0.6930, time: 0:02:05
 Epoch: 141, lr: 1.0e-02, train_loss: 0.9048, train_acc: 0.6772 test_loss: 0.8790, test_acc: 0.6885, best: 0.6930, time: 0:02:05
 Epoch: 142, lr: 1.0e-02, train_loss: 0.8860, train_acc: 0.6870 test_loss: 0.8940, test_acc: 0.6844, best: 0.6930, time: 0:02:05
 Epoch: 143, lr: 1.0e-02, train_loss: 0.8947, train_acc: 0.6854 test_loss: 0.8381, test_acc: 0.7037, best: 0.7037, time: 0:02:06
 Epoch: 144, lr: 1.0e-02, train_loss: 0.8759, train_acc: 0.6888 test_loss: 0.8425, test_acc: 0.6979, best: 0.7037, time: 0:02:05
 Epoch: 145, lr: 1.0e-02, train_loss: 0.8772, train_acc: 0.6824 test_loss: 0.8484, test_acc: 0.6974, best: 0.7037, time: 0:02:05
 Epoch: 146, lr: 1.0e-02, train_loss: 0.8832, train_acc: 0.6778 test_loss: 0.8642, test_acc: 0.6923, best: 0.7037, time: 0:02:05
 Epoch: 147, lr: 1.0e-02, train_loss: 0.8797, train_acc: 0.6912 test_loss: 0.8583, test_acc: 0.6927, best: 0.7037, time: 0:02:05
 Epoch: 148, lr: 1.0e-02, train_loss: 0.8524, train_acc: 0.6932 test_loss: 0.8969, test_acc: 0.6820, best: 0.7037, time: 0:02:05
 Epoch: 149, lr: 1.0e-02, train_loss: 0.8807, train_acc: 0.6846 test_loss: 0.9141, test_acc: 0.6815, best: 0.7037, time: 0:02:05
 Epoch: 150, lr: 1.0e-02, train_loss: 0.8674, train_acc: 0.6854 test_loss: 0.8477, test_acc: 0.6951, best: 0.7037, time: 0:02:05
 Epoch: 151, lr: 1.0e-02, train_loss: 0.8540, train_acc: 0.6910 test_loss: 0.8587, test_acc: 0.6979, best: 0.7037, time: 0:02:05
 Epoch: 152, lr: 1.0e-02, train_loss: 0.8566, train_acc: 0.6912 test_loss: 0.8257, test_acc: 0.7081, best: 0.7081, time: 0:02:06
 Epoch: 153, lr: 1.0e-02, train_loss: 0.8516, train_acc: 0.6972 test_loss: 0.8743, test_acc: 0.6925, best: 0.7081, time: 0:02:05
 Epoch: 154, lr: 1.0e-02, train_loss: 0.8653, train_acc: 0.6942 test_loss: 0.8321, test_acc: 0.6993, best: 0.7081, time: 0:02:05
 Epoch: 155, lr: 1.0e-02, train_loss: 0.8728, train_acc: 0.6938 test_loss: 0.9082, test_acc: 0.6826, best: 0.7081, time: 0:02:05
 Epoch: 156, lr: 1.0e-02, train_loss: 0.8411, train_acc: 0.7014 test_loss: 0.8812, test_acc: 0.6829, best: 0.7081, time: 0:02:05
 Epoch: 157, lr: 1.0e-02, train_loss: 0.8315, train_acc: 0.6998 test_loss: 0.8650, test_acc: 0.6915, best: 0.7081, time: 0:02:05
 Epoch: 158, lr: 1.0e-02, train_loss: 0.8630, train_acc: 0.6958 test_loss: 0.8637, test_acc: 0.6900, best: 0.7081, time: 0:02:05
 Epoch: 159, lr: 1.0e-02, train_loss: 0.8171, train_acc: 0.7122 test_loss: 0.8614, test_acc: 0.6914, best: 0.7081, time: 0:02:05
 Epoch: 160, lr: 1.0e-02, train_loss: 0.8264, train_acc: 0.7040 test_loss: 0.9058, test_acc: 0.6911, best: 0.7081, time: 0:02:05
 Epoch: 161, lr: 1.0e-02, train_loss: 0.8412, train_acc: 0.7042 test_loss: 0.7971, test_acc: 0.7198, best: 0.7198, time: 0:02:06
 Epoch: 162, lr: 1.0e-02, train_loss: 0.8119, train_acc: 0.7150 test_loss: 0.8607, test_acc: 0.7030, best: 0.7198, time: 0:02:05
 Epoch: 163, lr: 1.0e-02, train_loss: 0.8234, train_acc: 0.7072 test_loss: 0.8084, test_acc: 0.7126, best: 0.7198, time: 0:02:05
 Epoch: 164, lr: 1.0e-02, train_loss: 0.8373, train_acc: 0.6980 test_loss: 0.8408, test_acc: 0.7053, best: 0.7198, time: 0:02:05
 Epoch: 165, lr: 1.0e-02, train_loss: 0.8522, train_acc: 0.7006 test_loss: 0.8816, test_acc: 0.6917, best: 0.7198, time: 0:02:05
 Epoch: 166, lr: 1.0e-02, train_loss: 0.7869, train_acc: 0.7190 test_loss: 0.8942, test_acc: 0.6874, best: 0.7198, time: 0:02:05
 Epoch: 167, lr: 1.0e-02, train_loss: 0.8069, train_acc: 0.7136 test_loss: 0.8303, test_acc: 0.7116, best: 0.7198, time: 0:02:05
 Epoch: 168, lr: 1.0e-02, train_loss: 0.8096, train_acc: 0.7106 test_loss: 0.8255, test_acc: 0.7155, best: 0.7198, time: 0:02:05
 Epoch: 169, lr: 1.0e-02, train_loss: 0.8436, train_acc: 0.6986 test_loss: 0.8103, test_acc: 0.7119, best: 0.7198, time: 0:02:05
 Epoch: 170, lr: 1.0e-02, train_loss: 0.7836, train_acc: 0.7244 test_loss: 0.8781, test_acc: 0.6999, best: 0.7198, time: 0:02:05
 Epoch: 171, lr: 1.0e-02, train_loss: 0.8094, train_acc: 0.7114 test_loss: 0.8494, test_acc: 0.6990, best: 0.7198, time: 0:02:05
 Epoch: 172, lr: 1.0e-02, train_loss: 0.7926, train_acc: 0.7156 test_loss: 0.8920, test_acc: 0.6951, best: 0.7198, time: 0:02:05
 Epoch: 173, lr: 1.0e-02, train_loss: 0.8149, train_acc: 0.7048 test_loss: 0.8340, test_acc: 0.7063, best: 0.7198, time: 0:02:05
 Epoch: 174, lr: 1.0e-02, train_loss: 0.7608, train_acc: 0.7282 test_loss: 0.9105, test_acc: 0.6931, best: 0.7198, time: 0:02:05
 Epoch: 175, lr: 1.0e-02, train_loss: 0.7739, train_acc: 0.7224 test_loss: 0.8777, test_acc: 0.6946, best: 0.7198, time: 0:02:05
 Epoch: 176, lr: 1.0e-02, train_loss: 0.7881, train_acc: 0.7136 test_loss: 0.8483, test_acc: 0.7079, best: 0.7198, time: 0:02:05
 Epoch: 177, lr: 1.0e-02, train_loss: 0.7846, train_acc: 0.7208 test_loss: 0.8192, test_acc: 0.7186, best: 0.7198, time: 0:02:05
 Epoch: 178, lr: 1.0e-02, train_loss: 0.8030, train_acc: 0.7148 test_loss: 0.9042, test_acc: 0.6845, best: 0.7198, time: 0:02:05
 Epoch: 179, lr: 1.0e-02, train_loss: 0.7659, train_acc: 0.7288 test_loss: 0.8455, test_acc: 0.7075, best: 0.7198, time: 0:02:05
 Epoch: 180, lr: 2.0e-03, train_loss: 0.7256, train_acc: 0.7384 test_loss: 0.7695, test_acc: 0.7278, best: 0.7278, time: 0:02:05
 Epoch: 181, lr: 2.0e-03, train_loss: 0.6903, train_acc: 0.7578 test_loss: 0.7831, test_acc: 0.7306, best: 0.7306, time: 0:02:06
 Epoch: 182, lr: 2.0e-03, train_loss: 0.6851, train_acc: 0.7572 test_loss: 0.7775, test_acc: 0.7312, best: 0.7312, time: 0:02:06
 Epoch: 183, lr: 2.0e-03, train_loss: 0.6386, train_acc: 0.7784 test_loss: 0.7734, test_acc: 0.7378, best: 0.7378, time: 0:02:05
 Epoch: 184, lr: 2.0e-03, train_loss: 0.6588, train_acc: 0.7672 test_loss: 0.7602, test_acc: 0.7355, best: 0.7378, time: 0:02:05
 Epoch: 185, lr: 2.0e-03, train_loss: 0.6408, train_acc: 0.7718 test_loss: 0.7806, test_acc: 0.7349, best: 0.7378, time: 0:02:05
 Epoch: 186, lr: 2.0e-03, train_loss: 0.6361, train_acc: 0.7724 test_loss: 0.7789, test_acc: 0.7362, best: 0.7378, time: 0:02:05
 Epoch: 187, lr: 2.0e-03, train_loss: 0.6325, train_acc: 0.7748 test_loss: 0.7865, test_acc: 0.7345, best: 0.7378, time: 0:02:05
 Epoch: 188, lr: 2.0e-03, train_loss: 0.6369, train_acc: 0.7764 test_loss: 0.7623, test_acc: 0.7439, best: 0.7439, time: 0:02:05
 Epoch: 189, lr: 2.0e-03, train_loss: 0.6385, train_acc: 0.7752 test_loss: 0.8059, test_acc: 0.7384, best: 0.7439, time: 0:02:05
 Epoch: 190, lr: 2.0e-03, train_loss: 0.6227, train_acc: 0.7710 test_loss: 0.7768, test_acc: 0.7381, best: 0.7439, time: 0:02:05
 Epoch: 191, lr: 2.0e-03, train_loss: 0.6244, train_acc: 0.7776 test_loss: 0.7716, test_acc: 0.7378, best: 0.7439, time: 0:02:05
 Epoch: 192, lr: 2.0e-03, train_loss: 0.6238, train_acc: 0.7780 test_loss: 0.7728, test_acc: 0.7429, best: 0.7439, time: 0:02:05
 Epoch: 193, lr: 2.0e-03, train_loss: 0.6105, train_acc: 0.7794 test_loss: 0.7774, test_acc: 0.7346, best: 0.7439, time: 0:02:05
 Epoch: 194, lr: 2.0e-03, train_loss: 0.6130, train_acc: 0.7824 test_loss: 0.7843, test_acc: 0.7345, best: 0.7439, time: 0:02:05
 Epoch: 195, lr: 2.0e-03, train_loss: 0.6195, train_acc: 0.7834 test_loss: 0.7811, test_acc: 0.7364, best: 0.7439, time: 0:02:05
 Epoch: 196, lr: 2.0e-03, train_loss: 0.6175, train_acc: 0.7774 test_loss: 0.7846, test_acc: 0.7318, best: 0.7439, time: 0:02:05
 Epoch: 197, lr: 2.0e-03, train_loss: 0.6101, train_acc: 0.7832 test_loss: 0.7696, test_acc: 0.7438, best: 0.7439, time: 0:02:05
 Epoch: 198, lr: 2.0e-03, train_loss: 0.6152, train_acc: 0.7764 test_loss: 0.8158, test_acc: 0.7346, best: 0.7439, time: 0:02:05
 Epoch: 199, lr: 2.0e-03, train_loss: 0.6183, train_acc: 0.7770 test_loss: 0.8077, test_acc: 0.7291, best: 0.7439, time: 0:02:05
 Epoch: 200, lr: 2.0e-03, train_loss: 0.6024, train_acc: 0.7890 test_loss: 0.7766, test_acc: 0.7381, best: 0.7439, time: 0:02:05
 Epoch: 201, lr: 2.0e-03, train_loss: 0.6037, train_acc: 0.7816 test_loss: 0.7955, test_acc: 0.7371, best: 0.7439, time: 0:02:05
 Epoch: 202, lr: 2.0e-03, train_loss: 0.5849, train_acc: 0.7930 test_loss: 0.8095, test_acc: 0.7330, best: 0.7439, time: 0:02:05
 Epoch: 203, lr: 2.0e-03, train_loss: 0.5962, train_acc: 0.7914 test_loss: 0.8182, test_acc: 0.7309, best: 0.7439, time: 0:02:04
 Epoch: 204, lr: 2.0e-03, train_loss: 0.5650, train_acc: 0.7942 test_loss: 0.8191, test_acc: 0.7349, best: 0.7439, time: 0:02:05
 Epoch: 205, lr: 2.0e-03, train_loss: 0.5969, train_acc: 0.7860 test_loss: 0.7661, test_acc: 0.7445, best: 0.7445, time: 0:02:06
 Epoch: 206, lr: 2.0e-03, train_loss: 0.5913, train_acc: 0.7926 test_loss: 0.8020, test_acc: 0.7352, best: 0.7445, time: 0:02:05
 Epoch: 207, lr: 2.0e-03, train_loss: 0.5676, train_acc: 0.7990 test_loss: 0.7879, test_acc: 0.7405, best: 0.7445, time: 0:02:05
 Epoch: 208, lr: 2.0e-03, train_loss: 0.5716, train_acc: 0.7980 test_loss: 0.8149, test_acc: 0.7342, best: 0.7445, time: 0:02:05
 Epoch: 209, lr: 2.0e-03, train_loss: 0.5876, train_acc: 0.7934 test_loss: 0.7955, test_acc: 0.7399, best: 0.7445, time: 0:02:05
 Epoch: 210, lr: 2.0e-03, train_loss: 0.5821, train_acc: 0.7976 test_loss: 0.7752, test_acc: 0.7412, best: 0.7445, time: 0:02:05
 Epoch: 211, lr: 2.0e-03, train_loss: 0.5925, train_acc: 0.7856 test_loss: 0.7967, test_acc: 0.7372, best: 0.7445, time: 0:02:05
 Epoch: 212, lr: 2.0e-03, train_loss: 0.6010, train_acc: 0.7854 test_loss: 0.7697, test_acc: 0.7456, best: 0.7456, time: 0:02:05
 Epoch: 213, lr: 2.0e-03, train_loss: 0.5826, train_acc: 0.7954 test_loss: 0.7838, test_acc: 0.7422, best: 0.7456, time: 0:02:05
 Epoch: 214, lr: 2.0e-03, train_loss: 0.6007, train_acc: 0.7838 test_loss: 0.7789, test_acc: 0.7419, best: 0.7456, time: 0:02:04
 Epoch: 215, lr: 2.0e-03, train_loss: 0.5635, train_acc: 0.8014 test_loss: 0.8110, test_acc: 0.7349, best: 0.7456, time: 0:02:05
 Epoch: 216, lr: 2.0e-03, train_loss: 0.5907, train_acc: 0.7892 test_loss: 0.8019, test_acc: 0.7360, best: 0.7456, time: 0:02:05
 Epoch: 217, lr: 2.0e-03, train_loss: 0.5822, train_acc: 0.7994 test_loss: 0.8103, test_acc: 0.7346, best: 0.7456, time: 0:02:05
 Epoch: 218, lr: 2.0e-03, train_loss: 0.5899, train_acc: 0.7878 test_loss: 0.7785, test_acc: 0.7419, best: 0.7456, time: 0:02:05
 Epoch: 219, lr: 2.0e-03, train_loss: 0.5642, train_acc: 0.8016 test_loss: 0.8125, test_acc: 0.7361, best: 0.7456, time: 0:02:05
 Epoch: 220, lr: 2.0e-03, train_loss: 0.5452, train_acc: 0.8038 test_loss: 0.7838, test_acc: 0.7484, best: 0.7484, time: 0:02:05
 Epoch: 221, lr: 2.0e-03, train_loss: 0.5691, train_acc: 0.7990 test_loss: 0.7859, test_acc: 0.7456, best: 0.7484, time: 0:02:04
 Epoch: 222, lr: 2.0e-03, train_loss: 0.5714, train_acc: 0.7930 test_loss: 0.7966, test_acc: 0.7418, best: 0.7484, time: 0:02:05
 Epoch: 223, lr: 2.0e-03, train_loss: 0.5775, train_acc: 0.7970 test_loss: 0.7879, test_acc: 0.7419, best: 0.7484, time: 0:02:05
 Epoch: 224, lr: 2.0e-03, train_loss: 0.5744, train_acc: 0.7966 test_loss: 0.7941, test_acc: 0.7378, best: 0.7484, time: 0:02:04
 Epoch: 225, lr: 2.0e-03, train_loss: 0.5622, train_acc: 0.8004 test_loss: 0.7928, test_acc: 0.7386, best: 0.7484, time: 0:02:05
 Epoch: 226, lr: 2.0e-03, train_loss: 0.5485, train_acc: 0.8040 test_loss: 0.8062, test_acc: 0.7430, best: 0.7484, time: 0:02:05
 Epoch: 227, lr: 2.0e-03, train_loss: 0.5619, train_acc: 0.8078 test_loss: 0.8121, test_acc: 0.7342, best: 0.7484, time: 0:02:04
 Epoch: 228, lr: 2.0e-03, train_loss: 0.5636, train_acc: 0.7952 test_loss: 0.8231, test_acc: 0.7318, best: 0.7484, time: 0:02:04
 Epoch: 229, lr: 2.0e-03, train_loss: 0.5615, train_acc: 0.8042 test_loss: 0.8088, test_acc: 0.7308, best: 0.7484, time: 0:02:04
 Epoch: 230, lr: 2.0e-03, train_loss: 0.5645, train_acc: 0.8046 test_loss: 0.8011, test_acc: 0.7380, best: 0.7484, time: 0:02:04
 Epoch: 231, lr: 2.0e-03, train_loss: 0.5479, train_acc: 0.8126 test_loss: 0.8129, test_acc: 0.7360, best: 0.7484, time: 0:02:04
 Epoch: 232, lr: 2.0e-03, train_loss: 0.5515, train_acc: 0.8108 test_loss: 0.8396, test_acc: 0.7365, best: 0.7484, time: 0:02:04
 Epoch: 233, lr: 2.0e-03, train_loss: 0.5589, train_acc: 0.8006 test_loss: 0.8144, test_acc: 0.7430, best: 0.7484, time: 0:02:04
 Epoch: 234, lr: 2.0e-03, train_loss: 0.5422, train_acc: 0.8104 test_loss: 0.8154, test_acc: 0.7400, best: 0.7484, time: 0:02:04
 Epoch: 235, lr: 2.0e-03, train_loss: 0.5485, train_acc: 0.8052 test_loss: 0.8103, test_acc: 0.7408, best: 0.7484, time: 0:02:04
 Epoch: 236, lr: 2.0e-03, train_loss: 0.5513, train_acc: 0.8030 test_loss: 0.8175, test_acc: 0.7360, best: 0.7484, time: 0:02:04
 Epoch: 237, lr: 2.0e-03, train_loss: 0.5525, train_acc: 0.8044 test_loss: 0.8063, test_acc: 0.7379, best: 0.7484, time: 0:02:04
 Epoch: 238, lr: 2.0e-03, train_loss: 0.5589, train_acc: 0.7992 test_loss: 0.8273, test_acc: 0.7376, best: 0.7484, time: 0:02:05
 Epoch: 239, lr: 2.0e-03, train_loss: 0.5433, train_acc: 0.8122 test_loss: 0.7934, test_acc: 0.7399, best: 0.7484, time: 0:02:05
 Epoch: 240, lr: 4.0e-04, train_loss: 0.5318, train_acc: 0.8126 test_loss: 0.7893, test_acc: 0.7465, best: 0.7484, time: 0:02:05
 Epoch: 241, lr: 4.0e-04, train_loss: 0.5255, train_acc: 0.8148 test_loss: 0.7856, test_acc: 0.7440, best: 0.7484, time: 0:02:05
 Epoch: 242, lr: 4.0e-04, train_loss: 0.5229, train_acc: 0.8162 test_loss: 0.7954, test_acc: 0.7444, best: 0.7484, time: 0:02:05
 Epoch: 243, lr: 4.0e-04, train_loss: 0.5227, train_acc: 0.8170 test_loss: 0.7915, test_acc: 0.7452, best: 0.7484, time: 0:02:04
 Epoch: 244, lr: 4.0e-04, train_loss: 0.5175, train_acc: 0.8172 test_loss: 0.8043, test_acc: 0.7456, best: 0.7484, time: 0:02:04
 Epoch: 245, lr: 4.0e-04, train_loss: 0.5156, train_acc: 0.8194 test_loss: 0.7919, test_acc: 0.7405, best: 0.7484, time: 0:02:04
 Epoch: 246, lr: 4.0e-04, train_loss: 0.5250, train_acc: 0.8126 test_loss: 0.7892, test_acc: 0.7479, best: 0.7484, time: 0:02:04
 Epoch: 247, lr: 4.0e-04, train_loss: 0.5149, train_acc: 0.8190 test_loss: 0.7894, test_acc: 0.7450, best: 0.7484, time: 0:02:04
 Epoch: 248, lr: 4.0e-04, train_loss: 0.5143, train_acc: 0.8236 test_loss: 0.7854, test_acc: 0.7490, best: 0.7490, time: 0:02:05
 Epoch: 249, lr: 4.0e-04, train_loss: 0.5129, train_acc: 0.8232 test_loss: 0.7904, test_acc: 0.7438, best: 0.7490, time: 0:02:04
 Epoch: 250, lr: 4.0e-04, train_loss: 0.4969, train_acc: 0.8248 test_loss: 0.8057, test_acc: 0.7426, best: 0.7490, time: 0:02:04
 Epoch: 251, lr: 4.0e-04, train_loss: 0.5033, train_acc: 0.8186 test_loss: 0.7898, test_acc: 0.7459, best: 0.7490, time: 0:02:04
 Epoch: 252, lr: 4.0e-04, train_loss: 0.5314, train_acc: 0.8114 test_loss: 0.8112, test_acc: 0.7370, best: 0.7490, time: 0:02:04
 Epoch: 253, lr: 4.0e-04, train_loss: 0.4904, train_acc: 0.8304 test_loss: 0.7955, test_acc: 0.7471, best: 0.7490, time: 0:02:05
 Epoch: 254, lr: 4.0e-04, train_loss: 0.4985, train_acc: 0.8230 test_loss: 0.7967, test_acc: 0.7500, best: 0.7500, time: 0:02:04
 Epoch: 255, lr: 4.0e-04, train_loss: 0.5127, train_acc: 0.8178 test_loss: 0.7942, test_acc: 0.7472, best: 0.7500, time: 0:02:04
 Epoch: 256, lr: 4.0e-04, train_loss: 0.5224, train_acc: 0.8126 test_loss: 0.7969, test_acc: 0.7470, best: 0.7500, time: 0:02:05
 Epoch: 257, lr: 4.0e-04, train_loss: 0.5125, train_acc: 0.8184 test_loss: 0.7977, test_acc: 0.7462, best: 0.7500, time: 0:02:05
 Epoch: 258, lr: 4.0e-04, train_loss: 0.5066, train_acc: 0.8216 test_loss: 0.8032, test_acc: 0.7475, best: 0.7500, time: 0:02:05
 Epoch: 259, lr: 4.0e-04, train_loss: 0.5050, train_acc: 0.8224 test_loss: 0.7904, test_acc: 0.7480, best: 0.7500, time: 0:02:04
 Epoch: 260, lr: 4.0e-04, train_loss: 0.5209, train_acc: 0.8138 test_loss: 0.7957, test_acc: 0.7464, best: 0.7500, time: 0:02:04
 Epoch: 261, lr: 4.0e-04, train_loss: 0.5159, train_acc: 0.8154 test_loss: 0.7931, test_acc: 0.7454, best: 0.7500, time: 0:02:04
 Epoch: 262, lr: 4.0e-04, train_loss: 0.5110, train_acc: 0.8200 test_loss: 0.8001, test_acc: 0.7478, best: 0.7500, time: 0:02:05
 Epoch: 263, lr: 4.0e-04, train_loss: 0.5056, train_acc: 0.8226 test_loss: 0.8054, test_acc: 0.7445, best: 0.7500, time: 0:02:05
 Epoch: 264, lr: 4.0e-04, train_loss: 0.5064, train_acc: 0.8168 test_loss: 0.7989, test_acc: 0.7489, best: 0.7500, time: 0:02:05
 Epoch: 265, lr: 4.0e-04, train_loss: 0.5093, train_acc: 0.8236 test_loss: 0.8008, test_acc: 0.7450, best: 0.7500, time: 0:02:04
 Epoch: 266, lr: 4.0e-04, train_loss: 0.5014, train_acc: 0.8252 test_loss: 0.8029, test_acc: 0.7476, best: 0.7500, time: 0:02:04
 Epoch: 267, lr: 4.0e-04, train_loss: 0.4934, train_acc: 0.8246 test_loss: 0.8063, test_acc: 0.7449, best: 0.7500, time: 0:02:04
 Epoch: 268, lr: 4.0e-04, train_loss: 0.4959, train_acc: 0.8230 test_loss: 0.8053, test_acc: 0.7486, best: 0.7500, time: 0:02:04
 Epoch: 269, lr: 4.0e-04, train_loss: 0.5011, train_acc: 0.8252 test_loss: 0.8064, test_acc: 0.7481, best: 0.7500, time: 0:02:04
 Epoch: 270, lr: 8.0e-05, train_loss: 0.4825, train_acc: 0.8342 test_loss: 0.7910, test_acc: 0.7501, best: 0.7501, time: 0:02:05
 Epoch: 271, lr: 8.0e-05, train_loss: 0.4863, train_acc: 0.8258 test_loss: 0.7976, test_acc: 0.7476, best: 0.7501, time: 0:02:04
 Epoch: 272, lr: 8.0e-05, train_loss: 0.4941, train_acc: 0.8294 test_loss: 0.7964, test_acc: 0.7478, best: 0.7501, time: 0:02:04
 Epoch: 273, lr: 8.0e-05, train_loss: 0.5024, train_acc: 0.8256 test_loss: 0.8021, test_acc: 0.7490, best: 0.7501, time: 0:02:04
 Epoch: 274, lr: 8.0e-05, train_loss: 0.5078, train_acc: 0.8180 test_loss: 0.8045, test_acc: 0.7462, best: 0.7501, time: 0:02:04
 Epoch: 275, lr: 8.0e-05, train_loss: 0.5002, train_acc: 0.8228 test_loss: 0.7899, test_acc: 0.7525, best: 0.7525, time: 0:02:04
 Epoch: 276, lr: 8.0e-05, train_loss: 0.5041, train_acc: 0.8230 test_loss: 0.8068, test_acc: 0.7439, best: 0.7525, time: 0:02:04
 Epoch: 277, lr: 8.0e-05, train_loss: 0.5034, train_acc: 0.8198 test_loss: 0.7950, test_acc: 0.7511, best: 0.7525, time: 0:02:04
 Epoch: 278, lr: 8.0e-05, train_loss: 0.5136, train_acc: 0.8176 test_loss: 0.7867, test_acc: 0.7502, best: 0.7525, time: 0:02:04
 Epoch: 279, lr: 8.0e-05, train_loss: 0.4936, train_acc: 0.8240 test_loss: 0.8134, test_acc: 0.7476, best: 0.7525, time: 0:02:04
 Epoch: 280, lr: 8.0e-05, train_loss: 0.4837, train_acc: 0.8306 test_loss: 0.7988, test_acc: 0.7494, best: 0.7525, time: 0:02:04
 Epoch: 281, lr: 8.0e-05, train_loss: 0.4859, train_acc: 0.8294 test_loss: 0.7888, test_acc: 0.7472, best: 0.7525, time: 0:02:04
 Epoch: 282, lr: 8.0e-05, train_loss: 0.4978, train_acc: 0.8270 test_loss: 0.7876, test_acc: 0.7514, best: 0.7525, time: 0:02:04
 Epoch: 283, lr: 8.0e-05, train_loss: 0.4925, train_acc: 0.8268 test_loss: 0.7962, test_acc: 0.7486, best: 0.7525, time: 0:02:04
 Epoch: 284, lr: 8.0e-05, train_loss: 0.4967, train_acc: 0.8190 test_loss: 0.7938, test_acc: 0.7490, best: 0.7525, time: 0:02:03
 Epoch: 285, lr: 8.0e-05, train_loss: 0.5050, train_acc: 0.8180 test_loss: 0.7918, test_acc: 0.7475, best: 0.7525, time: 0:02:03
 Epoch: 286, lr: 8.0e-05, train_loss: 0.4776, train_acc: 0.8282 test_loss: 0.7952, test_acc: 0.7469, best: 0.7525, time: 0:02:04
 Epoch: 287, lr: 8.0e-05, train_loss: 0.5165, train_acc: 0.8190 test_loss: 0.8093, test_acc: 0.7455, best: 0.7525, time: 0:02:04
 Epoch: 288, lr: 8.0e-05, train_loss: 0.4992, train_acc: 0.8222 test_loss: 0.8000, test_acc: 0.7471, best: 0.7525, time: 0:02:04
 Epoch: 289, lr: 8.0e-05, train_loss: 0.4812, train_acc: 0.8268 test_loss: 0.8014, test_acc: 0.7504, best: 0.7525, time: 0:02:04
 Epoch: 290, lr: 8.0e-05, train_loss: 0.4930, train_acc: 0.8288 test_loss: 0.7978, test_acc: 0.7510, best: 0.7525, time: 0:02:04
 Epoch: 291, lr: 8.0e-05, train_loss: 0.4697, train_acc: 0.8332 test_loss: 0.7919, test_acc: 0.7500, best: 0.7525, time: 0:02:04
 Epoch: 292, lr: 8.0e-05, train_loss: 0.4934, train_acc: 0.8302 test_loss: 0.8090, test_acc: 0.7466, best: 0.7525, time: 0:02:04
 Epoch: 293, lr: 8.0e-05, train_loss: 0.4887, train_acc: 0.8276 test_loss: 0.7860, test_acc: 0.7510, best: 0.7525, time: 0:02:04
 Epoch: 294, lr: 8.0e-05, train_loss: 0.5082, train_acc: 0.8218 test_loss: 0.7999, test_acc: 0.7462, best: 0.7525, time: 0:02:03
 Epoch: 295, lr: 8.0e-05, train_loss: 0.5046, train_acc: 0.8224 test_loss: 0.7929, test_acc: 0.7488, best: 0.7525, time: 0:02:03
 Epoch: 296, lr: 8.0e-05, train_loss: 0.4835, train_acc: 0.8280 test_loss: 0.8153, test_acc: 0.7451, best: 0.7525, time: 0:02:03
 Epoch: 297, lr: 8.0e-05, train_loss: 0.4912, train_acc: 0.8284 test_loss: 0.8033, test_acc: 0.7472, best: 0.7525, time: 0:02:03
 Epoch: 298, lr: 8.0e-05, train_loss: 0.4850, train_acc: 0.8334 test_loss: 0.7976, test_acc: 0.7474, best: 0.7525, time: 0:02:03
 Epoch: 299, lr: 8.0e-05, train_loss: 0.5223, train_acc: 0.8176 test_loss: 0.8130, test_acc: 0.7456, best: 0.7525, time: 0:02:03
 Highest accuracy: 0.7525