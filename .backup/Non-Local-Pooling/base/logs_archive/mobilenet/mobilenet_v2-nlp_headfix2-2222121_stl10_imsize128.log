
 Run on time: 2022-07-03 16:44:16.546630

 Architecture: mobilenet_v2-nlp_headfix2-2222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET_V2-NLP_HEADFIX2-2222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 32)
                  (col_embed): Embedding(256, 32)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(160, 160, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=160, out_features=160, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(160, 160, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 80)
                  (col_embed): Embedding(256, 80)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5626, train_acc: 0.1534 test_loss: 2.0396, test_acc: 0.2180, best: 0.2180, time: 0:02:14
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1184, train_acc: 0.1898 test_loss: 1.7856, test_acc: 0.2732, best: 0.2732, time: 0:02:17
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0499, train_acc: 0.2076 test_loss: 1.8737, test_acc: 0.2440, best: 0.2732, time: 0:02:17
 Epoch: 4, lr: 1.0e-02, train_loss: 2.0144, train_acc: 0.2288 test_loss: 1.8450, test_acc: 0.2925, best: 0.2925, time: 0:02:17
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9648, train_acc: 0.2456 test_loss: 1.7625, test_acc: 0.3048, best: 0.3048, time: 0:02:17
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9231, train_acc: 0.2490 test_loss: 1.7031, test_acc: 0.3340, best: 0.3340, time: 0:02:16
 Epoch: 7, lr: 1.0e-02, train_loss: 1.8965, train_acc: 0.2760 test_loss: 1.6947, test_acc: 0.3396, best: 0.3396, time: 0:02:17
 Epoch: 8, lr: 1.0e-02, train_loss: 1.8742, train_acc: 0.2792 test_loss: 1.7654, test_acc: 0.3141, best: 0.3396, time: 0:02:17
 Epoch: 9, lr: 1.0e-02, train_loss: 1.8520, train_acc: 0.2852 test_loss: 1.6387, test_acc: 0.3711, best: 0.3711, time: 0:02:17
 Epoch: 10, lr: 1.0e-02, train_loss: 1.8725, train_acc: 0.2884 test_loss: 1.7038, test_acc: 0.3394, best: 0.3711, time: 0:02:17
 Epoch: 11, lr: 1.0e-02, train_loss: 1.8253, train_acc: 0.3036 test_loss: 1.7204, test_acc: 0.3365, best: 0.3711, time: 0:02:17
 Epoch: 12, lr: 1.0e-02, train_loss: 1.7979, train_acc: 0.3100 test_loss: 1.6232, test_acc: 0.3719, best: 0.3719, time: 0:02:17
 Epoch: 13, lr: 1.0e-02, train_loss: 1.8512, train_acc: 0.2846 test_loss: 1.6737, test_acc: 0.3521, best: 0.3719, time: 0:02:17
 Epoch: 14, lr: 1.0e-02, train_loss: 1.8258, train_acc: 0.3120 test_loss: 1.5405, test_acc: 0.4006, best: 0.4006, time: 0:02:17
 Epoch: 15, lr: 1.0e-02, train_loss: 1.7743, train_acc: 0.3238 test_loss: 1.5366, test_acc: 0.4093, best: 0.4093, time: 0:02:17
 Epoch: 16, lr: 1.0e-02, train_loss: 1.8095, train_acc: 0.3088 test_loss: 1.5668, test_acc: 0.3840, best: 0.4093, time: 0:02:17
 Epoch: 17, lr: 1.0e-02, train_loss: 1.7916, train_acc: 0.3104 test_loss: 1.5201, test_acc: 0.4105, best: 0.4105, time: 0:02:17
 Epoch: 18, lr: 1.0e-02, train_loss: 1.7599, train_acc: 0.3240 test_loss: 1.5403, test_acc: 0.3912, best: 0.4105, time: 0:02:17
 Epoch: 19, lr: 1.0e-02, train_loss: 1.7428, train_acc: 0.3376 test_loss: 1.5989, test_acc: 0.3835, best: 0.4105, time: 0:02:17
 Epoch: 20, lr: 1.0e-02, train_loss: 1.7009, train_acc: 0.3514 test_loss: 1.5116, test_acc: 0.4181, best: 0.4181, time: 0:02:17
 Epoch: 21, lr: 1.0e-02, train_loss: 1.6868, train_acc: 0.3582 test_loss: 1.5280, test_acc: 0.4194, best: 0.4194, time: 0:02:17
 Epoch: 22, lr: 1.0e-02, train_loss: 1.6556, train_acc: 0.3666 test_loss: 1.5070, test_acc: 0.4233, best: 0.4233, time: 0:02:17
 Epoch: 23, lr: 1.0e-02, train_loss: 1.6476, train_acc: 0.3806 test_loss: 1.4899, test_acc: 0.4328, best: 0.4328, time: 0:02:17
 Epoch: 24, lr: 1.0e-02, train_loss: 1.6558, train_acc: 0.3756 test_loss: 1.6146, test_acc: 0.3728, best: 0.4328, time: 0:02:17
 Epoch: 25, lr: 1.0e-02, train_loss: 1.6869, train_acc: 0.3570 test_loss: 1.4172, test_acc: 0.4691, best: 0.4691, time: 0:02:17
 Epoch: 26, lr: 1.0e-02, train_loss: 1.6601, train_acc: 0.3780 test_loss: 1.4430, test_acc: 0.4592, best: 0.4691, time: 0:02:17
 Epoch: 27, lr: 1.0e-02, train_loss: 1.6456, train_acc: 0.3756 test_loss: 1.4445, test_acc: 0.4491, best: 0.4691, time: 0:02:17
 Epoch: 28, lr: 1.0e-02, train_loss: 1.6033, train_acc: 0.3934 test_loss: 1.4591, test_acc: 0.4470, best: 0.4691, time: 0:02:17
 Epoch: 29, lr: 1.0e-02, train_loss: 1.5862, train_acc: 0.4082 test_loss: 1.4317, test_acc: 0.4504, best: 0.4691, time: 0:02:17
 Epoch: 30, lr: 1.0e-02, train_loss: 1.5516, train_acc: 0.4180 test_loss: 1.3689, test_acc: 0.4735, best: 0.4735, time: 0:02:17
 Epoch: 31, lr: 1.0e-02, train_loss: 1.5418, train_acc: 0.4262 test_loss: 1.3729, test_acc: 0.4899, best: 0.4899, time: 0:02:17
 Epoch: 32, lr: 1.0e-02, train_loss: 1.5266, train_acc: 0.4392 test_loss: 1.3582, test_acc: 0.4879, best: 0.4899, time: 0:02:17
 Epoch: 33, lr: 1.0e-02, train_loss: 1.5114, train_acc: 0.4376 test_loss: 1.3567, test_acc: 0.4906, best: 0.4906, time: 0:02:17
 Epoch: 34, lr: 1.0e-02, train_loss: 1.5298, train_acc: 0.4296 test_loss: 1.3493, test_acc: 0.5084, best: 0.5084, time: 0:03:04
 Epoch: 35, lr: 1.0e-02, train_loss: 1.5322, train_acc: 0.4346 test_loss: 1.3915, test_acc: 0.4965, best: 0.5084, time: 0:02:17
 Epoch: 36, lr: 1.0e-02, train_loss: 1.5125, train_acc: 0.4308 test_loss: 1.2947, test_acc: 0.5236, best: 0.5236, time: 0:02:18
 Epoch: 37, lr: 1.0e-02, train_loss: 1.4859, train_acc: 0.4492 test_loss: 1.3131, test_acc: 0.5105, best: 0.5236, time: 0:02:17
 Epoch: 38, lr: 1.0e-02, train_loss: 1.4775, train_acc: 0.4560 test_loss: 1.3123, test_acc: 0.5171, best: 0.5236, time: 0:02:17
 Epoch: 39, lr: 1.0e-02, train_loss: 1.4736, train_acc: 0.4540 test_loss: 1.3078, test_acc: 0.5189, best: 0.5236, time: 0:02:17
 Epoch: 40, lr: 1.0e-02, train_loss: 1.5186, train_acc: 0.4428 test_loss: 1.3130, test_acc: 0.5199, best: 0.5236, time: 0:02:17
 Epoch: 41, lr: 1.0e-02, train_loss: 1.4541, train_acc: 0.4664 test_loss: 1.2571, test_acc: 0.5380, best: 0.5380, time: 0:02:17
 Epoch: 42, lr: 1.0e-02, train_loss: 1.4487, train_acc: 0.4612 test_loss: 1.2351, test_acc: 0.5466, best: 0.5466, time: 0:02:17
 Epoch: 43, lr: 1.0e-02, train_loss: 1.4247, train_acc: 0.4738 test_loss: 1.2645, test_acc: 0.5391, best: 0.5466, time: 0:02:17
 Epoch: 44, lr: 1.0e-02, train_loss: 1.4447, train_acc: 0.4624 test_loss: 1.2460, test_acc: 0.5455, best: 0.5466, time: 0:02:17
 Epoch: 45, lr: 1.0e-02, train_loss: 1.3903, train_acc: 0.4858 test_loss: 1.2709, test_acc: 0.5371, best: 0.5466, time: 0:02:17
 Epoch: 46, lr: 1.0e-02, train_loss: 1.3961, train_acc: 0.4742 test_loss: 1.2698, test_acc: 0.5367, best: 0.5466, time: 0:02:17
 Epoch: 47, lr: 1.0e-02, train_loss: 1.3565, train_acc: 0.4922 test_loss: 1.1990, test_acc: 0.5651, best: 0.5651, time: 0:02:17
 Epoch: 48, lr: 1.0e-02, train_loss: 1.3511, train_acc: 0.5054 test_loss: 1.1657, test_acc: 0.5697, best: 0.5697, time: 0:02:17
 Epoch: 49, lr: 1.0e-02, train_loss: 1.3377, train_acc: 0.5082 test_loss: 1.2576, test_acc: 0.5440, best: 0.5697, time: 0:02:17
 Epoch: 50, lr: 1.0e-02, train_loss: 1.3341, train_acc: 0.5042 test_loss: 1.2071, test_acc: 0.5696, best: 0.5697, time: 0:02:17
 Epoch: 51, lr: 1.0e-02, train_loss: 1.3154, train_acc: 0.5144 test_loss: 1.1331, test_acc: 0.5841, best: 0.5841, time: 0:02:17
 Epoch: 52, lr: 1.0e-02, train_loss: 1.3207, train_acc: 0.5204 test_loss: 1.1603, test_acc: 0.5864, best: 0.5864, time: 0:02:17
 Epoch: 53, lr: 1.0e-02, train_loss: 1.3245, train_acc: 0.5140 test_loss: 1.1381, test_acc: 0.5819, best: 0.5864, time: 0:02:17
 Epoch: 54, lr: 1.0e-02, train_loss: 1.3275, train_acc: 0.5148 test_loss: 1.1647, test_acc: 0.5806, best: 0.5864, time: 0:02:17
 Epoch: 55, lr: 1.0e-02, train_loss: 1.3179, train_acc: 0.5200 test_loss: 1.1666, test_acc: 0.5669, best: 0.5864, time: 0:02:17
 Epoch: 56, lr: 1.0e-02, train_loss: 1.3252, train_acc: 0.5166 test_loss: 1.1546, test_acc: 0.5824, best: 0.5864, time: 0:02:17
 Epoch: 57, lr: 1.0e-02, train_loss: 1.3051, train_acc: 0.5212 test_loss: 1.1367, test_acc: 0.5885, best: 0.5885, time: 0:02:17
 Epoch: 58, lr: 1.0e-02, train_loss: 1.3179, train_acc: 0.5168 test_loss: 1.1403, test_acc: 0.5885, best: 0.5885, time: 0:02:17
 Epoch: 59, lr: 1.0e-02, train_loss: 1.2901, train_acc: 0.5338 test_loss: 1.1956, test_acc: 0.5731, best: 0.5885, time: 0:02:17
 Epoch: 60, lr: 1.0e-02, train_loss: 1.2457, train_acc: 0.5396 test_loss: 1.1150, test_acc: 0.5980, best: 0.5980, time: 0:02:33
 Epoch: 61, lr: 1.0e-02, train_loss: 1.2464, train_acc: 0.5400 test_loss: 1.1059, test_acc: 0.6045, best: 0.6045, time: 0:02:19
 Epoch: 62, lr: 1.0e-02, train_loss: 1.2806, train_acc: 0.5354 test_loss: 1.1403, test_acc: 0.5929, best: 0.6045, time: 0:02:18
 Epoch: 63, lr: 1.0e-02, train_loss: 1.2523, train_acc: 0.5458 test_loss: 1.1415, test_acc: 0.5931, best: 0.6045, time: 0:02:17
 Epoch: 64, lr: 1.0e-02, train_loss: 1.2415, train_acc: 0.5520 test_loss: 1.1487, test_acc: 0.5854, best: 0.6045, time: 0:02:17
 Epoch: 65, lr: 1.0e-02, train_loss: 1.2267, train_acc: 0.5524 test_loss: 1.1374, test_acc: 0.5845, best: 0.6045, time: 0:02:17
 Epoch: 66, lr: 1.0e-02, train_loss: 1.2524, train_acc: 0.5428 test_loss: 1.1170, test_acc: 0.5869, best: 0.6045, time: 0:02:17
 Epoch: 67, lr: 1.0e-02, train_loss: 1.2453, train_acc: 0.5480 test_loss: 1.0820, test_acc: 0.6006, best: 0.6045, time: 0:02:17
 Epoch: 68, lr: 1.0e-02, train_loss: 1.2097, train_acc: 0.5590 test_loss: 1.0670, test_acc: 0.6169, best: 0.6169, time: 0:02:17
 Epoch: 69, lr: 1.0e-02, train_loss: 1.2161, train_acc: 0.5560 test_loss: 1.1152, test_acc: 0.6034, best: 0.6169, time: 0:02:17
 Epoch: 70, lr: 1.0e-02, train_loss: 1.2043, train_acc: 0.5602 test_loss: 1.0832, test_acc: 0.6094, best: 0.6169, time: 0:02:17
 Epoch: 71, lr: 1.0e-02, train_loss: 1.2029, train_acc: 0.5658 test_loss: 1.0325, test_acc: 0.6278, best: 0.6278, time: 0:02:17
 Epoch: 72, lr: 1.0e-02, train_loss: 1.1877, train_acc: 0.5694 test_loss: 1.0535, test_acc: 0.6206, best: 0.6278, time: 0:02:17
 Epoch: 73, lr: 1.0e-02, train_loss: 1.1957, train_acc: 0.5658 test_loss: 1.0319, test_acc: 0.6299, best: 0.6299, time: 0:02:17
 Epoch: 74, lr: 1.0e-02, train_loss: 1.1668, train_acc: 0.5750 test_loss: 1.0082, test_acc: 0.6369, best: 0.6369, time: 0:02:17
 Epoch: 75, lr: 1.0e-02, train_loss: 1.1540, train_acc: 0.5762 test_loss: 1.0590, test_acc: 0.6199, best: 0.6369, time: 0:02:17
 Epoch: 76, lr: 1.0e-02, train_loss: 1.1679, train_acc: 0.5790 test_loss: 1.0864, test_acc: 0.6125, best: 0.6369, time: 0:02:17
 Epoch: 77, lr: 1.0e-02, train_loss: 1.1825, train_acc: 0.5750 test_loss: 1.0635, test_acc: 0.6181, best: 0.6369, time: 0:02:17
 Epoch: 78, lr: 1.0e-02, train_loss: 1.1581, train_acc: 0.5818 test_loss: 0.9807, test_acc: 0.6475, best: 0.6475, time: 0:02:17
 Epoch: 79, lr: 1.0e-02, train_loss: 1.1437, train_acc: 0.5822 test_loss: 1.0199, test_acc: 0.6392, best: 0.6475, time: 0:02:17
 Epoch: 80, lr: 1.0e-02, train_loss: 1.2222, train_acc: 0.5608 test_loss: 1.0308, test_acc: 0.6336, best: 0.6475, time: 0:02:17
 Epoch: 81, lr: 1.0e-02, train_loss: 1.1807, train_acc: 0.5706 test_loss: 1.1012, test_acc: 0.6126, best: 0.6475, time: 0:02:17
 Epoch: 82, lr: 1.0e-02, train_loss: 1.1572, train_acc: 0.5844 test_loss: 0.9924, test_acc: 0.6469, best: 0.6475, time: 0:02:17
 Epoch: 83, lr: 1.0e-02, train_loss: 1.1072, train_acc: 0.5886 test_loss: 1.0062, test_acc: 0.6414, best: 0.6475, time: 0:02:17
 Epoch: 84, lr: 1.0e-02, train_loss: 1.1119, train_acc: 0.6012 test_loss: 0.9962, test_acc: 0.6436, best: 0.6475, time: 0:02:17
 Epoch: 85, lr: 1.0e-02, train_loss: 1.1286, train_acc: 0.5908 test_loss: 0.9678, test_acc: 0.6504, best: 0.6504, time: 0:02:17
 Epoch: 86, lr: 1.0e-02, train_loss: 1.1179, train_acc: 0.5958 test_loss: 0.9796, test_acc: 0.6462, best: 0.6504, time: 0:02:17
 Epoch: 87, lr: 1.0e-02, train_loss: 1.1100, train_acc: 0.5960 test_loss: 1.0106, test_acc: 0.6366, best: 0.6504, time: 0:02:17
 Epoch: 88, lr: 1.0e-02, train_loss: 1.1242, train_acc: 0.5942 test_loss: 0.9992, test_acc: 0.6475, best: 0.6504, time: 0:02:17
 Epoch: 89, lr: 1.0e-02, train_loss: 1.0832, train_acc: 0.6080 test_loss: 0.9706, test_acc: 0.6589, best: 0.6589, time: 0:02:17
 Epoch: 90, lr: 1.0e-02, train_loss: 1.0798, train_acc: 0.6106 test_loss: 1.0354, test_acc: 0.6326, best: 0.6589, time: 0:02:17
 Epoch: 91, lr: 1.0e-02, train_loss: 1.1215, train_acc: 0.5942 test_loss: 1.0121, test_acc: 0.6346, best: 0.6589, time: 0:02:17
 Epoch: 92, lr: 1.0e-02, train_loss: 1.1160, train_acc: 0.5892 test_loss: 0.9939, test_acc: 0.6449, best: 0.6589, time: 0:02:17
 Epoch: 93, lr: 1.0e-02, train_loss: 1.1343, train_acc: 0.5956 test_loss: 1.0016, test_acc: 0.6391, best: 0.6589, time: 0:02:17
 Epoch: 94, lr: 1.0e-02, train_loss: 1.0847, train_acc: 0.6052 test_loss: 0.9955, test_acc: 0.6398, best: 0.6589, time: 0:02:17
 Epoch: 95, lr: 1.0e-02, train_loss: 1.0933, train_acc: 0.6086 test_loss: 1.0378, test_acc: 0.6212, best: 0.6589, time: 0:02:17
 Epoch: 96, lr: 1.0e-02, train_loss: 1.0816, train_acc: 0.6104 test_loss: 0.9431, test_acc: 0.6594, best: 0.6594, time: 0:02:17
 Epoch: 97, lr: 1.0e-02, train_loss: 1.0604, train_acc: 0.6168 test_loss: 1.0063, test_acc: 0.6428, best: 0.6594, time: 0:02:17
 Epoch: 98, lr: 1.0e-02, train_loss: 1.0526, train_acc: 0.6250 test_loss: 0.9713, test_acc: 0.6548, best: 0.6594, time: 0:02:17
 Epoch: 99, lr: 1.0e-02, train_loss: 1.0615, train_acc: 0.6168 test_loss: 1.0382, test_acc: 0.6339, best: 0.6594, time: 0:02:17
 Epoch: 100, lr: 1.0e-02, train_loss: 1.0636, train_acc: 0.6198 test_loss: 0.9476, test_acc: 0.6657, best: 0.6657, time: 0:02:17
 Epoch: 101, lr: 1.0e-02, train_loss: 1.0758, train_acc: 0.6108 test_loss: 0.9796, test_acc: 0.6498, best: 0.6657, time: 0:02:17
 Epoch: 102, lr: 1.0e-02, train_loss: 1.0811, train_acc: 0.6092 test_loss: 0.9566, test_acc: 0.6548, best: 0.6657, time: 0:02:17
 Epoch: 103, lr: 1.0e-02, train_loss: 1.0411, train_acc: 0.6254 test_loss: 0.9256, test_acc: 0.6693, best: 0.6693, time: 0:02:17
 Epoch: 104, lr: 1.0e-02, train_loss: 1.0068, train_acc: 0.6374 test_loss: 0.9238, test_acc: 0.6645, best: 0.6693, time: 0:02:17
 Epoch: 105, lr: 1.0e-02, train_loss: 1.0244, train_acc: 0.6312 test_loss: 1.0404, test_acc: 0.6338, best: 0.6693, time: 0:02:17
 Epoch: 106, lr: 1.0e-02, train_loss: 1.0256, train_acc: 0.6270 test_loss: 1.0475, test_acc: 0.6325, best: 0.6693, time: 0:02:17
 Epoch: 107, lr: 1.0e-02, train_loss: 1.0204, train_acc: 0.6376 test_loss: 0.9194, test_acc: 0.6829, best: 0.6829, time: 0:02:17
 Epoch: 108, lr: 1.0e-02, train_loss: 0.9937, train_acc: 0.6374 test_loss: 0.9508, test_acc: 0.6524, best: 0.6829, time: 0:02:17
 Epoch: 109, lr: 1.0e-02, train_loss: 1.0028, train_acc: 0.6324 test_loss: 0.9049, test_acc: 0.6731, best: 0.6829, time: 0:02:17
 Epoch: 110, lr: 1.0e-02, train_loss: 0.9887, train_acc: 0.6432 test_loss: 0.9479, test_acc: 0.6581, best: 0.6829, time: 0:02:17
 Epoch: 111, lr: 1.0e-02, train_loss: 0.9893, train_acc: 0.6384 test_loss: 0.9383, test_acc: 0.6611, best: 0.6829, time: 0:02:17
 Epoch: 112, lr: 1.0e-02, train_loss: 1.0085, train_acc: 0.6416 test_loss: 0.9343, test_acc: 0.6654, best: 0.6829, time: 0:02:17
 Epoch: 113, lr: 1.0e-02, train_loss: 0.9876, train_acc: 0.6420 test_loss: 0.9109, test_acc: 0.6719, best: 0.6829, time: 0:02:17
 Epoch: 114, lr: 1.0e-02, train_loss: 0.9774, train_acc: 0.6496 test_loss: 1.0003, test_acc: 0.6404, best: 0.6829, time: 0:02:17
 Epoch: 115, lr: 1.0e-02, train_loss: 0.9798, train_acc: 0.6530 test_loss: 0.9353, test_acc: 0.6729, best: 0.6829, time: 0:02:17
 Epoch: 116, lr: 1.0e-02, train_loss: 0.9739, train_acc: 0.6492 test_loss: 1.0023, test_acc: 0.6441, best: 0.6829, time: 0:02:17
 Epoch: 117, lr: 1.0e-02, train_loss: 0.9809, train_acc: 0.6436 test_loss: 0.9442, test_acc: 0.6699, best: 0.6829, time: 0:02:17
 Epoch: 118, lr: 1.0e-02, train_loss: 0.9595, train_acc: 0.6598 test_loss: 0.9348, test_acc: 0.6636, best: 0.6829, time: 0:02:17
 Epoch: 119, lr: 1.0e-02, train_loss: 0.9204, train_acc: 0.6690 test_loss: 0.9610, test_acc: 0.6615, best: 0.6829, time: 0:02:17
 Epoch: 120, lr: 1.0e-02, train_loss: 0.9440, train_acc: 0.6628 test_loss: 0.8824, test_acc: 0.6889, best: 0.6889, time: 0:02:17
 Epoch: 121, lr: 1.0e-02, train_loss: 0.9674, train_acc: 0.6540 test_loss: 0.8787, test_acc: 0.6896, best: 0.6896, time: 0:02:17
 Epoch: 122, lr: 1.0e-02, train_loss: 0.9639, train_acc: 0.6562 test_loss: 0.8937, test_acc: 0.6836, best: 0.6896, time: 0:02:17
 Epoch: 123, lr: 1.0e-02, train_loss: 0.9437, train_acc: 0.6600 test_loss: 0.9168, test_acc: 0.6747, best: 0.6896, time: 0:02:17
 Epoch: 124, lr: 1.0e-02, train_loss: 0.9578, train_acc: 0.6564 test_loss: 0.8790, test_acc: 0.6856, best: 0.6896, time: 0:02:17
 Epoch: 125, lr: 1.0e-02, train_loss: 0.9641, train_acc: 0.6580 test_loss: 0.8726, test_acc: 0.6976, best: 0.6976, time: 0:02:17
 Epoch: 126, lr: 1.0e-02, train_loss: 0.9363, train_acc: 0.6552 test_loss: 0.8531, test_acc: 0.6954, best: 0.6976, time: 0:02:17
 Epoch: 127, lr: 1.0e-02, train_loss: 0.9543, train_acc: 0.6572 test_loss: 0.8922, test_acc: 0.6813, best: 0.6976, time: 0:02:17
 Epoch: 128, lr: 1.0e-02, train_loss: 0.9479, train_acc: 0.6630 test_loss: 0.8757, test_acc: 0.6914, best: 0.6976, time: 0:02:17
 Epoch: 129, lr: 1.0e-02, train_loss: 0.9273, train_acc: 0.6684 test_loss: 0.8601, test_acc: 0.6970, best: 0.6976, time: 0:02:17
 Epoch: 130, lr: 1.0e-02, train_loss: 0.9463, train_acc: 0.6554 test_loss: 0.9003, test_acc: 0.6764, best: 0.6976, time: 0:02:17
 Epoch: 131, lr: 1.0e-02, train_loss: 0.9454, train_acc: 0.6564 test_loss: 0.9037, test_acc: 0.6787, best: 0.6976, time: 0:02:17
 Epoch: 132, lr: 1.0e-02, train_loss: 0.9345, train_acc: 0.6614 test_loss: 0.9318, test_acc: 0.6694, best: 0.6976, time: 0:02:17
 Epoch: 133, lr: 1.0e-02, train_loss: 0.9471, train_acc: 0.6554 test_loss: 0.8768, test_acc: 0.6854, best: 0.6976, time: 0:02:17
 Epoch: 134, lr: 1.0e-02, train_loss: 0.9498, train_acc: 0.6566 test_loss: 0.8627, test_acc: 0.6959, best: 0.6976, time: 0:02:17
 Epoch: 135, lr: 1.0e-02, train_loss: 0.9177, train_acc: 0.6718 test_loss: 0.8574, test_acc: 0.6929, best: 0.6976, time: 0:02:17
 Epoch: 136, lr: 1.0e-02, train_loss: 0.8927, train_acc: 0.6826 test_loss: 0.8514, test_acc: 0.6944, best: 0.6976, time: 0:02:17
 Epoch: 137, lr: 1.0e-02, train_loss: 0.9191, train_acc: 0.6724 test_loss: 0.8621, test_acc: 0.7060, best: 0.7060, time: 0:02:17
 Epoch: 138, lr: 1.0e-02, train_loss: 0.9054, train_acc: 0.6764 test_loss: 0.8570, test_acc: 0.6977, best: 0.7060, time: 0:02:17
 Epoch: 139, lr: 1.0e-02, train_loss: 0.9181, train_acc: 0.6670 test_loss: 0.9225, test_acc: 0.6757, best: 0.7060, time: 0:02:17
 Epoch: 140, lr: 1.0e-02, train_loss: 0.9087, train_acc: 0.6750 test_loss: 0.8725, test_acc: 0.6863, best: 0.7060, time: 0:02:17
 Epoch: 141, lr: 1.0e-02, train_loss: 0.8946, train_acc: 0.6752 test_loss: 0.8853, test_acc: 0.6917, best: 0.7060, time: 0:02:17
 Epoch: 142, lr: 1.0e-02, train_loss: 0.9090, train_acc: 0.6784 test_loss: 0.8369, test_acc: 0.7050, best: 0.7060, time: 0:02:17
 Epoch: 143, lr: 1.0e-02, train_loss: 0.8973, train_acc: 0.6748 test_loss: 0.8653, test_acc: 0.6871, best: 0.7060, time: 0:02:17
 Epoch: 144, lr: 1.0e-02, train_loss: 0.9019, train_acc: 0.6770 test_loss: 0.8709, test_acc: 0.6903, best: 0.7060, time: 0:02:17
 Epoch: 145, lr: 1.0e-02, train_loss: 0.9000, train_acc: 0.6808 test_loss: 0.8510, test_acc: 0.6950, best: 0.7060, time: 0:02:17
 Epoch: 146, lr: 1.0e-02, train_loss: 0.9073, train_acc: 0.6732 test_loss: 0.8381, test_acc: 0.7015, best: 0.7060, time: 0:02:17
 Epoch: 147, lr: 1.0e-02, train_loss: 0.8800, train_acc: 0.6902 test_loss: 0.8486, test_acc: 0.6947, best: 0.7060, time: 0:02:17
 Epoch: 148, lr: 1.0e-02, train_loss: 0.8821, train_acc: 0.6846 test_loss: 0.8740, test_acc: 0.6944, best: 0.7060, time: 0:02:17
 Epoch: 149, lr: 1.0e-02, train_loss: 0.8905, train_acc: 0.6750 test_loss: 0.8552, test_acc: 0.6954, best: 0.7060, time: 0:02:17
 Epoch: 150, lr: 1.0e-02, train_loss: 0.8592, train_acc: 0.6846 test_loss: 0.8509, test_acc: 0.6970, best: 0.7060, time: 0:02:17
 Epoch: 151, lr: 1.0e-02, train_loss: 0.8706, train_acc: 0.6898 test_loss: 0.8010, test_acc: 0.7169, best: 0.7169, time: 0:02:17
 Epoch: 152, lr: 1.0e-02, train_loss: 0.8656, train_acc: 0.6972 test_loss: 0.8892, test_acc: 0.6843, best: 0.7169, time: 0:02:16
 Epoch: 153, lr: 1.0e-02, train_loss: 0.8549, train_acc: 0.6944 test_loss: 0.8542, test_acc: 0.6927, best: 0.7169, time: 0:02:17
 Epoch: 154, lr: 1.0e-02, train_loss: 0.8326, train_acc: 0.7040 test_loss: 0.8818, test_acc: 0.6939, best: 0.7169, time: 0:02:16
 Epoch: 155, lr: 1.0e-02, train_loss: 0.8486, train_acc: 0.6930 test_loss: 0.8629, test_acc: 0.6926, best: 0.7169, time: 0:02:16
 Epoch: 156, lr: 1.0e-02, train_loss: 0.8556, train_acc: 0.6996 test_loss: 0.8353, test_acc: 0.7037, best: 0.7169, time: 0:02:17
 Epoch: 157, lr: 1.0e-02, train_loss: 0.8296, train_acc: 0.6988 test_loss: 0.8418, test_acc: 0.6953, best: 0.7169, time: 0:02:17
 Epoch: 158, lr: 1.0e-02, train_loss: 0.8640, train_acc: 0.6932 test_loss: 0.8696, test_acc: 0.6969, best: 0.7169, time: 0:02:17
 Epoch: 159, lr: 1.0e-02, train_loss: 0.8277, train_acc: 0.7030 test_loss: 0.8368, test_acc: 0.7006, best: 0.7169, time: 0:02:17
 Epoch: 160, lr: 1.0e-02, train_loss: 0.8311, train_acc: 0.7026 test_loss: 0.8364, test_acc: 0.7084, best: 0.7169, time: 0:02:17
 Epoch: 161, lr: 1.0e-02, train_loss: 0.8236, train_acc: 0.7148 test_loss: 0.8519, test_acc: 0.7049, best: 0.7169, time: 0:02:17
 Epoch: 162, lr: 1.0e-02, train_loss: 0.8167, train_acc: 0.7080 test_loss: 0.9113, test_acc: 0.6763, best: 0.7169, time: 0:02:17
 Epoch: 163, lr: 1.0e-02, train_loss: 0.8464, train_acc: 0.6986 test_loss: 0.8950, test_acc: 0.6879, best: 0.7169, time: 0:02:17
 Epoch: 164, lr: 1.0e-02, train_loss: 0.8463, train_acc: 0.7002 test_loss: 0.8402, test_acc: 0.7119, best: 0.7169, time: 0:02:17
 Epoch: 165, lr: 1.0e-02, train_loss: 0.8369, train_acc: 0.7112 test_loss: 0.8198, test_acc: 0.7113, best: 0.7169, time: 0:02:17
 Epoch: 166, lr: 1.0e-02, train_loss: 0.8258, train_acc: 0.7066 test_loss: 0.8531, test_acc: 0.6989, best: 0.7169, time: 0:02:17
 Epoch: 167, lr: 1.0e-02, train_loss: 0.8381, train_acc: 0.7016 test_loss: 0.9122, test_acc: 0.6835, best: 0.7169, time: 0:02:17
 Epoch: 168, lr: 1.0e-02, train_loss: 0.8118, train_acc: 0.7078 test_loss: 0.8200, test_acc: 0.7077, best: 0.7169, time: 0:02:17
 Epoch: 169, lr: 1.0e-02, train_loss: 0.7982, train_acc: 0.7132 test_loss: 0.8412, test_acc: 0.7044, best: 0.7169, time: 0:02:17
 Epoch: 170, lr: 1.0e-02, train_loss: 0.8152, train_acc: 0.7058 test_loss: 0.8540, test_acc: 0.7000, best: 0.7169, time: 0:02:17
 Epoch: 171, lr: 1.0e-02, train_loss: 0.8090, train_acc: 0.7056 test_loss: 0.7986, test_acc: 0.7255, best: 0.7255, time: 0:02:17
 Epoch: 172, lr: 1.0e-02, train_loss: 0.8116, train_acc: 0.7110 test_loss: 0.8379, test_acc: 0.7044, best: 0.7255, time: 0:02:17
 Epoch: 173, lr: 1.0e-02, train_loss: 0.7993, train_acc: 0.7186 test_loss: 0.8310, test_acc: 0.7044, best: 0.7255, time: 0:02:17
 Epoch: 174, lr: 1.0e-02, train_loss: 0.7918, train_acc: 0.7122 test_loss: 0.7925, test_acc: 0.7261, best: 0.7261, time: 0:02:17
 Epoch: 175, lr: 1.0e-02, train_loss: 0.8097, train_acc: 0.7044 test_loss: 0.7851, test_acc: 0.7209, best: 0.7261, time: 0:02:16
 Epoch: 176, lr: 1.0e-02, train_loss: 0.8214, train_acc: 0.7098 test_loss: 0.8047, test_acc: 0.7103, best: 0.7261, time: 0:02:17
 Epoch: 177, lr: 1.0e-02, train_loss: 0.8475, train_acc: 0.6940 test_loss: 0.9295, test_acc: 0.6851, best: 0.7261, time: 0:02:17
 Epoch: 178, lr: 1.0e-02, train_loss: 0.8376, train_acc: 0.7026 test_loss: 0.8388, test_acc: 0.7059, best: 0.7261, time: 0:02:17
 Epoch: 179, lr: 1.0e-02, train_loss: 0.7989, train_acc: 0.7198 test_loss: 0.8968, test_acc: 0.6851, best: 0.7261, time: 0:02:17
 Epoch: 180, lr: 2.0e-03, train_loss: 0.7205, train_acc: 0.7444 test_loss: 0.7984, test_acc: 0.7206, best: 0.7261, time: 0:02:17
 Epoch: 181, lr: 2.0e-03, train_loss: 0.6826, train_acc: 0.7566 test_loss: 0.7514, test_acc: 0.7401, best: 0.7401, time: 0:02:17
 Epoch: 182, lr: 2.0e-03, train_loss: 0.6866, train_acc: 0.7570 test_loss: 0.7811, test_acc: 0.7294, best: 0.7401, time: 0:02:16
 Epoch: 183, lr: 2.0e-03, train_loss: 0.6624, train_acc: 0.7598 test_loss: 0.7508, test_acc: 0.7375, best: 0.7401, time: 0:02:17
 Epoch: 184, lr: 2.0e-03, train_loss: 0.6690, train_acc: 0.7664 test_loss: 0.7527, test_acc: 0.7389, best: 0.7401, time: 0:02:17
 Epoch: 185, lr: 2.0e-03, train_loss: 0.6464, train_acc: 0.7750 test_loss: 0.7495, test_acc: 0.7410, best: 0.7410, time: 0:02:17
 Epoch: 186, lr: 2.0e-03, train_loss: 0.6675, train_acc: 0.7548 test_loss: 0.7629, test_acc: 0.7412, best: 0.7412, time: 0:02:17
 Epoch: 187, lr: 2.0e-03, train_loss: 0.6414, train_acc: 0.7732 test_loss: 0.7427, test_acc: 0.7461, best: 0.7461, time: 0:02:17
 Epoch: 188, lr: 2.0e-03, train_loss: 0.6341, train_acc: 0.7790 test_loss: 0.7560, test_acc: 0.7375, best: 0.7461, time: 0:02:17
 Epoch: 189, lr: 2.0e-03, train_loss: 0.6440, train_acc: 0.7752 test_loss: 0.7666, test_acc: 0.7374, best: 0.7461, time: 0:02:17
 Epoch: 190, lr: 2.0e-03, train_loss: 0.6335, train_acc: 0.7738 test_loss: 0.7663, test_acc: 0.7372, best: 0.7461, time: 0:02:17
 Epoch: 191, lr: 2.0e-03, train_loss: 0.6266, train_acc: 0.7762 test_loss: 0.7908, test_acc: 0.7372, best: 0.7461, time: 0:02:17
 Epoch: 192, lr: 2.0e-03, train_loss: 0.6310, train_acc: 0.7712 test_loss: 0.7763, test_acc: 0.7359, best: 0.7461, time: 0:02:17
 Epoch: 193, lr: 2.0e-03, train_loss: 0.6393, train_acc: 0.7718 test_loss: 0.7770, test_acc: 0.7389, best: 0.7461, time: 0:02:17
 Epoch: 194, lr: 2.0e-03, train_loss: 0.6410, train_acc: 0.7752 test_loss: 0.8035, test_acc: 0.7264, best: 0.7461, time: 0:02:17
 Epoch: 195, lr: 2.0e-03, train_loss: 0.6025, train_acc: 0.7856 test_loss: 0.7736, test_acc: 0.7379, best: 0.7461, time: 0:02:17
 Epoch: 196, lr: 2.0e-03, train_loss: 0.6402, train_acc: 0.7686 test_loss: 0.7673, test_acc: 0.7376, best: 0.7461, time: 0:02:17
 Epoch: 197, lr: 2.0e-03, train_loss: 0.6378, train_acc: 0.7730 test_loss: 0.7748, test_acc: 0.7341, best: 0.7461, time: 0:02:17
 Epoch: 198, lr: 2.0e-03, train_loss: 0.6273, train_acc: 0.7762 test_loss: 0.7681, test_acc: 0.7398, best: 0.7461, time: 0:02:17
 Epoch: 199, lr: 2.0e-03, train_loss: 0.6296, train_acc: 0.7752 test_loss: 0.7602, test_acc: 0.7386, best: 0.7461, time: 0:02:17
 Epoch: 200, lr: 2.0e-03, train_loss: 0.6189, train_acc: 0.7754 test_loss: 0.7568, test_acc: 0.7420, best: 0.7461, time: 0:02:16
 Epoch: 201, lr: 2.0e-03, train_loss: 0.5969, train_acc: 0.7886 test_loss: 0.8158, test_acc: 0.7269, best: 0.7461, time: 0:02:17
 Epoch: 202, lr: 2.0e-03, train_loss: 0.6142, train_acc: 0.7764 test_loss: 0.7733, test_acc: 0.7348, best: 0.7461, time: 0:02:17
 Epoch: 203, lr: 2.0e-03, train_loss: 0.6034, train_acc: 0.7846 test_loss: 0.7827, test_acc: 0.7324, best: 0.7461, time: 0:02:17
 Epoch: 204, lr: 2.0e-03, train_loss: 0.5959, train_acc: 0.7938 test_loss: 0.7620, test_acc: 0.7428, best: 0.7461, time: 0:02:17
 Epoch: 205, lr: 2.0e-03, train_loss: 0.6045, train_acc: 0.7852 test_loss: 0.7934, test_acc: 0.7370, best: 0.7461, time: 0:02:17
 Epoch: 206, lr: 2.0e-03, train_loss: 0.5913, train_acc: 0.7884 test_loss: 0.7942, test_acc: 0.7322, best: 0.7461, time: 0:02:17
 Epoch: 207, lr: 2.0e-03, train_loss: 0.5880, train_acc: 0.7914 test_loss: 0.7687, test_acc: 0.7426, best: 0.7461, time: 0:02:17
 Epoch: 208, lr: 2.0e-03, train_loss: 0.5983, train_acc: 0.7866 test_loss: 0.7749, test_acc: 0.7414, best: 0.7461, time: 0:02:17
 Epoch: 209, lr: 2.0e-03, train_loss: 0.6227, train_acc: 0.7778 test_loss: 0.7590, test_acc: 0.7409, best: 0.7461, time: 0:02:17
 Epoch: 210, lr: 2.0e-03, train_loss: 0.6049, train_acc: 0.7946 test_loss: 0.7916, test_acc: 0.7364, best: 0.7461, time: 0:02:17
 Epoch: 211, lr: 2.0e-03, train_loss: 0.6054, train_acc: 0.7812 test_loss: 0.7692, test_acc: 0.7424, best: 0.7461, time: 0:02:17
 Epoch: 212, lr: 2.0e-03, train_loss: 0.5933, train_acc: 0.7906 test_loss: 0.8127, test_acc: 0.7284, best: 0.7461, time: 0:02:17
 Epoch: 213, lr: 2.0e-03, train_loss: 0.5728, train_acc: 0.7986 test_loss: 0.7676, test_acc: 0.7424, best: 0.7461, time: 0:02:17
 Epoch: 214, lr: 2.0e-03, train_loss: 0.5981, train_acc: 0.7812 test_loss: 0.7763, test_acc: 0.7365, best: 0.7461, time: 0:02:17
 Epoch: 215, lr: 2.0e-03, train_loss: 0.6143, train_acc: 0.7832 test_loss: 0.7542, test_acc: 0.7401, best: 0.7461, time: 0:02:17
 Epoch: 216, lr: 2.0e-03, train_loss: 0.5700, train_acc: 0.8004 test_loss: 0.7786, test_acc: 0.7425, best: 0.7461, time: 0:02:17
 Epoch: 217, lr: 2.0e-03, train_loss: 0.5798, train_acc: 0.7936 test_loss: 0.7663, test_acc: 0.7468, best: 0.7468, time: 0:02:17
 Epoch: 218, lr: 2.0e-03, train_loss: 0.6239, train_acc: 0.7808 test_loss: 0.7870, test_acc: 0.7345, best: 0.7468, time: 0:02:17
 Epoch: 219, lr: 2.0e-03, train_loss: 0.5802, train_acc: 0.7966 test_loss: 0.7643, test_acc: 0.7400, best: 0.7468, time: 0:02:17
 Epoch: 220, lr: 2.0e-03, train_loss: 0.5955, train_acc: 0.7942 test_loss: 0.7960, test_acc: 0.7360, best: 0.7468, time: 0:02:17
 Epoch: 221, lr: 2.0e-03, train_loss: 0.5839, train_acc: 0.7920 test_loss: 0.7888, test_acc: 0.7352, best: 0.7468, time: 0:02:17
 Epoch: 222, lr: 2.0e-03, train_loss: 0.5845, train_acc: 0.7926 test_loss: 0.8005, test_acc: 0.7325, best: 0.7468, time: 0:02:17
 Epoch: 223, lr: 2.0e-03, train_loss: 0.5790, train_acc: 0.7980 test_loss: 0.7828, test_acc: 0.7416, best: 0.7468, time: 0:02:17
 Epoch: 224, lr: 2.0e-03, train_loss: 0.5908, train_acc: 0.7878 test_loss: 0.7786, test_acc: 0.7395, best: 0.7468, time: 0:02:17
 Epoch: 225, lr: 2.0e-03, train_loss: 0.5815, train_acc: 0.7948 test_loss: 0.8038, test_acc: 0.7285, best: 0.7468, time: 0:02:17
 Epoch: 226, lr: 2.0e-03, train_loss: 0.5816, train_acc: 0.7880 test_loss: 0.7760, test_acc: 0.7378, best: 0.7468, time: 0:02:17
 Epoch: 227, lr: 2.0e-03, train_loss: 0.5440, train_acc: 0.8054 test_loss: 0.7858, test_acc: 0.7424, best: 0.7468, time: 0:02:17
 Epoch: 228, lr: 2.0e-03, train_loss: 0.5778, train_acc: 0.7954 test_loss: 0.8188, test_acc: 0.7284, best: 0.7468, time: 0:02:17
 Epoch: 229, lr: 2.0e-03, train_loss: 0.5905, train_acc: 0.7974 test_loss: 0.7921, test_acc: 0.7354, best: 0.7468, time: 0:02:17
 Epoch: 230, lr: 2.0e-03, train_loss: 0.5785, train_acc: 0.7916 test_loss: 0.7784, test_acc: 0.7398, best: 0.7468, time: 0:02:17
 Epoch: 231, lr: 2.0e-03, train_loss: 0.5496, train_acc: 0.8066 test_loss: 0.7963, test_acc: 0.7368, best: 0.7468, time: 0:02:17
 Epoch: 232, lr: 2.0e-03, train_loss: 0.5784, train_acc: 0.7964 test_loss: 0.8148, test_acc: 0.7299, best: 0.7468, time: 0:02:16
 Epoch: 233, lr: 2.0e-03, train_loss: 0.5891, train_acc: 0.7930 test_loss: 0.7727, test_acc: 0.7391, best: 0.7468, time: 0:02:17
 Epoch: 234, lr: 2.0e-03, train_loss: 0.5756, train_acc: 0.7960 test_loss: 0.7772, test_acc: 0.7384, best: 0.7468, time: 0:02:17
 Epoch: 235, lr: 2.0e-03, train_loss: 0.5711, train_acc: 0.8026 test_loss: 0.7448, test_acc: 0.7479, best: 0.7479, time: 0:02:17
 Epoch: 236, lr: 2.0e-03, train_loss: 0.5633, train_acc: 0.8050 test_loss: 0.7568, test_acc: 0.7472, best: 0.7479, time: 0:02:17
 Epoch: 237, lr: 2.0e-03, train_loss: 0.5634, train_acc: 0.8006 test_loss: 0.7690, test_acc: 0.7445, best: 0.7479, time: 0:02:17
 Epoch: 238, lr: 2.0e-03, train_loss: 0.5650, train_acc: 0.8014 test_loss: 0.7734, test_acc: 0.7416, best: 0.7479, time: 0:02:17
 Epoch: 239, lr: 2.0e-03, train_loss: 0.5566, train_acc: 0.7938 test_loss: 0.7757, test_acc: 0.7406, best: 0.7479, time: 0:02:17
 Epoch: 240, lr: 4.0e-04, train_loss: 0.5345, train_acc: 0.8134 test_loss: 0.7588, test_acc: 0.7504, best: 0.7504, time: 0:02:17
 Epoch: 241, lr: 4.0e-04, train_loss: 0.5499, train_acc: 0.8066 test_loss: 0.7682, test_acc: 0.7416, best: 0.7504, time: 0:02:17
 Epoch: 242, lr: 4.0e-04, train_loss: 0.5257, train_acc: 0.8176 test_loss: 0.7515, test_acc: 0.7532, best: 0.7532, time: 0:02:17
 Epoch: 243, lr: 4.0e-04, train_loss: 0.5400, train_acc: 0.8070 test_loss: 0.7541, test_acc: 0.7519, best: 0.7532, time: 0:02:17
 Epoch: 244, lr: 4.0e-04, train_loss: 0.5097, train_acc: 0.8156 test_loss: 0.7713, test_acc: 0.7435, best: 0.7532, time: 0:02:17
 Epoch: 245, lr: 4.0e-04, train_loss: 0.5304, train_acc: 0.8122 test_loss: 0.7537, test_acc: 0.7472, best: 0.7532, time: 0:02:17
 Epoch: 246, lr: 4.0e-04, train_loss: 0.5296, train_acc: 0.8162 test_loss: 0.7966, test_acc: 0.7420, best: 0.7532, time: 0:02:17
 Epoch: 247, lr: 4.0e-04, train_loss: 0.5311, train_acc: 0.8156 test_loss: 0.7679, test_acc: 0.7440, best: 0.7532, time: 0:02:17
 Epoch: 248, lr: 4.0e-04, train_loss: 0.5346, train_acc: 0.8152 test_loss: 0.7852, test_acc: 0.7432, best: 0.7532, time: 0:02:17
 Epoch: 249, lr: 4.0e-04, train_loss: 0.5195, train_acc: 0.8172 test_loss: 0.7671, test_acc: 0.7476, best: 0.7532, time: 0:02:17
 Epoch: 250, lr: 4.0e-04, train_loss: 0.5195, train_acc: 0.8154 test_loss: 0.7726, test_acc: 0.7472, best: 0.7532, time: 0:02:17
 Epoch: 251, lr: 4.0e-04, train_loss: 0.5283, train_acc: 0.8110 test_loss: 0.7772, test_acc: 0.7454, best: 0.7532, time: 0:02:17
 Epoch: 252, lr: 4.0e-04, train_loss: 0.5321, train_acc: 0.8132 test_loss: 0.7715, test_acc: 0.7491, best: 0.7532, time: 0:02:17
 Epoch: 253, lr: 4.0e-04, train_loss: 0.5305, train_acc: 0.8166 test_loss: 0.7552, test_acc: 0.7450, best: 0.7532, time: 0:02:17
 Epoch: 254, lr: 4.0e-04, train_loss: 0.5379, train_acc: 0.8116 test_loss: 0.7709, test_acc: 0.7484, best: 0.7532, time: 0:02:17
 Epoch: 255, lr: 4.0e-04, train_loss: 0.5102, train_acc: 0.8274 test_loss: 0.7632, test_acc: 0.7515, best: 0.7532, time: 0:02:17
 Epoch: 256, lr: 4.0e-04, train_loss: 0.5350, train_acc: 0.8138 test_loss: 0.7775, test_acc: 0.7444, best: 0.7532, time: 0:02:17
 Epoch: 257, lr: 4.0e-04, train_loss: 0.5339, train_acc: 0.8076 test_loss: 0.7676, test_acc: 0.7499, best: 0.7532, time: 0:02:17
 Epoch: 258, lr: 4.0e-04, train_loss: 0.5159, train_acc: 0.8208 test_loss: 0.7703, test_acc: 0.7484, best: 0.7532, time: 0:02:17
 Epoch: 259, lr: 4.0e-04, train_loss: 0.5455, train_acc: 0.8122 test_loss: 0.7818, test_acc: 0.7455, best: 0.7532, time: 0:02:17
 Epoch: 260, lr: 4.0e-04, train_loss: 0.5201, train_acc: 0.8152 test_loss: 0.7721, test_acc: 0.7484, best: 0.7532, time: 0:02:17
 Epoch: 261, lr: 4.0e-04, train_loss: 0.5407, train_acc: 0.8066 test_loss: 0.7656, test_acc: 0.7539, best: 0.7539, time: 0:02:17
 Epoch: 262, lr: 4.0e-04, train_loss: 0.5157, train_acc: 0.8192 test_loss: 0.7766, test_acc: 0.7464, best: 0.7539, time: 0:02:17
 Epoch: 263, lr: 4.0e-04, train_loss: 0.5244, train_acc: 0.8172 test_loss: 0.7674, test_acc: 0.7494, best: 0.7539, time: 0:02:17
 Epoch: 264, lr: 4.0e-04, train_loss: 0.5181, train_acc: 0.8178 test_loss: 0.7661, test_acc: 0.7436, best: 0.7539, time: 0:02:17
 Epoch: 265, lr: 4.0e-04, train_loss: 0.5112, train_acc: 0.8190 test_loss: 0.7814, test_acc: 0.7470, best: 0.7539, time: 0:02:17
 Epoch: 266, lr: 4.0e-04, train_loss: 0.4938, train_acc: 0.8260 test_loss: 0.7663, test_acc: 0.7465, best: 0.7539, time: 0:02:17
 Epoch: 267, lr: 4.0e-04, train_loss: 0.5044, train_acc: 0.8246 test_loss: 0.7850, test_acc: 0.7460, best: 0.7539, time: 0:02:17
 Epoch: 268, lr: 4.0e-04, train_loss: 0.4990, train_acc: 0.8220 test_loss: 0.7782, test_acc: 0.7490, best: 0.7539, time: 0:02:17
 Epoch: 269, lr: 4.0e-04, train_loss: 0.5228, train_acc: 0.8150 test_loss: 0.7777, test_acc: 0.7478, best: 0.7539, time: 0:02:17
 Epoch: 270, lr: 8.0e-05, train_loss: 0.5110, train_acc: 0.8128 test_loss: 0.7687, test_acc: 0.7480, best: 0.7539, time: 0:02:17
 Epoch: 271, lr: 8.0e-05, train_loss: 0.5085, train_acc: 0.8170 test_loss: 0.7735, test_acc: 0.7508, best: 0.7539, time: 0:02:17
 Epoch: 272, lr: 8.0e-05, train_loss: 0.5118, train_acc: 0.8230 test_loss: 0.7752, test_acc: 0.7479, best: 0.7539, time: 0:02:17
 Epoch: 273, lr: 8.0e-05, train_loss: 0.5002, train_acc: 0.8274 test_loss: 0.7840, test_acc: 0.7495, best: 0.7539, time: 0:02:17
 Epoch: 274, lr: 8.0e-05, train_loss: 0.5095, train_acc: 0.8210 test_loss: 0.7756, test_acc: 0.7464, best: 0.7539, time: 0:02:17
 Epoch: 275, lr: 8.0e-05, train_loss: 0.5085, train_acc: 0.8230 test_loss: 0.7837, test_acc: 0.7496, best: 0.7539, time: 0:02:17
 Epoch: 276, lr: 8.0e-05, train_loss: 0.5082, train_acc: 0.8208 test_loss: 0.7738, test_acc: 0.7461, best: 0.7539, time: 0:02:17
 Epoch: 277, lr: 8.0e-05, train_loss: 0.5201, train_acc: 0.8124 test_loss: 0.7937, test_acc: 0.7422, best: 0.7539, time: 0:02:17
 Epoch: 278, lr: 8.0e-05, train_loss: 0.4993, train_acc: 0.8224 test_loss: 0.7712, test_acc: 0.7480, best: 0.7539, time: 0:02:17
 Epoch: 279, lr: 8.0e-05, train_loss: 0.5155, train_acc: 0.8204 test_loss: 0.7671, test_acc: 0.7472, best: 0.7539, time: 0:02:17
 Epoch: 280, lr: 8.0e-05, train_loss: 0.5182, train_acc: 0.8160 test_loss: 0.7729, test_acc: 0.7445, best: 0.7539, time: 0:02:17
 Epoch: 281, lr: 8.0e-05, train_loss: 0.5049, train_acc: 0.8204 test_loss: 0.7699, test_acc: 0.7492, best: 0.7539, time: 0:02:17
 Epoch: 282, lr: 8.0e-05, train_loss: 0.5303, train_acc: 0.8128 test_loss: 0.7924, test_acc: 0.7454, best: 0.7539, time: 0:02:17
 Epoch: 283, lr: 8.0e-05, train_loss: 0.5029, train_acc: 0.8208 test_loss: 0.7804, test_acc: 0.7489, best: 0.7539, time: 0:02:17
 Epoch: 284, lr: 8.0e-05, train_loss: 0.5086, train_acc: 0.8224 test_loss: 0.7927, test_acc: 0.7461, best: 0.7539, time: 0:02:17
 Epoch: 285, lr: 8.0e-05, train_loss: 0.5267, train_acc: 0.8140 test_loss: 0.7745, test_acc: 0.7486, best: 0.7539, time: 0:02:16
 Epoch: 286, lr: 8.0e-05, train_loss: 0.5079, train_acc: 0.8258 test_loss: 0.7853, test_acc: 0.7474, best: 0.7539, time: 0:02:17
 Epoch: 287, lr: 8.0e-05, train_loss: 0.5007, train_acc: 0.8240 test_loss: 0.7721, test_acc: 0.7458, best: 0.7539, time: 0:02:17
 Epoch: 288, lr: 8.0e-05, train_loss: 0.5045, train_acc: 0.8170 test_loss: 0.7754, test_acc: 0.7475, best: 0.7539, time: 0:02:17
 Epoch: 289, lr: 8.0e-05, train_loss: 0.4975, train_acc: 0.8254 test_loss: 0.7896, test_acc: 0.7446, best: 0.7539, time: 0:02:16
 Epoch: 290, lr: 8.0e-05, train_loss: 0.5165, train_acc: 0.8212 test_loss: 0.7864, test_acc: 0.7456, best: 0.7539, time: 0:02:16
 Epoch: 291, lr: 8.0e-05, train_loss: 0.5162, train_acc: 0.8186 test_loss: 0.7686, test_acc: 0.7466, best: 0.7539, time: 0:02:16
 Epoch: 292, lr: 8.0e-05, train_loss: 0.5214, train_acc: 0.8134 test_loss: 0.7890, test_acc: 0.7451, best: 0.7539, time: 0:02:17
 Epoch: 293, lr: 8.0e-05, train_loss: 0.5137, train_acc: 0.8170 test_loss: 0.7837, test_acc: 0.7512, best: 0.7539, time: 0:02:16
 Epoch: 294, lr: 8.0e-05, train_loss: 0.5103, train_acc: 0.8142 test_loss: 0.7678, test_acc: 0.7441, best: 0.7539, time: 0:02:17
 Epoch: 295, lr: 8.0e-05, train_loss: 0.4784, train_acc: 0.8372 test_loss: 0.7737, test_acc: 0.7501, best: 0.7539, time: 0:02:17
 Epoch: 296, lr: 8.0e-05, train_loss: 0.5058, train_acc: 0.8178 test_loss: 0.7735, test_acc: 0.7465, best: 0.7539, time: 0:02:16
 Epoch: 297, lr: 8.0e-05, train_loss: 0.4923, train_acc: 0.8296 test_loss: 0.7765, test_acc: 0.7522, best: 0.7539, time: 0:02:16
 Epoch: 298, lr: 8.0e-05, train_loss: 0.5292, train_acc: 0.8158 test_loss: 0.7668, test_acc: 0.7456, best: 0.7539, time: 0:02:16
 Epoch: 299, lr: 8.0e-05, train_loss: 0.5029, train_acc: 0.8258 test_loss: 0.7792, test_acc: 0.7501, best: 0.7539, time: 0:02:16
 Highest accuracy: 0.7539