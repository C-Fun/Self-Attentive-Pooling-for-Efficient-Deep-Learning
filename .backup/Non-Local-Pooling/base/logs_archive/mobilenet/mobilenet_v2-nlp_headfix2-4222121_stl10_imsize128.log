
 Run on time: 2022-07-03 16:45:11.537204

 Architecture: mobilenet_v2-nlp_headfix2-4222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {}
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 4,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : MOBILENET_V2-NLP_HEADFIX2-4222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 8)
                  (col_embed): Embedding(256, 8)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 12)
                  (col_embed): Embedding(256, 12)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 16)
                  (col_embed): Embedding(256, 16)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 32)
                  (col_embed): Embedding(256, 32)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(160, 160, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=160, out_features=160, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(160, 160, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 80)
                  (col_embed): Embedding(256, 80)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.2383, train_acc: 0.1068 test_loss: 2.4584, test_acc: 0.1055, best: 0.1055, time: 0:02:03
 Epoch: 2, lr: 1.0e-02, train_loss: 2.4637, train_acc: 0.1278 test_loss: 2.3128, test_acc: 0.1289, best: 0.1289, time: 0:02:06
 Epoch: 3, lr: 1.0e-02, train_loss: 2.3746, train_acc: 0.1238 test_loss: 2.2843, test_acc: 0.1175, best: 0.1289, time: 0:02:06
 Epoch: 4, lr: 1.0e-02, train_loss: 2.3353, train_acc: 0.1256 test_loss: 2.3115, test_acc: 0.1393, best: 0.1393, time: 0:02:06
 Epoch: 5, lr: 1.0e-02, train_loss: 2.3017, train_acc: 0.1324 test_loss: 2.2698, test_acc: 0.1056, best: 0.1393, time: 0:02:06
 Epoch: 6, lr: 1.0e-02, train_loss: 2.3067, train_acc: 0.1306 test_loss: 2.2375, test_acc: 0.1633, best: 0.1633, time: 0:02:05
 Epoch: 7, lr: 1.0e-02, train_loss: 2.2671, train_acc: 0.1492 test_loss: 2.2460, test_acc: 0.1772, best: 0.1772, time: 0:02:05
 Epoch: 8, lr: 1.0e-02, train_loss: 2.2698, train_acc: 0.1406 test_loss: 2.2533, test_acc: 0.1424, best: 0.1772, time: 0:02:06
 Epoch: 9, lr: 1.0e-02, train_loss: 2.2600, train_acc: 0.1468 test_loss: 2.2181, test_acc: 0.1785, best: 0.1785, time: 0:02:06
 Epoch: 10, lr: 1.0e-02, train_loss: 2.2404, train_acc: 0.1580 test_loss: 2.2267, test_acc: 0.1520, best: 0.1785, time: 0:02:06
 Epoch: 11, lr: 1.0e-02, train_loss: 2.2293, train_acc: 0.1442 test_loss: 2.2210, test_acc: 0.1659, best: 0.1785, time: 0:02:06
 Epoch: 12, lr: 1.0e-02, train_loss: 2.2197, train_acc: 0.1718 test_loss: 2.1921, test_acc: 0.1811, best: 0.1811, time: 0:02:06
 Epoch: 13, lr: 1.0e-02, train_loss: 2.2104, train_acc: 0.1728 test_loss: 2.1854, test_acc: 0.1895, best: 0.1895, time: 0:02:06
 Epoch: 14, lr: 1.0e-02, train_loss: 2.2137, train_acc: 0.1746 test_loss: 2.2396, test_acc: 0.1950, best: 0.1950, time: 0:02:06
 Epoch: 15, lr: 1.0e-02, train_loss: 2.2016, train_acc: 0.1728 test_loss: 2.1832, test_acc: 0.1984, best: 0.1984, time: 0:02:06
 Epoch: 16, lr: 1.0e-02, train_loss: 2.1954, train_acc: 0.1840 test_loss: 2.1873, test_acc: 0.2179, best: 0.2179, time: 0:02:06
 Epoch: 17, lr: 1.0e-02, train_loss: 2.2103, train_acc: 0.1712 test_loss: 2.1676, test_acc: 0.2157, best: 0.2179, time: 0:02:06
 Epoch: 18, lr: 1.0e-02, train_loss: 2.2413, train_acc: 0.1540 test_loss: 2.2848, test_acc: 0.1263, best: 0.2179, time: 0:02:06
 Epoch: 19, lr: 1.0e-02, train_loss: 2.2658, train_acc: 0.1354 test_loss: 2.2457, test_acc: 0.1694, best: 0.2179, time: 0:02:06
 Epoch: 20, lr: 1.0e-02, train_loss: 2.2440, train_acc: 0.1492 test_loss: 2.2226, test_acc: 0.1596, best: 0.2179, time: 0:02:06
 Epoch: 21, lr: 1.0e-02, train_loss: 2.2530, train_acc: 0.1510 test_loss: 2.2000, test_acc: 0.1829, best: 0.2179, time: 0:02:06
 Epoch: 22, lr: 1.0e-02, train_loss: 2.2368, train_acc: 0.1570 test_loss: 2.2254, test_acc: 0.1661, best: 0.2179, time: 0:02:06
 Epoch: 23, lr: 1.0e-02, train_loss: 2.2252, train_acc: 0.1634 test_loss: 2.1996, test_acc: 0.1914, best: 0.2179, time: 0:02:06
 Epoch: 24, lr: 1.0e-02, train_loss: 2.2134, train_acc: 0.1652 test_loss: 2.2050, test_acc: 0.1884, best: 0.2179, time: 0:02:06
 Epoch: 25, lr: 1.0e-02, train_loss: 2.1936, train_acc: 0.1708 test_loss: 2.1597, test_acc: 0.1974, best: 0.2179, time: 0:02:06
 Epoch: 26, lr: 1.0e-02, train_loss: 2.1614, train_acc: 0.1840 test_loss: 2.1629, test_acc: 0.1953, best: 0.2179, time: 0:02:06
 Epoch: 27, lr: 1.0e-02, train_loss: 2.1745, train_acc: 0.1932 test_loss: 2.1759, test_acc: 0.1786, best: 0.2179, time: 0:02:06
 Epoch: 28, lr: 1.0e-02, train_loss: 2.1906, train_acc: 0.1788 test_loss: 2.2239, test_acc: 0.1734, best: 0.2179, time: 0:02:06
 Epoch: 29, lr: 1.0e-02, train_loss: 2.2016, train_acc: 0.1788 test_loss: 2.2261, test_acc: 0.1570, best: 0.2179, time: 0:02:06
 Epoch: 30, lr: 1.0e-02, train_loss: 2.1875, train_acc: 0.1856 test_loss: 2.1967, test_acc: 0.1772, best: 0.2179, time: 0:02:06
 Epoch: 31, lr: 1.0e-02, train_loss: 2.1652, train_acc: 0.1888 test_loss: 2.1531, test_acc: 0.1944, best: 0.2179, time: 0:02:06
 Epoch: 32, lr: 1.0e-02, train_loss: 2.2162, train_acc: 0.1522 test_loss: 2.2229, test_acc: 0.1621, best: 0.2179, time: 0:02:06
 Epoch: 33, lr: 1.0e-02, train_loss: 2.1866, train_acc: 0.1742 test_loss: 2.1852, test_acc: 0.1579, best: 0.2179, time: 0:02:06
 Epoch: 34, lr: 1.0e-02, train_loss: 2.1583, train_acc: 0.1792 test_loss: 2.1604, test_acc: 0.1766, best: 0.2179, time: 0:02:06
 Epoch: 35, lr: 1.0e-02, train_loss: 2.1458, train_acc: 0.1986 test_loss: 2.1674, test_acc: 0.1829, best: 0.2179, time: 0:02:06
 Epoch: 36, lr: 1.0e-02, train_loss: 2.1563, train_acc: 0.1984 test_loss: 2.2121, test_acc: 0.1541, best: 0.2179, time: 0:02:06
 Epoch: 37, lr: 1.0e-02, train_loss: 2.2005, train_acc: 0.1710 test_loss: 2.2359, test_acc: 0.1593, best: 0.2179, time: 0:02:06
 Epoch: 38, lr: 1.0e-02, train_loss: 2.1784, train_acc: 0.1802 test_loss: 2.1720, test_acc: 0.1974, best: 0.2179, time: 0:02:05
 Epoch: 39, lr: 1.0e-02, train_loss: 2.1521, train_acc: 0.1948 test_loss: 2.0927, test_acc: 0.2298, best: 0.2298, time: 0:02:06
 Epoch: 40, lr: 1.0e-02, train_loss: 2.1409, train_acc: 0.1908 test_loss: 2.1090, test_acc: 0.2266, best: 0.2298, time: 0:02:06
 Epoch: 41, lr: 1.0e-02, train_loss: 2.1517, train_acc: 0.1952 test_loss: 2.1402, test_acc: 0.2065, best: 0.2298, time: 0:02:06
 Epoch: 42, lr: 1.0e-02, train_loss: 2.1959, train_acc: 0.1848 test_loss: 2.1864, test_acc: 0.1751, best: 0.2298, time: 0:02:06
 Epoch: 43, lr: 1.0e-02, train_loss: 2.1989, train_acc: 0.1748 test_loss: 2.2556, test_acc: 0.1330, best: 0.2298, time: 0:02:06
 Epoch: 44, lr: 1.0e-02, train_loss: 2.2272, train_acc: 0.1552 test_loss: 2.3530, test_acc: 0.1344, best: 0.2298, time: 0:02:06
 Epoch: 45, lr: 1.0e-02, train_loss: 2.2225, train_acc: 0.1574 test_loss: 2.2910, test_acc: 0.1660, best: 0.2298, time: 0:02:06
 Epoch: 46, lr: 1.0e-02, train_loss: 2.2038, train_acc: 0.1738 test_loss: 2.1783, test_acc: 0.2059, best: 0.2298, time: 0:02:06
 Epoch: 47, lr: 1.0e-02, train_loss: 2.1982, train_acc: 0.1706 test_loss: 2.1848, test_acc: 0.1852, best: 0.2298, time: 0:02:06
 Epoch: 48, lr: 1.0e-02, train_loss: 2.2220, train_acc: 0.1600 test_loss: 2.1894, test_acc: 0.1911, best: 0.2298, time: 0:02:06
 Epoch: 49, lr: 1.0e-02, train_loss: 2.2047, train_acc: 0.1680 test_loss: 2.2192, test_acc: 0.1466, best: 0.2298, time: 0:02:06
 Epoch: 50, lr: 1.0e-02, train_loss: 2.2154, train_acc: 0.1712 test_loss: 2.1897, test_acc: 0.1883, best: 0.2298, time: 0:02:06
 Epoch: 51, lr: 1.0e-02, train_loss: 2.2081, train_acc: 0.1672 test_loss: 2.1866, test_acc: 0.1875, best: 0.2298, time: 0:02:06
 Epoch: 52, lr: 1.0e-02, train_loss: 2.2093, train_acc: 0.1614 test_loss: 2.2053, test_acc: 0.1958, best: 0.2298, time: 0:02:06
 Epoch: 53, lr: 1.0e-02, train_loss: 2.2030, train_acc: 0.1670 test_loss: 2.1664, test_acc: 0.1953, best: 0.2298, time: 0:02:06
 Epoch: 54, lr: 1.0e-02, train_loss: 2.1974, train_acc: 0.1734 test_loss: 2.1508, test_acc: 0.2013, best: 0.2298, time: 0:02:06
 Epoch: 55, lr: 1.0e-02, train_loss: 2.1957, train_acc: 0.1816 test_loss: 2.2407, test_acc: 0.1999, best: 0.2298, time: 0:02:06
 Epoch: 56, lr: 1.0e-02, train_loss: 2.2049, train_acc: 0.1568 test_loss: 2.2065, test_acc: 0.1673, best: 0.2298, time: 0:02:06
 Epoch: 57, lr: 1.0e-02, train_loss: 2.1767, train_acc: 0.1878 test_loss: 2.1868, test_acc: 0.1924, best: 0.2298, time: 0:02:06
 Epoch: 58, lr: 1.0e-02, train_loss: 2.1557, train_acc: 0.1920 test_loss: 2.1508, test_acc: 0.1970, best: 0.2298, time: 0:02:06
 Epoch: 59, lr: 1.0e-02, train_loss: 2.1415, train_acc: 0.1908 test_loss: 2.0913, test_acc: 0.2426, best: 0.2426, time: 0:02:06
 Epoch: 60, lr: 1.0e-02, train_loss: 2.1728, train_acc: 0.1788 test_loss: 2.2134, test_acc: 0.1527, best: 0.2426, time: 0:02:06
 Epoch: 61, lr: 1.0e-02, train_loss: 2.1695, train_acc: 0.1888 test_loss: 2.1993, test_acc: 0.1744, best: 0.2426, time: 0:02:06
 Epoch: 62, lr: 1.0e-02, train_loss: 2.1575, train_acc: 0.1860 test_loss: 2.1549, test_acc: 0.2009, best: 0.2426, time: 0:02:06
 Epoch: 63, lr: 1.0e-02, train_loss: 2.1599, train_acc: 0.1916 test_loss: 2.1215, test_acc: 0.2254, best: 0.2426, time: 0:02:06
 Epoch: 64, lr: 1.0e-02, train_loss: 2.1399, train_acc: 0.2002 test_loss: 2.1259, test_acc: 0.2159, best: 0.2426, time: 0:02:06
 Epoch: 65, lr: 1.0e-02, train_loss: 2.1208, train_acc: 0.2070 test_loss: 2.0675, test_acc: 0.2514, best: 0.2514, time: 0:02:06
 Epoch: 66, lr: 1.0e-02, train_loss: 2.1034, train_acc: 0.2026 test_loss: 2.1026, test_acc: 0.2075, best: 0.2514, time: 0:02:06
 Epoch: 67, lr: 1.0e-02, train_loss: 2.1030, train_acc: 0.2082 test_loss: 2.0930, test_acc: 0.2250, best: 0.2514, time: 0:02:06
 Epoch: 68, lr: 1.0e-02, train_loss: 2.1173, train_acc: 0.2046 test_loss: 2.1250, test_acc: 0.2013, best: 0.2514, time: 0:02:06
 Epoch: 69, lr: 1.0e-02, train_loss: 2.1147, train_acc: 0.2104 test_loss: 2.1002, test_acc: 0.2200, best: 0.2514, time: 0:02:06
 Epoch: 70, lr: 1.0e-02, train_loss: 2.0689, train_acc: 0.2202 test_loss: 2.0143, test_acc: 0.2507, best: 0.2514, time: 0:02:06
 Epoch: 71, lr: 1.0e-02, train_loss: 2.0596, train_acc: 0.2154 test_loss: 1.9748, test_acc: 0.2570, best: 0.2570, time: 0:02:06
 Epoch: 72, lr: 1.0e-02, train_loss: 2.0619, train_acc: 0.2236 test_loss: 1.9702, test_acc: 0.2739, best: 0.2739, time: 0:02:06
 Epoch: 73, lr: 1.0e-02, train_loss: 2.0477, train_acc: 0.2158 test_loss: 2.0643, test_acc: 0.2213, best: 0.2739, time: 0:02:06
 Epoch: 74, lr: 1.0e-02, train_loss: 2.0478, train_acc: 0.2148 test_loss: 1.9915, test_acc: 0.2571, best: 0.2739, time: 0:02:06
 Epoch: 75, lr: 1.0e-02, train_loss: 2.0772, train_acc: 0.2080 test_loss: 2.0891, test_acc: 0.2299, best: 0.2739, time: 0:02:06
 Epoch: 76, lr: 1.0e-02, train_loss: 2.0737, train_acc: 0.2218 test_loss: 2.0436, test_acc: 0.2407, best: 0.2739, time: 0:02:06
 Epoch: 77, lr: 1.0e-02, train_loss: 2.0491, train_acc: 0.2200 test_loss: 2.0070, test_acc: 0.2756, best: 0.2756, time: 0:02:06
 Epoch: 78, lr: 1.0e-02, train_loss: 2.0273, train_acc: 0.2186 test_loss: 2.2386, test_acc: 0.1669, best: 0.2756, time: 0:02:06
 Epoch: 79, lr: 1.0e-02, train_loss: 2.0601, train_acc: 0.2192 test_loss: 2.0208, test_acc: 0.2396, best: 0.2756, time: 0:02:06
 Epoch: 80, lr: 1.0e-02, train_loss: 2.0410, train_acc: 0.2282 test_loss: 1.9735, test_acc: 0.2624, best: 0.2756, time: 0:02:06
 Epoch: 81, lr: 1.0e-02, train_loss: 2.0370, train_acc: 0.2392 test_loss: 1.9468, test_acc: 0.2804, best: 0.2804, time: 0:02:06
 Epoch: 82, lr: 1.0e-02, train_loss: 2.0187, train_acc: 0.2394 test_loss: 1.9834, test_acc: 0.2470, best: 0.2804, time: 0:02:06
 Epoch: 83, lr: 1.0e-02, train_loss: 2.0001, train_acc: 0.2290 test_loss: 1.9880, test_acc: 0.2517, best: 0.2804, time: 0:02:06
 Epoch: 84, lr: 1.0e-02, train_loss: 1.9820, train_acc: 0.2406 test_loss: 1.9917, test_acc: 0.2225, best: 0.2804, time: 0:02:06
 Epoch: 85, lr: 1.0e-02, train_loss: 2.0192, train_acc: 0.2254 test_loss: 1.9532, test_acc: 0.2591, best: 0.2804, time: 0:02:06
 Epoch: 86, lr: 1.0e-02, train_loss: 2.0113, train_acc: 0.2292 test_loss: 1.9753, test_acc: 0.2462, best: 0.2804, time: 0:02:06
 Epoch: 87, lr: 1.0e-02, train_loss: 2.0028, train_acc: 0.2316 test_loss: 1.9429, test_acc: 0.2579, best: 0.2804, time: 0:02:06
 Epoch: 88, lr: 1.0e-02, train_loss: 1.9755, train_acc: 0.2378 test_loss: 1.8966, test_acc: 0.2796, best: 0.2804, time: 0:02:06
 Epoch: 89, lr: 1.0e-02, train_loss: 2.0053, train_acc: 0.2370 test_loss: 1.9367, test_acc: 0.2696, best: 0.2804, time: 0:02:06
 Epoch: 90, lr: 1.0e-02, train_loss: 2.0435, train_acc: 0.2270 test_loss: 1.9440, test_acc: 0.2838, best: 0.2838, time: 0:02:06
 Epoch: 91, lr: 1.0e-02, train_loss: 2.0165, train_acc: 0.2284 test_loss: 1.8987, test_acc: 0.2717, best: 0.2838, time: 0:02:06
 Epoch: 92, lr: 1.0e-02, train_loss: 2.0190, train_acc: 0.2290 test_loss: 2.0530, test_acc: 0.2259, best: 0.2838, time: 0:02:06
 Epoch: 93, lr: 1.0e-02, train_loss: 2.0803, train_acc: 0.2132 test_loss: 1.9737, test_acc: 0.2460, best: 0.2838, time: 0:02:06
 Epoch: 94, lr: 1.0e-02, train_loss: 2.0542, train_acc: 0.2210 test_loss: 1.9232, test_acc: 0.2674, best: 0.2838, time: 0:02:06
 Epoch: 95, lr: 1.0e-02, train_loss: 2.1519, train_acc: 0.1816 test_loss: 2.0859, test_acc: 0.2467, best: 0.2838, time: 0:02:06
 Epoch: 96, lr: 1.0e-02, train_loss: 2.1183, train_acc: 0.1934 test_loss: 1.9909, test_acc: 0.2357, best: 0.2838, time: 0:02:06
 Epoch: 97, lr: 1.0e-02, train_loss: 2.0614, train_acc: 0.2168 test_loss: 1.9621, test_acc: 0.2509, best: 0.2838, time: 0:02:06
 Epoch: 98, lr: 1.0e-02, train_loss: 2.0512, train_acc: 0.2114 test_loss: 1.9157, test_acc: 0.2845, best: 0.2845, time: 0:02:07
 Epoch: 99, lr: 1.0e-02, train_loss: 2.0180, train_acc: 0.2294 test_loss: 1.9401, test_acc: 0.2680, best: 0.2845, time: 0:02:06
 Epoch: 100, lr: 1.0e-02, train_loss: 2.0194, train_acc: 0.2330 test_loss: 1.8692, test_acc: 0.2745, best: 0.2845, time: 0:02:06
 Epoch: 101, lr: 1.0e-02, train_loss: 2.0068, train_acc: 0.2276 test_loss: 1.9865, test_acc: 0.2467, best: 0.2845, time: 0:02:06
 Epoch: 102, lr: 1.0e-02, train_loss: 2.0056, train_acc: 0.2298 test_loss: 1.8709, test_acc: 0.2868, best: 0.2868, time: 0:02:06
 Epoch: 103, lr: 1.0e-02, train_loss: 1.9925, train_acc: 0.2290 test_loss: 1.9368, test_acc: 0.2579, best: 0.2868, time: 0:02:06
 Epoch: 104, lr: 1.0e-02, train_loss: 1.9686, train_acc: 0.2390 test_loss: 1.8497, test_acc: 0.2863, best: 0.2868, time: 0:02:06
 Epoch: 105, lr: 1.0e-02, train_loss: 1.9869, train_acc: 0.2404 test_loss: 1.9302, test_acc: 0.2649, best: 0.2868, time: 0:02:06
 Epoch: 106, lr: 1.0e-02, train_loss: 1.9867, train_acc: 0.2356 test_loss: 1.9611, test_acc: 0.2419, best: 0.2868, time: 0:02:06
 Epoch: 107, lr: 1.0e-02, train_loss: 1.9680, train_acc: 0.2408 test_loss: 1.8713, test_acc: 0.2879, best: 0.2879, time: 0:02:06
 Epoch: 108, lr: 1.0e-02, train_loss: 2.0027, train_acc: 0.2412 test_loss: 1.9267, test_acc: 0.2554, best: 0.2879, time: 0:02:06
 Epoch: 109, lr: 1.0e-02, train_loss: 2.0068, train_acc: 0.2402 test_loss: 1.9641, test_acc: 0.2732, best: 0.2879, time: 0:02:06
 Epoch: 110, lr: 1.0e-02, train_loss: 1.9556, train_acc: 0.2436 test_loss: 1.8728, test_acc: 0.2880, best: 0.2880, time: 0:02:06
 Epoch: 111, lr: 1.0e-02, train_loss: 1.9621, train_acc: 0.2406 test_loss: 1.9071, test_acc: 0.2885, best: 0.2885, time: 0:02:06
 Epoch: 112, lr: 1.0e-02, train_loss: 1.9506, train_acc: 0.2554 test_loss: 1.8663, test_acc: 0.2821, best: 0.2885, time: 0:02:07
 Epoch: 113, lr: 1.0e-02, train_loss: 1.9410, train_acc: 0.2536 test_loss: 1.8191, test_acc: 0.3145, best: 0.3145, time: 0:02:06
 Epoch: 114, lr: 1.0e-02, train_loss: 1.9199, train_acc: 0.2588 test_loss: 1.8274, test_acc: 0.2945, best: 0.3145, time: 0:02:06
 Epoch: 115, lr: 1.0e-02, train_loss: 1.9253, train_acc: 0.2600 test_loss: 1.8446, test_acc: 0.3023, best: 0.3145, time: 0:02:06
 Epoch: 116, lr: 1.0e-02, train_loss: 1.9162, train_acc: 0.2642 test_loss: 1.7682, test_acc: 0.3315, best: 0.3315, time: 0:02:06
 Epoch: 117, lr: 1.0e-02, train_loss: 1.9386, train_acc: 0.2566 test_loss: 1.8805, test_acc: 0.2632, best: 0.3315, time: 0:02:06
 Epoch: 118, lr: 1.0e-02, train_loss: 1.9321, train_acc: 0.2644 test_loss: 1.9526, test_acc: 0.2745, best: 0.3315, time: 0:02:06
 Epoch: 119, lr: 1.0e-02, train_loss: 1.9453, train_acc: 0.2522 test_loss: 1.8746, test_acc: 0.3110, best: 0.3315, time: 0:02:06
 Epoch: 120, lr: 1.0e-02, train_loss: 1.9271, train_acc: 0.2626 test_loss: 1.9596, test_acc: 0.2622, best: 0.3315, time: 0:02:06
 Epoch: 121, lr: 1.0e-02, train_loss: 1.9596, train_acc: 0.2408 test_loss: 2.0107, test_acc: 0.2530, best: 0.3315, time: 0:02:06
 Epoch: 122, lr: 1.0e-02, train_loss: 2.0230, train_acc: 0.2362 test_loss: 1.8764, test_acc: 0.3058, best: 0.3315, time: 0:02:06
 Epoch: 123, lr: 1.0e-02, train_loss: 1.9595, train_acc: 0.2590 test_loss: 1.8967, test_acc: 0.2926, best: 0.3315, time: 0:02:06
 Epoch: 124, lr: 1.0e-02, train_loss: 1.9813, train_acc: 0.2438 test_loss: 1.8516, test_acc: 0.3194, best: 0.3315, time: 0:02:06
 Epoch: 125, lr: 1.0e-02, train_loss: 1.9902, train_acc: 0.2426 test_loss: 2.1637, test_acc: 0.1751, best: 0.3315, time: 0:02:06
 Epoch: 126, lr: 1.0e-02, train_loss: 2.0879, train_acc: 0.2152 test_loss: 2.0043, test_acc: 0.2699, best: 0.3315, time: 0:02:06
 Epoch: 127, lr: 1.0e-02, train_loss: 2.0588, train_acc: 0.2332 test_loss: 1.9199, test_acc: 0.2941, best: 0.3315, time: 0:02:06
 Epoch: 128, lr: 1.0e-02, train_loss: 1.9964, train_acc: 0.2468 test_loss: 1.8773, test_acc: 0.2990, best: 0.3315, time: 0:02:06
 Epoch: 129, lr: 1.0e-02, train_loss: 1.9738, train_acc: 0.2554 test_loss: 1.8582, test_acc: 0.2906, best: 0.3315, time: 0:02:06
 Epoch: 130, lr: 1.0e-02, train_loss: 1.9584, train_acc: 0.2516 test_loss: 1.8347, test_acc: 0.3311, best: 0.3315, time: 0:02:06
 Epoch: 131, lr: 1.0e-02, train_loss: 1.9512, train_acc: 0.2532 test_loss: 1.9049, test_acc: 0.2737, best: 0.3315, time: 0:02:06
 Epoch: 132, lr: 1.0e-02, train_loss: 1.9738, train_acc: 0.2468 test_loss: 1.8435, test_acc: 0.3103, best: 0.3315, time: 0:02:06
 Epoch: 133, lr: 1.0e-02, train_loss: 1.9969, train_acc: 0.2472 test_loss: 1.8529, test_acc: 0.3074, best: 0.3315, time: 0:02:06
 Epoch: 134, lr: 1.0e-02, train_loss: 1.9858, train_acc: 0.2468 test_loss: 1.8420, test_acc: 0.3152, best: 0.3315, time: 0:02:06
 Epoch: 135, lr: 1.0e-02, train_loss: 1.9954, train_acc: 0.2426 test_loss: 1.8821, test_acc: 0.3038, best: 0.3315, time: 0:02:06
 Epoch: 136, lr: 1.0e-02, train_loss: 1.9696, train_acc: 0.2436 test_loss: 1.9164, test_acc: 0.2941, best: 0.3315, time: 0:02:06
 Epoch: 137, lr: 1.0e-02, train_loss: 1.9578, train_acc: 0.2646 test_loss: 1.8152, test_acc: 0.3222, best: 0.3315, time: 0:02:06
 Epoch: 138, lr: 1.0e-02, train_loss: 1.9946, train_acc: 0.2554 test_loss: 2.0614, test_acc: 0.2313, best: 0.3315, time: 0:02:06
 Epoch: 139, lr: 1.0e-02, train_loss: 2.0555, train_acc: 0.2236 test_loss: 1.8723, test_acc: 0.3064, best: 0.3315, time: 0:02:06
 Epoch: 140, lr: 1.0e-02, train_loss: 2.0130, train_acc: 0.2220 test_loss: 1.8549, test_acc: 0.2863, best: 0.3315, time: 0:02:06
 Epoch: 141, lr: 1.0e-02, train_loss: 1.9763, train_acc: 0.2456 test_loss: 1.8674, test_acc: 0.3149, best: 0.3315, time: 0:02:06
 Epoch: 142, lr: 1.0e-02, train_loss: 1.9747, train_acc: 0.2476 test_loss: 1.8368, test_acc: 0.3028, best: 0.3315, time: 0:02:06
 Epoch: 143, lr: 1.0e-02, train_loss: 2.0094, train_acc: 0.2332 test_loss: 1.8451, test_acc: 0.3079, best: 0.3315, time: 0:02:06
 Epoch: 144, lr: 1.0e-02, train_loss: 1.9719, train_acc: 0.2562 test_loss: 1.8154, test_acc: 0.2958, best: 0.3315, time: 0:02:06
 Epoch: 145, lr: 1.0e-02, train_loss: 1.9691, train_acc: 0.2494 test_loss: 1.8358, test_acc: 0.2785, best: 0.3315, time: 0:02:06
 Epoch: 146, lr: 1.0e-02, train_loss: 1.9907, train_acc: 0.2332 test_loss: 1.8877, test_acc: 0.2610, best: 0.3315, time: 0:02:06
 Epoch: 147, lr: 1.0e-02, train_loss: 1.9515, train_acc: 0.2502 test_loss: 1.8156, test_acc: 0.3274, best: 0.3315, time: 0:02:06
 Epoch: 148, lr: 1.0e-02, train_loss: 1.9250, train_acc: 0.2526 test_loss: 1.7971, test_acc: 0.3247, best: 0.3315, time: 0:02:06
 Epoch: 149, lr: 1.0e-02, train_loss: 1.9426, train_acc: 0.2594 test_loss: 1.8014, test_acc: 0.3212, best: 0.3315, time: 0:02:06
 Epoch: 150, lr: 1.0e-02, train_loss: 1.9425, train_acc: 0.2582 test_loss: 1.8641, test_acc: 0.3185, best: 0.3315, time: 0:02:06
 Epoch: 151, lr: 1.0e-02, train_loss: 1.9484, train_acc: 0.2502 test_loss: 1.8201, test_acc: 0.3176, best: 0.3315, time: 0:02:06
 Epoch: 152, lr: 1.0e-02, train_loss: 2.0199, train_acc: 0.2368 test_loss: 1.8950, test_acc: 0.2875, best: 0.3315, time: 0:02:06
 Epoch: 153, lr: 1.0e-02, train_loss: 2.0215, train_acc: 0.2312 test_loss: 1.8765, test_acc: 0.2649, best: 0.3315, time: 0:02:06
 Epoch: 154, lr: 1.0e-02, train_loss: 1.9729, train_acc: 0.2422 test_loss: 1.8398, test_acc: 0.3144, best: 0.3315, time: 0:02:06
 Epoch: 155, lr: 1.0e-02, train_loss: 1.9491, train_acc: 0.2546 test_loss: 1.8048, test_acc: 0.3059, best: 0.3315, time: 0:02:06
 Epoch: 156, lr: 1.0e-02, train_loss: 2.0368, train_acc: 0.2206 test_loss: 1.8205, test_acc: 0.3001, best: 0.3315, time: 0:02:06
 Epoch: 157, lr: 1.0e-02, train_loss: 1.9599, train_acc: 0.2460 test_loss: 1.8342, test_acc: 0.3084, best: 0.3315, time: 0:02:06
 Epoch: 158, lr: 1.0e-02, train_loss: 1.9371, train_acc: 0.2562 test_loss: 1.8029, test_acc: 0.3210, best: 0.3315, time: 0:02:06
 Epoch: 159, lr: 1.0e-02, train_loss: 1.9633, train_acc: 0.2478 test_loss: 1.7917, test_acc: 0.3038, best: 0.3315, time: 0:02:06
 Epoch: 160, lr: 1.0e-02, train_loss: 1.9337, train_acc: 0.2586 test_loss: 1.8075, test_acc: 0.3234, best: 0.3315, time: 0:02:06
 Epoch: 161, lr: 1.0e-02, train_loss: 1.9476, train_acc: 0.2626 test_loss: 1.8011, test_acc: 0.3100, best: 0.3315, time: 0:02:06
 Epoch: 162, lr: 1.0e-02, train_loss: 1.9392, train_acc: 0.2518 test_loss: 1.7818, test_acc: 0.3024, best: 0.3315, time: 0:02:06
 Epoch: 163, lr: 1.0e-02, train_loss: 1.9264, train_acc: 0.2640 test_loss: 1.7704, test_acc: 0.3194, best: 0.3315, time: 0:02:06
 Epoch: 164, lr: 1.0e-02, train_loss: 1.9228, train_acc: 0.2604 test_loss: 1.7758, test_acc: 0.3352, best: 0.3352, time: 0:02:06
 Epoch: 165, lr: 1.0e-02, train_loss: 1.8921, train_acc: 0.2772 test_loss: 1.7730, test_acc: 0.3260, best: 0.3352, time: 0:02:06
 Epoch: 166, lr: 1.0e-02, train_loss: 1.9282, train_acc: 0.2698 test_loss: 1.9684, test_acc: 0.2770, best: 0.3352, time: 0:02:06
 Epoch: 167, lr: 1.0e-02, train_loss: 1.9576, train_acc: 0.2496 test_loss: 1.7909, test_acc: 0.3444, best: 0.3444, time: 0:02:06
 Epoch: 168, lr: 1.0e-02, train_loss: 1.9715, train_acc: 0.2542 test_loss: 1.8300, test_acc: 0.2948, best: 0.3444, time: 0:02:06
 Epoch: 169, lr: 1.0e-02, train_loss: 1.9332, train_acc: 0.2736 test_loss: 1.7738, test_acc: 0.3215, best: 0.3444, time: 0:02:06
 Epoch: 170, lr: 1.0e-02, train_loss: 1.9402, train_acc: 0.2582 test_loss: 1.8048, test_acc: 0.3147, best: 0.3444, time: 0:02:06
 Epoch: 171, lr: 1.0e-02, train_loss: 1.9184, train_acc: 0.2680 test_loss: 1.7524, test_acc: 0.3407, best: 0.3444, time: 0:02:06
 Epoch: 172, lr: 1.0e-02, train_loss: 1.9056, train_acc: 0.2796 test_loss: 1.7585, test_acc: 0.3211, best: 0.3444, time: 0:02:06
 Epoch: 173, lr: 1.0e-02, train_loss: 1.9181, train_acc: 0.2714 test_loss: 1.7492, test_acc: 0.3384, best: 0.3444, time: 0:02:06
 Epoch: 174, lr: 1.0e-02, train_loss: 1.8953, train_acc: 0.2810 test_loss: 1.7850, test_acc: 0.3539, best: 0.3539, time: 0:02:06
 Epoch: 175, lr: 1.0e-02, train_loss: 1.9055, train_acc: 0.2688 test_loss: 1.7462, test_acc: 0.3294, best: 0.3539, time: 0:02:06
 Epoch: 176, lr: 1.0e-02, train_loss: 1.8874, train_acc: 0.2796 test_loss: 1.7678, test_acc: 0.3312, best: 0.3539, time: 0:02:06
 Epoch: 177, lr: 1.0e-02, train_loss: 1.8820, train_acc: 0.2822 test_loss: 1.7454, test_acc: 0.3546, best: 0.3546, time: 0:02:06
 Epoch: 178, lr: 1.0e-02, train_loss: 1.8592, train_acc: 0.2832 test_loss: 1.7359, test_acc: 0.3379, best: 0.3546, time: 0:02:06
 Epoch: 179, lr: 1.0e-02, train_loss: 1.8636, train_acc: 0.2912 test_loss: 1.7297, test_acc: 0.3344, best: 0.3546, time: 0:02:06
 Epoch: 180, lr: 2.0e-03, train_loss: 1.8614, train_acc: 0.2856 test_loss: 1.7225, test_acc: 0.3515, best: 0.3546, time: 0:02:06
 Epoch: 181, lr: 2.0e-03, train_loss: 1.8398, train_acc: 0.2910 test_loss: 1.7327, test_acc: 0.3553, best: 0.3553, time: 0:02:06
 Epoch: 182, lr: 2.0e-03, train_loss: 1.8379, train_acc: 0.2918 test_loss: 1.6898, test_acc: 0.3631, best: 0.3631, time: 0:02:06
 Epoch: 183, lr: 2.0e-03, train_loss: 1.8330, train_acc: 0.2884 test_loss: 1.7016, test_acc: 0.3600, best: 0.3631, time: 0:02:06
 Epoch: 184, lr: 2.0e-03, train_loss: 1.8556, train_acc: 0.2920 test_loss: 1.7032, test_acc: 0.3723, best: 0.3723, time: 0:02:06
 Epoch: 185, lr: 2.0e-03, train_loss: 1.8388, train_acc: 0.2906 test_loss: 1.6943, test_acc: 0.3735, best: 0.3735, time: 0:02:06
 Epoch: 186, lr: 2.0e-03, train_loss: 1.8288, train_acc: 0.2964 test_loss: 1.7017, test_acc: 0.3644, best: 0.3735, time: 0:02:06
 Epoch: 187, lr: 2.0e-03, train_loss: 1.8310, train_acc: 0.2912 test_loss: 1.6973, test_acc: 0.3710, best: 0.3735, time: 0:02:06
 Epoch: 188, lr: 2.0e-03, train_loss: 1.8144, train_acc: 0.2970 test_loss: 1.6912, test_acc: 0.3671, best: 0.3735, time: 0:02:06
 Epoch: 189, lr: 2.0e-03, train_loss: 1.8169, train_acc: 0.2996 test_loss: 1.7108, test_acc: 0.3636, best: 0.3735, time: 0:02:06
 Epoch: 190, lr: 2.0e-03, train_loss: 1.8148, train_acc: 0.3052 test_loss: 1.6936, test_acc: 0.3618, best: 0.3735, time: 0:02:06
 Epoch: 191, lr: 2.0e-03, train_loss: 1.8316, train_acc: 0.3058 test_loss: 1.6822, test_acc: 0.3790, best: 0.3790, time: 0:02:06
 Epoch: 192, lr: 2.0e-03, train_loss: 1.8273, train_acc: 0.2922 test_loss: 1.7050, test_acc: 0.3615, best: 0.3790, time: 0:02:06
 Epoch: 193, lr: 2.0e-03, train_loss: 1.8276, train_acc: 0.3000 test_loss: 1.6816, test_acc: 0.3701, best: 0.3790, time: 0:02:06
 Epoch: 194, lr: 2.0e-03, train_loss: 1.8219, train_acc: 0.2996 test_loss: 1.6923, test_acc: 0.3639, best: 0.3790, time: 0:02:06
 Epoch: 195, lr: 2.0e-03, train_loss: 1.8173, train_acc: 0.3106 test_loss: 1.6956, test_acc: 0.3701, best: 0.3790, time: 0:02:06
 Epoch: 196, lr: 2.0e-03, train_loss: 1.8323, train_acc: 0.2954 test_loss: 1.7278, test_acc: 0.3600, best: 0.3790, time: 0:02:06
 Epoch: 197, lr: 2.0e-03, train_loss: 1.8167, train_acc: 0.2944 test_loss: 1.6968, test_acc: 0.3630, best: 0.3790, time: 0:02:06
 Epoch: 198, lr: 2.0e-03, train_loss: 1.8094, train_acc: 0.3046 test_loss: 1.6732, test_acc: 0.3741, best: 0.3790, time: 0:02:06
 Epoch: 199, lr: 2.0e-03, train_loss: 1.8260, train_acc: 0.3006 test_loss: 1.6973, test_acc: 0.3705, best: 0.3790, time: 0:02:06
 Epoch: 200, lr: 2.0e-03, train_loss: 1.8182, train_acc: 0.3038 test_loss: 1.7127, test_acc: 0.3432, best: 0.3790, time: 0:02:06
 Epoch: 201, lr: 2.0e-03, train_loss: 1.8084, train_acc: 0.2954 test_loss: 1.6701, test_acc: 0.3671, best: 0.3790, time: 0:02:06
 Epoch: 202, lr: 2.0e-03, train_loss: 1.8196, train_acc: 0.3004 test_loss: 1.6591, test_acc: 0.3809, best: 0.3809, time: 0:02:06
 Epoch: 203, lr: 2.0e-03, train_loss: 1.7978, train_acc: 0.3140 test_loss: 1.6755, test_acc: 0.3706, best: 0.3809, time: 0:02:06
 Epoch: 204, lr: 2.0e-03, train_loss: 1.8055, train_acc: 0.2956 test_loss: 1.6754, test_acc: 0.3774, best: 0.3809, time: 0:02:06
 Epoch: 205, lr: 2.0e-03, train_loss: 1.8534, train_acc: 0.2900 test_loss: 1.7029, test_acc: 0.3743, best: 0.3809, time: 0:02:06
 Epoch: 206, lr: 2.0e-03, train_loss: 1.8260, train_acc: 0.3030 test_loss: 1.7078, test_acc: 0.3694, best: 0.3809, time: 0:02:06
 Epoch: 207, lr: 2.0e-03, train_loss: 1.8340, train_acc: 0.2986 test_loss: 1.6871, test_acc: 0.3769, best: 0.3809, time: 0:02:06
 Epoch: 208, lr: 2.0e-03, train_loss: 1.8336, train_acc: 0.2988 test_loss: 1.6875, test_acc: 0.3730, best: 0.3809, time: 0:02:06
 Epoch: 209, lr: 2.0e-03, train_loss: 1.8312, train_acc: 0.2994 test_loss: 1.6755, test_acc: 0.3772, best: 0.3809, time: 0:02:06
 Epoch: 210, lr: 2.0e-03, train_loss: 1.8030, train_acc: 0.3040 test_loss: 1.7081, test_acc: 0.3510, best: 0.3809, time: 0:02:06
 Epoch: 211, lr: 2.0e-03, train_loss: 1.8136, train_acc: 0.3008 test_loss: 1.6825, test_acc: 0.3757, best: 0.3809, time: 0:02:06
 Epoch: 212, lr: 2.0e-03, train_loss: 1.8187, train_acc: 0.3042 test_loss: 1.6784, test_acc: 0.3789, best: 0.3809, time: 0:02:06
 Epoch: 213, lr: 2.0e-03, train_loss: 1.7994, train_acc: 0.3128 test_loss: 1.6535, test_acc: 0.3790, best: 0.3809, time: 0:02:06
 Epoch: 214, lr: 2.0e-03, train_loss: 1.8135, train_acc: 0.3010 test_loss: 1.6678, test_acc: 0.3634, best: 0.3809, time: 0:02:06
 Epoch: 215, lr: 2.0e-03, train_loss: 1.7974, train_acc: 0.3118 test_loss: 1.6740, test_acc: 0.3711, best: 0.3809, time: 0:02:06
 Epoch: 216, lr: 2.0e-03, train_loss: 1.7964, train_acc: 0.3134 test_loss: 1.6516, test_acc: 0.3791, best: 0.3809, time: 0:02:06
 Epoch: 217, lr: 2.0e-03, train_loss: 1.7959, train_acc: 0.3118 test_loss: 1.6512, test_acc: 0.3784, best: 0.3809, time: 0:02:06
 Epoch: 218, lr: 2.0e-03, train_loss: 1.7844, train_acc: 0.3162 test_loss: 1.6650, test_acc: 0.3735, best: 0.3809, time: 0:02:06
 Epoch: 219, lr: 2.0e-03, train_loss: 1.7790, train_acc: 0.3172 test_loss: 1.6723, test_acc: 0.3729, best: 0.3809, time: 0:02:06
 Epoch: 220, lr: 2.0e-03, train_loss: 1.7982, train_acc: 0.3088 test_loss: 1.7168, test_acc: 0.3675, best: 0.3809, time: 0:02:06
 Epoch: 221, lr: 2.0e-03, train_loss: 1.8138, train_acc: 0.2998 test_loss: 1.7247, test_acc: 0.3675, best: 0.3809, time: 0:02:06
 Epoch: 222, lr: 2.0e-03, train_loss: 1.7913, train_acc: 0.3188 test_loss: 1.6673, test_acc: 0.3827, best: 0.3827, time: 0:02:06
 Epoch: 223, lr: 2.0e-03, train_loss: 1.8276, train_acc: 0.3072 test_loss: 1.7224, test_acc: 0.3635, best: 0.3827, time: 0:02:06
 Epoch: 224, lr: 2.0e-03, train_loss: 1.8433, train_acc: 0.2898 test_loss: 1.7353, test_acc: 0.3585, best: 0.3827, time: 0:02:06
 Epoch: 225, lr: 2.0e-03, train_loss: 1.8147, train_acc: 0.2978 test_loss: 1.6890, test_acc: 0.3849, best: 0.3849, time: 0:02:06
 Epoch: 226, lr: 2.0e-03, train_loss: 1.8048, train_acc: 0.3128 test_loss: 1.6710, test_acc: 0.3796, best: 0.3849, time: 0:02:06
 Epoch: 227, lr: 2.0e-03, train_loss: 1.8055, train_acc: 0.3000 test_loss: 1.6919, test_acc: 0.3599, best: 0.3849, time: 0:02:06
 Epoch: 228, lr: 2.0e-03, train_loss: 1.8173, train_acc: 0.3060 test_loss: 1.6810, test_acc: 0.3743, best: 0.3849, time: 0:02:06
 Epoch: 229, lr: 2.0e-03, train_loss: 1.8076, train_acc: 0.3062 test_loss: 1.6762, test_acc: 0.3710, best: 0.3849, time: 0:02:06
 Epoch: 230, lr: 2.0e-03, train_loss: 1.8043, train_acc: 0.3178 test_loss: 1.6804, test_acc: 0.3849, best: 0.3849, time: 0:02:06
 Epoch: 231, lr: 2.0e-03, train_loss: 1.8069, train_acc: 0.3074 test_loss: 1.6902, test_acc: 0.3756, best: 0.3849, time: 0:02:06
 Epoch: 232, lr: 2.0e-03, train_loss: 1.7849, train_acc: 0.3122 test_loss: 1.6809, test_acc: 0.3837, best: 0.3849, time: 0:02:06
 Epoch: 233, lr: 2.0e-03, train_loss: 1.7968, train_acc: 0.3192 test_loss: 1.6570, test_acc: 0.3876, best: 0.3876, time: 0:02:06
 Epoch: 234, lr: 2.0e-03, train_loss: 1.7981, train_acc: 0.3040 test_loss: 1.7126, test_acc: 0.3653, best: 0.3876, time: 0:02:06
 Epoch: 235, lr: 2.0e-03, train_loss: 1.7844, train_acc: 0.3128 test_loss: 1.6386, test_acc: 0.3922, best: 0.3922, time: 0:02:06
 Epoch: 236, lr: 2.0e-03, train_loss: 1.7700, train_acc: 0.3206 test_loss: 1.6575, test_acc: 0.3837, best: 0.3922, time: 0:02:06
 Epoch: 237, lr: 2.0e-03, train_loss: 1.7851, train_acc: 0.3104 test_loss: 1.6565, test_acc: 0.3871, best: 0.3922, time: 0:02:06
 Epoch: 238, lr: 2.0e-03, train_loss: 1.7821, train_acc: 0.3190 test_loss: 1.6481, test_acc: 0.3816, best: 0.3922, time: 0:02:06
 Epoch: 239, lr: 2.0e-03, train_loss: 1.7741, train_acc: 0.3136 test_loss: 1.6689, test_acc: 0.3891, best: 0.3922, time: 0:02:06
 Epoch: 240, lr: 4.0e-04, train_loss: 1.7606, train_acc: 0.3284 test_loss: 1.6550, test_acc: 0.3866, best: 0.3922, time: 0:02:06
 Epoch: 241, lr: 4.0e-04, train_loss: 1.7613, train_acc: 0.3272 test_loss: 1.6372, test_acc: 0.3986, best: 0.3986, time: 0:02:06
 Epoch: 242, lr: 4.0e-04, train_loss: 1.7468, train_acc: 0.3278 test_loss: 1.6446, test_acc: 0.3902, best: 0.3986, time: 0:02:06
 Epoch: 243, lr: 4.0e-04, train_loss: 1.7617, train_acc: 0.3316 test_loss: 1.6396, test_acc: 0.3910, best: 0.3986, time: 0:02:07
 Epoch: 244, lr: 4.0e-04, train_loss: 1.7488, train_acc: 0.3296 test_loss: 1.6354, test_acc: 0.3947, best: 0.3986, time: 0:02:06
 Epoch: 245, lr: 4.0e-04, train_loss: 1.7598, train_acc: 0.3142 test_loss: 1.6287, test_acc: 0.3986, best: 0.3986, time: 0:02:06
 Epoch: 246, lr: 4.0e-04, train_loss: 1.7562, train_acc: 0.3280 test_loss: 1.6415, test_acc: 0.3930, best: 0.3986, time: 0:02:06
 Epoch: 247, lr: 4.0e-04, train_loss: 1.7565, train_acc: 0.3242 test_loss: 1.6259, test_acc: 0.3971, best: 0.3986, time: 0:02:06
 Epoch: 248, lr: 4.0e-04, train_loss: 1.7665, train_acc: 0.3190 test_loss: 1.6384, test_acc: 0.3976, best: 0.3986, time: 0:02:06
 Epoch: 249, lr: 4.0e-04, train_loss: 1.7566, train_acc: 0.3216 test_loss: 1.6217, test_acc: 0.3995, best: 0.3995, time: 0:02:06
 Epoch: 250, lr: 4.0e-04, train_loss: 1.7605, train_acc: 0.3374 test_loss: 1.6564, test_acc: 0.3906, best: 0.3995, time: 0:02:06
 Epoch: 251, lr: 4.0e-04, train_loss: 1.7589, train_acc: 0.3214 test_loss: 1.6243, test_acc: 0.3979, best: 0.3995, time: 0:02:06
 Epoch: 252, lr: 4.0e-04, train_loss: 1.7539, train_acc: 0.3260 test_loss: 1.6218, test_acc: 0.3987, best: 0.3995, time: 0:02:06
 Epoch: 253, lr: 4.0e-04, train_loss: 1.7569, train_acc: 0.3226 test_loss: 1.6402, test_acc: 0.3964, best: 0.3995, time: 0:02:06
 Epoch: 254, lr: 4.0e-04, train_loss: 1.7593, train_acc: 0.3208 test_loss: 1.6443, test_acc: 0.3937, best: 0.3995, time: 0:02:06
 Epoch: 255, lr: 4.0e-04, train_loss: 1.7620, train_acc: 0.3176 test_loss: 1.6344, test_acc: 0.3886, best: 0.3995, time: 0:02:06
 Epoch: 256, lr: 4.0e-04, train_loss: 1.7630, train_acc: 0.3174 test_loss: 1.6174, test_acc: 0.4004, best: 0.4004, time: 0:02:06
 Epoch: 257, lr: 4.0e-04, train_loss: 1.7631, train_acc: 0.3128 test_loss: 1.6151, test_acc: 0.3976, best: 0.4004, time: 0:02:06
 Epoch: 258, lr: 4.0e-04, train_loss: 1.7690, train_acc: 0.3240 test_loss: 1.6303, test_acc: 0.4030, best: 0.4030, time: 0:02:06
 Epoch: 259, lr: 4.0e-04, train_loss: 1.7695, train_acc: 0.3192 test_loss: 1.6350, test_acc: 0.3907, best: 0.4030, time: 0:02:06
 Epoch: 260, lr: 4.0e-04, train_loss: 1.7631, train_acc: 0.3254 test_loss: 1.6478, test_acc: 0.3836, best: 0.4030, time: 0:02:06
 Epoch: 261, lr: 4.0e-04, train_loss: 1.7762, train_acc: 0.3256 test_loss: 1.6406, test_acc: 0.3936, best: 0.4030, time: 0:02:06
 Epoch: 262, lr: 4.0e-04, train_loss: 1.7563, train_acc: 0.3228 test_loss: 1.6283, test_acc: 0.3972, best: 0.4030, time: 0:02:06
 Epoch: 263, lr: 4.0e-04, train_loss: 1.7538, train_acc: 0.3280 test_loss: 1.6183, test_acc: 0.3971, best: 0.4030, time: 0:02:06
 Epoch: 264, lr: 4.0e-04, train_loss: 1.7399, train_acc: 0.3298 test_loss: 1.6391, test_acc: 0.3935, best: 0.4030, time: 0:02:06
 Epoch: 265, lr: 4.0e-04, train_loss: 1.7535, train_acc: 0.3312 test_loss: 1.6157, test_acc: 0.4035, best: 0.4035, time: 0:02:06
 Epoch: 266, lr: 4.0e-04, train_loss: 1.7474, train_acc: 0.3286 test_loss: 1.6316, test_acc: 0.3890, best: 0.4035, time: 0:02:06
 Epoch: 267, lr: 4.0e-04, train_loss: 1.7485, train_acc: 0.3220 test_loss: 1.6235, test_acc: 0.3990, best: 0.4035, time: 0:02:06
 Epoch: 268, lr: 4.0e-04, train_loss: 1.7443, train_acc: 0.3350 test_loss: 1.6338, test_acc: 0.3992, best: 0.4035, time: 0:02:06
 Epoch: 269, lr: 4.0e-04, train_loss: 1.7507, train_acc: 0.3308 test_loss: 1.6338, test_acc: 0.3941, best: 0.4035, time: 0:02:06
 Epoch: 270, lr: 8.0e-05, train_loss: 1.7624, train_acc: 0.3222 test_loss: 1.6120, test_acc: 0.4026, best: 0.4035, time: 0:02:06
 Epoch: 271, lr: 8.0e-05, train_loss: 1.7621, train_acc: 0.3204 test_loss: 1.6246, test_acc: 0.3977, best: 0.4035, time: 0:02:06
 Epoch: 272, lr: 8.0e-05, train_loss: 1.7489, train_acc: 0.3322 test_loss: 1.6218, test_acc: 0.3980, best: 0.4035, time: 0:02:06
 Epoch: 273, lr: 8.0e-05, train_loss: 1.7459, train_acc: 0.3362 test_loss: 1.6392, test_acc: 0.3976, best: 0.4035, time: 0:02:06
 Epoch: 274, lr: 8.0e-05, train_loss: 1.7426, train_acc: 0.3326 test_loss: 1.6209, test_acc: 0.3984, best: 0.4035, time: 0:02:06
 Epoch: 275, lr: 8.0e-05, train_loss: 1.7464, train_acc: 0.3322 test_loss: 1.6290, test_acc: 0.3982, best: 0.4035, time: 0:02:06
 Epoch: 276, lr: 8.0e-05, train_loss: 1.7499, train_acc: 0.3278 test_loss: 1.6357, test_acc: 0.3971, best: 0.4035, time: 0:02:06
 Epoch: 277, lr: 8.0e-05, train_loss: 1.7535, train_acc: 0.3148 test_loss: 1.6332, test_acc: 0.3992, best: 0.4035, time: 0:02:06
 Epoch: 278, lr: 8.0e-05, train_loss: 1.7440, train_acc: 0.3322 test_loss: 1.6350, test_acc: 0.4037, best: 0.4037, time: 0:02:06
 Epoch: 279, lr: 8.0e-05, train_loss: 1.7518, train_acc: 0.3322 test_loss: 1.6224, test_acc: 0.4024, best: 0.4037, time: 0:02:06
 Epoch: 280, lr: 8.0e-05, train_loss: 1.7630, train_acc: 0.3224 test_loss: 1.6461, test_acc: 0.3869, best: 0.4037, time: 0:02:06
 Epoch: 281, lr: 8.0e-05, train_loss: 1.7549, train_acc: 0.3260 test_loss: 1.6275, test_acc: 0.4066, best: 0.4066, time: 0:02:06
 Epoch: 282, lr: 8.0e-05, train_loss: 1.7568, train_acc: 0.3222 test_loss: 1.6177, test_acc: 0.4017, best: 0.4066, time: 0:02:06
 Epoch: 283, lr: 8.0e-05, train_loss: 1.7266, train_acc: 0.3360 test_loss: 1.6235, test_acc: 0.3986, best: 0.4066, time: 0:02:06
 Epoch: 284, lr: 8.0e-05, train_loss: 1.7601, train_acc: 0.3166 test_loss: 1.6329, test_acc: 0.3977, best: 0.4066, time: 0:02:06
 Epoch: 285, lr: 8.0e-05, train_loss: 1.7434, train_acc: 0.3290 test_loss: 1.6241, test_acc: 0.4014, best: 0.4066, time: 0:02:06
 Epoch: 286, lr: 8.0e-05, train_loss: 1.7443, train_acc: 0.3312 test_loss: 1.6087, test_acc: 0.4019, best: 0.4066, time: 0:02:06
 Epoch: 287, lr: 8.0e-05, train_loss: 1.7459, train_acc: 0.3256 test_loss: 1.6306, test_acc: 0.3997, best: 0.4066, time: 0:02:06
 Epoch: 288, lr: 8.0e-05, train_loss: 1.7539, train_acc: 0.3200 test_loss: 1.6135, test_acc: 0.4051, best: 0.4066, time: 0:02:06
 Epoch: 289, lr: 8.0e-05, train_loss: 1.7670, train_acc: 0.3232 test_loss: 1.6192, test_acc: 0.4061, best: 0.4066, time: 0:02:06
 Epoch: 290, lr: 8.0e-05, train_loss: 1.7546, train_acc: 0.3252 test_loss: 1.6159, test_acc: 0.3980, best: 0.4066, time: 0:02:06
 Epoch: 291, lr: 8.0e-05, train_loss: 1.7566, train_acc: 0.3210 test_loss: 1.6417, test_acc: 0.3899, best: 0.4066, time: 0:02:06
 Epoch: 292, lr: 8.0e-05, train_loss: 1.7477, train_acc: 0.3286 test_loss: 1.6434, test_acc: 0.3910, best: 0.4066, time: 0:02:06
 Epoch: 293, lr: 8.0e-05, train_loss: 1.7568, train_acc: 0.3240 test_loss: 1.6313, test_acc: 0.3931, best: 0.4066, time: 0:02:06
 Epoch: 294, lr: 8.0e-05, train_loss: 1.7471, train_acc: 0.3248 test_loss: 1.6377, test_acc: 0.3926, best: 0.4066, time: 0:02:06
 Epoch: 295, lr: 8.0e-05, train_loss: 1.7466, train_acc: 0.3290 test_loss: 1.6221, test_acc: 0.4040, best: 0.4066, time: 0:02:06
 Epoch: 296, lr: 8.0e-05, train_loss: 1.7599, train_acc: 0.3162 test_loss: 1.6476, test_acc: 0.3795, best: 0.4066, time: 0:02:06
 Epoch: 297, lr: 8.0e-05, train_loss: 1.7645, train_acc: 0.3216 test_loss: 1.6450, test_acc: 0.3949, best: 0.4066, time: 0:02:06
 Epoch: 298, lr: 8.0e-05, train_loss: 1.7558, train_acc: 0.3218 test_loss: 1.6256, test_acc: 0.3941, best: 0.4066, time: 0:02:06
 Epoch: 299, lr: 8.0e-05, train_loss: 1.7461, train_acc: 0.3244 test_loss: 1.6275, test_acc: 0.3981, best: 0.4066, time: 0:02:06
 Highest accuracy: 0.4066