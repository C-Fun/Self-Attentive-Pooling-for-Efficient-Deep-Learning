
 Run on time: 2022-07-05 13:30:08.328570

 Architecture: mobilenet_v2-nlp_headfix2_nowin-1222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : mobilenet_v2-nlp_headfix2_nowin-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): InvertedResidual(
            (pooling): Pool2d(
              (logit): Sequential(
                (pool_weight): NLP_BASE(
                  (downsample): Sequential(
                    (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                  (multihead_attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                  )
                  (restore): Sequential(
                    (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): Sigmoid()
                  )
                  (pos_embed): PositionEmbeddingLearned(
                    (row_embed): Embedding(256, 12)
                    (col_embed): Embedding(256, 12)
                  )
                )
              )
              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            )
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): InvertedResidual(
            (pooling): Pool2d(
              (logit): Sequential(
                (pool_weight): NLP_BASE(
                  (downsample): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                  (multihead_attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                  )
                  (restore): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): Sigmoid()
                  )
                  (pos_embed): PositionEmbeddingLearned(
                    (row_embed): Embedding(256, 16)
                    (col_embed): Embedding(256, 16)
                  )
                )
              )
              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            )
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): InvertedResidual(
            (pooling): Pool2d(
              (logit): Sequential(
                (pool_weight): NLP_BASE(
                  (downsample): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                  (multihead_attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                  )
                  (restore): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): Sigmoid()
                  )
                  (pos_embed): PositionEmbeddingLearned(
                    (row_embed): Embedding(256, 32)
                    (col_embed): Embedding(256, 32)
                  )
                )
              )
              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            )
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): InvertedResidual(
            (pooling): Pool2d(
              (logit): Sequential(
                (pool_weight): NLP_BASE(
                  (downsample): Sequential(
                    (0): Conv2d(160, 160, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                  (multihead_attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=160, out_features=160, bias=True)
                  )
                  (restore): Sequential(
                    (0): Conv2d(160, 160, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): Sigmoid()
                  )
                  (pos_embed): PositionEmbeddingLearned(
                    (row_embed): Embedding(256, 80)
                    (col_embed): Embedding(256, 80)
                  )
                )
              )
              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            )
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.4708, train_acc: 0.1760 test_loss: 1.9665, test_acc: 0.2376, best: 0.2376, time: 0:02:29
 Epoch: 2, lr: 1.0e-02, train_loss: 1.9951, train_acc: 0.2358 test_loss: 1.8401, test_acc: 0.2650, best: 0.2650, time: 0:02:28
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9075, train_acc: 0.2690 test_loss: 1.6732, test_acc: 0.3478, best: 0.3478, time: 0:02:28
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8528, train_acc: 0.2966 test_loss: 1.6497, test_acc: 0.3555, best: 0.3555, time: 0:02:27
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8126, train_acc: 0.3154 test_loss: 1.6393, test_acc: 0.3745, best: 0.3745, time: 0:02:27
 Epoch: 6, lr: 1.0e-02, train_loss: 1.7568, train_acc: 0.3318 test_loss: 1.5565, test_acc: 0.4110, best: 0.4110, time: 0:02:27
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7320, train_acc: 0.3506 test_loss: 1.5028, test_acc: 0.4359, best: 0.4359, time: 0:02:27
 Epoch: 8, lr: 1.0e-02, train_loss: 1.6963, train_acc: 0.3656 test_loss: 1.4537, test_acc: 0.4479, best: 0.4479, time: 0:02:27
 Epoch: 9, lr: 1.0e-02, train_loss: 1.6429, train_acc: 0.3722 test_loss: 1.3915, test_acc: 0.4798, best: 0.4798, time: 0:02:27
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6080, train_acc: 0.4016 test_loss: 1.3899, test_acc: 0.4890, best: 0.4890, time: 0:02:27
 Epoch: 11, lr: 1.0e-02, train_loss: 1.5655, train_acc: 0.4152 test_loss: 1.3421, test_acc: 0.5018, best: 0.5018, time: 0:02:27
 Epoch: 12, lr: 1.0e-02, train_loss: 1.5277, train_acc: 0.4352 test_loss: 1.2775, test_acc: 0.5329, best: 0.5329, time: 0:02:27
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5173, train_acc: 0.4384 test_loss: 1.3012, test_acc: 0.5271, best: 0.5329, time: 0:02:27
 Epoch: 14, lr: 1.0e-02, train_loss: 1.4848, train_acc: 0.4596 test_loss: 1.3214, test_acc: 0.5186, best: 0.5329, time: 0:02:27
 Epoch: 15, lr: 1.0e-02, train_loss: 1.5053, train_acc: 0.4366 test_loss: 1.3197, test_acc: 0.5134, best: 0.5329, time: 0:02:27
 Epoch: 16, lr: 1.0e-02, train_loss: 1.4756, train_acc: 0.4546 test_loss: 1.2829, test_acc: 0.5192, best: 0.5329, time: 0:02:27
 Epoch: 17, lr: 1.0e-02, train_loss: 1.3967, train_acc: 0.4904 test_loss: 1.2523, test_acc: 0.5469, best: 0.5469, time: 0:02:27
 Epoch: 18, lr: 1.0e-02, train_loss: 1.3810, train_acc: 0.5002 test_loss: 1.1858, test_acc: 0.5705, best: 0.5705, time: 0:02:27
 Epoch: 19, lr: 1.0e-02, train_loss: 1.3999, train_acc: 0.4838 test_loss: 1.1975, test_acc: 0.5657, best: 0.5705, time: 0:02:27
 Epoch: 20, lr: 1.0e-02, train_loss: 1.3298, train_acc: 0.5110 test_loss: 1.2325, test_acc: 0.5410, best: 0.5705, time: 0:02:27
 Epoch: 21, lr: 1.0e-02, train_loss: 1.3328, train_acc: 0.5146 test_loss: 1.1047, test_acc: 0.6046, best: 0.6046, time: 0:02:27
 Epoch: 22, lr: 1.0e-02, train_loss: 1.3322, train_acc: 0.5190 test_loss: 1.1413, test_acc: 0.5945, best: 0.6046, time: 0:02:27
 Epoch: 23, lr: 1.0e-02, train_loss: 1.2962, train_acc: 0.5342 test_loss: 1.1745, test_acc: 0.5740, best: 0.6046, time: 0:02:27
 Epoch: 24, lr: 1.0e-02, train_loss: 1.2799, train_acc: 0.5350 test_loss: 1.1530, test_acc: 0.5811, best: 0.6046, time: 0:02:27
 Epoch: 25, lr: 1.0e-02, train_loss: 1.2524, train_acc: 0.5530 test_loss: 1.1669, test_acc: 0.5771, best: 0.6046, time: 0:02:27
 Epoch: 26, lr: 1.0e-02, train_loss: 1.2248, train_acc: 0.5572 test_loss: 1.0741, test_acc: 0.6074, best: 0.6074, time: 0:02:27
 Epoch: 27, lr: 1.0e-02, train_loss: 1.1960, train_acc: 0.5608 test_loss: 0.9898, test_acc: 0.6469, best: 0.6469, time: 0:02:27
 Epoch: 28, lr: 1.0e-02, train_loss: 1.1777, train_acc: 0.5648 test_loss: 1.0618, test_acc: 0.6232, best: 0.6469, time: 0:02:27
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2061, train_acc: 0.5664 test_loss: 1.0120, test_acc: 0.6335, best: 0.6469, time: 0:02:27
 Epoch: 30, lr: 1.0e-02, train_loss: 1.1478, train_acc: 0.5866 test_loss: 0.9934, test_acc: 0.6425, best: 0.6469, time: 0:02:27
 Epoch: 31, lr: 1.0e-02, train_loss: 1.1624, train_acc: 0.5748 test_loss: 0.9812, test_acc: 0.6545, best: 0.6545, time: 0:02:27
 Epoch: 32, lr: 1.0e-02, train_loss: 1.1112, train_acc: 0.5994 test_loss: 0.9783, test_acc: 0.6462, best: 0.6545, time: 0:02:27
 Epoch: 33, lr: 1.0e-02, train_loss: 1.1164, train_acc: 0.6004 test_loss: 1.0877, test_acc: 0.6219, best: 0.6545, time: 0:02:27
 Epoch: 34, lr: 1.0e-02, train_loss: 1.1051, train_acc: 0.5970 test_loss: 1.0180, test_acc: 0.6352, best: 0.6545, time: 0:02:27
 Epoch: 35, lr: 1.0e-02, train_loss: 1.0851, train_acc: 0.6010 test_loss: 0.9897, test_acc: 0.6424, best: 0.6545, time: 0:02:27
 Epoch: 36, lr: 1.0e-02, train_loss: 1.0787, train_acc: 0.6044 test_loss: 0.9158, test_acc: 0.6706, best: 0.6706, time: 0:02:27
 Epoch: 37, lr: 1.0e-02, train_loss: 1.0604, train_acc: 0.6136 test_loss: 0.9552, test_acc: 0.6635, best: 0.6706, time: 0:02:27
 Epoch: 38, lr: 1.0e-02, train_loss: 1.0552, train_acc: 0.6210 test_loss: 0.8790, test_acc: 0.6926, best: 0.6926, time: 0:02:27
 Epoch: 39, lr: 1.0e-02, train_loss: 1.0312, train_acc: 0.6238 test_loss: 0.8651, test_acc: 0.6901, best: 0.6926, time: 0:02:27
 Epoch: 40, lr: 1.0e-02, train_loss: 1.0151, train_acc: 0.6260 test_loss: 0.9438, test_acc: 0.6591, best: 0.6926, time: 0:02:27
 Epoch: 41, lr: 1.0e-02, train_loss: 1.0098, train_acc: 0.6434 test_loss: 0.8865, test_acc: 0.6876, best: 0.6926, time: 0:02:28
 Epoch: 42, lr: 1.0e-02, train_loss: 0.9993, train_acc: 0.6456 test_loss: 0.9476, test_acc: 0.6609, best: 0.6926, time: 0:02:27
 Epoch: 43, lr: 1.0e-02, train_loss: 0.9857, train_acc: 0.6410 test_loss: 0.8827, test_acc: 0.6819, best: 0.6926, time: 0:02:27
 Epoch: 44, lr: 1.0e-02, train_loss: 0.9700, train_acc: 0.6482 test_loss: 0.8629, test_acc: 0.6903, best: 0.6926, time: 0:02:27
 Epoch: 45, lr: 1.0e-02, train_loss: 0.9579, train_acc: 0.6522 test_loss: 0.8589, test_acc: 0.6990, best: 0.6990, time: 0:02:27
 Epoch: 46, lr: 1.0e-02, train_loss: 0.9541, train_acc: 0.6586 test_loss: 0.8619, test_acc: 0.6965, best: 0.6990, time: 0:02:27
 Epoch: 47, lr: 1.0e-02, train_loss: 0.9343, train_acc: 0.6620 test_loss: 0.8750, test_acc: 0.7024, best: 0.7024, time: 0:02:27
 Epoch: 48, lr: 1.0e-02, train_loss: 0.9416, train_acc: 0.6584 test_loss: 0.9312, test_acc: 0.6693, best: 0.7024, time: 0:02:27
 Epoch: 49, lr: 1.0e-02, train_loss: 0.9429, train_acc: 0.6712 test_loss: 0.8347, test_acc: 0.7063, best: 0.7063, time: 0:02:27
 Epoch: 50, lr: 1.0e-02, train_loss: 0.9069, train_acc: 0.6756 test_loss: 0.8079, test_acc: 0.7157, best: 0.7157, time: 0:02:27
 Epoch: 51, lr: 1.0e-02, train_loss: 0.9052, train_acc: 0.6758 test_loss: 0.8933, test_acc: 0.6993, best: 0.7157, time: 0:02:27
 Epoch: 52, lr: 1.0e-02, train_loss: 0.8824, train_acc: 0.6898 test_loss: 0.8688, test_acc: 0.6961, best: 0.7157, time: 0:02:27
 Epoch: 53, lr: 1.0e-02, train_loss: 0.8921, train_acc: 0.6802 test_loss: 0.8719, test_acc: 0.6969, best: 0.7157, time: 0:02:27
 Epoch: 54, lr: 1.0e-02, train_loss: 0.8678, train_acc: 0.6836 test_loss: 0.7857, test_acc: 0.7288, best: 0.7288, time: 0:02:27
 Epoch: 55, lr: 1.0e-02, train_loss: 0.8846, train_acc: 0.6840 test_loss: 0.8097, test_acc: 0.7183, best: 0.7288, time: 0:02:27
 Epoch: 56, lr: 1.0e-02, train_loss: 0.8535, train_acc: 0.6914 test_loss: 0.7917, test_acc: 0.7289, best: 0.7289, time: 0:02:27
 Epoch: 57, lr: 1.0e-02, train_loss: 0.8561, train_acc: 0.6892 test_loss: 0.7721, test_acc: 0.7272, best: 0.7289, time: 0:02:27
 Epoch: 58, lr: 1.0e-02, train_loss: 0.8321, train_acc: 0.7060 test_loss: 0.8047, test_acc: 0.7177, best: 0.7289, time: 0:02:27
 Epoch: 59, lr: 1.0e-02, train_loss: 0.8161, train_acc: 0.7050 test_loss: 0.8726, test_acc: 0.6953, best: 0.7289, time: 0:02:27
 Epoch: 60, lr: 1.0e-02, train_loss: 0.8385, train_acc: 0.6934 test_loss: 0.7907, test_acc: 0.7255, best: 0.7289, time: 0:02:27
 Epoch: 61, lr: 1.0e-02, train_loss: 0.7948, train_acc: 0.7180 test_loss: 0.7757, test_acc: 0.7268, best: 0.7289, time: 0:02:27
 Epoch: 62, lr: 1.0e-02, train_loss: 0.8250, train_acc: 0.7094 test_loss: 0.8223, test_acc: 0.7161, best: 0.7289, time: 0:02:27
 Epoch: 63, lr: 1.0e-02, train_loss: 0.7970, train_acc: 0.7140 test_loss: 0.7851, test_acc: 0.7281, best: 0.7289, time: 0:02:27
 Epoch: 64, lr: 1.0e-02, train_loss: 0.7904, train_acc: 0.7210 test_loss: 0.7632, test_acc: 0.7346, best: 0.7346, time: 0:02:27
 Epoch: 65, lr: 1.0e-02, train_loss: 0.7962, train_acc: 0.7156 test_loss: 0.7647, test_acc: 0.7388, best: 0.7388, time: 0:02:27
 Epoch: 66, lr: 1.0e-02, train_loss: 0.7770, train_acc: 0.7200 test_loss: 0.7722, test_acc: 0.7350, best: 0.7388, time: 0:02:27
 Epoch: 67, lr: 1.0e-02, train_loss: 0.7687, train_acc: 0.7270 test_loss: 0.7621, test_acc: 0.7358, best: 0.7388, time: 0:02:27
 Epoch: 68, lr: 1.0e-02, train_loss: 0.7574, train_acc: 0.7384 test_loss: 0.8676, test_acc: 0.7218, best: 0.7388, time: 0:02:27
 Epoch: 69, lr: 1.0e-02, train_loss: 0.7743, train_acc: 0.7274 test_loss: 0.8013, test_acc: 0.7212, best: 0.7388, time: 0:02:27
 Epoch: 70, lr: 1.0e-02, train_loss: 0.7707, train_acc: 0.7238 test_loss: 0.7825, test_acc: 0.7376, best: 0.7388, time: 0:02:27
 Epoch: 71, lr: 1.0e-02, train_loss: 0.7531, train_acc: 0.7328 test_loss: 0.8087, test_acc: 0.7262, best: 0.7388, time: 0:02:27
 Epoch: 72, lr: 1.0e-02, train_loss: 0.7268, train_acc: 0.7416 test_loss: 0.8105, test_acc: 0.7266, best: 0.7388, time: 0:02:27
 Epoch: 73, lr: 1.0e-02, train_loss: 0.7254, train_acc: 0.7426 test_loss: 0.7617, test_acc: 0.7392, best: 0.7392, time: 0:02:27
 Epoch: 74, lr: 1.0e-02, train_loss: 0.7374, train_acc: 0.7436 test_loss: 0.7354, test_acc: 0.7480, best: 0.7480, time: 0:02:27
 Epoch: 75, lr: 1.0e-02, train_loss: 0.7267, train_acc: 0.7396 test_loss: 0.8277, test_acc: 0.7265, best: 0.7480, time: 0:02:27
 Epoch: 76, lr: 1.0e-02, train_loss: 0.7252, train_acc: 0.7412 test_loss: 0.7466, test_acc: 0.7475, best: 0.7480, time: 0:02:27
 Epoch: 77, lr: 1.0e-02, train_loss: 0.7243, train_acc: 0.7442 test_loss: 0.7648, test_acc: 0.7419, best: 0.7480, time: 0:02:27
 Epoch: 78, lr: 1.0e-02, train_loss: 0.7206, train_acc: 0.7434 test_loss: 0.7689, test_acc: 0.7376, best: 0.7480, time: 0:02:27
 Epoch: 79, lr: 1.0e-02, train_loss: 0.7024, train_acc: 0.7532 test_loss: 0.7971, test_acc: 0.7274, best: 0.7480, time: 0:02:27
 Epoch: 80, lr: 1.0e-02, train_loss: 0.7045, train_acc: 0.7518 test_loss: 0.8441, test_acc: 0.7292, best: 0.7480, time: 0:02:27
 Epoch: 81, lr: 1.0e-02, train_loss: 0.6625, train_acc: 0.7646 test_loss: 0.7603, test_acc: 0.7520, best: 0.7520, time: 0:02:27
 Epoch: 82, lr: 1.0e-02, train_loss: 0.6753, train_acc: 0.7658 test_loss: 0.7860, test_acc: 0.7459, best: 0.7520, time: 0:02:27
 Epoch: 83, lr: 1.0e-02, train_loss: 0.6704, train_acc: 0.7630 test_loss: 0.8035, test_acc: 0.7438, best: 0.7520, time: 0:02:27
 Epoch: 84, lr: 1.0e-02, train_loss: 0.6846, train_acc: 0.7610 test_loss: 0.7477, test_acc: 0.7510, best: 0.7520, time: 0:02:27
 Epoch: 85, lr: 1.0e-02, train_loss: 0.6693, train_acc: 0.7678 test_loss: 0.7655, test_acc: 0.7371, best: 0.7520, time: 0:02:27
 Epoch: 86, lr: 1.0e-02, train_loss: 0.6667, train_acc: 0.7644 test_loss: 0.6992, test_acc: 0.7652, best: 0.7652, time: 0:02:28
 Epoch: 87, lr: 1.0e-02, train_loss: 0.6510, train_acc: 0.7718 test_loss: 0.7159, test_acc: 0.7619, best: 0.7652, time: 0:02:27
 Epoch: 88, lr: 1.0e-02, train_loss: 0.6599, train_acc: 0.7614 test_loss: 0.7419, test_acc: 0.7562, best: 0.7652, time: 0:02:27
 Epoch: 89, lr: 1.0e-02, train_loss: 0.6634, train_acc: 0.7688 test_loss: 0.7339, test_acc: 0.7474, best: 0.7652, time: 0:02:27
 Epoch: 90, lr: 1.0e-02, train_loss: 0.6676, train_acc: 0.7680 test_loss: 0.7118, test_acc: 0.7584, best: 0.7652, time: 0:02:27
 Epoch: 91, lr: 1.0e-02, train_loss: 0.6246, train_acc: 0.7814 test_loss: 0.7241, test_acc: 0.7634, best: 0.7652, time: 0:02:27
 Epoch: 92, lr: 1.0e-02, train_loss: 0.6325, train_acc: 0.7802 test_loss: 0.7513, test_acc: 0.7545, best: 0.7652, time: 0:02:27
 Epoch: 93, lr: 1.0e-02, train_loss: 0.6300, train_acc: 0.7742 test_loss: 0.7301, test_acc: 0.7621, best: 0.7652, time: 0:02:27
 Epoch: 94, lr: 1.0e-02, train_loss: 0.6269, train_acc: 0.7744 test_loss: 0.7430, test_acc: 0.7630, best: 0.7652, time: 0:02:27
 Epoch: 95, lr: 1.0e-02, train_loss: 0.6058, train_acc: 0.7862 test_loss: 0.7535, test_acc: 0.7520, best: 0.7652, time: 0:02:27
 Epoch: 96, lr: 1.0e-02, train_loss: 0.6164, train_acc: 0.7846 test_loss: 0.7124, test_acc: 0.7631, best: 0.7652, time: 0:02:27
 Epoch: 97, lr: 1.0e-02, train_loss: 0.6051, train_acc: 0.7868 test_loss: 0.8252, test_acc: 0.7420, best: 0.7652, time: 0:02:27
 Epoch: 98, lr: 1.0e-02, train_loss: 0.6098, train_acc: 0.7832 test_loss: 0.7832, test_acc: 0.7439, best: 0.7652, time: 0:02:27
 Epoch: 99, lr: 1.0e-02, train_loss: 0.6035, train_acc: 0.7868 test_loss: 0.7767, test_acc: 0.7479, best: 0.7652, time: 0:02:27
 Epoch: 100, lr: 1.0e-02, train_loss: 0.6213, train_acc: 0.7800 test_loss: 0.7813, test_acc: 0.7506, best: 0.7652, time: 0:02:27
 Epoch: 101, lr: 1.0e-02, train_loss: 0.6131, train_acc: 0.7836 test_loss: 0.7376, test_acc: 0.7684, best: 0.7684, time: 0:02:27
 Epoch: 102, lr: 1.0e-02, train_loss: 0.5957, train_acc: 0.7958 test_loss: 0.7730, test_acc: 0.7570, best: 0.7684, time: 0:02:27
 Epoch: 103, lr: 1.0e-02, train_loss: 0.5969, train_acc: 0.7880 test_loss: 0.7240, test_acc: 0.7609, best: 0.7684, time: 0:02:27
 Epoch: 104, lr: 1.0e-02, train_loss: 0.6042, train_acc: 0.7868 test_loss: 0.7624, test_acc: 0.7591, best: 0.7684, time: 0:02:27
 Epoch: 105, lr: 1.0e-02, train_loss: 0.5860, train_acc: 0.7940 test_loss: 0.6912, test_acc: 0.7746, best: 0.7746, time: 0:02:28
 Epoch: 106, lr: 1.0e-02, train_loss: 0.5754, train_acc: 0.7948 test_loss: 0.8374, test_acc: 0.7421, best: 0.7746, time: 0:02:27
 Epoch: 107, lr: 1.0e-02, train_loss: 0.5751, train_acc: 0.7946 test_loss: 0.6891, test_acc: 0.7699, best: 0.7746, time: 0:02:27
 Epoch: 108, lr: 1.0e-02, train_loss: 0.5515, train_acc: 0.8066 test_loss: 0.7710, test_acc: 0.7641, best: 0.7746, time: 0:02:27
 Epoch: 109, lr: 1.0e-02, train_loss: 0.5566, train_acc: 0.7958 test_loss: 0.8023, test_acc: 0.7481, best: 0.7746, time: 0:02:27
 Epoch: 110, lr: 1.0e-02, train_loss: 0.5703, train_acc: 0.7986 test_loss: 0.7694, test_acc: 0.7665, best: 0.7746, time: 0:02:27
 Epoch: 111, lr: 1.0e-02, train_loss: 0.5723, train_acc: 0.7976 test_loss: 0.7668, test_acc: 0.7594, best: 0.7746, time: 0:02:27
 Epoch: 112, lr: 1.0e-02, train_loss: 0.5589, train_acc: 0.8020 test_loss: 0.7215, test_acc: 0.7694, best: 0.7746, time: 0:02:27
 Epoch: 113, lr: 1.0e-02, train_loss: 0.5752, train_acc: 0.7982 test_loss: 0.7261, test_acc: 0.7664, best: 0.7746, time: 0:02:27
 Epoch: 114, lr: 1.0e-02, train_loss: 0.5543, train_acc: 0.8082 test_loss: 0.8162, test_acc: 0.7532, best: 0.7746, time: 0:02:27
 Epoch: 115, lr: 1.0e-02, train_loss: 0.5490, train_acc: 0.8036 test_loss: 0.7380, test_acc: 0.7731, best: 0.7746, time: 0:02:27
 Epoch: 116, lr: 1.0e-02, train_loss: 0.5293, train_acc: 0.8122 test_loss: 0.7426, test_acc: 0.7652, best: 0.7746, time: 0:02:27
 Epoch: 117, lr: 1.0e-02, train_loss: 0.5343, train_acc: 0.8090 test_loss: 0.7149, test_acc: 0.7734, best: 0.7746, time: 0:02:27
 Epoch: 118, lr: 1.0e-02, train_loss: 0.5348, train_acc: 0.8160 test_loss: 0.7855, test_acc: 0.7559, best: 0.7746, time: 0:02:27
 Epoch: 119, lr: 1.0e-02, train_loss: 0.5426, train_acc: 0.8094 test_loss: 0.7065, test_acc: 0.7780, best: 0.7780, time: 0:02:27
 Epoch: 120, lr: 1.0e-02, train_loss: 0.5406, train_acc: 0.8082 test_loss: 0.7445, test_acc: 0.7676, best: 0.7780, time: 0:02:27
 Epoch: 121, lr: 1.0e-02, train_loss: 0.5343, train_acc: 0.8102 test_loss: 0.7801, test_acc: 0.7691, best: 0.7780, time: 0:02:27
 Epoch: 122, lr: 1.0e-02, train_loss: 0.5148, train_acc: 0.8234 test_loss: 0.7575, test_acc: 0.7638, best: 0.7780, time: 0:02:27
 Epoch: 123, lr: 1.0e-02, train_loss: 0.5354, train_acc: 0.8184 test_loss: 0.7172, test_acc: 0.7806, best: 0.7806, time: 0:02:27
 Epoch: 124, lr: 1.0e-02, train_loss: 0.5189, train_acc: 0.8148 test_loss: 0.7421, test_acc: 0.7724, best: 0.7806, time: 0:02:27
 Epoch: 125, lr: 1.0e-02, train_loss: 0.5296, train_acc: 0.8070 test_loss: 0.7439, test_acc: 0.7684, best: 0.7806, time: 0:02:27
 Epoch: 126, lr: 1.0e-02, train_loss: 0.5099, train_acc: 0.8224 test_loss: 0.7583, test_acc: 0.7674, best: 0.7806, time: 0:02:27
 Epoch: 127, lr: 1.0e-02, train_loss: 0.5139, train_acc: 0.8124 test_loss: 0.7781, test_acc: 0.7634, best: 0.7806, time: 0:02:27
 Epoch: 128, lr: 1.0e-02, train_loss: 0.5099, train_acc: 0.8214 test_loss: 0.7777, test_acc: 0.7699, best: 0.7806, time: 0:02:27
 Epoch: 129, lr: 1.0e-02, train_loss: 0.5053, train_acc: 0.8208 test_loss: 0.7562, test_acc: 0.7700, best: 0.7806, time: 0:02:27
 Epoch: 130, lr: 1.0e-02, train_loss: 0.4931, train_acc: 0.8336 test_loss: 0.7104, test_acc: 0.7820, best: 0.7820, time: 0:02:27
 Epoch: 131, lr: 1.0e-02, train_loss: 0.5141, train_acc: 0.8174 test_loss: 0.7955, test_acc: 0.7645, best: 0.7820, time: 0:02:27
 Epoch: 132, lr: 1.0e-02, train_loss: 0.4702, train_acc: 0.8372 test_loss: 0.7953, test_acc: 0.7735, best: 0.7820, time: 0:02:27
 Epoch: 133, lr: 1.0e-02, train_loss: 0.4911, train_acc: 0.8286 test_loss: 0.7572, test_acc: 0.7735, best: 0.7820, time: 0:02:27
 Epoch: 134, lr: 1.0e-02, train_loss: 0.4917, train_acc: 0.8328 test_loss: 0.7445, test_acc: 0.7775, best: 0.7820, time: 0:02:27
 Epoch: 135, lr: 1.0e-02, train_loss: 0.4814, train_acc: 0.8376 test_loss: 0.8096, test_acc: 0.7605, best: 0.7820, time: 0:02:27
 Epoch: 136, lr: 1.0e-02, train_loss: 0.4820, train_acc: 0.8308 test_loss: 0.8218, test_acc: 0.7602, best: 0.7820, time: 0:02:27
 Epoch: 137, lr: 1.0e-02, train_loss: 0.4801, train_acc: 0.8314 test_loss: 0.7749, test_acc: 0.7666, best: 0.7820, time: 0:02:27
 Epoch: 138, lr: 1.0e-02, train_loss: 0.4860, train_acc: 0.8240 test_loss: 0.7900, test_acc: 0.7638, best: 0.7820, time: 0:02:27
 Epoch: 139, lr: 1.0e-02, train_loss: 0.4628, train_acc: 0.8356 test_loss: 0.7314, test_acc: 0.7857, best: 0.7857, time: 0:02:27
 Epoch: 140, lr: 1.0e-02, train_loss: 0.4940, train_acc: 0.8268 test_loss: 0.7780, test_acc: 0.7706, best: 0.7857, time: 0:02:27
 Epoch: 141, lr: 1.0e-02, train_loss: 0.4496, train_acc: 0.8376 test_loss: 0.7409, test_acc: 0.7900, best: 0.7900, time: 0:02:27
 Epoch: 142, lr: 1.0e-02, train_loss: 0.4719, train_acc: 0.8364 test_loss: 0.7445, test_acc: 0.7871, best: 0.7900, time: 0:02:27
 Epoch: 143, lr: 1.0e-02, train_loss: 0.4605, train_acc: 0.8384 test_loss: 0.7620, test_acc: 0.7834, best: 0.7900, time: 0:02:27
 Epoch: 144, lr: 1.0e-02, train_loss: 0.4708, train_acc: 0.8370 test_loss: 0.8279, test_acc: 0.7675, best: 0.7900, time: 0:02:27
 Epoch: 145, lr: 1.0e-02, train_loss: 0.4655, train_acc: 0.8362 test_loss: 0.8148, test_acc: 0.7708, best: 0.7900, time: 0:02:27
 Epoch: 146, lr: 1.0e-02, train_loss: 0.4618, train_acc: 0.8394 test_loss: 0.7506, test_acc: 0.7865, best: 0.7900, time: 0:02:27
 Epoch: 147, lr: 1.0e-02, train_loss: 0.4629, train_acc: 0.8338 test_loss: 0.7515, test_acc: 0.7876, best: 0.7900, time: 0:02:27
 Epoch: 148, lr: 1.0e-02, train_loss: 0.4601, train_acc: 0.8386 test_loss: 0.8110, test_acc: 0.7748, best: 0.7900, time: 0:02:27
 Epoch: 149, lr: 1.0e-02, train_loss: 0.4606, train_acc: 0.8422 test_loss: 0.7297, test_acc: 0.7802, best: 0.7900, time: 0:02:27
 Epoch: 150, lr: 1.0e-02, train_loss: 0.4393, train_acc: 0.8518 test_loss: 0.7703, test_acc: 0.7891, best: 0.7900, time: 0:02:27
 Epoch: 151, lr: 1.0e-02, train_loss: 0.4636, train_acc: 0.8386 test_loss: 0.6891, test_acc: 0.7845, best: 0.7900, time: 0:02:27
 Epoch: 152, lr: 1.0e-02, train_loss: 0.4322, train_acc: 0.8508 test_loss: 0.7857, test_acc: 0.7790, best: 0.7900, time: 0:02:27
 Epoch: 153, lr: 1.0e-02, train_loss: 0.4538, train_acc: 0.8402 test_loss: 0.8226, test_acc: 0.7684, best: 0.7900, time: 0:02:27
 Epoch: 154, lr: 1.0e-02, train_loss: 0.4482, train_acc: 0.8480 test_loss: 0.7400, test_acc: 0.7812, best: 0.7900, time: 0:02:27
 Epoch: 155, lr: 1.0e-02, train_loss: 0.4572, train_acc: 0.8356 test_loss: 0.7339, test_acc: 0.7844, best: 0.7900, time: 0:02:27
 Epoch: 156, lr: 1.0e-02, train_loss: 0.4412, train_acc: 0.8448 test_loss: 0.7518, test_acc: 0.7827, best: 0.7900, time: 0:02:27
 Epoch: 157, lr: 1.0e-02, train_loss: 0.4301, train_acc: 0.8470 test_loss: 0.8014, test_acc: 0.7759, best: 0.7900, time: 0:02:27
 Epoch: 158, lr: 1.0e-02, train_loss: 0.4440, train_acc: 0.8442 test_loss: 0.7201, test_acc: 0.7861, best: 0.7900, time: 0:02:27
 Epoch: 159, lr: 1.0e-02, train_loss: 0.4326, train_acc: 0.8492 test_loss: 0.8018, test_acc: 0.7678, best: 0.7900, time: 0:02:27
 Epoch: 160, lr: 1.0e-02, train_loss: 0.4243, train_acc: 0.8496 test_loss: 0.7469, test_acc: 0.7847, best: 0.7900, time: 0:02:27
 Epoch: 161, lr: 1.0e-02, train_loss: 0.4168, train_acc: 0.8546 test_loss: 0.7791, test_acc: 0.7732, best: 0.7900, time: 0:02:27
 Epoch: 162, lr: 1.0e-02, train_loss: 0.4411, train_acc: 0.8492 test_loss: 0.7528, test_acc: 0.7853, best: 0.7900, time: 0:02:27
 Epoch: 163, lr: 1.0e-02, train_loss: 0.4370, train_acc: 0.8474 test_loss: 0.7509, test_acc: 0.7833, best: 0.7900, time: 0:02:27
 Epoch: 164, lr: 1.0e-02, train_loss: 0.4045, train_acc: 0.8524 test_loss: 0.7390, test_acc: 0.7886, best: 0.7900, time: 0:02:27
 Epoch: 165, lr: 1.0e-02, train_loss: 0.4379, train_acc: 0.8428 test_loss: 0.7835, test_acc: 0.7781, best: 0.7900, time: 0:02:27
 Epoch: 166, lr: 1.0e-02, train_loss: 0.4320, train_acc: 0.8442 test_loss: 0.7840, test_acc: 0.7762, best: 0.7900, time: 0:02:27
 Epoch: 167, lr: 1.0e-02, train_loss: 0.4157, train_acc: 0.8558 test_loss: 0.8639, test_acc: 0.7648, best: 0.7900, time: 0:02:27
 Epoch: 168, lr: 1.0e-02, train_loss: 0.4149, train_acc: 0.8548 test_loss: 0.7329, test_acc: 0.7883, best: 0.7900, time: 0:02:27
 Epoch: 169, lr: 1.0e-02, train_loss: 0.4070, train_acc: 0.8606 test_loss: 0.7280, test_acc: 0.7989, best: 0.7989, time: 0:02:27
 Epoch: 170, lr: 1.0e-02, train_loss: 0.4291, train_acc: 0.8524 test_loss: 0.7613, test_acc: 0.7911, best: 0.7989, time: 0:02:27
 Epoch: 171, lr: 1.0e-02, train_loss: 0.4103, train_acc: 0.8626 test_loss: 0.7965, test_acc: 0.7870, best: 0.7989, time: 0:02:27
 Epoch: 172, lr: 1.0e-02, train_loss: 0.4120, train_acc: 0.8548 test_loss: 0.8095, test_acc: 0.7672, best: 0.7989, time: 0:02:27
 Epoch: 173, lr: 1.0e-02, train_loss: 0.4133, train_acc: 0.8604 test_loss: 0.7294, test_acc: 0.7966, best: 0.7989, time: 0:02:27
 Epoch: 174, lr: 1.0e-02, train_loss: 0.4169, train_acc: 0.8602 test_loss: 0.7522, test_acc: 0.7854, best: 0.7989, time: 0:02:27
 Epoch: 175, lr: 1.0e-02, train_loss: 0.4063, train_acc: 0.8566 test_loss: 0.7023, test_acc: 0.7985, best: 0.7989, time: 0:02:27
 Epoch: 176, lr: 1.0e-02, train_loss: 0.3899, train_acc: 0.8652 test_loss: 0.7737, test_acc: 0.7850, best: 0.7989, time: 0:02:27
 Epoch: 177, lr: 1.0e-02, train_loss: 0.4203, train_acc: 0.8520 test_loss: 0.8152, test_acc: 0.7688, best: 0.7989, time: 0:02:27
 Epoch: 178, lr: 1.0e-02, train_loss: 0.3966, train_acc: 0.8626 test_loss: 0.7500, test_acc: 0.7847, best: 0.7989, time: 0:02:27
 Epoch: 179, lr: 1.0e-02, train_loss: 0.3929, train_acc: 0.8630 test_loss: 0.7633, test_acc: 0.7843, best: 0.7989, time: 0:02:27
 Epoch: 180, lr: 2.0e-03, train_loss: 0.3486, train_acc: 0.8780 test_loss: 0.7207, test_acc: 0.8006, best: 0.8006, time: 0:02:27
 Epoch: 181, lr: 2.0e-03, train_loss: 0.3214, train_acc: 0.8844 test_loss: 0.6773, test_acc: 0.8103, best: 0.8103, time: 0:02:27
 Epoch: 182, lr: 2.0e-03, train_loss: 0.3085, train_acc: 0.8906 test_loss: 0.6895, test_acc: 0.8065, best: 0.8103, time: 0:02:27
 Epoch: 183, lr: 2.0e-03, train_loss: 0.3001, train_acc: 0.8934 test_loss: 0.6865, test_acc: 0.8101, best: 0.8103, time: 0:02:27
 Epoch: 184, lr: 2.0e-03, train_loss: 0.3096, train_acc: 0.8886 test_loss: 0.7232, test_acc: 0.8096, best: 0.8103, time: 0:02:27
 Epoch: 185, lr: 2.0e-03, train_loss: 0.2875, train_acc: 0.9018 test_loss: 0.7183, test_acc: 0.8083, best: 0.8103, time: 0:02:27
 Epoch: 186, lr: 2.0e-03, train_loss: 0.2997, train_acc: 0.8964 test_loss: 0.7355, test_acc: 0.8055, best: 0.8103, time: 0:02:27
 Epoch: 187, lr: 2.0e-03, train_loss: 0.2829, train_acc: 0.9046 test_loss: 0.7425, test_acc: 0.8051, best: 0.8103, time: 0:02:27
 Epoch: 188, lr: 2.0e-03, train_loss: 0.2916, train_acc: 0.8934 test_loss: 0.7246, test_acc: 0.8104, best: 0.8104, time: 0:02:27
 Epoch: 189, lr: 2.0e-03, train_loss: 0.2707, train_acc: 0.9042 test_loss: 0.7263, test_acc: 0.8083, best: 0.8104, time: 0:02:27
 Epoch: 190, lr: 2.0e-03, train_loss: 0.2708, train_acc: 0.9050 test_loss: 0.7355, test_acc: 0.8074, best: 0.8104, time: 0:02:27
 Epoch: 191, lr: 2.0e-03, train_loss: 0.2652, train_acc: 0.9070 test_loss: 0.7271, test_acc: 0.8104, best: 0.8104, time: 0:02:27
 Epoch: 192, lr: 2.0e-03, train_loss: 0.2707, train_acc: 0.9060 test_loss: 0.7313, test_acc: 0.8144, best: 0.8144, time: 0:02:27
 Epoch: 193, lr: 2.0e-03, train_loss: 0.2836, train_acc: 0.9036 test_loss: 0.7163, test_acc: 0.8119, best: 0.8144, time: 0:02:27
 Epoch: 194, lr: 2.0e-03, train_loss: 0.2645, train_acc: 0.9074 test_loss: 0.7345, test_acc: 0.8091, best: 0.8144, time: 0:02:27
 Epoch: 195, lr: 2.0e-03, train_loss: 0.2694, train_acc: 0.9080 test_loss: 0.7389, test_acc: 0.8076, best: 0.8144, time: 0:02:27
 Epoch: 196, lr: 2.0e-03, train_loss: 0.2548, train_acc: 0.9100 test_loss: 0.7401, test_acc: 0.8074, best: 0.8144, time: 0:02:27
 Epoch: 197, lr: 2.0e-03, train_loss: 0.2601, train_acc: 0.9084 test_loss: 0.7422, test_acc: 0.8066, best: 0.8144, time: 0:02:27
 Epoch: 198, lr: 2.0e-03, train_loss: 0.2677, train_acc: 0.9064 test_loss: 0.7385, test_acc: 0.8110, best: 0.8144, time: 0:02:27
 Epoch: 199, lr: 2.0e-03, train_loss: 0.2533, train_acc: 0.9154 test_loss: 0.7856, test_acc: 0.8080, best: 0.8144, time: 0:02:27
 Epoch: 200, lr: 2.0e-03, train_loss: 0.2607, train_acc: 0.9112 test_loss: 0.7697, test_acc: 0.8026, best: 0.8144, time: 0:02:27
 Epoch: 201, lr: 2.0e-03, train_loss: 0.2461, train_acc: 0.9134 test_loss: 0.7504, test_acc: 0.8134, best: 0.8144, time: 0:02:27
 Epoch: 202, lr: 2.0e-03, train_loss: 0.2590, train_acc: 0.9080 test_loss: 0.7649, test_acc: 0.8060, best: 0.8144, time: 0:02:27
 Epoch: 203, lr: 2.0e-03, train_loss: 0.2700, train_acc: 0.9062 test_loss: 0.7874, test_acc: 0.8023, best: 0.8144, time: 0:02:27
 Epoch: 204, lr: 2.0e-03, train_loss: 0.2344, train_acc: 0.9196 test_loss: 0.7533, test_acc: 0.8099, best: 0.8144, time: 0:02:27
 Epoch: 205, lr: 2.0e-03, train_loss: 0.2490, train_acc: 0.9148 test_loss: 0.7367, test_acc: 0.8091, best: 0.8144, time: 0:02:27
 Epoch: 206, lr: 2.0e-03, train_loss: 0.2525, train_acc: 0.9138 test_loss: 0.7462, test_acc: 0.8045, best: 0.8144, time: 0:02:27
 Epoch: 207, lr: 2.0e-03, train_loss: 0.2400, train_acc: 0.9184 test_loss: 0.7734, test_acc: 0.8054, best: 0.8144, time: 0:02:27
 Epoch: 208, lr: 2.0e-03, train_loss: 0.2557, train_acc: 0.9124 test_loss: 0.7667, test_acc: 0.8055, best: 0.8144, time: 0:02:27
 Epoch: 209, lr: 2.0e-03, train_loss: 0.2588, train_acc: 0.9080 test_loss: 0.8014, test_acc: 0.8023, best: 0.8144, time: 0:02:27
 Epoch: 210, lr: 2.0e-03, train_loss: 0.2580, train_acc: 0.9124 test_loss: 0.7614, test_acc: 0.8110, best: 0.8144, time: 0:02:27
 Epoch: 211, lr: 2.0e-03, train_loss: 0.2597, train_acc: 0.9064 test_loss: 0.7553, test_acc: 0.8090, best: 0.8144, time: 0:02:27
 Epoch: 212, lr: 2.0e-03, train_loss: 0.2778, train_acc: 0.9048 test_loss: 0.7575, test_acc: 0.8119, best: 0.8144, time: 0:02:27
 Epoch: 213, lr: 2.0e-03, train_loss: 0.2520, train_acc: 0.9130 test_loss: 0.8064, test_acc: 0.8037, best: 0.8144, time: 0:02:27
 Epoch: 214, lr: 2.0e-03, train_loss: 0.2535, train_acc: 0.9136 test_loss: 0.7502, test_acc: 0.8131, best: 0.8144, time: 0:02:27
 Epoch: 215, lr: 2.0e-03, train_loss: 0.2438, train_acc: 0.9170 test_loss: 0.7648, test_acc: 0.8106, best: 0.8144, time: 0:02:27
 Epoch: 216, lr: 2.0e-03, train_loss: 0.2518, train_acc: 0.9128 test_loss: 0.7593, test_acc: 0.8106, best: 0.8144, time: 0:02:27
 Epoch: 217, lr: 2.0e-03, train_loss: 0.2373, train_acc: 0.9192 test_loss: 0.7773, test_acc: 0.8081, best: 0.8144, time: 0:02:27
 Epoch: 218, lr: 2.0e-03, train_loss: 0.2546, train_acc: 0.9104 test_loss: 0.7894, test_acc: 0.8047, best: 0.8144, time: 0:02:27
 Epoch: 219, lr: 2.0e-03, train_loss: 0.2528, train_acc: 0.9130 test_loss: 0.7676, test_acc: 0.8076, best: 0.8144, time: 0:02:27
 Epoch: 220, lr: 2.0e-03, train_loss: 0.2556, train_acc: 0.9078 test_loss: 0.7460, test_acc: 0.8131, best: 0.8144, time: 0:02:27
 Epoch: 221, lr: 2.0e-03, train_loss: 0.2557, train_acc: 0.9130 test_loss: 0.7335, test_acc: 0.8111, best: 0.8144, time: 0:02:27
 Epoch: 222, lr: 2.0e-03, train_loss: 0.2247, train_acc: 0.9190 test_loss: 0.7727, test_acc: 0.8135, best: 0.8144, time: 0:02:27
 Epoch: 223, lr: 2.0e-03, train_loss: 0.2521, train_acc: 0.9156 test_loss: 0.7796, test_acc: 0.8074, best: 0.8144, time: 0:02:27
 Epoch: 224, lr: 2.0e-03, train_loss: 0.2466, train_acc: 0.9106 test_loss: 0.8171, test_acc: 0.8034, best: 0.8144, time: 0:02:27
 Epoch: 225, lr: 2.0e-03, train_loss: 0.2455, train_acc: 0.9182 test_loss: 0.7884, test_acc: 0.8031, best: 0.8144, time: 0:02:27
 Epoch: 226, lr: 2.0e-03, train_loss: 0.2329, train_acc: 0.9178 test_loss: 0.8037, test_acc: 0.8037, best: 0.8144, time: 0:02:27
 Epoch: 227, lr: 2.0e-03, train_loss: 0.2444, train_acc: 0.9132 test_loss: 0.7505, test_acc: 0.8103, best: 0.8144, time: 0:02:27
 Epoch: 228, lr: 2.0e-03, train_loss: 0.2493, train_acc: 0.9146 test_loss: 0.7747, test_acc: 0.8089, best: 0.8144, time: 0:02:27
 Epoch: 229, lr: 2.0e-03, train_loss: 0.2443, train_acc: 0.9176 test_loss: 0.7979, test_acc: 0.8049, best: 0.8144, time: 0:02:27
 Epoch: 230, lr: 2.0e-03, train_loss: 0.2608, train_acc: 0.9122 test_loss: 0.7782, test_acc: 0.8050, best: 0.8144, time: 0:02:27
 Epoch: 231, lr: 2.0e-03, train_loss: 0.2415, train_acc: 0.9162 test_loss: 0.7718, test_acc: 0.8069, best: 0.8144, time: 0:02:27
 Epoch: 232, lr: 2.0e-03, train_loss: 0.2357, train_acc: 0.9198 test_loss: 0.7781, test_acc: 0.8116, best: 0.8144, time: 0:02:27
 Epoch: 233, lr: 2.0e-03, train_loss: 0.2544, train_acc: 0.9142 test_loss: 0.7948, test_acc: 0.7993, best: 0.8144, time: 0:02:27
 Epoch: 234, lr: 2.0e-03, train_loss: 0.2484, train_acc: 0.9166 test_loss: 0.7785, test_acc: 0.8050, best: 0.8144, time: 0:02:27
 Epoch: 235, lr: 2.0e-03, train_loss: 0.2464, train_acc: 0.9160 test_loss: 0.7942, test_acc: 0.8047, best: 0.8144, time: 0:02:27
 Epoch: 236, lr: 2.0e-03, train_loss: 0.2311, train_acc: 0.9222 test_loss: 0.7814, test_acc: 0.8096, best: 0.8144, time: 0:02:28
 Epoch: 237, lr: 2.0e-03, train_loss: 0.2270, train_acc: 0.9204 test_loss: 0.7533, test_acc: 0.8099, best: 0.8144, time: 0:02:27
 Epoch: 238, lr: 2.0e-03, train_loss: 0.2416, train_acc: 0.9176 test_loss: 0.7385, test_acc: 0.8107, best: 0.8144, time: 0:02:27
 Epoch: 239, lr: 2.0e-03, train_loss: 0.2304, train_acc: 0.9188 test_loss: 0.7853, test_acc: 0.8099, best: 0.8144, time: 0:02:27
 Epoch: 240, lr: 4.0e-04, train_loss: 0.2426, train_acc: 0.9156 test_loss: 0.7743, test_acc: 0.8087, best: 0.8144, time: 0:02:27
 Epoch: 241, lr: 4.0e-04, train_loss: 0.2312, train_acc: 0.9244 test_loss: 0.7490, test_acc: 0.8123, best: 0.8144, time: 0:02:27
 Epoch: 242, lr: 4.0e-04, train_loss: 0.2505, train_acc: 0.9124 test_loss: 0.7619, test_acc: 0.8115, best: 0.8144, time: 0:02:27
 Epoch: 243, lr: 4.0e-04, train_loss: 0.2168, train_acc: 0.9254 test_loss: 0.7364, test_acc: 0.8175, best: 0.8175, time: 0:02:27
 Epoch: 244, lr: 4.0e-04, train_loss: 0.2320, train_acc: 0.9190 test_loss: 0.7568, test_acc: 0.8120, best: 0.8175, time: 0:02:27
 Epoch: 245, lr: 4.0e-04, train_loss: 0.2265, train_acc: 0.9208 test_loss: 0.7379, test_acc: 0.8139, best: 0.8175, time: 0:02:27
 Epoch: 246, lr: 4.0e-04, train_loss: 0.2218, train_acc: 0.9230 test_loss: 0.7697, test_acc: 0.8126, best: 0.8175, time: 0:02:27
 Epoch: 247, lr: 4.0e-04, train_loss: 0.2149, train_acc: 0.9244 test_loss: 0.7663, test_acc: 0.8089, best: 0.8175, time: 0:02:27
 Epoch: 248, lr: 4.0e-04, train_loss: 0.2237, train_acc: 0.9234 test_loss: 0.7615, test_acc: 0.8153, best: 0.8175, time: 0:02:27
 Epoch: 249, lr: 4.0e-04, train_loss: 0.2119, train_acc: 0.9260 test_loss: 0.7496, test_acc: 0.8151, best: 0.8175, time: 0:02:27
 Epoch: 250, lr: 4.0e-04, train_loss: 0.2148, train_acc: 0.9250 test_loss: 0.7632, test_acc: 0.8151, best: 0.8175, time: 0:02:27
 Epoch: 251, lr: 4.0e-04, train_loss: 0.2158, train_acc: 0.9270 test_loss: 0.7528, test_acc: 0.8137, best: 0.8175, time: 0:02:27
 Epoch: 252, lr: 4.0e-04, train_loss: 0.2110, train_acc: 0.9246 test_loss: 0.7832, test_acc: 0.8116, best: 0.8175, time: 0:02:27
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2204, train_acc: 0.9182 test_loss: 0.7864, test_acc: 0.8094, best: 0.8175, time: 0:02:27
 Epoch: 254, lr: 4.0e-04, train_loss: 0.2206, train_acc: 0.9220 test_loss: 0.7802, test_acc: 0.8123, best: 0.8175, time: 0:02:27
 Epoch: 255, lr: 4.0e-04, train_loss: 0.2131, train_acc: 0.9260 test_loss: 0.7450, test_acc: 0.8137, best: 0.8175, time: 0:02:27
 Epoch: 256, lr: 4.0e-04, train_loss: 0.2279, train_acc: 0.9226 test_loss: 0.7789, test_acc: 0.8127, best: 0.8175, time: 0:02:27
 Epoch: 257, lr: 4.0e-04, train_loss: 0.2231, train_acc: 0.9234 test_loss: 0.7642, test_acc: 0.8106, best: 0.8175, time: 0:02:27
 Epoch: 258, lr: 4.0e-04, train_loss: 0.2292, train_acc: 0.9204 test_loss: 0.7659, test_acc: 0.8101, best: 0.8175, time: 0:02:27
 Epoch: 259, lr: 4.0e-04, train_loss: 0.2191, train_acc: 0.9286 test_loss: 0.7733, test_acc: 0.8113, best: 0.8175, time: 0:02:27
 Epoch: 260, lr: 4.0e-04, train_loss: 0.2262, train_acc: 0.9208 test_loss: 0.7585, test_acc: 0.8125, best: 0.8175, time: 0:02:27
 Epoch: 261, lr: 4.0e-04, train_loss: 0.2230, train_acc: 0.9238 test_loss: 0.7523, test_acc: 0.8156, best: 0.8175, time: 0:02:27
 Epoch: 262, lr: 4.0e-04, train_loss: 0.2195, train_acc: 0.9236 test_loss: 0.7667, test_acc: 0.8134, best: 0.8175, time: 0:02:27
 Epoch: 263, lr: 4.0e-04, train_loss: 0.2114, train_acc: 0.9258 test_loss: 0.7558, test_acc: 0.8150, best: 0.8175, time: 0:02:26
 Epoch: 264, lr: 4.0e-04, train_loss: 0.2077, train_acc: 0.9286 test_loss: 0.7515, test_acc: 0.8125, best: 0.8175, time: 0:02:25
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1995, train_acc: 0.9304 test_loss: 0.7690, test_acc: 0.8104, best: 0.8175, time: 0:02:26
 Epoch: 266, lr: 4.0e-04, train_loss: 0.2324, train_acc: 0.9198 test_loss: 0.7739, test_acc: 0.8115, best: 0.8175, time: 0:02:26
 Epoch: 267, lr: 4.0e-04, train_loss: 0.2028, train_acc: 0.9314 test_loss: 0.7681, test_acc: 0.8136, best: 0.8175, time: 0:02:26
 Epoch: 268, lr: 4.0e-04, train_loss: 0.2147, train_acc: 0.9228 test_loss: 0.7891, test_acc: 0.8116, best: 0.8175, time: 0:02:26
 Epoch: 269, lr: 4.0e-04, train_loss: 0.2164, train_acc: 0.9298 test_loss: 0.7644, test_acc: 0.8135, best: 0.8175, time: 0:02:26
 Epoch: 270, lr: 8.0e-05, train_loss: 0.2139, train_acc: 0.9284 test_loss: 0.7643, test_acc: 0.8110, best: 0.8175, time: 0:02:26
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2126, train_acc: 0.9286 test_loss: 0.7932, test_acc: 0.8135, best: 0.8175, time: 0:02:26
 Epoch: 272, lr: 8.0e-05, train_loss: 0.2207, train_acc: 0.9260 test_loss: 0.7805, test_acc: 0.8069, best: 0.8175, time: 0:02:26
 Epoch: 273, lr: 8.0e-05, train_loss: 0.2122, train_acc: 0.9254 test_loss: 0.7654, test_acc: 0.8149, best: 0.8175, time: 0:02:26
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2182, train_acc: 0.9204 test_loss: 0.7901, test_acc: 0.8085, best: 0.8175, time: 0:02:26
 Epoch: 275, lr: 8.0e-05, train_loss: 0.2112, train_acc: 0.9242 test_loss: 0.7630, test_acc: 0.8124, best: 0.8175, time: 0:02:26
 Epoch: 276, lr: 8.0e-05, train_loss: 0.2084, train_acc: 0.9236 test_loss: 0.7871, test_acc: 0.8123, best: 0.8175, time: 0:02:25
 Epoch: 277, lr: 8.0e-05, train_loss: 0.2229, train_acc: 0.9252 test_loss: 0.7722, test_acc: 0.8126, best: 0.8175, time: 0:02:26
 Epoch: 278, lr: 8.0e-05, train_loss: 0.2055, train_acc: 0.9288 test_loss: 0.7633, test_acc: 0.8131, best: 0.8175, time: 0:02:26
 Epoch: 279, lr: 8.0e-05, train_loss: 0.2112, train_acc: 0.9258 test_loss: 0.7733, test_acc: 0.8141, best: 0.8175, time: 0:02:26
 Epoch: 280, lr: 8.0e-05, train_loss: 0.2311, train_acc: 0.9188 test_loss: 0.7626, test_acc: 0.8137, best: 0.8175, time: 0:02:26
 Epoch: 281, lr: 8.0e-05, train_loss: 0.2201, train_acc: 0.9242 test_loss: 0.7659, test_acc: 0.8155, best: 0.8175, time: 0:02:25
 Epoch: 282, lr: 8.0e-05, train_loss: 0.2107, train_acc: 0.9254 test_loss: 0.7798, test_acc: 0.8115, best: 0.8175, time: 0:02:25
 Epoch: 283, lr: 8.0e-05, train_loss: 0.2059, train_acc: 0.9286 test_loss: 0.7524, test_acc: 0.8127, best: 0.8175, time: 0:02:25
 Epoch: 284, lr: 8.0e-05, train_loss: 0.2085, train_acc: 0.9266 test_loss: 0.7597, test_acc: 0.8140, best: 0.8175, time: 0:02:25
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1967, train_acc: 0.9302 test_loss: 0.7623, test_acc: 0.8144, best: 0.8175, time: 0:02:25
 Epoch: 286, lr: 8.0e-05, train_loss: 0.2281, train_acc: 0.9234 test_loss: 0.7721, test_acc: 0.8125, best: 0.8175, time: 0:02:25
 Epoch: 287, lr: 8.0e-05, train_loss: 0.2100, train_acc: 0.9230 test_loss: 0.7562, test_acc: 0.8160, best: 0.8175, time: 0:02:25
 Epoch: 288, lr: 8.0e-05, train_loss: 0.2086, train_acc: 0.9292 test_loss: 0.7574, test_acc: 0.8131, best: 0.8175, time: 0:02:25
 Epoch: 289, lr: 8.0e-05, train_loss: 0.2091, train_acc: 0.9262 test_loss: 0.7800, test_acc: 0.8136, best: 0.8175, time: 0:02:25
 Epoch: 290, lr: 8.0e-05, train_loss: 0.2006, train_acc: 0.9312 test_loss: 0.7815, test_acc: 0.8097, best: 0.8175, time: 0:02:25
 Epoch: 291, lr: 8.0e-05, train_loss: 0.2103, train_acc: 0.9290 test_loss: 0.7653, test_acc: 0.8131, best: 0.8175, time: 0:02:25
 Epoch: 292, lr: 8.0e-05, train_loss: 0.2204, train_acc: 0.9224 test_loss: 0.7759, test_acc: 0.8101, best: 0.8175, time: 0:02:25
 Epoch: 293, lr: 8.0e-05, train_loss: 0.2073, train_acc: 0.9288 test_loss: 0.7807, test_acc: 0.8119, best: 0.8175, time: 0:02:25
 Epoch: 294, lr: 8.0e-05, train_loss: 0.2144, train_acc: 0.9258 test_loss: 0.7766, test_acc: 0.8127, best: 0.8175, time: 0:02:25
 Epoch: 295, lr: 8.0e-05, train_loss: 0.2000, train_acc: 0.9350 test_loss: 0.7457, test_acc: 0.8145, best: 0.8175, time: 0:02:25
 Epoch: 296, lr: 8.0e-05, train_loss: 0.2077, train_acc: 0.9276 test_loss: 0.7663, test_acc: 0.8127, best: 0.8175, time: 0:02:25
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2138, train_acc: 0.9274 test_loss: 0.7919, test_acc: 0.8123, best: 0.8175, time: 0:02:25
 Epoch: 298, lr: 8.0e-05, train_loss: 0.2100, train_acc: 0.9276 test_loss: 0.7654, test_acc: 0.8151, best: 0.8175, time: 0:02:25
 Epoch: 299, lr: 8.0e-05, train_loss: 0.2099, train_acc: 0.9268 test_loss: 0.7709, test_acc: 0.8110, best: 0.8175, time: 0:02:25
 Highest accuracy: 0.8175