
 Run on time: 2022-07-05 13:30:19.232274

 Architecture: mobilenet_v2-nlp_headfix2_nowin-4222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 4,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": false
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": false
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : mobilenet_v2-nlp_headfix2_nowin-4222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): Sequential(
          (0): InvertedResidual(
            (pooling): Pool2d(
              (logit): Sequential(
                (pool_weight): NLP_BASE(
                  (downsample): Sequential(
                    (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                  (multihead_attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=16, out_features=16, bias=True)
                  )
                  (restore): Sequential(
                    (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): Sigmoid()
                  )
                  (pos_embed): PositionEmbeddingLearned(
                    (row_embed): Embedding(256, 8)
                    (col_embed): Embedding(256, 8)
                  )
                )
              )
              (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
            )
            (conv): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (1): Sequential(
          (0): InvertedResidual(
            (pooling): Pool2d(
              (logit): Sequential(
                (pool_weight): NLP_BASE(
                  (downsample): Sequential(
                    (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                  (multihead_attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=24, out_features=24, bias=True)
                  )
                  (restore): Sequential(
                    (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): Sigmoid()
                  )
                  (pos_embed): PositionEmbeddingLearned(
                    (row_embed): Embedding(256, 12)
                    (col_embed): Embedding(256, 12)
                  )
                )
              )
              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            )
            (conv): Sequential(
              (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96, bias=False)
              (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (2): Sequential(
          (0): InvertedResidual(
            (pooling): Pool2d(
              (logit): Sequential(
                (pool_weight): NLP_BASE(
                  (downsample): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                  (multihead_attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
                  )
                  (restore): Sequential(
                    (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): Sigmoid()
                  )
                  (pos_embed): PositionEmbeddingLearned(
                    (row_embed): Embedding(256, 16)
                    (col_embed): Embedding(256, 16)
                  )
                )
              )
              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            )
            (conv): Sequential(
              (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
              (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (3): Sequential(
          (0): InvertedResidual(
            (pooling): Pool2d(
              (logit): Sequential(
                (pool_weight): NLP_BASE(
                  (downsample): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                  (multihead_attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                  )
                  (restore): Sequential(
                    (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): Sigmoid()
                  )
                  (pos_embed): PositionEmbeddingLearned(
                    (row_embed): Embedding(256, 32)
                    (col_embed): Embedding(256, 32)
                  )
                )
              )
              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            )
            (conv): Sequential(
              (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
              (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (3): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (4): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
              (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (5): Sequential(
          (0): InvertedResidual(
            (pooling): Pool2d(
              (logit): Sequential(
                (pool_weight): NLP_BASE(
                  (downsample): Sequential(
                    (0): Conv2d(160, 160, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): ReLU(inplace=True)
                  )
                  (multihead_attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=160, out_features=160, bias=True)
                  )
                  (restore): Sequential(
                    (0): Conv2d(160, 160, kernel_size=(1, 1), stride=(1, 1))
                    (1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (2): Sigmoid()
                  )
                  (pos_embed): PositionEmbeddingLearned(
                    (row_embed): Embedding(256, 80)
                    (col_embed): Embedding(256, 80)
                  )
                )
              )
              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            )
            (conv): Sequential(
              (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
              (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (2): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (6): Sequential(
          (0): InvertedResidual(
            (conv): Sequential(
              (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6(inplace=True)
              (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
              (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (5): ReLU6(inplace=True)
              (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.3897, train_acc: 0.1152 test_loss: 2.5484, test_acc: 0.1254, best: 0.1254, time: 0:02:10
 Epoch: 2, lr: 1.0e-02, train_loss: 2.4210, train_acc: 0.1494 test_loss: 2.1580, test_acc: 0.1720, best: 0.1720, time: 0:02:09
 Epoch: 3, lr: 1.0e-02, train_loss: 2.2351, train_acc: 0.1622 test_loss: 2.0999, test_acc: 0.2099, best: 0.2099, time: 0:02:09
 Epoch: 4, lr: 1.0e-02, train_loss: 2.1375, train_acc: 0.1978 test_loss: 2.0727, test_acc: 0.2254, best: 0.2254, time: 0:02:08
 Epoch: 5, lr: 1.0e-02, train_loss: 2.0840, train_acc: 0.2100 test_loss: 1.9618, test_acc: 0.2786, best: 0.2786, time: 0:02:09
 Epoch: 6, lr: 1.0e-02, train_loss: 2.0480, train_acc: 0.2170 test_loss: 2.0252, test_acc: 0.2634, best: 0.2786, time: 0:02:10
 Epoch: 7, lr: 1.0e-02, train_loss: 2.0184, train_acc: 0.2444 test_loss: 2.0294, test_acc: 0.2274, best: 0.2786, time: 0:02:09
 Epoch: 8, lr: 1.0e-02, train_loss: 2.0730, train_acc: 0.2106 test_loss: 2.4515, test_acc: 0.1291, best: 0.2786, time: 0:02:08
 Epoch: 9, lr: 1.0e-02, train_loss: 2.2153, train_acc: 0.1534 test_loss: 2.1604, test_acc: 0.1737, best: 0.2786, time: 0:02:09
 Epoch: 10, lr: 1.0e-02, train_loss: 2.2084, train_acc: 0.1532 test_loss: 2.1876, test_acc: 0.1886, best: 0.2786, time: 0:02:10
 Epoch: 11, lr: 1.0e-02, train_loss: 2.1673, train_acc: 0.1794 test_loss: 2.1278, test_acc: 0.2144, best: 0.2786, time: 0:02:09
 Epoch: 12, lr: 1.0e-02, train_loss: 2.1663, train_acc: 0.1820 test_loss: 2.0656, test_acc: 0.2283, best: 0.2786, time: 0:02:09
 Epoch: 13, lr: 1.0e-02, train_loss: 2.1793, train_acc: 0.1724 test_loss: 2.1157, test_acc: 0.2245, best: 0.2786, time: 0:02:08
 Epoch: 14, lr: 1.0e-02, train_loss: 2.1854, train_acc: 0.1738 test_loss: 2.1969, test_acc: 0.1836, best: 0.2786, time: 0:02:08
 Epoch: 15, lr: 1.0e-02, train_loss: 2.2222, train_acc: 0.1566 test_loss: 2.2193, test_acc: 0.1501, best: 0.2786, time: 0:02:09
 Epoch: 16, lr: 1.0e-02, train_loss: 2.2335, train_acc: 0.1454 test_loss: 2.2006, test_acc: 0.1804, best: 0.2786, time: 0:02:09
 Epoch: 17, lr: 1.0e-02, train_loss: 2.2551, train_acc: 0.1414 test_loss: 2.2091, test_acc: 0.1846, best: 0.2786, time: 0:02:09
 Epoch: 18, lr: 1.0e-02, train_loss: 2.2072, train_acc: 0.1568 test_loss: 2.2016, test_acc: 0.1661, best: 0.2786, time: 0:02:09
 Epoch: 19, lr: 1.0e-02, train_loss: 2.2174, train_acc: 0.1566 test_loss: 2.2020, test_acc: 0.1691, best: 0.2786, time: 0:02:13
 Epoch: 20, lr: 1.0e-02, train_loss: 2.1696, train_acc: 0.1680 test_loss: 2.1110, test_acc: 0.2117, best: 0.2786, time: 0:02:13
 Epoch: 21, lr: 1.0e-02, train_loss: 2.1757, train_acc: 0.1772 test_loss: 2.1852, test_acc: 0.1633, best: 0.2786, time: 0:02:12
 Epoch: 22, lr: 1.0e-02, train_loss: 2.1899, train_acc: 0.1640 test_loss: 2.1321, test_acc: 0.1889, best: 0.2786, time: 0:02:12
 Epoch: 23, lr: 1.0e-02, train_loss: 2.1900, train_acc: 0.1722 test_loss: 2.1610, test_acc: 0.1999, best: 0.2786, time: 0:02:12
 Epoch: 24, lr: 1.0e-02, train_loss: 2.1822, train_acc: 0.1846 test_loss: 2.1702, test_acc: 0.2171, best: 0.2786, time: 0:02:11
 Epoch: 25, lr: 1.0e-02, train_loss: 2.1578, train_acc: 0.1968 test_loss: 2.0882, test_acc: 0.2559, best: 0.2786, time: 0:02:11
 Epoch: 26, lr: 1.0e-02, train_loss: 2.1509, train_acc: 0.1994 test_loss: 2.1891, test_acc: 0.1800, best: 0.2786, time: 0:02:11
 Epoch: 27, lr: 1.0e-02, train_loss: 2.1877, train_acc: 0.1724 test_loss: 2.2426, test_acc: 0.1524, best: 0.2786, time: 0:02:11
 Epoch: 28, lr: 1.0e-02, train_loss: 2.2635, train_acc: 0.1346 test_loss: 2.2341, test_acc: 0.1710, best: 0.2786, time: 0:02:11
 Epoch: 29, lr: 1.0e-02, train_loss: 2.2279, train_acc: 0.1686 test_loss: 2.1413, test_acc: 0.2091, best: 0.2786, time: 0:02:11
 Epoch: 30, lr: 1.0e-02, train_loss: 2.1526, train_acc: 0.1958 test_loss: 2.0907, test_acc: 0.2340, best: 0.2786, time: 0:02:11
 Epoch: 31, lr: 1.0e-02, train_loss: 2.0871, train_acc: 0.2058 test_loss: 2.0300, test_acc: 0.2200, best: 0.2786, time: 0:02:11
 Epoch: 32, lr: 1.0e-02, train_loss: 2.1019, train_acc: 0.2028 test_loss: 2.0307, test_acc: 0.2380, best: 0.2786, time: 0:02:11
 Epoch: 33, lr: 1.0e-02, train_loss: 2.1061, train_acc: 0.1916 test_loss: 2.0590, test_acc: 0.2055, best: 0.2786, time: 0:02:11
 Epoch: 34, lr: 1.0e-02, train_loss: 2.0761, train_acc: 0.1966 test_loss: 2.0485, test_acc: 0.2205, best: 0.2786, time: 0:02:11
 Epoch: 35, lr: 1.0e-02, train_loss: 2.0886, train_acc: 0.1972 test_loss: 2.2627, test_acc: 0.1621, best: 0.2786, time: 0:02:11
 Epoch: 36, lr: 1.0e-02, train_loss: 2.1212, train_acc: 0.1988 test_loss: 2.0946, test_acc: 0.2330, best: 0.2786, time: 0:02:11
 Epoch: 37, lr: 1.0e-02, train_loss: 2.1529, train_acc: 0.1850 test_loss: 2.1585, test_acc: 0.1781, best: 0.2786, time: 0:02:11
 Epoch: 38, lr: 1.0e-02, train_loss: 2.1428, train_acc: 0.1850 test_loss: 2.0853, test_acc: 0.2193, best: 0.2786, time: 0:02:11
 Epoch: 39, lr: 1.0e-02, train_loss: 2.1753, train_acc: 0.1684 test_loss: 2.2089, test_acc: 0.1683, best: 0.2786, time: 0:02:11
 Epoch: 40, lr: 1.0e-02, train_loss: 2.2139, train_acc: 0.1482 test_loss: 2.1911, test_acc: 0.1739, best: 0.2786, time: 0:02:11
 Epoch: 41, lr: 1.0e-02, train_loss: 2.1891, train_acc: 0.1790 test_loss: 2.1580, test_acc: 0.1924, best: 0.2786, time: 0:02:11
 Epoch: 42, lr: 1.0e-02, train_loss: 2.1636, train_acc: 0.1744 test_loss: 2.1377, test_acc: 0.2075, best: 0.2786, time: 0:02:11
 Epoch: 43, lr: 1.0e-02, train_loss: 2.1713, train_acc: 0.1854 test_loss: 2.1683, test_acc: 0.1766, best: 0.2786, time: 0:02:11
 Epoch: 44, lr: 1.0e-02, train_loss: 2.1514, train_acc: 0.1838 test_loss: 2.1675, test_acc: 0.1943, best: 0.2786, time: 0:02:12
 Epoch: 45, lr: 1.0e-02, train_loss: 2.1518, train_acc: 0.1826 test_loss: 2.1030, test_acc: 0.2224, best: 0.2786, time: 0:02:11
 Epoch: 46, lr: 1.0e-02, train_loss: 2.1051, train_acc: 0.2010 test_loss: 2.1244, test_acc: 0.2086, best: 0.2786, time: 0:02:12
 Epoch: 47, lr: 1.0e-02, train_loss: 2.1285, train_acc: 0.1984 test_loss: 2.1334, test_acc: 0.1905, best: 0.2786, time: 0:02:11
 Epoch: 48, lr: 1.0e-02, train_loss: 2.1959, train_acc: 0.1610 test_loss: 2.2139, test_acc: 0.1542, best: 0.2786, time: 0:02:12
 Epoch: 49, lr: 1.0e-02, train_loss: 2.1660, train_acc: 0.1774 test_loss: 2.1298, test_acc: 0.1870, best: 0.2786, time: 0:02:11
 Epoch: 50, lr: 1.0e-02, train_loss: 2.1353, train_acc: 0.1970 test_loss: 2.1449, test_acc: 0.1921, best: 0.2786, time: 0:02:12
 Epoch: 51, lr: 1.0e-02, train_loss: 2.1669, train_acc: 0.1938 test_loss: 2.1946, test_acc: 0.1623, best: 0.2786, time: 0:02:11
 Epoch: 52, lr: 1.0e-02, train_loss: 2.2121, train_acc: 0.1636 test_loss: 2.1713, test_acc: 0.1547, best: 0.2786, time: 0:02:11
 Epoch: 53, lr: 1.0e-02, train_loss: 2.1889, train_acc: 0.1694 test_loss: 2.1247, test_acc: 0.1881, best: 0.2786, time: 0:02:11
 Epoch: 54, lr: 1.0e-02, train_loss: 2.1783, train_acc: 0.1818 test_loss: 2.1247, test_acc: 0.2045, best: 0.2786, time: 0:02:10
 Epoch: 55, lr: 1.0e-02, train_loss: 2.1543, train_acc: 0.1900 test_loss: 2.1009, test_acc: 0.2216, best: 0.2786, time: 0:02:11
 Epoch: 56, lr: 1.0e-02, train_loss: 2.1318, train_acc: 0.1928 test_loss: 2.1017, test_acc: 0.2111, best: 0.2786, time: 0:02:11
 Epoch: 57, lr: 1.0e-02, train_loss: 2.1292, train_acc: 0.1994 test_loss: 2.0545, test_acc: 0.2387, best: 0.2786, time: 0:02:11
 Epoch: 58, lr: 1.0e-02, train_loss: 2.0996, train_acc: 0.2098 test_loss: 2.0713, test_acc: 0.2215, best: 0.2786, time: 0:02:11
 Epoch: 59, lr: 1.0e-02, train_loss: 2.1330, train_acc: 0.2046 test_loss: 2.0908, test_acc: 0.2364, best: 0.2786, time: 0:02:12
 Epoch: 60, lr: 1.0e-02, train_loss: 2.1287, train_acc: 0.2010 test_loss: 2.0868, test_acc: 0.2127, best: 0.2786, time: 0:02:11
 Epoch: 61, lr: 1.0e-02, train_loss: 2.1375, train_acc: 0.1932 test_loss: 2.1665, test_acc: 0.1721, best: 0.2786, time: 0:02:10
 Epoch: 62, lr: 1.0e-02, train_loss: 2.1332, train_acc: 0.1902 test_loss: 2.1727, test_acc: 0.1641, best: 0.2786, time: 0:02:11
 Epoch: 63, lr: 1.0e-02, train_loss: 2.1658, train_acc: 0.1800 test_loss: 2.1102, test_acc: 0.2209, best: 0.2786, time: 0:02:10
 Epoch: 64, lr: 1.0e-02, train_loss: 2.1253, train_acc: 0.2126 test_loss: 2.1112, test_acc: 0.2220, best: 0.2786, time: 0:02:10
 Epoch: 65, lr: 1.0e-02, train_loss: 2.1689, train_acc: 0.1738 test_loss: 2.1639, test_acc: 0.1641, best: 0.2786, time: 0:02:10
 Epoch: 66, lr: 1.0e-02, train_loss: 2.1889, train_acc: 0.1648 test_loss: 2.1715, test_acc: 0.1909, best: 0.2786, time: 0:02:10
 Epoch: 67, lr: 1.0e-02, train_loss: 2.2237, train_acc: 0.1470 test_loss: 2.2240, test_acc: 0.1638, best: 0.2786, time: 0:02:10
 Epoch: 68, lr: 1.0e-02, train_loss: 2.2342, train_acc: 0.1532 test_loss: 2.2273, test_acc: 0.1323, best: 0.2786, time: 0:02:11
 Epoch: 69, lr: 1.0e-02, train_loss: 2.2120, train_acc: 0.1584 test_loss: 2.2085, test_acc: 0.1568, best: 0.2786, time: 0:02:12
 Epoch: 70, lr: 1.0e-02, train_loss: 2.1953, train_acc: 0.1744 test_loss: 2.1365, test_acc: 0.2051, best: 0.2786, time: 0:02:10
 Epoch: 71, lr: 1.0e-02, train_loss: 2.2041, train_acc: 0.1736 test_loss: 2.2208, test_acc: 0.1824, best: 0.2786, time: 0:02:09
 Epoch: 72, lr: 1.0e-02, train_loss: 2.2559, train_acc: 0.1416 test_loss: 2.2431, test_acc: 0.1296, best: 0.2786, time: 0:02:10
 Epoch: 73, lr: 1.0e-02, train_loss: 2.2747, train_acc: 0.1282 test_loss: 2.2910, test_acc: 0.1185, best: 0.2786, time: 0:02:10
 Epoch: 74, lr: 1.0e-02, train_loss: 2.2001, train_acc: 0.1738 test_loss: 2.1187, test_acc: 0.2015, best: 0.2786, time: 0:02:10
 Epoch: 75, lr: 1.0e-02, train_loss: 2.1709, train_acc: 0.1850 test_loss: 2.1181, test_acc: 0.2206, best: 0.2786, time: 0:02:09
 Epoch: 76, lr: 1.0e-02, train_loss: 2.1619, train_acc: 0.1928 test_loss: 2.1664, test_acc: 0.2037, best: 0.2786, time: 0:02:10
 Epoch: 77, lr: 1.0e-02, train_loss: 2.1876, train_acc: 0.1742 test_loss: 2.3179, test_acc: 0.1281, best: 0.2786, time: 0:02:10
 Epoch: 78, lr: 1.0e-02, train_loss: 2.2056, train_acc: 0.1626 test_loss: 2.1714, test_acc: 0.1852, best: 0.2786, time: 0:02:10
 Epoch: 79, lr: 1.0e-02, train_loss: 2.2323, train_acc: 0.1592 test_loss: 2.1871, test_acc: 0.2185, best: 0.2786, time: 0:02:10
 Epoch: 80, lr: 1.0e-02, train_loss: 2.1868, train_acc: 0.1938 test_loss: 2.1660, test_acc: 0.2160, best: 0.2786, time: 0:02:10
 Epoch: 81, lr: 1.0e-02, train_loss: 2.1746, train_acc: 0.1920 test_loss: 2.1391, test_acc: 0.2364, best: 0.2786, time: 0:02:10
 Epoch: 82, lr: 1.0e-02, train_loss: 2.1624, train_acc: 0.1944 test_loss: 2.1610, test_acc: 0.2054, best: 0.2786, time: 0:02:10
 Epoch: 83, lr: 1.0e-02, train_loss: 2.1617, train_acc: 0.1916 test_loss: 2.1075, test_acc: 0.2406, best: 0.2786, time: 0:02:10
 Epoch: 84, lr: 1.0e-02, train_loss: 2.1470, train_acc: 0.2082 test_loss: 2.1459, test_acc: 0.2061, best: 0.2786, time: 0:02:10
 Epoch: 85, lr: 1.0e-02, train_loss: 2.1597, train_acc: 0.1978 test_loss: 2.1299, test_acc: 0.2279, best: 0.2786, time: 0:02:10
 Epoch: 86, lr: 1.0e-02, train_loss: 2.1512, train_acc: 0.1932 test_loss: 2.0803, test_acc: 0.2561, best: 0.2786, time: 0:02:10
 Epoch: 87, lr: 1.0e-02, train_loss: 2.1773, train_acc: 0.1944 test_loss: 2.2584, test_acc: 0.1420, best: 0.2786, time: 0:02:09
 Epoch: 88, lr: 1.0e-02, train_loss: 2.2308, train_acc: 0.1668 test_loss: 2.1933, test_acc: 0.2121, best: 0.2786, time: 0:02:09
 Epoch: 89, lr: 1.0e-02, train_loss: 2.2577, train_acc: 0.1512 test_loss: 2.2903, test_acc: 0.1230, best: 0.2786, time: 0:02:09
 Epoch: 90, lr: 1.0e-02, train_loss: 2.2850, train_acc: 0.1270 test_loss: 2.2498, test_acc: 0.1683, best: 0.2786, time: 0:02:09
 Epoch: 91, lr: 1.0e-02, train_loss: 2.2627, train_acc: 0.1368 test_loss: 2.3064, test_acc: 0.1014, best: 0.2786, time: 0:02:09
 Epoch: 92, lr: 1.0e-02, train_loss: 2.3046, train_acc: 0.1044 test_loss: 2.3015, test_acc: 0.0991, best: 0.2786, time: 0:02:08
 Epoch: 93, lr: 1.0e-02, train_loss: 2.3034, train_acc: 0.1022 test_loss: 2.2979, test_acc: 0.1226, best: 0.2786, time: 0:02:08
 Epoch: 94, lr: 1.0e-02, train_loss: 2.3018, train_acc: 0.1100 test_loss: 2.3064, test_acc: 0.1060, best: 0.2786, time: 0:02:08
 Epoch: 95, lr: 1.0e-02, train_loss: 2.3045, train_acc: 0.1022 test_loss: 2.3045, test_acc: 0.1220, best: 0.2786, time: 0:02:08
 Epoch: 96, lr: 1.0e-02, train_loss: 2.2946, train_acc: 0.1160 test_loss: 2.2901, test_acc: 0.1180, best: 0.2786, time: 0:02:08
 Epoch: 97, lr: 1.0e-02, train_loss: 2.2905, train_acc: 0.1232 test_loss: 2.2752, test_acc: 0.1446, best: 0.2786, time: 0:02:08
 Epoch: 98, lr: 1.0e-02, train_loss: 2.2786, train_acc: 0.1244 test_loss: 2.2826, test_acc: 0.1333, best: 0.2786, time: 0:02:08
 Epoch: 99, lr: 1.0e-02, train_loss: 2.2885, train_acc: 0.1316 test_loss: 2.2782, test_acc: 0.1532, best: 0.2786, time: 0:02:08
 Epoch: 100, lr: 1.0e-02, train_loss: 2.2799, train_acc: 0.1326 test_loss: 2.2631, test_acc: 0.1574, best: 0.2786, time: 0:02:08
 Epoch: 101, lr: 1.0e-02, train_loss: 2.2664, train_acc: 0.1450 test_loss: 2.2395, test_acc: 0.1411, best: 0.2786, time: 0:02:08
 Epoch: 102, lr: 1.0e-02, train_loss: 2.2694, train_acc: 0.1428 test_loss: 2.2644, test_acc: 0.1467, best: 0.2786, time: 0:02:08
 Epoch: 103, lr: 1.0e-02, train_loss: 2.2905, train_acc: 0.1298 test_loss: 2.2788, test_acc: 0.1230, best: 0.2786, time: 0:02:08
 Epoch: 104, lr: 1.0e-02, train_loss: 2.2865, train_acc: 0.1302 test_loss: 2.2936, test_acc: 0.1128, best: 0.2786, time: 0:02:08
 Epoch: 105, lr: 1.0e-02, train_loss: 2.2872, train_acc: 0.1312 test_loss: 2.3942, test_acc: 0.1368, best: 0.2786, time: 0:02:08
 Epoch: 106, lr: 1.0e-02, train_loss: 2.2690, train_acc: 0.1448 test_loss: 2.2536, test_acc: 0.1698, best: 0.2786, time: 0:02:08
 Epoch: 107, lr: 1.0e-02, train_loss: 2.2551, train_acc: 0.1500 test_loss: 2.2316, test_acc: 0.1760, best: 0.2786, time: 0:02:08
 Epoch: 108, lr: 1.0e-02, train_loss: 2.2624, train_acc: 0.1478 test_loss: 2.2513, test_acc: 0.1316, best: 0.2786, time: 0:02:08
 Epoch: 109, lr: 1.0e-02, train_loss: 2.2525, train_acc: 0.1534 test_loss: 2.2527, test_acc: 0.1494, best: 0.2786, time: 0:02:08
 Epoch: 110, lr: 1.0e-02, train_loss: 2.2541, train_acc: 0.1594 test_loss: 2.2341, test_acc: 0.1771, best: 0.2786, time: 0:02:08
 Epoch: 111, lr: 1.0e-02, train_loss: 2.2384, train_acc: 0.1624 test_loss: 2.2215, test_acc: 0.1574, best: 0.2786, time: 0:02:08
 Epoch: 112, lr: 1.0e-02, train_loss: 2.2443, train_acc: 0.1666 test_loss: 2.2208, test_acc: 0.1608, best: 0.2786, time: 0:02:08
 Epoch: 113, lr: 1.0e-02, train_loss: 2.2425, train_acc: 0.1576 test_loss: 2.2250, test_acc: 0.1911, best: 0.2786, time: 0:02:08
 Epoch: 114, lr: 1.0e-02, train_loss: 2.2380, train_acc: 0.1564 test_loss: 2.2002, test_acc: 0.2057, best: 0.2786, time: 0:02:08
 Epoch: 115, lr: 1.0e-02, train_loss: 2.2322, train_acc: 0.1638 test_loss: 2.2038, test_acc: 0.1920, best: 0.2786, time: 0:02:08
 Epoch: 116, lr: 1.0e-02, train_loss: 2.2265, train_acc: 0.1646 test_loss: 2.1896, test_acc: 0.2069, best: 0.2786, time: 0:02:08
 Epoch: 117, lr: 1.0e-02, train_loss: 2.2257, train_acc: 0.1634 test_loss: 2.1949, test_acc: 0.1966, best: 0.2786, time: 0:02:08
 Epoch: 118, lr: 1.0e-02, train_loss: 2.2297, train_acc: 0.1684 test_loss: 2.1850, test_acc: 0.2089, best: 0.2786, time: 0:02:08
 Epoch: 119, lr: 1.0e-02, train_loss: 2.2184, train_acc: 0.1694 test_loss: 2.1890, test_acc: 0.1908, best: 0.2786, time: 0:02:08
 Epoch: 120, lr: 1.0e-02, train_loss: 2.2098, train_acc: 0.1736 test_loss: 2.1714, test_acc: 0.1975, best: 0.2786, time: 0:02:08
 Epoch: 121, lr: 1.0e-02, train_loss: 2.2100, train_acc: 0.1656 test_loss: 2.1679, test_acc: 0.2040, best: 0.2786, time: 0:02:08
 Epoch: 122, lr: 1.0e-02, train_loss: 2.2274, train_acc: 0.1646 test_loss: 2.1830, test_acc: 0.2016, best: 0.2786, time: 0:02:08
 Epoch: 123, lr: 1.0e-02, train_loss: 2.2132, train_acc: 0.1698 test_loss: 2.1819, test_acc: 0.1934, best: 0.2786, time: 0:02:08
 Epoch: 124, lr: 1.0e-02, train_loss: 2.2164, train_acc: 0.1754 test_loss: 2.1791, test_acc: 0.1926, best: 0.2786, time: 0:02:08
 Epoch: 125, lr: 1.0e-02, train_loss: 2.2120, train_acc: 0.1720 test_loss: 2.1436, test_acc: 0.1940, best: 0.2786, time: 0:02:08
 Epoch: 126, lr: 1.0e-02, train_loss: 2.2251, train_acc: 0.1724 test_loss: 2.1986, test_acc: 0.1969, best: 0.2786, time: 0:02:08
 Epoch: 127, lr: 1.0e-02, train_loss: 2.2211, train_acc: 0.1698 test_loss: 2.1837, test_acc: 0.2015, best: 0.2786, time: 0:02:08
 Epoch: 128, lr: 1.0e-02, train_loss: 2.2418, train_acc: 0.1604 test_loss: 2.2298, test_acc: 0.1777, best: 0.2786, time: 0:02:08
 Epoch: 129, lr: 1.0e-02, train_loss: 2.2326, train_acc: 0.1544 test_loss: 2.1872, test_acc: 0.1827, best: 0.2786, time: 0:02:08
 Epoch: 130, lr: 1.0e-02, train_loss: 2.2412, train_acc: 0.1566 test_loss: 2.2278, test_acc: 0.1836, best: 0.2786, time: 0:02:08
 Epoch: 131, lr: 1.0e-02, train_loss: 2.2300, train_acc: 0.1664 test_loss: 2.2096, test_acc: 0.1775, best: 0.2786, time: 0:02:08
 Epoch: 132, lr: 1.0e-02, train_loss: 2.2312, train_acc: 0.1648 test_loss: 2.1758, test_acc: 0.1989, best: 0.2786, time: 0:02:08
 Epoch: 133, lr: 1.0e-02, train_loss: 2.2278, train_acc: 0.1632 test_loss: 2.1801, test_acc: 0.1709, best: 0.2786, time: 0:02:08
 Epoch: 134, lr: 1.0e-02, train_loss: 2.2225, train_acc: 0.1690 test_loss: 2.1939, test_acc: 0.1965, best: 0.2786, time: 0:02:08
 Epoch: 135, lr: 1.0e-02, train_loss: 2.2243, train_acc: 0.1674 test_loss: 2.1876, test_acc: 0.1816, best: 0.2786, time: 0:02:08
 Epoch: 136, lr: 1.0e-02, train_loss: 2.2253, train_acc: 0.1626 test_loss: 2.1961, test_acc: 0.1916, best: 0.2786, time: 0:02:08
 Epoch: 137, lr: 1.0e-02, train_loss: 2.2306, train_acc: 0.1630 test_loss: 2.1913, test_acc: 0.1764, best: 0.2786, time: 0:02:08
 Epoch: 138, lr: 1.0e-02, train_loss: 2.2383, train_acc: 0.1682 test_loss: 2.2306, test_acc: 0.1751, best: 0.2786, time: 0:02:08
 Epoch: 139, lr: 1.0e-02, train_loss: 2.2218, train_acc: 0.1752 test_loss: 2.1904, test_acc: 0.1796, best: 0.2786, time: 0:02:08
 Epoch: 140, lr: 1.0e-02, train_loss: 2.2268, train_acc: 0.1714 test_loss: 2.2050, test_acc: 0.1876, best: 0.2786, time: 0:02:08
 Epoch: 141, lr: 1.0e-02, train_loss: 2.2170, train_acc: 0.1590 test_loss: 2.1787, test_acc: 0.1895, best: 0.2786, time: 0:02:08
 Epoch: 142, lr: 1.0e-02, train_loss: 2.2145, train_acc: 0.1792 test_loss: 2.1848, test_acc: 0.1656, best: 0.2786, time: 0:02:08
 Epoch: 143, lr: 1.0e-02, train_loss: 2.2181, train_acc: 0.1692 test_loss: 2.2363, test_acc: 0.1535, best: 0.2786, time: 0:02:08
 Epoch: 144, lr: 1.0e-02, train_loss: 2.2368, train_acc: 0.1662 test_loss: 2.2246, test_acc: 0.1872, best: 0.2786, time: 0:02:08
 Epoch: 145, lr: 1.0e-02, train_loss: 2.2199, train_acc: 0.1676 test_loss: 2.1786, test_acc: 0.1929, best: 0.2786, time: 0:02:08
 Epoch: 146, lr: 1.0e-02, train_loss: 2.2225, train_acc: 0.1726 test_loss: 2.1776, test_acc: 0.1933, best: 0.2786, time: 0:02:08
 Epoch: 147, lr: 1.0e-02, train_loss: 2.2100, train_acc: 0.1758 test_loss: 2.1280, test_acc: 0.2087, best: 0.2786, time: 0:02:08
 Epoch: 148, lr: 1.0e-02, train_loss: 2.1969, train_acc: 0.1850 test_loss: 2.1378, test_acc: 0.2018, best: 0.2786, time: 0:02:08
 Epoch: 149, lr: 1.0e-02, train_loss: 2.2012, train_acc: 0.1772 test_loss: 2.1246, test_acc: 0.2210, best: 0.2786, time: 0:02:08
 Epoch: 150, lr: 1.0e-02, train_loss: 2.2087, train_acc: 0.1728 test_loss: 2.1727, test_acc: 0.1916, best: 0.2786, time: 0:02:08
 Epoch: 151, lr: 1.0e-02, train_loss: 2.1947, train_acc: 0.1840 test_loss: 2.1401, test_acc: 0.2065, best: 0.2786, time: 0:02:08
 Epoch: 152, lr: 1.0e-02, train_loss: 2.1966, train_acc: 0.1738 test_loss: 2.1413, test_acc: 0.2137, best: 0.2786, time: 0:02:08
 Epoch: 153, lr: 1.0e-02, train_loss: 2.2076, train_acc: 0.1696 test_loss: 2.1820, test_acc: 0.1704, best: 0.2786, time: 0:02:08
 Epoch: 154, lr: 1.0e-02, train_loss: 2.2111, train_acc: 0.1754 test_loss: 2.1488, test_acc: 0.1856, best: 0.2786, time: 0:02:08
 Epoch: 155, lr: 1.0e-02, train_loss: 2.2105, train_acc: 0.1684 test_loss: 2.1547, test_acc: 0.1958, best: 0.2786, time: 0:02:08
 Epoch: 156, lr: 1.0e-02, train_loss: 2.2340, train_acc: 0.1590 test_loss: 2.3305, test_acc: 0.0821, best: 0.2786, time: 0:02:08
 Epoch: 157, lr: 1.0e-02, train_loss: 2.2859, train_acc: 0.1288 test_loss: 2.2855, test_acc: 0.1313, best: 0.2786, time: 0:02:08
 Epoch: 158, lr: 1.0e-02, train_loss: 2.2703, train_acc: 0.1408 test_loss: 2.2469, test_acc: 0.1633, best: 0.2786, time: 0:02:08
 Epoch: 159, lr: 1.0e-02, train_loss: 2.2544, train_acc: 0.1486 test_loss: 2.2414, test_acc: 0.1579, best: 0.2786, time: 0:02:08
 Epoch: 160, lr: 1.0e-02, train_loss: 2.2473, train_acc: 0.1618 test_loss: 2.2420, test_acc: 0.1817, best: 0.2786, time: 0:02:08
 Epoch: 161, lr: 1.0e-02, train_loss: 2.2427, train_acc: 0.1650 test_loss: 2.2201, test_acc: 0.1698, best: 0.2786, time: 0:02:08
 Epoch: 162, lr: 1.0e-02, train_loss: 2.2425, train_acc: 0.1576 test_loss: 2.1962, test_acc: 0.1888, best: 0.2786, time: 0:02:08
 Epoch: 163, lr: 1.0e-02, train_loss: 2.2341, train_acc: 0.1620 test_loss: 2.2087, test_acc: 0.1995, best: 0.2786, time: 0:02:08
 Epoch: 164, lr: 1.0e-02, train_loss: 2.2337, train_acc: 0.1708 test_loss: 2.2135, test_acc: 0.1721, best: 0.2786, time: 0:02:08
 Epoch: 165, lr: 1.0e-02, train_loss: 2.2372, train_acc: 0.1596 test_loss: 2.2254, test_acc: 0.1693, best: 0.2786, time: 0:02:08
 Epoch: 166, lr: 1.0e-02, train_loss: 2.2291, train_acc: 0.1604 test_loss: 2.2135, test_acc: 0.1710, best: 0.2786, time: 0:02:08
 Epoch: 167, lr: 1.0e-02, train_loss: 2.2402, train_acc: 0.1620 test_loss: 2.1997, test_acc: 0.1765, best: 0.2786, time: 0:02:08
 Epoch: 168, lr: 1.0e-02, train_loss: 2.2345, train_acc: 0.1568 test_loss: 2.2326, test_acc: 0.1389, best: 0.2786, time: 0:02:08
 Epoch: 169, lr: 1.0e-02, train_loss: 2.2540, train_acc: 0.1600 test_loss: 2.2220, test_acc: 0.1774, best: 0.2786, time: 0:02:08
 Epoch: 170, lr: 1.0e-02, train_loss: 2.2467, train_acc: 0.1586 test_loss: 2.2053, test_acc: 0.1879, best: 0.2786, time: 0:02:08
 Epoch: 171, lr: 1.0e-02, train_loss: 2.2425, train_acc: 0.1626 test_loss: 2.2291, test_acc: 0.1569, best: 0.2786, time: 0:02:08
 Epoch: 172, lr: 1.0e-02, train_loss: 2.2489, train_acc: 0.1514 test_loss: 2.2194, test_acc: 0.1506, best: 0.2786, time: 0:02:08
 Epoch: 173, lr: 1.0e-02, train_loss: 2.2434, train_acc: 0.1570 test_loss: 2.2112, test_acc: 0.1830, best: 0.2786, time: 0:02:08
 Epoch: 174, lr: 1.0e-02, train_loss: 2.2422, train_acc: 0.1588 test_loss: 2.2251, test_acc: 0.1849, best: 0.2786, time: 0:02:08
 Epoch: 175, lr: 1.0e-02, train_loss: 2.2469, train_acc: 0.1618 test_loss: 2.2146, test_acc: 0.1832, best: 0.2786, time: 0:02:08
 Epoch: 176, lr: 1.0e-02, train_loss: 2.2392, train_acc: 0.1670 test_loss: 2.2203, test_acc: 0.1589, best: 0.2786, time: 0:02:08
 Epoch: 177, lr: 1.0e-02, train_loss: 2.2389, train_acc: 0.1572 test_loss: 2.2283, test_acc: 0.1796, best: 0.2786, time: 0:02:08
 Epoch: 178, lr: 1.0e-02, train_loss: 2.2927, train_acc: 0.1302 test_loss: 2.2201, test_acc: 0.1526, best: 0.2786, time: 0:02:08
 Epoch: 179, lr: 1.0e-02, train_loss: 2.2655, train_acc: 0.1446 test_loss: 2.2213, test_acc: 0.1825, best: 0.2786, time: 0:02:08
 Epoch: 180, lr: 2.0e-03, train_loss: 2.2465, train_acc: 0.1604 test_loss: 2.2189, test_acc: 0.1860, best: 0.2786, time: 0:02:08
 Epoch: 181, lr: 2.0e-03, train_loss: 2.2345, train_acc: 0.1744 test_loss: 2.1980, test_acc: 0.1895, best: 0.2786, time: 0:02:08
 Epoch: 182, lr: 2.0e-03, train_loss: 2.2461, train_acc: 0.1614 test_loss: 2.2120, test_acc: 0.1830, best: 0.2786, time: 0:02:08
 Epoch: 183, lr: 2.0e-03, train_loss: 2.2414, train_acc: 0.1584 test_loss: 2.2079, test_acc: 0.1870, best: 0.2786, time: 0:02:08
 Epoch: 184, lr: 2.0e-03, train_loss: 2.2435, train_acc: 0.1640 test_loss: 2.2053, test_acc: 0.1865, best: 0.2786, time: 0:02:08
 Epoch: 185, lr: 2.0e-03, train_loss: 2.2316, train_acc: 0.1660 test_loss: 2.1936, test_acc: 0.1931, best: 0.2786, time: 0:02:08
 Epoch: 186, lr: 2.0e-03, train_loss: 2.2368, train_acc: 0.1540 test_loss: 2.1945, test_acc: 0.1825, best: 0.2786, time: 0:02:08
 Epoch: 187, lr: 2.0e-03, train_loss: 2.2284, train_acc: 0.1676 test_loss: 2.2005, test_acc: 0.1851, best: 0.2786, time: 0:02:08
 Epoch: 188, lr: 2.0e-03, train_loss: 2.2342, train_acc: 0.1616 test_loss: 2.1891, test_acc: 0.1865, best: 0.2786, time: 0:02:08
 Epoch: 189, lr: 2.0e-03, train_loss: 2.2327, train_acc: 0.1610 test_loss: 2.1999, test_acc: 0.1678, best: 0.2786, time: 0:02:08
 Epoch: 190, lr: 2.0e-03, train_loss: 2.2298, train_acc: 0.1640 test_loss: 2.1861, test_acc: 0.1804, best: 0.2786, time: 0:02:08
 Epoch: 191, lr: 2.0e-03, train_loss: 2.2341, train_acc: 0.1654 test_loss: 2.1969, test_acc: 0.1741, best: 0.2786, time: 0:02:08
 Epoch: 192, lr: 2.0e-03, train_loss: 2.2285, train_acc: 0.1622 test_loss: 2.1897, test_acc: 0.1646, best: 0.2786, time: 0:02:08
 Epoch: 193, lr: 2.0e-03, train_loss: 2.2240, train_acc: 0.1662 test_loss: 2.1921, test_acc: 0.1659, best: 0.2786, time: 0:02:08
 Epoch: 194, lr: 2.0e-03, train_loss: 2.2198, train_acc: 0.1682 test_loss: 2.1957, test_acc: 0.1600, best: 0.2786, time: 0:02:08
 Epoch: 195, lr: 2.0e-03, train_loss: 2.2292, train_acc: 0.1576 test_loss: 2.1800, test_acc: 0.1756, best: 0.2786, time: 0:02:08
 Epoch: 196, lr: 2.0e-03, train_loss: 2.2258, train_acc: 0.1666 test_loss: 2.1802, test_acc: 0.1680, best: 0.2786, time: 0:02:08
 Epoch: 197, lr: 2.0e-03, train_loss: 2.2266, train_acc: 0.1608 test_loss: 2.1794, test_acc: 0.1979, best: 0.2786, time: 0:02:08
 Epoch: 198, lr: 2.0e-03, train_loss: 2.2199, train_acc: 0.1700 test_loss: 2.1730, test_acc: 0.1732, best: 0.2786, time: 0:02:08
 Epoch: 199, lr: 2.0e-03, train_loss: 2.2233, train_acc: 0.1652 test_loss: 2.1855, test_acc: 0.1719, best: 0.2786, time: 0:02:08
 Epoch: 200, lr: 2.0e-03, train_loss: 2.2185, train_acc: 0.1688 test_loss: 2.1737, test_acc: 0.1819, best: 0.2786, time: 0:02:08
 Epoch: 201, lr: 2.0e-03, train_loss: 2.2153, train_acc: 0.1766 test_loss: 2.1960, test_acc: 0.1752, best: 0.2786, time: 0:02:08
 Epoch: 202, lr: 2.0e-03, train_loss: 2.2090, train_acc: 0.1770 test_loss: 2.2206, test_acc: 0.1613, best: 0.2786, time: 0:02:08
 Epoch: 203, lr: 2.0e-03, train_loss: 2.2092, train_acc: 0.1768 test_loss: 2.1736, test_acc: 0.1806, best: 0.2786, time: 0:02:08
 Epoch: 204, lr: 2.0e-03, train_loss: 2.2075, train_acc: 0.1700 test_loss: 2.1966, test_acc: 0.1764, best: 0.2786, time: 0:02:08
 Epoch: 205, lr: 2.0e-03, train_loss: 2.2184, train_acc: 0.1666 test_loss: 2.1741, test_acc: 0.1819, best: 0.2786, time: 0:02:08
 Epoch: 206, lr: 2.0e-03, train_loss: 2.2121, train_acc: 0.1770 test_loss: 2.1984, test_acc: 0.1819, best: 0.2786, time: 0:02:08
 Epoch: 207, lr: 2.0e-03, train_loss: 2.2170, train_acc: 0.1710 test_loss: 2.1643, test_acc: 0.1919, best: 0.2786, time: 0:02:08
 Epoch: 208, lr: 2.0e-03, train_loss: 2.2193, train_acc: 0.1698 test_loss: 2.1737, test_acc: 0.1875, best: 0.2786, time: 0:02:08
 Epoch: 209, lr: 2.0e-03, train_loss: 2.2109, train_acc: 0.1762 test_loss: 2.1621, test_acc: 0.2092, best: 0.2786, time: 0:02:08
 Epoch: 210, lr: 2.0e-03, train_loss: 2.2122, train_acc: 0.1756 test_loss: 2.1761, test_acc: 0.1770, best: 0.2786, time: 0:02:08
 Epoch: 211, lr: 2.0e-03, train_loss: 2.2175, train_acc: 0.1680 test_loss: 2.1730, test_acc: 0.1791, best: 0.2786, time: 0:02:08
 Epoch: 212, lr: 2.0e-03, train_loss: 2.2054, train_acc: 0.1772 test_loss: 2.1561, test_acc: 0.1891, best: 0.2786, time: 0:02:08
 Epoch: 213, lr: 2.0e-03, train_loss: 2.2107, train_acc: 0.1734 test_loss: 2.1571, test_acc: 0.1851, best: 0.2786, time: 0:02:08
 Epoch: 214, lr: 2.0e-03, train_loss: 2.2167, train_acc: 0.1714 test_loss: 2.1554, test_acc: 0.2102, best: 0.2786, time: 0:02:08
 Epoch: 215, lr: 2.0e-03, train_loss: 2.2185, train_acc: 0.1688 test_loss: 2.1715, test_acc: 0.2139, best: 0.2786, time: 0:02:08
 Epoch: 216, lr: 2.0e-03, train_loss: 2.2174, train_acc: 0.1678 test_loss: 2.1707, test_acc: 0.1879, best: 0.2786, time: 0:02:08
 Epoch: 217, lr: 2.0e-03, train_loss: 2.2150, train_acc: 0.1732 test_loss: 2.1585, test_acc: 0.2099, best: 0.2786, time: 0:02:08
 Epoch: 218, lr: 2.0e-03, train_loss: 2.2192, train_acc: 0.1656 test_loss: 2.1553, test_acc: 0.2045, best: 0.2786, time: 0:02:08
 Epoch: 219, lr: 2.0e-03, train_loss: 2.2048, train_acc: 0.1708 test_loss: 2.1533, test_acc: 0.2102, best: 0.2786, time: 0:02:08
 Epoch: 220, lr: 2.0e-03, train_loss: 2.2073, train_acc: 0.1678 test_loss: 2.1604, test_acc: 0.2040, best: 0.2786, time: 0:02:08
 Epoch: 221, lr: 2.0e-03, train_loss: 2.2000, train_acc: 0.1738 test_loss: 2.1763, test_acc: 0.1822, best: 0.2786, time: 0:02:08
 Epoch: 222, lr: 2.0e-03, train_loss: 2.2052, train_acc: 0.1768 test_loss: 2.1514, test_acc: 0.1914, best: 0.2786, time: 0:02:08
 Epoch: 223, lr: 2.0e-03, train_loss: 2.2041, train_acc: 0.1802 test_loss: 2.1720, test_acc: 0.1797, best: 0.2786, time: 0:02:08
 Epoch: 224, lr: 2.0e-03, train_loss: 2.2025, train_acc: 0.1756 test_loss: 2.1562, test_acc: 0.1867, best: 0.2786, time: 0:02:08
 Epoch: 225, lr: 2.0e-03, train_loss: 2.2034, train_acc: 0.1724 test_loss: 2.1614, test_acc: 0.2061, best: 0.2786, time: 0:02:08
 Epoch: 226, lr: 2.0e-03, train_loss: 2.1993, train_acc: 0.1756 test_loss: 2.1619, test_acc: 0.1800, best: 0.2786, time: 0:02:08
 Epoch: 227, lr: 2.0e-03, train_loss: 2.1974, train_acc: 0.1712 test_loss: 2.1431, test_acc: 0.2119, best: 0.2786, time: 0:02:08
 Epoch: 228, lr: 2.0e-03, train_loss: 2.2004, train_acc: 0.1702 test_loss: 2.1466, test_acc: 0.2125, best: 0.2786, time: 0:02:08
 Epoch: 229, lr: 2.0e-03, train_loss: 2.1978, train_acc: 0.1792 test_loss: 2.1501, test_acc: 0.2109, best: 0.2786, time: 0:02:08
 Epoch: 230, lr: 2.0e-03, train_loss: 2.1967, train_acc: 0.1836 test_loss: 2.1506, test_acc: 0.2080, best: 0.2786, time: 0:02:08
 Epoch: 231, lr: 2.0e-03, train_loss: 2.1985, train_acc: 0.1780 test_loss: 2.1815, test_acc: 0.1729, best: 0.2786, time: 0:02:08
 Epoch: 232, lr: 2.0e-03, train_loss: 2.1989, train_acc: 0.1726 test_loss: 2.1557, test_acc: 0.1852, best: 0.2786, time: 0:02:08
 Epoch: 233, lr: 2.0e-03, train_loss: 2.2048, train_acc: 0.1696 test_loss: 2.1826, test_acc: 0.1769, best: 0.2786, time: 0:02:08
 Epoch: 234, lr: 2.0e-03, train_loss: 2.2008, train_acc: 0.1824 test_loss: 2.1725, test_acc: 0.2036, best: 0.2786, time: 0:02:08
 Epoch: 235, lr: 2.0e-03, train_loss: 2.2036, train_acc: 0.1762 test_loss: 2.1617, test_acc: 0.2031, best: 0.2786, time: 0:02:08
 Epoch: 236, lr: 2.0e-03, train_loss: 2.2033, train_acc: 0.1736 test_loss: 2.1557, test_acc: 0.1979, best: 0.2786, time: 0:02:08
 Epoch: 237, lr: 2.0e-03, train_loss: 2.1928, train_acc: 0.1814 test_loss: 2.1713, test_acc: 0.1875, best: 0.2786, time: 0:02:08
 Epoch: 238, lr: 2.0e-03, train_loss: 2.1974, train_acc: 0.1752 test_loss: 2.2168, test_acc: 0.1726, best: 0.2786, time: 0:02:08
 Epoch: 239, lr: 2.0e-03, train_loss: 2.1885, train_acc: 0.1872 test_loss: 2.1526, test_acc: 0.1995, best: 0.2786, time: 0:02:08
 Epoch: 240, lr: 4.0e-04, train_loss: 2.1822, train_acc: 0.1886 test_loss: 2.1780, test_acc: 0.1894, best: 0.2786, time: 0:02:08
 Epoch: 241, lr: 4.0e-04, train_loss: 2.1858, train_acc: 0.1872 test_loss: 2.1635, test_acc: 0.1895, best: 0.2786, time: 0:02:08
 Epoch: 242, lr: 4.0e-04, train_loss: 2.1764, train_acc: 0.1992 test_loss: 2.1676, test_acc: 0.1954, best: 0.2786, time: 0:02:08
 Epoch: 243, lr: 4.0e-04, train_loss: 2.1759, train_acc: 0.1882 test_loss: 2.1669, test_acc: 0.1891, best: 0.2786, time: 0:02:08
 Epoch: 244, lr: 4.0e-04, train_loss: 2.1677, train_acc: 0.1920 test_loss: 2.2031, test_acc: 0.1744, best: 0.2786, time: 0:02:08
 Epoch: 245, lr: 4.0e-04, train_loss: 2.1825, train_acc: 0.1860 test_loss: 2.1605, test_acc: 0.1893, best: 0.2786, time: 0:02:08
 Epoch: 246, lr: 4.0e-04, train_loss: 2.1809, train_acc: 0.1832 test_loss: 2.1753, test_acc: 0.1903, best: 0.2786, time: 0:02:08
 Epoch: 247, lr: 4.0e-04, train_loss: 2.1758, train_acc: 0.1888 test_loss: 2.1588, test_acc: 0.2005, best: 0.2786, time: 0:02:08
 Epoch: 248, lr: 4.0e-04, train_loss: 2.1798, train_acc: 0.1834 test_loss: 2.1911, test_acc: 0.1791, best: 0.2786, time: 0:02:08
 Epoch: 249, lr: 4.0e-04, train_loss: 2.1839, train_acc: 0.1776 test_loss: 2.1600, test_acc: 0.1994, best: 0.2786, time: 0:02:08
 Epoch: 250, lr: 4.0e-04, train_loss: 2.1777, train_acc: 0.1876 test_loss: 2.1686, test_acc: 0.1894, best: 0.2786, time: 0:02:08
 Epoch: 251, lr: 4.0e-04, train_loss: 2.1767, train_acc: 0.1768 test_loss: 2.1917, test_acc: 0.1831, best: 0.2786, time: 0:02:08
 Epoch: 252, lr: 4.0e-04, train_loss: 2.1708, train_acc: 0.1916 test_loss: 2.1800, test_acc: 0.1865, best: 0.2786, time: 0:02:08
 Epoch: 253, lr: 4.0e-04, train_loss: 2.1740, train_acc: 0.1838 test_loss: 2.1871, test_acc: 0.1841, best: 0.2786, time: 0:02:08
 Epoch: 254, lr: 4.0e-04, train_loss: 2.1761, train_acc: 0.1880 test_loss: 2.1685, test_acc: 0.1835, best: 0.2786, time: 0:02:08
 Epoch: 255, lr: 4.0e-04, train_loss: 2.1831, train_acc: 0.1814 test_loss: 2.1981, test_acc: 0.1814, best: 0.2786, time: 0:02:08
 Epoch: 256, lr: 4.0e-04, train_loss: 2.1799, train_acc: 0.1852 test_loss: 2.1545, test_acc: 0.1949, best: 0.2786, time: 0:02:08
 Epoch: 257, lr: 4.0e-04, train_loss: 2.1746, train_acc: 0.1858 test_loss: 2.2043, test_acc: 0.1800, best: 0.2786, time: 0:02:08
 Epoch: 258, lr: 4.0e-04, train_loss: 2.1857, train_acc: 0.1776 test_loss: 2.1861, test_acc: 0.1819, best: 0.2786, time: 0:02:08
 Epoch: 259, lr: 4.0e-04, train_loss: 2.1741, train_acc: 0.1902 test_loss: 2.1921, test_acc: 0.1800, best: 0.2786, time: 0:02:08
 Epoch: 260, lr: 4.0e-04, train_loss: 2.1693, train_acc: 0.1882 test_loss: 2.1615, test_acc: 0.1948, best: 0.2786, time: 0:02:08
 Epoch: 261, lr: 4.0e-04, train_loss: 2.1825, train_acc: 0.1800 test_loss: 2.1582, test_acc: 0.1918, best: 0.2786, time: 0:02:08
 Epoch: 262, lr: 4.0e-04, train_loss: 2.1649, train_acc: 0.1958 test_loss: 2.1945, test_acc: 0.1769, best: 0.2786, time: 0:02:08
 Epoch: 263, lr: 4.0e-04, train_loss: 2.1751, train_acc: 0.1844 test_loss: 2.1886, test_acc: 0.1845, best: 0.2786, time: 0:02:08
 Epoch: 264, lr: 4.0e-04, train_loss: 2.1732, train_acc: 0.1830 test_loss: 2.1710, test_acc: 0.1966, best: 0.2786, time: 0:02:08
 Epoch: 265, lr: 4.0e-04, train_loss: 2.1694, train_acc: 0.1854 test_loss: 2.2187, test_acc: 0.1756, best: 0.2786, time: 0:02:08
 Epoch: 266, lr: 4.0e-04, train_loss: 2.1663, train_acc: 0.1906 test_loss: 2.1777, test_acc: 0.1955, best: 0.2786, time: 0:02:08
 Epoch: 267, lr: 4.0e-04, train_loss: 2.1726, train_acc: 0.1880 test_loss: 2.1487, test_acc: 0.2090, best: 0.2786, time: 0:02:08
 Epoch: 268, lr: 4.0e-04, train_loss: 2.1718, train_acc: 0.1868 test_loss: 2.1589, test_acc: 0.1983, best: 0.2786, time: 0:02:08
 Epoch: 269, lr: 4.0e-04, train_loss: 2.1659, train_acc: 0.1968 test_loss: 2.1881, test_acc: 0.1996, best: 0.2786, time: 0:02:08
 Epoch: 270, lr: 8.0e-05, train_loss: 2.1634, train_acc: 0.1938 test_loss: 2.1943, test_acc: 0.1870, best: 0.2786, time: 0:02:08
 Epoch: 271, lr: 8.0e-05, train_loss: 2.1739, train_acc: 0.1862 test_loss: 2.1737, test_acc: 0.1938, best: 0.2786, time: 0:02:08
 Epoch: 272, lr: 8.0e-05, train_loss: 2.1595, train_acc: 0.1964 test_loss: 2.2027, test_acc: 0.1796, best: 0.2786, time: 0:02:08
 Epoch: 273, lr: 8.0e-05, train_loss: 2.1699, train_acc: 0.1906 test_loss: 2.1918, test_acc: 0.1926, best: 0.2786, time: 0:02:08
 Epoch: 274, lr: 8.0e-05, train_loss: 2.1750, train_acc: 0.1920 test_loss: 2.1740, test_acc: 0.1950, best: 0.2786, time: 0:02:08
 Epoch: 275, lr: 8.0e-05, train_loss: 2.1684, train_acc: 0.1934 test_loss: 2.1755, test_acc: 0.1906, best: 0.2786, time: 0:02:08
 Epoch: 276, lr: 8.0e-05, train_loss: 2.1651, train_acc: 0.1904 test_loss: 2.1856, test_acc: 0.1930, best: 0.2786, time: 0:02:08
 Epoch: 277, lr: 8.0e-05, train_loss: 2.1636, train_acc: 0.1892 test_loss: 2.1671, test_acc: 0.1944, best: 0.2786, time: 0:02:08
 Epoch: 278, lr: 8.0e-05, train_loss: 2.1618, train_acc: 0.1886 test_loss: 2.1994, test_acc: 0.1925, best: 0.2786, time: 0:02:08
 Epoch: 279, lr: 8.0e-05, train_loss: 2.1770, train_acc: 0.1848 test_loss: 2.1696, test_acc: 0.1905, best: 0.2786, time: 0:02:08
 Epoch: 280, lr: 8.0e-05, train_loss: 2.1656, train_acc: 0.1962 test_loss: 2.2052, test_acc: 0.1881, best: 0.2786, time: 0:02:08
 Epoch: 281, lr: 8.0e-05, train_loss: 2.1680, train_acc: 0.1872 test_loss: 2.1888, test_acc: 0.1890, best: 0.2786, time: 0:02:08
 Epoch: 282, lr: 8.0e-05, train_loss: 2.1653, train_acc: 0.1984 test_loss: 2.1668, test_acc: 0.2062, best: 0.2786, time: 0:02:08
 Epoch: 283, lr: 8.0e-05, train_loss: 2.1584, train_acc: 0.1998 test_loss: 2.2148, test_acc: 0.1807, best: 0.2786, time: 0:02:08
 Epoch: 284, lr: 8.0e-05, train_loss: 2.1751, train_acc: 0.1942 test_loss: 2.1931, test_acc: 0.1943, best: 0.2786, time: 0:02:08
 Epoch: 285, lr: 8.0e-05, train_loss: 2.1735, train_acc: 0.1854 test_loss: 2.1670, test_acc: 0.1898, best: 0.2786, time: 0:02:08
 Epoch: 286, lr: 8.0e-05, train_loss: 2.1739, train_acc: 0.1884 test_loss: 2.1975, test_acc: 0.1900, best: 0.2786, time: 0:02:08
 Epoch: 287, lr: 8.0e-05, train_loss: 2.1697, train_acc: 0.1904 test_loss: 2.1976, test_acc: 0.1880, best: 0.2786, time: 0:02:08
 Epoch: 288, lr: 8.0e-05, train_loss: 2.1665, train_acc: 0.2022 test_loss: 2.1944, test_acc: 0.1878, best: 0.2786, time: 0:02:08
 Epoch: 289, lr: 8.0e-05, train_loss: 2.1665, train_acc: 0.1946 test_loss: 2.1698, test_acc: 0.1916, best: 0.2786, time: 0:02:08
 Epoch: 290, lr: 8.0e-05, train_loss: 2.1567, train_acc: 0.1906 test_loss: 2.2052, test_acc: 0.1857, best: 0.2786, time: 0:02:08
 Epoch: 291, lr: 8.0e-05, train_loss: 2.1587, train_acc: 0.1872 test_loss: 2.1780, test_acc: 0.1950, best: 0.2786, time: 0:02:08
 Epoch: 292, lr: 8.0e-05, train_loss: 2.1574, train_acc: 0.1930 test_loss: 2.2077, test_acc: 0.1842, best: 0.2786, time: 0:02:08
 Epoch: 293, lr: 8.0e-05, train_loss: 2.1693, train_acc: 0.1948 test_loss: 2.1914, test_acc: 0.1891, best: 0.2786, time: 0:02:08
 Epoch: 294, lr: 8.0e-05, train_loss: 2.1659, train_acc: 0.1852 test_loss: 2.1888, test_acc: 0.1857, best: 0.2786, time: 0:02:08
 Epoch: 295, lr: 8.0e-05, train_loss: 2.1669, train_acc: 0.1892 test_loss: 2.1760, test_acc: 0.1847, best: 0.2786, time: 0:02:08
 Epoch: 296, lr: 8.0e-05, train_loss: 2.1716, train_acc: 0.1924 test_loss: 2.2025, test_acc: 0.1802, best: 0.2786, time: 0:02:08
 Epoch: 297, lr: 8.0e-05, train_loss: 2.1612, train_acc: 0.1924 test_loss: 2.2046, test_acc: 0.1764, best: 0.2786, time: 0:02:08
 Epoch: 298, lr: 8.0e-05, train_loss: 2.1613, train_acc: 0.1968 test_loss: 2.2041, test_acc: 0.1880, best: 0.2786, time: 0:02:08
 Epoch: 299, lr: 8.0e-05, train_loss: 2.1626, train_acc: 0.1916 test_loss: 2.2254, test_acc: 0.1769, best: 0.2786, time: 0:02:08
 Highest accuracy: 0.2786