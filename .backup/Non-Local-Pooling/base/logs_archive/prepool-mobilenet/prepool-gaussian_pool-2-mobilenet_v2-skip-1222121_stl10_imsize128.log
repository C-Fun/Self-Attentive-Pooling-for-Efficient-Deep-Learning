
 Run on time: 2022-07-04 20:49:05.398372

 Architecture: prepool-gaussian_pool-2-mobilenet_v2-skip-1222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "gaussian_pool",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : prepool-gaussian_pool-2-mobilenet_v2-skip-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (conv1_pool): GaussianPooling2d(
        kernel_size=2, stride=2, padding=0
        (ToHidden): Sequential(
          (0): AdaptiveAvgPool2d(output_size=(1, 1))
          (1): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU()
        )
        (ToMean): Sequential(
          (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (ToSigma): Sequential(
          (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Sigmoid()
        )
        (activation): Softplus(beta=1, threshold=20)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.4565, train_acc: 0.1810 test_loss: 1.8381, test_acc: 0.2853, best: 0.2853, time: 0:00:53
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0062, train_acc: 0.2444 test_loss: 1.7822, test_acc: 0.2839, best: 0.2853, time: 0:00:52
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9097, train_acc: 0.2634 test_loss: 1.6425, test_acc: 0.3660, best: 0.3660, time: 0:00:52
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8752, train_acc: 0.2854 test_loss: 1.6241, test_acc: 0.3691, best: 0.3691, time: 0:00:53
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8489, train_acc: 0.3034 test_loss: 1.6202, test_acc: 0.3718, best: 0.3718, time: 0:00:53
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8237, train_acc: 0.3168 test_loss: 1.5674, test_acc: 0.3904, best: 0.3904, time: 0:00:53
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7975, train_acc: 0.3224 test_loss: 1.5682, test_acc: 0.4007, best: 0.4007, time: 0:00:53
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7330, train_acc: 0.3452 test_loss: 1.5200, test_acc: 0.4136, best: 0.4136, time: 0:00:53
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7109, train_acc: 0.3654 test_loss: 1.5066, test_acc: 0.4298, best: 0.4298, time: 0:00:53
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6575, train_acc: 0.3796 test_loss: 1.4368, test_acc: 0.4569, best: 0.4569, time: 0:00:53
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6523, train_acc: 0.3940 test_loss: 1.3740, test_acc: 0.4781, best: 0.4781, time: 0:00:53
 Epoch: 12, lr: 1.0e-02, train_loss: 1.5942, train_acc: 0.4106 test_loss: 1.3940, test_acc: 0.4863, best: 0.4863, time: 0:00:53
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5691, train_acc: 0.4262 test_loss: 1.3807, test_acc: 0.4818, best: 0.4863, time: 0:00:53
 Epoch: 14, lr: 1.0e-02, train_loss: 1.5386, train_acc: 0.4250 test_loss: 1.3859, test_acc: 0.4751, best: 0.4863, time: 0:00:52
 Epoch: 15, lr: 1.0e-02, train_loss: 1.5259, train_acc: 0.4402 test_loss: 1.2818, test_acc: 0.5302, best: 0.5302, time: 0:00:53
 Epoch: 16, lr: 1.0e-02, train_loss: 1.4671, train_acc: 0.4646 test_loss: 1.3196, test_acc: 0.5129, best: 0.5302, time: 0:00:52
 Epoch: 17, lr: 1.0e-02, train_loss: 1.4717, train_acc: 0.4638 test_loss: 1.2794, test_acc: 0.5290, best: 0.5302, time: 0:00:52
 Epoch: 18, lr: 1.0e-02, train_loss: 1.4385, train_acc: 0.4776 test_loss: 1.1854, test_acc: 0.5775, best: 0.5775, time: 0:00:53
 Epoch: 19, lr: 1.0e-02, train_loss: 1.4324, train_acc: 0.4762 test_loss: 1.2240, test_acc: 0.5531, best: 0.5775, time: 0:00:53
 Epoch: 20, lr: 1.0e-02, train_loss: 1.4020, train_acc: 0.4900 test_loss: 1.2138, test_acc: 0.5687, best: 0.5775, time: 0:00:52
 Epoch: 21, lr: 1.0e-02, train_loss: 1.3805, train_acc: 0.5002 test_loss: 1.1345, test_acc: 0.5860, best: 0.5860, time: 0:00:52
 Epoch: 22, lr: 1.0e-02, train_loss: 1.3763, train_acc: 0.4998 test_loss: 1.1842, test_acc: 0.5737, best: 0.5860, time: 0:00:52
 Epoch: 23, lr: 1.0e-02, train_loss: 1.3729, train_acc: 0.5018 test_loss: 1.1153, test_acc: 0.5948, best: 0.5948, time: 0:00:53
 Epoch: 24, lr: 1.0e-02, train_loss: 1.3351, train_acc: 0.5152 test_loss: 1.1044, test_acc: 0.6029, best: 0.6029, time: 0:00:53
 Epoch: 25, lr: 1.0e-02, train_loss: 1.2984, train_acc: 0.5316 test_loss: 1.1873, test_acc: 0.5773, best: 0.6029, time: 0:00:53
 Epoch: 26, lr: 1.0e-02, train_loss: 1.2955, train_acc: 0.5326 test_loss: 1.2158, test_acc: 0.5549, best: 0.6029, time: 0:00:52
 Epoch: 27, lr: 1.0e-02, train_loss: 1.2682, train_acc: 0.5384 test_loss: 1.0984, test_acc: 0.6121, best: 0.6121, time: 0:00:53
 Epoch: 28, lr: 1.0e-02, train_loss: 1.2616, train_acc: 0.5456 test_loss: 1.1353, test_acc: 0.5931, best: 0.6121, time: 0:00:52
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2207, train_acc: 0.5486 test_loss: 1.0679, test_acc: 0.6174, best: 0.6174, time: 0:00:53
 Epoch: 30, lr: 1.0e-02, train_loss: 1.2371, train_acc: 0.5452 test_loss: 1.1712, test_acc: 0.5880, best: 0.6174, time: 0:00:53
 Epoch: 31, lr: 1.0e-02, train_loss: 1.2018, train_acc: 0.5606 test_loss: 1.0631, test_acc: 0.6170, best: 0.6174, time: 0:00:52
 Epoch: 32, lr: 1.0e-02, train_loss: 1.2024, train_acc: 0.5682 test_loss: 1.0157, test_acc: 0.6334, best: 0.6334, time: 0:00:53
 Epoch: 33, lr: 1.0e-02, train_loss: 1.1849, train_acc: 0.5698 test_loss: 1.1012, test_acc: 0.6051, best: 0.6334, time: 0:00:52
 Epoch: 34, lr: 1.0e-02, train_loss: 1.1609, train_acc: 0.5792 test_loss: 1.0144, test_acc: 0.6385, best: 0.6385, time: 0:00:53
 Epoch: 35, lr: 1.0e-02, train_loss: 1.1676, train_acc: 0.5750 test_loss: 1.0569, test_acc: 0.6251, best: 0.6385, time: 0:00:52
 Epoch: 36, lr: 1.0e-02, train_loss: 1.1569, train_acc: 0.5776 test_loss: 0.9992, test_acc: 0.6378, best: 0.6385, time: 0:00:52
 Epoch: 37, lr: 1.0e-02, train_loss: 1.1327, train_acc: 0.5860 test_loss: 0.9961, test_acc: 0.6488, best: 0.6488, time: 0:00:53
 Epoch: 38, lr: 1.0e-02, train_loss: 1.1238, train_acc: 0.5940 test_loss: 0.9717, test_acc: 0.6461, best: 0.6488, time: 0:00:52
 Epoch: 39, lr: 1.0e-02, train_loss: 1.1150, train_acc: 0.6004 test_loss: 0.9434, test_acc: 0.6629, best: 0.6629, time: 0:00:52
 Epoch: 40, lr: 1.0e-02, train_loss: 1.1119, train_acc: 0.5938 test_loss: 0.9374, test_acc: 0.6534, best: 0.6629, time: 0:00:52
 Epoch: 41, lr: 1.0e-02, train_loss: 1.0787, train_acc: 0.6042 test_loss: 0.9959, test_acc: 0.6365, best: 0.6629, time: 0:00:52
 Epoch: 42, lr: 1.0e-02, train_loss: 1.0954, train_acc: 0.6018 test_loss: 0.9317, test_acc: 0.6635, best: 0.6635, time: 0:00:53
 Epoch: 43, lr: 1.0e-02, train_loss: 1.0428, train_acc: 0.6208 test_loss: 0.9146, test_acc: 0.6714, best: 0.6714, time: 0:00:52
 Epoch: 44, lr: 1.0e-02, train_loss: 1.0686, train_acc: 0.6228 test_loss: 0.9528, test_acc: 0.6600, best: 0.6714, time: 0:00:52
 Epoch: 45, lr: 1.0e-02, train_loss: 1.0533, train_acc: 0.6212 test_loss: 0.9322, test_acc: 0.6544, best: 0.6714, time: 0:00:52
 Epoch: 46, lr: 1.0e-02, train_loss: 1.0382, train_acc: 0.6268 test_loss: 0.9658, test_acc: 0.6570, best: 0.6714, time: 0:00:52
 Epoch: 47, lr: 1.0e-02, train_loss: 1.0636, train_acc: 0.6106 test_loss: 0.8983, test_acc: 0.6760, best: 0.6760, time: 0:00:53
 Epoch: 48, lr: 1.0e-02, train_loss: 1.0223, train_acc: 0.6346 test_loss: 0.9108, test_acc: 0.6775, best: 0.6775, time: 0:00:53
 Epoch: 49, lr: 1.0e-02, train_loss: 1.0278, train_acc: 0.6280 test_loss: 0.8773, test_acc: 0.6904, best: 0.6904, time: 0:00:53
 Epoch: 50, lr: 1.0e-02, train_loss: 1.0147, train_acc: 0.6414 test_loss: 0.9137, test_acc: 0.6737, best: 0.6904, time: 0:00:52
 Epoch: 51, lr: 1.0e-02, train_loss: 0.9939, train_acc: 0.6436 test_loss: 0.8558, test_acc: 0.6906, best: 0.6906, time: 0:00:53
 Epoch: 52, lr: 1.0e-02, train_loss: 0.9949, train_acc: 0.6450 test_loss: 0.9077, test_acc: 0.6797, best: 0.6906, time: 0:00:52
 Epoch: 53, lr: 1.0e-02, train_loss: 0.9877, train_acc: 0.6414 test_loss: 0.8722, test_acc: 0.6920, best: 0.6920, time: 0:00:53
 Epoch: 54, lr: 1.0e-02, train_loss: 0.9774, train_acc: 0.6528 test_loss: 0.8618, test_acc: 0.6939, best: 0.6939, time: 0:00:53
 Epoch: 55, lr: 1.0e-02, train_loss: 0.9362, train_acc: 0.6568 test_loss: 0.9002, test_acc: 0.6833, best: 0.6939, time: 0:00:52
 Epoch: 56, lr: 1.0e-02, train_loss: 0.9380, train_acc: 0.6594 test_loss: 0.9163, test_acc: 0.6809, best: 0.6939, time: 0:00:52
 Epoch: 57, lr: 1.0e-02, train_loss: 0.9588, train_acc: 0.6588 test_loss: 0.9455, test_acc: 0.6640, best: 0.6939, time: 0:00:52
 Epoch: 58, lr: 1.0e-02, train_loss: 0.9514, train_acc: 0.6624 test_loss: 0.8056, test_acc: 0.7126, best: 0.7126, time: 0:00:53
 Epoch: 59, lr: 1.0e-02, train_loss: 0.9285, train_acc: 0.6708 test_loss: 0.8552, test_acc: 0.6965, best: 0.7126, time: 0:00:52
 Epoch: 60, lr: 1.0e-02, train_loss: 0.9129, train_acc: 0.6702 test_loss: 0.8657, test_acc: 0.6959, best: 0.7126, time: 0:00:52
 Epoch: 61, lr: 1.0e-02, train_loss: 0.9128, train_acc: 0.6696 test_loss: 0.8737, test_acc: 0.6914, best: 0.7126, time: 0:00:52
 Epoch: 62, lr: 1.0e-02, train_loss: 0.9120, train_acc: 0.6732 test_loss: 0.9111, test_acc: 0.6817, best: 0.7126, time: 0:00:53
 Epoch: 63, lr: 1.0e-02, train_loss: 0.9180, train_acc: 0.6702 test_loss: 0.8674, test_acc: 0.6849, best: 0.7126, time: 0:00:52
 Epoch: 64, lr: 1.0e-02, train_loss: 0.8854, train_acc: 0.6854 test_loss: 0.8925, test_acc: 0.6801, best: 0.7126, time: 0:00:52
 Epoch: 65, lr: 1.0e-02, train_loss: 0.8947, train_acc: 0.6792 test_loss: 0.7945, test_acc: 0.7200, best: 0.7200, time: 0:00:53
 Epoch: 66, lr: 1.0e-02, train_loss: 0.9004, train_acc: 0.6690 test_loss: 0.8455, test_acc: 0.7050, best: 0.7200, time: 0:00:52
 Epoch: 67, lr: 1.0e-02, train_loss: 0.8695, train_acc: 0.6866 test_loss: 0.8035, test_acc: 0.7180, best: 0.7200, time: 0:00:52
 Epoch: 68, lr: 1.0e-02, train_loss: 0.8709, train_acc: 0.6906 test_loss: 0.7806, test_acc: 0.7231, best: 0.7231, time: 0:00:53
 Epoch: 69, lr: 1.0e-02, train_loss: 0.8808, train_acc: 0.6850 test_loss: 0.8251, test_acc: 0.7063, best: 0.7231, time: 0:00:52
 Epoch: 70, lr: 1.0e-02, train_loss: 0.8756, train_acc: 0.6912 test_loss: 0.8389, test_acc: 0.7036, best: 0.7231, time: 0:00:52
 Epoch: 71, lr: 1.0e-02, train_loss: 0.8617, train_acc: 0.7006 test_loss: 0.8126, test_acc: 0.7183, best: 0.7231, time: 0:00:52
 Epoch: 72, lr: 1.0e-02, train_loss: 0.8671, train_acc: 0.6896 test_loss: 0.7775, test_acc: 0.7326, best: 0.7326, time: 0:00:53
 Epoch: 73, lr: 1.0e-02, train_loss: 0.8540, train_acc: 0.6958 test_loss: 0.8863, test_acc: 0.7037, best: 0.7326, time: 0:00:52
 Epoch: 74, lr: 1.0e-02, train_loss: 0.8413, train_acc: 0.7056 test_loss: 0.8379, test_acc: 0.7134, best: 0.7326, time: 0:00:52
 Epoch: 75, lr: 1.0e-02, train_loss: 0.8322, train_acc: 0.7056 test_loss: 0.8681, test_acc: 0.6993, best: 0.7326, time: 0:00:52
 Epoch: 76, lr: 1.0e-02, train_loss: 0.8273, train_acc: 0.7014 test_loss: 0.8867, test_acc: 0.6984, best: 0.7326, time: 0:00:52
 Epoch: 77, lr: 1.0e-02, train_loss: 0.8318, train_acc: 0.7062 test_loss: 0.7708, test_acc: 0.7261, best: 0.7326, time: 0:00:52
 Epoch: 78, lr: 1.0e-02, train_loss: 0.7799, train_acc: 0.7144 test_loss: 0.8324, test_acc: 0.7205, best: 0.7326, time: 0:00:52
 Epoch: 79, lr: 1.0e-02, train_loss: 0.8089, train_acc: 0.7146 test_loss: 0.8270, test_acc: 0.7110, best: 0.7326, time: 0:00:52
 Epoch: 80, lr: 1.0e-02, train_loss: 0.8074, train_acc: 0.7122 test_loss: 0.7483, test_acc: 0.7402, best: 0.7402, time: 0:00:52
 Epoch: 81, lr: 1.0e-02, train_loss: 0.8105, train_acc: 0.7104 test_loss: 0.8016, test_acc: 0.7190, best: 0.7402, time: 0:00:52
 Epoch: 82, lr: 1.0e-02, train_loss: 0.8140, train_acc: 0.7146 test_loss: 0.7413, test_acc: 0.7402, best: 0.7402, time: 0:00:52
 Epoch: 83, lr: 1.0e-02, train_loss: 0.7965, train_acc: 0.7116 test_loss: 0.8163, test_acc: 0.7260, best: 0.7402, time: 0:00:52
 Epoch: 84, lr: 1.0e-02, train_loss: 0.7882, train_acc: 0.7258 test_loss: 0.7913, test_acc: 0.7280, best: 0.7402, time: 0:00:52
 Epoch: 85, lr: 1.0e-02, train_loss: 0.7911, train_acc: 0.7198 test_loss: 0.7509, test_acc: 0.7315, best: 0.7402, time: 0:00:52
 Epoch: 86, lr: 1.0e-02, train_loss: 0.7769, train_acc: 0.7250 test_loss: 0.8369, test_acc: 0.7181, best: 0.7402, time: 0:00:52
 Epoch: 87, lr: 1.0e-02, train_loss: 0.8122, train_acc: 0.7110 test_loss: 0.7175, test_acc: 0.7520, best: 0.7520, time: 0:00:53
 Epoch: 88, lr: 1.0e-02, train_loss: 0.7459, train_acc: 0.7316 test_loss: 0.7709, test_acc: 0.7385, best: 0.7520, time: 0:00:52
 Epoch: 89, lr: 1.0e-02, train_loss: 0.7624, train_acc: 0.7270 test_loss: 0.7675, test_acc: 0.7339, best: 0.7520, time: 0:00:52
 Epoch: 90, lr: 1.0e-02, train_loss: 0.7765, train_acc: 0.7240 test_loss: 0.7498, test_acc: 0.7421, best: 0.7520, time: 0:00:52
 Epoch: 91, lr: 1.0e-02, train_loss: 0.7497, train_acc: 0.7330 test_loss: 0.7610, test_acc: 0.7414, best: 0.7520, time: 0:00:52
 Epoch: 92, lr: 1.0e-02, train_loss: 0.7586, train_acc: 0.7380 test_loss: 0.7325, test_acc: 0.7470, best: 0.7520, time: 0:00:52
 Epoch: 93, lr: 1.0e-02, train_loss: 0.7327, train_acc: 0.7388 test_loss: 0.7933, test_acc: 0.7301, best: 0.7520, time: 0:00:52
 Epoch: 94, lr: 1.0e-02, train_loss: 0.7518, train_acc: 0.7316 test_loss: 0.7900, test_acc: 0.7320, best: 0.7520, time: 0:00:52
 Epoch: 95, lr: 1.0e-02, train_loss: 0.7446, train_acc: 0.7332 test_loss: 0.7102, test_acc: 0.7554, best: 0.7554, time: 0:00:53
 Epoch: 96, lr: 1.0e-02, train_loss: 0.7185, train_acc: 0.7492 test_loss: 0.7426, test_acc: 0.7435, best: 0.7554, time: 0:00:52
 Epoch: 97, lr: 1.0e-02, train_loss: 0.7132, train_acc: 0.7462 test_loss: 0.8368, test_acc: 0.7266, best: 0.7554, time: 0:00:52
 Epoch: 98, lr: 1.0e-02, train_loss: 0.7051, train_acc: 0.7482 test_loss: 0.7345, test_acc: 0.7519, best: 0.7554, time: 0:00:52
 Epoch: 99, lr: 1.0e-02, train_loss: 0.7098, train_acc: 0.7500 test_loss: 0.7461, test_acc: 0.7445, best: 0.7554, time: 0:00:52
 Epoch: 100, lr: 1.0e-02, train_loss: 0.7334, train_acc: 0.7378 test_loss: 0.7565, test_acc: 0.7459, best: 0.7554, time: 0:00:52
 Epoch: 101, lr: 1.0e-02, train_loss: 0.6961, train_acc: 0.7508 test_loss: 0.7194, test_acc: 0.7500, best: 0.7554, time: 0:00:52
 Epoch: 102, lr: 1.0e-02, train_loss: 0.7167, train_acc: 0.7422 test_loss: 0.7578, test_acc: 0.7406, best: 0.7554, time: 0:00:52
 Epoch: 103, lr: 1.0e-02, train_loss: 0.7049, train_acc: 0.7496 test_loss: 0.7097, test_acc: 0.7552, best: 0.7554, time: 0:00:53
 Epoch: 104, lr: 1.0e-02, train_loss: 0.7234, train_acc: 0.7442 test_loss: 0.7457, test_acc: 0.7495, best: 0.7554, time: 0:00:52
 Epoch: 105, lr: 1.0e-02, train_loss: 0.6924, train_acc: 0.7516 test_loss: 0.7153, test_acc: 0.7628, best: 0.7628, time: 0:00:53
 Epoch: 106, lr: 1.0e-02, train_loss: 0.7069, train_acc: 0.7498 test_loss: 0.7944, test_acc: 0.7321, best: 0.7628, time: 0:00:52
 Epoch: 107, lr: 1.0e-02, train_loss: 0.6768, train_acc: 0.7584 test_loss: 0.7910, test_acc: 0.7376, best: 0.7628, time: 0:00:52
 Epoch: 108, lr: 1.0e-02, train_loss: 0.6971, train_acc: 0.7538 test_loss: 0.7667, test_acc: 0.7431, best: 0.7628, time: 0:00:52
 Epoch: 109, lr: 1.0e-02, train_loss: 0.6820, train_acc: 0.7598 test_loss: 0.7907, test_acc: 0.7422, best: 0.7628, time: 0:00:52
 Epoch: 110, lr: 1.0e-02, train_loss: 0.6754, train_acc: 0.7614 test_loss: 0.7130, test_acc: 0.7645, best: 0.7645, time: 0:00:53
 Epoch: 111, lr: 1.0e-02, train_loss: 0.6812, train_acc: 0.7620 test_loss: 0.7381, test_acc: 0.7604, best: 0.7645, time: 0:00:52
 Epoch: 112, lr: 1.0e-02, train_loss: 0.6884, train_acc: 0.7552 test_loss: 0.7129, test_acc: 0.7590, best: 0.7645, time: 0:00:52
 Epoch: 113, lr: 1.0e-02, train_loss: 0.6734, train_acc: 0.7620 test_loss: 0.7070, test_acc: 0.7622, best: 0.7645, time: 0:00:52
 Epoch: 114, lr: 1.0e-02, train_loss: 0.6546, train_acc: 0.7710 test_loss: 0.7145, test_acc: 0.7616, best: 0.7645, time: 0:00:52
 Epoch: 115, lr: 1.0e-02, train_loss: 0.6635, train_acc: 0.7590 test_loss: 0.7572, test_acc: 0.7474, best: 0.7645, time: 0:00:53
 Epoch: 116, lr: 1.0e-02, train_loss: 0.6510, train_acc: 0.7672 test_loss: 0.7431, test_acc: 0.7522, best: 0.7645, time: 0:00:52
 Epoch: 117, lr: 1.0e-02, train_loss: 0.6811, train_acc: 0.7586 test_loss: 0.7383, test_acc: 0.7520, best: 0.7645, time: 0:00:52
 Epoch: 118, lr: 1.0e-02, train_loss: 0.6751, train_acc: 0.7604 test_loss: 0.7663, test_acc: 0.7429, best: 0.7645, time: 0:00:52
 Epoch: 119, lr: 1.0e-02, train_loss: 0.6187, train_acc: 0.7858 test_loss: 0.7372, test_acc: 0.7612, best: 0.7645, time: 0:00:52
 Epoch: 120, lr: 1.0e-02, train_loss: 0.6463, train_acc: 0.7710 test_loss: 0.7606, test_acc: 0.7482, best: 0.7645, time: 0:00:52
 Epoch: 121, lr: 1.0e-02, train_loss: 0.6139, train_acc: 0.7798 test_loss: 0.7033, test_acc: 0.7644, best: 0.7645, time: 0:00:52
 Epoch: 122, lr: 1.0e-02, train_loss: 0.6520, train_acc: 0.7678 test_loss: 0.7646, test_acc: 0.7479, best: 0.7645, time: 0:00:52
 Epoch: 123, lr: 1.0e-02, train_loss: 0.6132, train_acc: 0.7798 test_loss: 0.7933, test_acc: 0.7436, best: 0.7645, time: 0:00:52
 Epoch: 124, lr: 1.0e-02, train_loss: 0.6314, train_acc: 0.7770 test_loss: 0.7379, test_acc: 0.7609, best: 0.7645, time: 0:00:52
 Epoch: 125, lr: 1.0e-02, train_loss: 0.6322, train_acc: 0.7742 test_loss: 0.6981, test_acc: 0.7692, best: 0.7692, time: 0:00:53
 Epoch: 126, lr: 1.0e-02, train_loss: 0.6153, train_acc: 0.7852 test_loss: 0.7243, test_acc: 0.7644, best: 0.7692, time: 0:00:52
 Epoch: 127, lr: 1.0e-02, train_loss: 0.6142, train_acc: 0.7832 test_loss: 0.7704, test_acc: 0.7549, best: 0.7692, time: 0:00:52
 Epoch: 128, lr: 1.0e-02, train_loss: 0.6270, train_acc: 0.7822 test_loss: 0.6825, test_acc: 0.7734, best: 0.7734, time: 0:00:53
 Epoch: 129, lr: 1.0e-02, train_loss: 0.6125, train_acc: 0.7802 test_loss: 0.7760, test_acc: 0.7498, best: 0.7734, time: 0:00:52
 Epoch: 130, lr: 1.0e-02, train_loss: 0.5992, train_acc: 0.7886 test_loss: 0.6976, test_acc: 0.7732, best: 0.7734, time: 0:00:52
 Epoch: 131, lr: 1.0e-02, train_loss: 0.6139, train_acc: 0.7804 test_loss: 0.7880, test_acc: 0.7485, best: 0.7734, time: 0:00:52
 Epoch: 132, lr: 1.0e-02, train_loss: 0.6162, train_acc: 0.7820 test_loss: 0.7128, test_acc: 0.7684, best: 0.7734, time: 0:00:52
 Epoch: 133, lr: 1.0e-02, train_loss: 0.6033, train_acc: 0.7844 test_loss: 0.7023, test_acc: 0.7700, best: 0.7734, time: 0:00:52
 Epoch: 134, lr: 1.0e-02, train_loss: 0.5858, train_acc: 0.7882 test_loss: 0.7785, test_acc: 0.7568, best: 0.7734, time: 0:00:52
 Epoch: 135, lr: 1.0e-02, train_loss: 0.5849, train_acc: 0.7840 test_loss: 0.7181, test_acc: 0.7628, best: 0.7734, time: 0:00:52
 Epoch: 136, lr: 1.0e-02, train_loss: 0.5916, train_acc: 0.7930 test_loss: 0.7099, test_acc: 0.7675, best: 0.7734, time: 0:00:52
 Epoch: 137, lr: 1.0e-02, train_loss: 0.5667, train_acc: 0.8036 test_loss: 0.8776, test_acc: 0.7240, best: 0.7734, time: 0:00:52
 Epoch: 138, lr: 1.0e-02, train_loss: 0.5752, train_acc: 0.7952 test_loss: 0.7768, test_acc: 0.7565, best: 0.7734, time: 0:00:52
 Epoch: 139, lr: 1.0e-02, train_loss: 0.5814, train_acc: 0.7882 test_loss: 0.6928, test_acc: 0.7778, best: 0.7778, time: 0:00:53
 Epoch: 140, lr: 1.0e-02, train_loss: 0.5724, train_acc: 0.7938 test_loss: 0.7533, test_acc: 0.7522, best: 0.7778, time: 0:00:52
 Epoch: 141, lr: 1.0e-02, train_loss: 0.5858, train_acc: 0.7938 test_loss: 0.7137, test_acc: 0.7675, best: 0.7778, time: 0:00:52
 Epoch: 142, lr: 1.0e-02, train_loss: 0.5806, train_acc: 0.7996 test_loss: 0.7318, test_acc: 0.7605, best: 0.7778, time: 0:00:52
 Epoch: 143, lr: 1.0e-02, train_loss: 0.5860, train_acc: 0.7932 test_loss: 0.7265, test_acc: 0.7669, best: 0.7778, time: 0:00:52
 Epoch: 144, lr: 1.0e-02, train_loss: 0.6049, train_acc: 0.7908 test_loss: 0.7377, test_acc: 0.7594, best: 0.7778, time: 0:00:52
 Epoch: 145, lr: 1.0e-02, train_loss: 0.5667, train_acc: 0.8012 test_loss: 0.7863, test_acc: 0.7512, best: 0.7778, time: 0:00:52
 Epoch: 146, lr: 1.0e-02, train_loss: 0.5663, train_acc: 0.7992 test_loss: 0.7270, test_acc: 0.7729, best: 0.7778, time: 0:00:52
 Epoch: 147, lr: 1.0e-02, train_loss: 0.5599, train_acc: 0.8012 test_loss: 0.7558, test_acc: 0.7631, best: 0.7778, time: 0:00:52
 Epoch: 148, lr: 1.0e-02, train_loss: 0.5557, train_acc: 0.8016 test_loss: 0.7416, test_acc: 0.7631, best: 0.7778, time: 0:00:52
 Epoch: 149, lr: 1.0e-02, train_loss: 0.5395, train_acc: 0.8080 test_loss: 0.7914, test_acc: 0.7521, best: 0.7778, time: 0:00:52
 Epoch: 150, lr: 1.0e-02, train_loss: 0.5638, train_acc: 0.8024 test_loss: 0.7345, test_acc: 0.7702, best: 0.7778, time: 0:00:52
 Epoch: 151, lr: 1.0e-02, train_loss: 0.5530, train_acc: 0.8058 test_loss: 0.7374, test_acc: 0.7670, best: 0.7778, time: 0:00:52
 Epoch: 152, lr: 1.0e-02, train_loss: 0.5645, train_acc: 0.8016 test_loss: 0.8405, test_acc: 0.7455, best: 0.7778, time: 0:00:53
 Epoch: 153, lr: 1.0e-02, train_loss: 0.5574, train_acc: 0.8058 test_loss: 0.7066, test_acc: 0.7708, best: 0.7778, time: 0:00:52
 Epoch: 154, lr: 1.0e-02, train_loss: 0.5455, train_acc: 0.8094 test_loss: 0.7545, test_acc: 0.7641, best: 0.7778, time: 0:00:52
 Epoch: 155, lr: 1.0e-02, train_loss: 0.5520, train_acc: 0.8048 test_loss: 0.7777, test_acc: 0.7645, best: 0.7778, time: 0:00:52
 Epoch: 156, lr: 1.0e-02, train_loss: 0.5398, train_acc: 0.8116 test_loss: 0.7444, test_acc: 0.7676, best: 0.7778, time: 0:00:52
 Epoch: 157, lr: 1.0e-02, train_loss: 0.5496, train_acc: 0.8064 test_loss: 0.6987, test_acc: 0.7789, best: 0.7789, time: 0:00:52
 Epoch: 158, lr: 1.0e-02, train_loss: 0.5662, train_acc: 0.8020 test_loss: 0.7611, test_acc: 0.7640, best: 0.7789, time: 0:00:52
 Epoch: 159, lr: 1.0e-02, train_loss: 0.5230, train_acc: 0.8218 test_loss: 0.7716, test_acc: 0.7689, best: 0.7789, time: 0:00:52
 Epoch: 160, lr: 1.0e-02, train_loss: 0.5478, train_acc: 0.8048 test_loss: 0.7450, test_acc: 0.7746, best: 0.7789, time: 0:00:52
 Epoch: 161, lr: 1.0e-02, train_loss: 0.5443, train_acc: 0.8078 test_loss: 0.7116, test_acc: 0.7758, best: 0.7789, time: 0:00:52
 Epoch: 162, lr: 1.0e-02, train_loss: 0.5239, train_acc: 0.8100 test_loss: 0.7350, test_acc: 0.7720, best: 0.7789, time: 0:00:52
 Epoch: 163, lr: 1.0e-02, train_loss: 0.5287, train_acc: 0.8182 test_loss: 0.7350, test_acc: 0.7742, best: 0.7789, time: 0:00:52
 Epoch: 164, lr: 1.0e-02, train_loss: 0.5334, train_acc: 0.8116 test_loss: 0.7360, test_acc: 0.7729, best: 0.7789, time: 0:00:52
 Epoch: 165, lr: 1.0e-02, train_loss: 0.5160, train_acc: 0.8216 test_loss: 0.7656, test_acc: 0.7655, best: 0.7789, time: 0:00:52
 Epoch: 166, lr: 1.0e-02, train_loss: 0.5441, train_acc: 0.8096 test_loss: 0.7303, test_acc: 0.7726, best: 0.7789, time: 0:00:52
 Epoch: 167, lr: 1.0e-02, train_loss: 0.5216, train_acc: 0.8134 test_loss: 0.7461, test_acc: 0.7674, best: 0.7789, time: 0:00:52
 Epoch: 168, lr: 1.0e-02, train_loss: 0.5074, train_acc: 0.8242 test_loss: 0.7167, test_acc: 0.7780, best: 0.7789, time: 0:00:52
 Epoch: 169, lr: 1.0e-02, train_loss: 0.5247, train_acc: 0.8158 test_loss: 0.7388, test_acc: 0.7761, best: 0.7789, time: 0:00:52
 Epoch: 170, lr: 1.0e-02, train_loss: 0.5034, train_acc: 0.8236 test_loss: 0.7142, test_acc: 0.7836, best: 0.7836, time: 0:00:52
 Epoch: 171, lr: 1.0e-02, train_loss: 0.5240, train_acc: 0.8192 test_loss: 0.7049, test_acc: 0.7814, best: 0.7836, time: 0:00:52
 Epoch: 172, lr: 1.0e-02, train_loss: 0.4968, train_acc: 0.8266 test_loss: 0.7003, test_acc: 0.7806, best: 0.7836, time: 0:00:52
 Epoch: 173, lr: 1.0e-02, train_loss: 0.5061, train_acc: 0.8224 test_loss: 0.6985, test_acc: 0.7839, best: 0.7839, time: 0:00:53
 Epoch: 174, lr: 1.0e-02, train_loss: 0.5214, train_acc: 0.8212 test_loss: 0.7165, test_acc: 0.7817, best: 0.7839, time: 0:00:52
 Epoch: 175, lr: 1.0e-02, train_loss: 0.4840, train_acc: 0.8290 test_loss: 0.7197, test_acc: 0.7766, best: 0.7839, time: 0:00:53
 Epoch: 176, lr: 1.0e-02, train_loss: 0.4930, train_acc: 0.8246 test_loss: 0.6812, test_acc: 0.7891, best: 0.7891, time: 0:00:53
 Epoch: 177, lr: 1.0e-02, train_loss: 0.4930, train_acc: 0.8258 test_loss: 0.7623, test_acc: 0.7724, best: 0.7891, time: 0:00:52
 Epoch: 178, lr: 1.0e-02, train_loss: 0.5339, train_acc: 0.8118 test_loss: 0.7374, test_acc: 0.7776, best: 0.7891, time: 0:00:52
 Epoch: 179, lr: 1.0e-02, train_loss: 0.5017, train_acc: 0.8250 test_loss: 0.7392, test_acc: 0.7780, best: 0.7891, time: 0:00:52
 Epoch: 180, lr: 2.0e-03, train_loss: 0.4369, train_acc: 0.8430 test_loss: 0.6713, test_acc: 0.7961, best: 0.7961, time: 0:00:53
 Epoch: 181, lr: 2.0e-03, train_loss: 0.4225, train_acc: 0.8562 test_loss: 0.7173, test_acc: 0.7943, best: 0.7961, time: 0:00:52
 Epoch: 182, lr: 2.0e-03, train_loss: 0.4400, train_acc: 0.8498 test_loss: 0.6915, test_acc: 0.7945, best: 0.7961, time: 0:00:53
 Epoch: 183, lr: 2.0e-03, train_loss: 0.3904, train_acc: 0.8666 test_loss: 0.6947, test_acc: 0.7973, best: 0.7973, time: 0:00:52
 Epoch: 184, lr: 2.0e-03, train_loss: 0.3777, train_acc: 0.8658 test_loss: 0.6988, test_acc: 0.7987, best: 0.7987, time: 0:00:53
 Epoch: 185, lr: 2.0e-03, train_loss: 0.3858, train_acc: 0.8586 test_loss: 0.6669, test_acc: 0.8039, best: 0.8039, time: 0:00:52
 Epoch: 186, lr: 2.0e-03, train_loss: 0.3963, train_acc: 0.8626 test_loss: 0.6656, test_acc: 0.8029, best: 0.8039, time: 0:00:52
 Epoch: 187, lr: 2.0e-03, train_loss: 0.3674, train_acc: 0.8720 test_loss: 0.6877, test_acc: 0.7971, best: 0.8039, time: 0:00:52
 Epoch: 188, lr: 2.0e-03, train_loss: 0.3664, train_acc: 0.8710 test_loss: 0.6946, test_acc: 0.8027, best: 0.8039, time: 0:00:52
 Epoch: 189, lr: 2.0e-03, train_loss: 0.3645, train_acc: 0.8692 test_loss: 0.6975, test_acc: 0.8000, best: 0.8039, time: 0:00:52
 Epoch: 190, lr: 2.0e-03, train_loss: 0.3628, train_acc: 0.8726 test_loss: 0.7116, test_acc: 0.7970, best: 0.8039, time: 0:00:52
 Epoch: 191, lr: 2.0e-03, train_loss: 0.3578, train_acc: 0.8748 test_loss: 0.7127, test_acc: 0.7975, best: 0.8039, time: 0:00:52
 Epoch: 192, lr: 2.0e-03, train_loss: 0.3700, train_acc: 0.8716 test_loss: 0.7322, test_acc: 0.7955, best: 0.8039, time: 0:00:52
 Epoch: 193, lr: 2.0e-03, train_loss: 0.3620, train_acc: 0.8706 test_loss: 0.6969, test_acc: 0.8019, best: 0.8039, time: 0:00:52
 Epoch: 194, lr: 2.0e-03, train_loss: 0.3525, train_acc: 0.8800 test_loss: 0.7056, test_acc: 0.8001, best: 0.8039, time: 0:00:53
 Epoch: 195, lr: 2.0e-03, train_loss: 0.3583, train_acc: 0.8786 test_loss: 0.7170, test_acc: 0.7941, best: 0.8039, time: 0:00:52
 Epoch: 196, lr: 2.0e-03, train_loss: 0.3698, train_acc: 0.8684 test_loss: 0.7414, test_acc: 0.7921, best: 0.8039, time: 0:00:52
 Epoch: 197, lr: 2.0e-03, train_loss: 0.3420, train_acc: 0.8774 test_loss: 0.7121, test_acc: 0.8033, best: 0.8039, time: 0:00:52
 Epoch: 198, lr: 2.0e-03, train_loss: 0.3449, train_acc: 0.8802 test_loss: 0.7041, test_acc: 0.8033, best: 0.8039, time: 0:00:52
 Epoch: 199, lr: 2.0e-03, train_loss: 0.3482, train_acc: 0.8794 test_loss: 0.6821, test_acc: 0.8054, best: 0.8054, time: 0:00:53
 Epoch: 200, lr: 2.0e-03, train_loss: 0.3544, train_acc: 0.8742 test_loss: 0.6834, test_acc: 0.8046, best: 0.8054, time: 0:00:52
 Epoch: 201, lr: 2.0e-03, train_loss: 0.3622, train_acc: 0.8730 test_loss: 0.7140, test_acc: 0.7979, best: 0.8054, time: 0:00:52
 Epoch: 202, lr: 2.0e-03, train_loss: 0.3600, train_acc: 0.8750 test_loss: 0.7204, test_acc: 0.7984, best: 0.8054, time: 0:00:52
 Epoch: 203, lr: 2.0e-03, train_loss: 0.3493, train_acc: 0.8758 test_loss: 0.7133, test_acc: 0.7957, best: 0.8054, time: 0:00:52
 Epoch: 204, lr: 2.0e-03, train_loss: 0.3491, train_acc: 0.8812 test_loss: 0.7204, test_acc: 0.8024, best: 0.8054, time: 0:00:52
 Epoch: 205, lr: 2.0e-03, train_loss: 0.3470, train_acc: 0.8796 test_loss: 0.6973, test_acc: 0.8033, best: 0.8054, time: 0:00:52
 Epoch: 206, lr: 2.0e-03, train_loss: 0.3429, train_acc: 0.8822 test_loss: 0.6974, test_acc: 0.8039, best: 0.8054, time: 0:00:53
 Epoch: 207, lr: 2.0e-03, train_loss: 0.3396, train_acc: 0.8818 test_loss: 0.7096, test_acc: 0.7984, best: 0.8054, time: 0:00:52
 Epoch: 208, lr: 2.0e-03, train_loss: 0.3322, train_acc: 0.8856 test_loss: 0.7166, test_acc: 0.7994, best: 0.8054, time: 0:00:52
 Epoch: 209, lr: 2.0e-03, train_loss: 0.3786, train_acc: 0.8654 test_loss: 0.7255, test_acc: 0.7997, best: 0.8054, time: 0:00:52
 Epoch: 210, lr: 2.0e-03, train_loss: 0.3199, train_acc: 0.8890 test_loss: 0.7312, test_acc: 0.8014, best: 0.8054, time: 0:00:52
 Epoch: 211, lr: 2.0e-03, train_loss: 0.3486, train_acc: 0.8786 test_loss: 0.7296, test_acc: 0.7969, best: 0.8054, time: 0:00:53
 Epoch: 212, lr: 2.0e-03, train_loss: 0.3455, train_acc: 0.8846 test_loss: 0.7385, test_acc: 0.7979, best: 0.8054, time: 0:00:52
 Epoch: 213, lr: 2.0e-03, train_loss: 0.3429, train_acc: 0.8772 test_loss: 0.7248, test_acc: 0.7921, best: 0.8054, time: 0:00:52
 Epoch: 214, lr: 2.0e-03, train_loss: 0.3345, train_acc: 0.8812 test_loss: 0.7407, test_acc: 0.7955, best: 0.8054, time: 0:00:52
 Epoch: 215, lr: 2.0e-03, train_loss: 0.3336, train_acc: 0.8860 test_loss: 0.7400, test_acc: 0.8003, best: 0.8054, time: 0:00:52
 Epoch: 216, lr: 2.0e-03, train_loss: 0.3229, train_acc: 0.8834 test_loss: 0.7488, test_acc: 0.7920, best: 0.8054, time: 0:00:52
 Epoch: 217, lr: 2.0e-03, train_loss: 0.3336, train_acc: 0.8870 test_loss: 0.7343, test_acc: 0.8027, best: 0.8054, time: 0:00:52
 Epoch: 218, lr: 2.0e-03, train_loss: 0.3308, train_acc: 0.8898 test_loss: 0.7707, test_acc: 0.7874, best: 0.8054, time: 0:00:52
 Epoch: 219, lr: 2.0e-03, train_loss: 0.3222, train_acc: 0.8868 test_loss: 0.7287, test_acc: 0.7973, best: 0.8054, time: 0:00:52
 Epoch: 220, lr: 2.0e-03, train_loss: 0.3266, train_acc: 0.8888 test_loss: 0.7150, test_acc: 0.8000, best: 0.8054, time: 0:00:52
 Epoch: 221, lr: 2.0e-03, train_loss: 0.3430, train_acc: 0.8848 test_loss: 0.7509, test_acc: 0.7950, best: 0.8054, time: 0:00:52
 Epoch: 222, lr: 2.0e-03, train_loss: 0.3049, train_acc: 0.8954 test_loss: 0.7637, test_acc: 0.7940, best: 0.8054, time: 0:00:52
 Epoch: 223, lr: 2.0e-03, train_loss: 0.3237, train_acc: 0.8856 test_loss: 0.7359, test_acc: 0.7937, best: 0.8054, time: 0:00:52
 Epoch: 224, lr: 2.0e-03, train_loss: 0.3455, train_acc: 0.8850 test_loss: 0.7239, test_acc: 0.7981, best: 0.8054, time: 0:00:52
 Epoch: 225, lr: 2.0e-03, train_loss: 0.3456, train_acc: 0.8804 test_loss: 0.7408, test_acc: 0.7924, best: 0.8054, time: 0:00:52
 Epoch: 226, lr: 2.0e-03, train_loss: 0.3217, train_acc: 0.8894 test_loss: 0.7564, test_acc: 0.7936, best: 0.8054, time: 0:00:52
 Epoch: 227, lr: 2.0e-03, train_loss: 0.3314, train_acc: 0.8812 test_loss: 0.7637, test_acc: 0.7945, best: 0.8054, time: 0:00:52
 Epoch: 228, lr: 2.0e-03, train_loss: 0.3342, train_acc: 0.8852 test_loss: 0.7110, test_acc: 0.7981, best: 0.8054, time: 0:00:52
 Epoch: 229, lr: 2.0e-03, train_loss: 0.3304, train_acc: 0.8862 test_loss: 0.7084, test_acc: 0.8020, best: 0.8054, time: 0:00:52
 Epoch: 230, lr: 2.0e-03, train_loss: 0.3113, train_acc: 0.8922 test_loss: 0.7494, test_acc: 0.7984, best: 0.8054, time: 0:00:53
 Epoch: 231, lr: 2.0e-03, train_loss: 0.3274, train_acc: 0.8854 test_loss: 0.7373, test_acc: 0.7934, best: 0.8054, time: 0:00:52
 Epoch: 232, lr: 2.0e-03, train_loss: 0.3204, train_acc: 0.8940 test_loss: 0.7733, test_acc: 0.7894, best: 0.8054, time: 0:00:52
 Epoch: 233, lr: 2.0e-03, train_loss: 0.3138, train_acc: 0.8954 test_loss: 0.7551, test_acc: 0.7909, best: 0.8054, time: 0:00:52
 Epoch: 234, lr: 2.0e-03, train_loss: 0.3306, train_acc: 0.8850 test_loss: 0.7363, test_acc: 0.7914, best: 0.8054, time: 0:00:52
 Epoch: 235, lr: 2.0e-03, train_loss: 0.3197, train_acc: 0.8868 test_loss: 0.7500, test_acc: 0.7954, best: 0.8054, time: 0:00:52
 Epoch: 236, lr: 2.0e-03, train_loss: 0.3100, train_acc: 0.8952 test_loss: 0.7395, test_acc: 0.7985, best: 0.8054, time: 0:00:52
 Epoch: 237, lr: 2.0e-03, train_loss: 0.3168, train_acc: 0.8912 test_loss: 0.7349, test_acc: 0.7979, best: 0.8054, time: 0:00:52
 Epoch: 238, lr: 2.0e-03, train_loss: 0.3150, train_acc: 0.8898 test_loss: 0.7207, test_acc: 0.8013, best: 0.8054, time: 0:00:52
 Epoch: 239, lr: 2.0e-03, train_loss: 0.3246, train_acc: 0.8832 test_loss: 0.7548, test_acc: 0.7913, best: 0.8054, time: 0:00:52
 Epoch: 240, lr: 4.0e-04, train_loss: 0.3064, train_acc: 0.8920 test_loss: 0.7318, test_acc: 0.8000, best: 0.8054, time: 0:00:52
 Epoch: 241, lr: 4.0e-04, train_loss: 0.3076, train_acc: 0.8920 test_loss: 0.7206, test_acc: 0.8031, best: 0.8054, time: 0:00:52
 Epoch: 242, lr: 4.0e-04, train_loss: 0.3002, train_acc: 0.8994 test_loss: 0.7192, test_acc: 0.8036, best: 0.8054, time: 0:00:52
 Epoch: 243, lr: 4.0e-04, train_loss: 0.3153, train_acc: 0.8940 test_loss: 0.7409, test_acc: 0.7989, best: 0.8054, time: 0:00:52
 Epoch: 244, lr: 4.0e-04, train_loss: 0.3074, train_acc: 0.8928 test_loss: 0.7185, test_acc: 0.8037, best: 0.8054, time: 0:00:52
 Epoch: 245, lr: 4.0e-04, train_loss: 0.2906, train_acc: 0.9018 test_loss: 0.7177, test_acc: 0.8041, best: 0.8054, time: 0:00:53
 Epoch: 246, lr: 4.0e-04, train_loss: 0.2911, train_acc: 0.9000 test_loss: 0.7181, test_acc: 0.8049, best: 0.8054, time: 0:00:52
 Epoch: 247, lr: 4.0e-04, train_loss: 0.3035, train_acc: 0.8972 test_loss: 0.7224, test_acc: 0.8031, best: 0.8054, time: 0:00:52
 Epoch: 248, lr: 4.0e-04, train_loss: 0.2916, train_acc: 0.9038 test_loss: 0.7379, test_acc: 0.7990, best: 0.8054, time: 0:00:52
 Epoch: 249, lr: 4.0e-04, train_loss: 0.3024, train_acc: 0.8980 test_loss: 0.7252, test_acc: 0.8044, best: 0.8054, time: 0:00:52
 Epoch: 250, lr: 4.0e-04, train_loss: 0.3009, train_acc: 0.8972 test_loss: 0.7317, test_acc: 0.7997, best: 0.8054, time: 0:00:52
 Epoch: 251, lr: 4.0e-04, train_loss: 0.2684, train_acc: 0.9080 test_loss: 0.7206, test_acc: 0.8020, best: 0.8054, time: 0:00:52
 Epoch: 252, lr: 4.0e-04, train_loss: 0.3136, train_acc: 0.8944 test_loss: 0.7365, test_acc: 0.8007, best: 0.8054, time: 0:00:52
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2870, train_acc: 0.8994 test_loss: 0.7285, test_acc: 0.8031, best: 0.8054, time: 0:00:52
 Epoch: 254, lr: 4.0e-04, train_loss: 0.2893, train_acc: 0.9022 test_loss: 0.7556, test_acc: 0.8014, best: 0.8054, time: 0:00:52
 Epoch: 255, lr: 4.0e-04, train_loss: 0.2972, train_acc: 0.8964 test_loss: 0.7425, test_acc: 0.8010, best: 0.8054, time: 0:00:52
 Epoch: 256, lr: 4.0e-04, train_loss: 0.2987, train_acc: 0.8998 test_loss: 0.7449, test_acc: 0.8003, best: 0.8054, time: 0:00:52
 Epoch: 257, lr: 4.0e-04, train_loss: 0.2960, train_acc: 0.9012 test_loss: 0.7428, test_acc: 0.8020, best: 0.8054, time: 0:00:52
 Epoch: 258, lr: 4.0e-04, train_loss: 0.2959, train_acc: 0.8948 test_loss: 0.7205, test_acc: 0.8017, best: 0.8054, time: 0:00:52
 Epoch: 259, lr: 4.0e-04, train_loss: 0.2960, train_acc: 0.8978 test_loss: 0.7263, test_acc: 0.8023, best: 0.8054, time: 0:00:52
 Epoch: 260, lr: 4.0e-04, train_loss: 0.2897, train_acc: 0.9028 test_loss: 0.7355, test_acc: 0.8020, best: 0.8054, time: 0:00:52
 Epoch: 261, lr: 4.0e-04, train_loss: 0.2773, train_acc: 0.9020 test_loss: 0.7340, test_acc: 0.8035, best: 0.8054, time: 0:00:52
 Epoch: 262, lr: 4.0e-04, train_loss: 0.2932, train_acc: 0.9016 test_loss: 0.7372, test_acc: 0.8011, best: 0.8054, time: 0:00:52
 Epoch: 263, lr: 4.0e-04, train_loss: 0.2829, train_acc: 0.9068 test_loss: 0.7507, test_acc: 0.8029, best: 0.8054, time: 0:00:52
 Epoch: 264, lr: 4.0e-04, train_loss: 0.2842, train_acc: 0.9004 test_loss: 0.7410, test_acc: 0.8034, best: 0.8054, time: 0:00:52
 Epoch: 265, lr: 4.0e-04, train_loss: 0.2956, train_acc: 0.8968 test_loss: 0.7435, test_acc: 0.8007, best: 0.8054, time: 0:00:52
 Epoch: 266, lr: 4.0e-04, train_loss: 0.2888, train_acc: 0.8998 test_loss: 0.7406, test_acc: 0.8004, best: 0.8054, time: 0:00:52
 Epoch: 267, lr: 4.0e-04, train_loss: 0.2884, train_acc: 0.9036 test_loss: 0.7336, test_acc: 0.8040, best: 0.8054, time: 0:00:52
 Epoch: 268, lr: 4.0e-04, train_loss: 0.2780, train_acc: 0.9034 test_loss: 0.7523, test_acc: 0.7997, best: 0.8054, time: 0:00:52
 Epoch: 269, lr: 4.0e-04, train_loss: 0.2921, train_acc: 0.9014 test_loss: 0.7438, test_acc: 0.8011, best: 0.8054, time: 0:00:52
 Epoch: 270, lr: 8.0e-05, train_loss: 0.3080, train_acc: 0.8918 test_loss: 0.7368, test_acc: 0.7990, best: 0.8054, time: 0:00:52
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2758, train_acc: 0.9066 test_loss: 0.7326, test_acc: 0.8046, best: 0.8054, time: 0:00:52
 Epoch: 272, lr: 8.0e-05, train_loss: 0.2730, train_acc: 0.9042 test_loss: 0.7573, test_acc: 0.7994, best: 0.8054, time: 0:00:52
 Epoch: 273, lr: 8.0e-05, train_loss: 0.2794, train_acc: 0.9042 test_loss: 0.7595, test_acc: 0.7965, best: 0.8054, time: 0:00:52
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2945, train_acc: 0.9000 test_loss: 0.7203, test_acc: 0.8036, best: 0.8054, time: 0:00:52
 Epoch: 275, lr: 8.0e-05, train_loss: 0.3079, train_acc: 0.8920 test_loss: 0.7392, test_acc: 0.7997, best: 0.8054, time: 0:00:52
 Epoch: 276, lr: 8.0e-05, train_loss: 0.2722, train_acc: 0.9044 test_loss: 0.7472, test_acc: 0.7985, best: 0.8054, time: 0:00:52
 Epoch: 277, lr: 8.0e-05, train_loss: 0.2939, train_acc: 0.8974 test_loss: 0.7691, test_acc: 0.7970, best: 0.8054, time: 0:00:51
 Epoch: 278, lr: 8.0e-05, train_loss: 0.3034, train_acc: 0.8936 test_loss: 0.7759, test_acc: 0.7997, best: 0.8054, time: 0:00:51
 Epoch: 279, lr: 8.0e-05, train_loss: 0.2892, train_acc: 0.9002 test_loss: 0.7518, test_acc: 0.7995, best: 0.8054, time: 0:00:51
 Epoch: 280, lr: 8.0e-05, train_loss: 0.2656, train_acc: 0.9098 test_loss: 0.7400, test_acc: 0.8017, best: 0.8054, time: 0:00:51
 Epoch: 281, lr: 8.0e-05, train_loss: 0.2818, train_acc: 0.9026 test_loss: 0.7419, test_acc: 0.8015, best: 0.8054, time: 0:00:51
 Epoch: 282, lr: 8.0e-05, train_loss: 0.2920, train_acc: 0.8980 test_loss: 0.7664, test_acc: 0.7950, best: 0.8054, time: 0:00:51
 Epoch: 283, lr: 8.0e-05, train_loss: 0.2696, train_acc: 0.9110 test_loss: 0.7451, test_acc: 0.8019, best: 0.8054, time: 0:00:51
 Epoch: 284, lr: 8.0e-05, train_loss: 0.2846, train_acc: 0.9002 test_loss: 0.7339, test_acc: 0.8025, best: 0.8054, time: 0:00:51
 Epoch: 285, lr: 8.0e-05, train_loss: 0.2909, train_acc: 0.8986 test_loss: 0.7519, test_acc: 0.8006, best: 0.8054, time: 0:00:51
 Epoch: 286, lr: 8.0e-05, train_loss: 0.2847, train_acc: 0.9026 test_loss: 0.7740, test_acc: 0.7994, best: 0.8054, time: 0:00:50
 Epoch: 287, lr: 8.0e-05, train_loss: 0.2963, train_acc: 0.8988 test_loss: 0.7397, test_acc: 0.8045, best: 0.8054, time: 0:00:51
 Epoch: 288, lr: 8.0e-05, train_loss: 0.2849, train_acc: 0.9052 test_loss: 0.7382, test_acc: 0.8025, best: 0.8054, time: 0:00:51
 Epoch: 289, lr: 8.0e-05, train_loss: 0.2767, train_acc: 0.9056 test_loss: 0.7492, test_acc: 0.7986, best: 0.8054, time: 0:00:51
 Epoch: 290, lr: 8.0e-05, train_loss: 0.2860, train_acc: 0.8976 test_loss: 0.7484, test_acc: 0.8010, best: 0.8054, time: 0:00:51
 Epoch: 291, lr: 8.0e-05, train_loss: 0.2719, train_acc: 0.9050 test_loss: 0.7437, test_acc: 0.8000, best: 0.8054, time: 0:00:51
 Epoch: 292, lr: 8.0e-05, train_loss: 0.2880, train_acc: 0.8990 test_loss: 0.7367, test_acc: 0.8021, best: 0.8054, time: 0:00:51
 Epoch: 293, lr: 8.0e-05, train_loss: 0.2846, train_acc: 0.9036 test_loss: 0.7510, test_acc: 0.8013, best: 0.8054, time: 0:00:51
 Epoch: 294, lr: 8.0e-05, train_loss: 0.2744, train_acc: 0.9092 test_loss: 0.7372, test_acc: 0.8007, best: 0.8054, time: 0:00:51
 Epoch: 295, lr: 8.0e-05, train_loss: 0.2836, train_acc: 0.9014 test_loss: 0.7469, test_acc: 0.8023, best: 0.8054, time: 0:00:51
 Epoch: 296, lr: 8.0e-05, train_loss: 0.2827, train_acc: 0.9046 test_loss: 0.7675, test_acc: 0.7984, best: 0.8054, time: 0:00:50
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2851, train_acc: 0.9016 test_loss: 0.7424, test_acc: 0.8020, best: 0.8054, time: 0:00:51
 Epoch: 298, lr: 8.0e-05, train_loss: 0.2715, train_acc: 0.9028 test_loss: 0.7561, test_acc: 0.8031, best: 0.8054, time: 0:00:50
 Epoch: 299, lr: 8.0e-05, train_loss: 0.2885, train_acc: 0.8996 test_loss: 0.7460, test_acc: 0.8010, best: 0.8054, time: 0:00:49
 Highest accuracy: 0.8054