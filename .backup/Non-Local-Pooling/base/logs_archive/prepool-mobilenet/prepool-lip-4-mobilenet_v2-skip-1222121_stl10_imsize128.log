
 Run on time: 2022-07-04 20:47:19.852285

 Architecture: prepool-lip-4-mobilenet_v2-skip-1222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 4,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : prepool-lip-4-mobilenet_v2-skip-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (conv1_pool): Pool2d(
        (logit): Sequential(
          (pool_weight): LIP_BASE(
            (logit): Sequential(
              (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
          )
        )
        (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.6032, train_acc: 0.1688 test_loss: 2.1253, test_acc: 0.1969, best: 0.1969, time: 0:00:49
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1342, train_acc: 0.1984 test_loss: 1.8401, test_acc: 0.2622, best: 0.2622, time: 0:00:49
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0313, train_acc: 0.2230 test_loss: 1.7712, test_acc: 0.3063, best: 0.3063, time: 0:00:49
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9953, train_acc: 0.2370 test_loss: 1.7603, test_acc: 0.3259, best: 0.3259, time: 0:00:49
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9471, train_acc: 0.2534 test_loss: 1.7187, test_acc: 0.3416, best: 0.3416, time: 0:00:49
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9222, train_acc: 0.2720 test_loss: 1.7166, test_acc: 0.3639, best: 0.3639, time: 0:00:49
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9164, train_acc: 0.2766 test_loss: 1.6757, test_acc: 0.3473, best: 0.3639, time: 0:00:49
 Epoch: 8, lr: 1.0e-02, train_loss: 1.8833, train_acc: 0.2790 test_loss: 1.7116, test_acc: 0.3345, best: 0.3639, time: 0:00:49
 Epoch: 9, lr: 1.0e-02, train_loss: 1.8792, train_acc: 0.2912 test_loss: 1.7237, test_acc: 0.3361, best: 0.3639, time: 0:00:49
 Epoch: 10, lr: 1.0e-02, train_loss: 1.8589, train_acc: 0.2794 test_loss: 1.6874, test_acc: 0.3694, best: 0.3694, time: 0:00:49
 Epoch: 11, lr: 1.0e-02, train_loss: 1.8708, train_acc: 0.2946 test_loss: 1.6493, test_acc: 0.3558, best: 0.3694, time: 0:00:49
 Epoch: 12, lr: 1.0e-02, train_loss: 1.8529, train_acc: 0.3036 test_loss: 1.6581, test_acc: 0.3641, best: 0.3694, time: 0:00:49
 Epoch: 13, lr: 1.0e-02, train_loss: 1.8506, train_acc: 0.3012 test_loss: 1.6448, test_acc: 0.3901, best: 0.3901, time: 0:00:49
 Epoch: 14, lr: 1.0e-02, train_loss: 1.8316, train_acc: 0.2996 test_loss: 1.7249, test_acc: 0.3526, best: 0.3901, time: 0:00:49
 Epoch: 15, lr: 1.0e-02, train_loss: 1.8332, train_acc: 0.3142 test_loss: 1.7745, test_acc: 0.2900, best: 0.3901, time: 0:00:49
 Epoch: 16, lr: 1.0e-02, train_loss: 1.8364, train_acc: 0.2980 test_loss: 1.6680, test_acc: 0.3291, best: 0.3901, time: 0:00:49
 Epoch: 17, lr: 1.0e-02, train_loss: 1.7935, train_acc: 0.3040 test_loss: 1.6250, test_acc: 0.3865, best: 0.3901, time: 0:00:49
 Epoch: 18, lr: 1.0e-02, train_loss: 1.8090, train_acc: 0.3190 test_loss: 1.6145, test_acc: 0.3811, best: 0.3901, time: 0:00:49
 Epoch: 19, lr: 1.0e-02, train_loss: 1.7771, train_acc: 0.3188 test_loss: 1.5992, test_acc: 0.3906, best: 0.3906, time: 0:00:49
 Epoch: 20, lr: 1.0e-02, train_loss: 1.7941, train_acc: 0.3118 test_loss: 1.5601, test_acc: 0.3999, best: 0.3999, time: 0:00:49
 Epoch: 21, lr: 1.0e-02, train_loss: 1.7647, train_acc: 0.3198 test_loss: 1.5151, test_acc: 0.4019, best: 0.4019, time: 0:00:49
 Epoch: 22, lr: 1.0e-02, train_loss: 1.7596, train_acc: 0.3292 test_loss: 1.5471, test_acc: 0.3859, best: 0.4019, time: 0:00:49
 Epoch: 23, lr: 1.0e-02, train_loss: 1.7426, train_acc: 0.3380 test_loss: 1.6739, test_acc: 0.3781, best: 0.4019, time: 0:00:49
 Epoch: 24, lr: 1.0e-02, train_loss: 1.7077, train_acc: 0.3432 test_loss: 1.5060, test_acc: 0.4228, best: 0.4228, time: 0:00:49
 Epoch: 25, lr: 1.0e-02, train_loss: 1.6987, train_acc: 0.3376 test_loss: 1.6393, test_acc: 0.3751, best: 0.4228, time: 0:00:49
 Epoch: 26, lr: 1.0e-02, train_loss: 1.7194, train_acc: 0.3488 test_loss: 1.5632, test_acc: 0.4005, best: 0.4228, time: 0:00:49
 Epoch: 27, lr: 1.0e-02, train_loss: 1.6929, train_acc: 0.3510 test_loss: 1.4982, test_acc: 0.4369, best: 0.4369, time: 0:00:49
 Epoch: 28, lr: 1.0e-02, train_loss: 1.6973, train_acc: 0.3554 test_loss: 1.8856, test_acc: 0.2791, best: 0.4369, time: 0:00:49
 Epoch: 29, lr: 1.0e-02, train_loss: 1.8287, train_acc: 0.3036 test_loss: 1.5635, test_acc: 0.3982, best: 0.4369, time: 0:00:49
 Epoch: 30, lr: 1.0e-02, train_loss: 1.7362, train_acc: 0.3412 test_loss: 1.5907, test_acc: 0.4000, best: 0.4369, time: 0:00:49
 Epoch: 31, lr: 1.0e-02, train_loss: 1.7017, train_acc: 0.3542 test_loss: 1.5285, test_acc: 0.4263, best: 0.4369, time: 0:00:49
 Epoch: 32, lr: 1.0e-02, train_loss: 1.6891, train_acc: 0.3622 test_loss: 1.5029, test_acc: 0.4220, best: 0.4369, time: 0:00:49
 Epoch: 33, lr: 1.0e-02, train_loss: 1.6859, train_acc: 0.3650 test_loss: 1.4696, test_acc: 0.4341, best: 0.4369, time: 0:00:49
 Epoch: 34, lr: 1.0e-02, train_loss: 1.7009, train_acc: 0.3632 test_loss: 1.6693, test_acc: 0.3664, best: 0.4369, time: 0:00:50
 Epoch: 35, lr: 1.0e-02, train_loss: 1.6779, train_acc: 0.3632 test_loss: 1.4635, test_acc: 0.4515, best: 0.4515, time: 0:00:49
 Epoch: 36, lr: 1.0e-02, train_loss: 1.6771, train_acc: 0.3694 test_loss: 1.5294, test_acc: 0.4049, best: 0.4515, time: 0:00:49
 Epoch: 37, lr: 1.0e-02, train_loss: 1.6584, train_acc: 0.3704 test_loss: 1.4620, test_acc: 0.4556, best: 0.4556, time: 0:00:49
 Epoch: 38, lr: 1.0e-02, train_loss: 1.6540, train_acc: 0.3816 test_loss: 1.5055, test_acc: 0.4537, best: 0.4556, time: 0:00:49
 Epoch: 39, lr: 1.0e-02, train_loss: 1.6525, train_acc: 0.3806 test_loss: 1.4608, test_acc: 0.4545, best: 0.4556, time: 0:00:49
 Epoch: 40, lr: 1.0e-02, train_loss: 1.6454, train_acc: 0.3782 test_loss: 1.4384, test_acc: 0.4596, best: 0.4596, time: 0:00:49
 Epoch: 41, lr: 1.0e-02, train_loss: 1.6218, train_acc: 0.3852 test_loss: 1.4703, test_acc: 0.4359, best: 0.4596, time: 0:00:49
 Epoch: 42, lr: 1.0e-02, train_loss: 1.5954, train_acc: 0.3998 test_loss: 1.4621, test_acc: 0.4439, best: 0.4596, time: 0:00:49
 Epoch: 43, lr: 1.0e-02, train_loss: 1.5807, train_acc: 0.4158 test_loss: 1.3969, test_acc: 0.4796, best: 0.4796, time: 0:00:49
 Epoch: 44, lr: 1.0e-02, train_loss: 1.5619, train_acc: 0.4128 test_loss: 1.3814, test_acc: 0.4879, best: 0.4879, time: 0:00:49
 Epoch: 45, lr: 1.0e-02, train_loss: 1.5444, train_acc: 0.4236 test_loss: 1.3908, test_acc: 0.4774, best: 0.4879, time: 0:00:49
 Epoch: 46, lr: 1.0e-02, train_loss: 1.5343, train_acc: 0.4240 test_loss: 1.3450, test_acc: 0.5051, best: 0.5051, time: 0:00:49
 Epoch: 47, lr: 1.0e-02, train_loss: 1.5199, train_acc: 0.4364 test_loss: 1.3932, test_acc: 0.4819, best: 0.5051, time: 0:00:49
 Epoch: 48, lr: 1.0e-02, train_loss: 1.5136, train_acc: 0.4306 test_loss: 1.3624, test_acc: 0.4966, best: 0.5051, time: 0:00:49
 Epoch: 49, lr: 1.0e-02, train_loss: 1.5206, train_acc: 0.4346 test_loss: 1.3828, test_acc: 0.4854, best: 0.5051, time: 0:00:49
 Epoch: 50, lr: 1.0e-02, train_loss: 1.5050, train_acc: 0.4304 test_loss: 1.3427, test_acc: 0.5056, best: 0.5056, time: 0:00:49
 Epoch: 51, lr: 1.0e-02, train_loss: 1.4926, train_acc: 0.4440 test_loss: 1.3514, test_acc: 0.4894, best: 0.5056, time: 0:00:49
 Epoch: 52, lr: 1.0e-02, train_loss: 1.5028, train_acc: 0.4450 test_loss: 1.3248, test_acc: 0.5021, best: 0.5056, time: 0:00:49
 Epoch: 53, lr: 1.0e-02, train_loss: 1.4676, train_acc: 0.4570 test_loss: 1.3052, test_acc: 0.5259, best: 0.5259, time: 0:00:49
 Epoch: 54, lr: 1.0e-02, train_loss: 1.4720, train_acc: 0.4628 test_loss: 1.3184, test_acc: 0.5110, best: 0.5259, time: 0:00:49
 Epoch: 55, lr: 1.0e-02, train_loss: 1.4788, train_acc: 0.4552 test_loss: 1.3234, test_acc: 0.5114, best: 0.5259, time: 0:00:49
 Epoch: 56, lr: 1.0e-02, train_loss: 1.4543, train_acc: 0.4644 test_loss: 1.3142, test_acc: 0.5105, best: 0.5259, time: 0:00:49
 Epoch: 57, lr: 1.0e-02, train_loss: 1.4311, train_acc: 0.4748 test_loss: 1.2913, test_acc: 0.5176, best: 0.5259, time: 0:00:49
 Epoch: 58, lr: 1.0e-02, train_loss: 1.4321, train_acc: 0.4752 test_loss: 1.2494, test_acc: 0.5447, best: 0.5447, time: 0:00:49
 Epoch: 59, lr: 1.0e-02, train_loss: 1.4271, train_acc: 0.4716 test_loss: 1.2791, test_acc: 0.5349, best: 0.5447, time: 0:00:49
 Epoch: 60, lr: 1.0e-02, train_loss: 1.4057, train_acc: 0.4828 test_loss: 1.2959, test_acc: 0.5139, best: 0.5447, time: 0:00:49
 Epoch: 61, lr: 1.0e-02, train_loss: 1.3823, train_acc: 0.4970 test_loss: 1.2094, test_acc: 0.5494, best: 0.5494, time: 0:00:49
 Epoch: 62, lr: 1.0e-02, train_loss: 1.4184, train_acc: 0.4776 test_loss: 1.2306, test_acc: 0.5515, best: 0.5515, time: 0:00:49
 Epoch: 63, lr: 1.0e-02, train_loss: 1.3932, train_acc: 0.4964 test_loss: 1.2362, test_acc: 0.5464, best: 0.5515, time: 0:00:49
 Epoch: 64, lr: 1.0e-02, train_loss: 1.3883, train_acc: 0.4970 test_loss: 1.2540, test_acc: 0.5436, best: 0.5515, time: 0:00:49
 Epoch: 65, lr: 1.0e-02, train_loss: 1.3997, train_acc: 0.4800 test_loss: 1.2080, test_acc: 0.5609, best: 0.5609, time: 0:00:49
 Epoch: 66, lr: 1.0e-02, train_loss: 1.3852, train_acc: 0.4914 test_loss: 1.2199, test_acc: 0.5515, best: 0.5609, time: 0:00:49
 Epoch: 67, lr: 1.0e-02, train_loss: 1.3801, train_acc: 0.4962 test_loss: 1.3080, test_acc: 0.5084, best: 0.5609, time: 0:00:49
 Epoch: 68, lr: 1.0e-02, train_loss: 1.4024, train_acc: 0.4852 test_loss: 1.2785, test_acc: 0.5230, best: 0.5609, time: 0:00:49
 Epoch: 69, lr: 1.0e-02, train_loss: 1.3948, train_acc: 0.4870 test_loss: 1.2191, test_acc: 0.5541, best: 0.5609, time: 0:00:49
 Epoch: 70, lr: 1.0e-02, train_loss: 1.3960, train_acc: 0.4910 test_loss: 1.2431, test_acc: 0.5433, best: 0.5609, time: 0:00:49
 Epoch: 71, lr: 1.0e-02, train_loss: 1.3719, train_acc: 0.4982 test_loss: 1.2201, test_acc: 0.5559, best: 0.5609, time: 0:00:49
 Epoch: 72, lr: 1.0e-02, train_loss: 1.3546, train_acc: 0.5022 test_loss: 1.2183, test_acc: 0.5537, best: 0.5609, time: 0:00:49
 Epoch: 73, lr: 1.0e-02, train_loss: 1.3709, train_acc: 0.5038 test_loss: 1.1994, test_acc: 0.5664, best: 0.5664, time: 0:00:50
 Epoch: 74, lr: 1.0e-02, train_loss: 1.3694, train_acc: 0.5014 test_loss: 1.2451, test_acc: 0.5404, best: 0.5664, time: 0:00:49
 Epoch: 75, lr: 1.0e-02, train_loss: 1.3378, train_acc: 0.5184 test_loss: 1.2206, test_acc: 0.5614, best: 0.5664, time: 0:00:49
 Epoch: 76, lr: 1.0e-02, train_loss: 1.3353, train_acc: 0.5132 test_loss: 1.2338, test_acc: 0.5521, best: 0.5664, time: 0:00:49
 Epoch: 77, lr: 1.0e-02, train_loss: 1.3424, train_acc: 0.5080 test_loss: 1.1837, test_acc: 0.5700, best: 0.5700, time: 0:00:49
 Epoch: 78, lr: 1.0e-02, train_loss: 1.3275, train_acc: 0.5136 test_loss: 1.1639, test_acc: 0.5721, best: 0.5721, time: 0:00:50
 Epoch: 79, lr: 1.0e-02, train_loss: 1.3144, train_acc: 0.5220 test_loss: 1.1729, test_acc: 0.5699, best: 0.5721, time: 0:00:49
 Epoch: 80, lr: 1.0e-02, train_loss: 1.3278, train_acc: 0.5176 test_loss: 1.1726, test_acc: 0.5765, best: 0.5765, time: 0:00:49
 Epoch: 81, lr: 1.0e-02, train_loss: 1.2976, train_acc: 0.5280 test_loss: 1.1461, test_acc: 0.5814, best: 0.5814, time: 0:00:49
 Epoch: 82, lr: 1.0e-02, train_loss: 1.3086, train_acc: 0.5144 test_loss: 1.1529, test_acc: 0.5807, best: 0.5814, time: 0:00:49
 Epoch: 83, lr: 1.0e-02, train_loss: 1.2935, train_acc: 0.5250 test_loss: 1.1675, test_acc: 0.5737, best: 0.5814, time: 0:00:49
 Epoch: 84, lr: 1.0e-02, train_loss: 1.2622, train_acc: 0.5296 test_loss: 1.1429, test_acc: 0.5830, best: 0.5830, time: 0:00:49
 Epoch: 85, lr: 1.0e-02, train_loss: 1.3036, train_acc: 0.5116 test_loss: 1.1675, test_acc: 0.5755, best: 0.5830, time: 0:00:49
 Epoch: 86, lr: 1.0e-02, train_loss: 1.2830, train_acc: 0.5366 test_loss: 1.2313, test_acc: 0.5435, best: 0.5830, time: 0:00:49
 Epoch: 87, lr: 1.0e-02, train_loss: 1.2988, train_acc: 0.5220 test_loss: 1.1465, test_acc: 0.5777, best: 0.5830, time: 0:00:49
 Epoch: 88, lr: 1.0e-02, train_loss: 1.2693, train_acc: 0.5380 test_loss: 1.1340, test_acc: 0.5956, best: 0.5956, time: 0:00:49
 Epoch: 89, lr: 1.0e-02, train_loss: 1.2580, train_acc: 0.5452 test_loss: 1.1348, test_acc: 0.5897, best: 0.5956, time: 0:00:49
 Epoch: 90, lr: 1.0e-02, train_loss: 1.2496, train_acc: 0.5452 test_loss: 1.1079, test_acc: 0.6030, best: 0.6030, time: 0:00:49
 Epoch: 91, lr: 1.0e-02, train_loss: 1.2389, train_acc: 0.5450 test_loss: 1.1223, test_acc: 0.5917, best: 0.6030, time: 0:00:49
 Epoch: 92, lr: 1.0e-02, train_loss: 1.2637, train_acc: 0.5330 test_loss: 1.1086, test_acc: 0.5886, best: 0.6030, time: 0:00:49
 Epoch: 93, lr: 1.0e-02, train_loss: 1.2303, train_acc: 0.5508 test_loss: 1.1532, test_acc: 0.5881, best: 0.6030, time: 0:00:49
 Epoch: 94, lr: 1.0e-02, train_loss: 1.2407, train_acc: 0.5430 test_loss: 1.1409, test_acc: 0.5910, best: 0.6030, time: 0:00:49
 Epoch: 95, lr: 1.0e-02, train_loss: 1.2159, train_acc: 0.5578 test_loss: 1.1445, test_acc: 0.5865, best: 0.6030, time: 0:00:49
 Epoch: 96, lr: 1.0e-02, train_loss: 1.2310, train_acc: 0.5450 test_loss: 1.1394, test_acc: 0.5853, best: 0.6030, time: 0:00:49
 Epoch: 97, lr: 1.0e-02, train_loss: 1.2167, train_acc: 0.5576 test_loss: 1.1517, test_acc: 0.5757, best: 0.6030, time: 0:00:49
 Epoch: 98, lr: 1.0e-02, train_loss: 1.2186, train_acc: 0.5482 test_loss: 1.2006, test_acc: 0.5664, best: 0.6030, time: 0:00:49
 Epoch: 99, lr: 1.0e-02, train_loss: 1.2435, train_acc: 0.5556 test_loss: 1.1064, test_acc: 0.5999, best: 0.6030, time: 0:00:49
 Epoch: 100, lr: 1.0e-02, train_loss: 1.2278, train_acc: 0.5580 test_loss: 1.1006, test_acc: 0.5975, best: 0.6030, time: 0:00:49
 Epoch: 101, lr: 1.0e-02, train_loss: 1.2059, train_acc: 0.5626 test_loss: 1.0959, test_acc: 0.6005, best: 0.6030, time: 0:00:49
 Epoch: 102, lr: 1.0e-02, train_loss: 1.1730, train_acc: 0.5712 test_loss: 1.0359, test_acc: 0.6188, best: 0.6188, time: 0:00:49
 Epoch: 103, lr: 1.0e-02, train_loss: 1.1858, train_acc: 0.5710 test_loss: 1.1200, test_acc: 0.5876, best: 0.6188, time: 0:00:49
 Epoch: 104, lr: 1.0e-02, train_loss: 1.1908, train_acc: 0.5654 test_loss: 1.0633, test_acc: 0.6092, best: 0.6188, time: 0:00:49
 Epoch: 105, lr: 1.0e-02, train_loss: 1.1984, train_acc: 0.5598 test_loss: 1.0668, test_acc: 0.6126, best: 0.6188, time: 0:00:49
 Epoch: 106, lr: 1.0e-02, train_loss: 1.2118, train_acc: 0.5634 test_loss: 1.0575, test_acc: 0.6119, best: 0.6188, time: 0:00:49
 Epoch: 107, lr: 1.0e-02, train_loss: 1.1860, train_acc: 0.5674 test_loss: 1.1074, test_acc: 0.5895, best: 0.6188, time: 0:00:49
 Epoch: 108, lr: 1.0e-02, train_loss: 1.1891, train_acc: 0.5698 test_loss: 1.1037, test_acc: 0.6012, best: 0.6188, time: 0:00:49
 Epoch: 109, lr: 1.0e-02, train_loss: 1.1750, train_acc: 0.5752 test_loss: 1.0965, test_acc: 0.5988, best: 0.6188, time: 0:00:49
 Epoch: 110, lr: 1.0e-02, train_loss: 1.1678, train_acc: 0.5722 test_loss: 1.1109, test_acc: 0.5934, best: 0.6188, time: 0:00:49
 Epoch: 111, lr: 1.0e-02, train_loss: 1.2008, train_acc: 0.5678 test_loss: 1.1019, test_acc: 0.6020, best: 0.6188, time: 0:00:49
 Epoch: 112, lr: 1.0e-02, train_loss: 1.1649, train_acc: 0.5780 test_loss: 1.0831, test_acc: 0.6049, best: 0.6188, time: 0:00:49
 Epoch: 113, lr: 1.0e-02, train_loss: 1.1544, train_acc: 0.5872 test_loss: 1.1101, test_acc: 0.6048, best: 0.6188, time: 0:00:49
 Epoch: 114, lr: 1.0e-02, train_loss: 1.1440, train_acc: 0.5840 test_loss: 1.1324, test_acc: 0.5780, best: 0.6188, time: 0:00:49
 Epoch: 115, lr: 1.0e-02, train_loss: 1.1345, train_acc: 0.5876 test_loss: 1.0851, test_acc: 0.6056, best: 0.6188, time: 0:00:49
 Epoch: 116, lr: 1.0e-02, train_loss: 1.1566, train_acc: 0.5818 test_loss: 1.0131, test_acc: 0.6320, best: 0.6320, time: 0:00:49
 Epoch: 117, lr: 1.0e-02, train_loss: 1.1342, train_acc: 0.5924 test_loss: 1.1313, test_acc: 0.5799, best: 0.6320, time: 0:00:49
 Epoch: 118, lr: 1.0e-02, train_loss: 1.1431, train_acc: 0.5818 test_loss: 1.0966, test_acc: 0.5988, best: 0.6320, time: 0:00:49
 Epoch: 119, lr: 1.0e-02, train_loss: 1.1537, train_acc: 0.5762 test_loss: 1.0594, test_acc: 0.6111, best: 0.6320, time: 0:00:49
 Epoch: 120, lr: 1.0e-02, train_loss: 1.1376, train_acc: 0.5966 test_loss: 1.0885, test_acc: 0.6040, best: 0.6320, time: 0:00:49
 Epoch: 121, lr: 1.0e-02, train_loss: 1.1544, train_acc: 0.5780 test_loss: 1.0372, test_acc: 0.6264, best: 0.6320, time: 0:00:49
 Epoch: 122, lr: 1.0e-02, train_loss: 1.1573, train_acc: 0.5802 test_loss: 1.0315, test_acc: 0.6320, best: 0.6320, time: 0:00:49
 Epoch: 123, lr: 1.0e-02, train_loss: 1.1365, train_acc: 0.5904 test_loss: 1.0839, test_acc: 0.6089, best: 0.6320, time: 0:00:49
 Epoch: 124, lr: 1.0e-02, train_loss: 1.1270, train_acc: 0.5896 test_loss: 1.0845, test_acc: 0.6061, best: 0.6320, time: 0:00:49
 Epoch: 125, lr: 1.0e-02, train_loss: 1.1172, train_acc: 0.5954 test_loss: 1.0933, test_acc: 0.6054, best: 0.6320, time: 0:00:49
 Epoch: 126, lr: 1.0e-02, train_loss: 1.1468, train_acc: 0.5842 test_loss: 1.0523, test_acc: 0.6138, best: 0.6320, time: 0:00:49
 Epoch: 127, lr: 1.0e-02, train_loss: 1.1142, train_acc: 0.5936 test_loss: 1.0313, test_acc: 0.6285, best: 0.6320, time: 0:00:49
 Epoch: 128, lr: 1.0e-02, train_loss: 1.1088, train_acc: 0.5964 test_loss: 1.0331, test_acc: 0.6276, best: 0.6320, time: 0:00:49
 Epoch: 129, lr: 1.0e-02, train_loss: 1.1437, train_acc: 0.5832 test_loss: 1.0031, test_acc: 0.6412, best: 0.6412, time: 0:00:49
 Epoch: 130, lr: 1.0e-02, train_loss: 1.1096, train_acc: 0.6010 test_loss: 1.0432, test_acc: 0.6210, best: 0.6412, time: 0:00:49
 Epoch: 131, lr: 1.0e-02, train_loss: 1.0913, train_acc: 0.6014 test_loss: 1.0370, test_acc: 0.6301, best: 0.6412, time: 0:00:49
 Epoch: 132, lr: 1.0e-02, train_loss: 1.1336, train_acc: 0.5960 test_loss: 1.0089, test_acc: 0.6339, best: 0.6412, time: 0:00:49
 Epoch: 133, lr: 1.0e-02, train_loss: 1.0979, train_acc: 0.6036 test_loss: 0.9993, test_acc: 0.6421, best: 0.6421, time: 0:00:49
 Epoch: 134, lr: 1.0e-02, train_loss: 1.0774, train_acc: 0.6102 test_loss: 1.0279, test_acc: 0.6359, best: 0.6421, time: 0:00:49
 Epoch: 135, lr: 1.0e-02, train_loss: 1.0749, train_acc: 0.6096 test_loss: 1.0954, test_acc: 0.6042, best: 0.6421, time: 0:00:49
 Epoch: 136, lr: 1.0e-02, train_loss: 1.0763, train_acc: 0.6074 test_loss: 1.0275, test_acc: 0.6299, best: 0.6421, time: 0:00:49
 Epoch: 137, lr: 1.0e-02, train_loss: 1.0893, train_acc: 0.6076 test_loss: 1.0222, test_acc: 0.6315, best: 0.6421, time: 0:00:49
 Epoch: 138, lr: 1.0e-02, train_loss: 1.0932, train_acc: 0.6100 test_loss: 1.0288, test_acc: 0.6290, best: 0.6421, time: 0:00:49
 Epoch: 139, lr: 1.0e-02, train_loss: 1.0709, train_acc: 0.6126 test_loss: 1.0595, test_acc: 0.6155, best: 0.6421, time: 0:00:49
 Epoch: 140, lr: 1.0e-02, train_loss: 1.0592, train_acc: 0.6186 test_loss: 1.0650, test_acc: 0.6230, best: 0.6421, time: 0:00:49
 Epoch: 141, lr: 1.0e-02, train_loss: 1.0921, train_acc: 0.6070 test_loss: 1.0144, test_acc: 0.6399, best: 0.6421, time: 0:00:49
 Epoch: 142, lr: 1.0e-02, train_loss: 1.0678, train_acc: 0.6106 test_loss: 1.0254, test_acc: 0.6298, best: 0.6421, time: 0:00:49
 Epoch: 143, lr: 1.0e-02, train_loss: 1.0587, train_acc: 0.6190 test_loss: 1.0091, test_acc: 0.6374, best: 0.6421, time: 0:00:49
 Epoch: 144, lr: 1.0e-02, train_loss: 1.0503, train_acc: 0.6208 test_loss: 1.0102, test_acc: 0.6402, best: 0.6421, time: 0:00:49
 Epoch: 145, lr: 1.0e-02, train_loss: 1.0590, train_acc: 0.6138 test_loss: 1.0397, test_acc: 0.6300, best: 0.6421, time: 0:00:49
 Epoch: 146, lr: 1.0e-02, train_loss: 1.0560, train_acc: 0.6044 test_loss: 0.9731, test_acc: 0.6481, best: 0.6481, time: 0:00:49
 Epoch: 147, lr: 1.0e-02, train_loss: 1.0636, train_acc: 0.6158 test_loss: 1.0623, test_acc: 0.6269, best: 0.6481, time: 0:00:49
 Epoch: 148, lr: 1.0e-02, train_loss: 1.0429, train_acc: 0.6244 test_loss: 1.0225, test_acc: 0.6355, best: 0.6481, time: 0:00:49
 Epoch: 149, lr: 1.0e-02, train_loss: 1.0676, train_acc: 0.6168 test_loss: 1.0017, test_acc: 0.6412, best: 0.6481, time: 0:00:49
 Epoch: 150, lr: 1.0e-02, train_loss: 1.0469, train_acc: 0.6188 test_loss: 0.9735, test_acc: 0.6505, best: 0.6505, time: 0:00:49
 Epoch: 151, lr: 1.0e-02, train_loss: 1.0245, train_acc: 0.6298 test_loss: 1.0046, test_acc: 0.6405, best: 0.6505, time: 0:00:49
 Epoch: 152, lr: 1.0e-02, train_loss: 1.0406, train_acc: 0.6266 test_loss: 1.0523, test_acc: 0.6198, best: 0.6505, time: 0:00:49
 Epoch: 153, lr: 1.0e-02, train_loss: 1.0222, train_acc: 0.6240 test_loss: 0.9658, test_acc: 0.6558, best: 0.6558, time: 0:00:49
 Epoch: 154, lr: 1.0e-02, train_loss: 1.0421, train_acc: 0.6306 test_loss: 1.0167, test_acc: 0.6370, best: 0.6558, time: 0:00:49
 Epoch: 155, lr: 1.0e-02, train_loss: 0.9867, train_acc: 0.6420 test_loss: 0.9795, test_acc: 0.6532, best: 0.6558, time: 0:00:49
 Epoch: 156, lr: 1.0e-02, train_loss: 1.0202, train_acc: 0.6346 test_loss: 0.9942, test_acc: 0.6516, best: 0.6558, time: 0:00:49
 Epoch: 157, lr: 1.0e-02, train_loss: 1.0246, train_acc: 0.6324 test_loss: 0.9877, test_acc: 0.6516, best: 0.6558, time: 0:00:49
 Epoch: 158, lr: 1.0e-02, train_loss: 1.0181, train_acc: 0.6346 test_loss: 1.0147, test_acc: 0.6438, best: 0.6558, time: 0:00:49
 Epoch: 159, lr: 1.0e-02, train_loss: 1.0318, train_acc: 0.6184 test_loss: 1.0221, test_acc: 0.6434, best: 0.6558, time: 0:00:49
 Epoch: 160, lr: 1.0e-02, train_loss: 1.0003, train_acc: 0.6380 test_loss: 0.9786, test_acc: 0.6521, best: 0.6558, time: 0:00:49
 Epoch: 161, lr: 1.0e-02, train_loss: 1.0319, train_acc: 0.6228 test_loss: 1.0096, test_acc: 0.6361, best: 0.6558, time: 0:00:49
 Epoch: 162, lr: 1.0e-02, train_loss: 1.0125, train_acc: 0.6302 test_loss: 0.9691, test_acc: 0.6564, best: 0.6564, time: 0:00:49
 Epoch: 163, lr: 1.0e-02, train_loss: 0.9963, train_acc: 0.6400 test_loss: 0.9643, test_acc: 0.6574, best: 0.6574, time: 0:00:49
 Epoch: 164, lr: 1.0e-02, train_loss: 0.9935, train_acc: 0.6474 test_loss: 1.0011, test_acc: 0.6529, best: 0.6574, time: 0:00:49
 Epoch: 165, lr: 1.0e-02, train_loss: 0.9814, train_acc: 0.6446 test_loss: 0.9790, test_acc: 0.6567, best: 0.6574, time: 0:00:49
 Epoch: 166, lr: 1.0e-02, train_loss: 1.0024, train_acc: 0.6388 test_loss: 1.0234, test_acc: 0.6446, best: 0.6574, time: 0:00:49
 Epoch: 167, lr: 1.0e-02, train_loss: 0.9901, train_acc: 0.6368 test_loss: 1.0005, test_acc: 0.6415, best: 0.6574, time: 0:00:49
 Epoch: 168, lr: 1.0e-02, train_loss: 0.9794, train_acc: 0.6516 test_loss: 1.0190, test_acc: 0.6395, best: 0.6574, time: 0:00:49
 Epoch: 169, lr: 1.0e-02, train_loss: 0.9802, train_acc: 0.6428 test_loss: 1.0374, test_acc: 0.6322, best: 0.6574, time: 0:00:49
 Epoch: 170, lr: 1.0e-02, train_loss: 0.9985, train_acc: 0.6314 test_loss: 0.9745, test_acc: 0.6530, best: 0.6574, time: 0:00:49
 Epoch: 171, lr: 1.0e-02, train_loss: 0.9909, train_acc: 0.6408 test_loss: 0.9924, test_acc: 0.6430, best: 0.6574, time: 0:00:49
 Epoch: 172, lr: 1.0e-02, train_loss: 0.9911, train_acc: 0.6510 test_loss: 0.9536, test_acc: 0.6551, best: 0.6574, time: 0:00:49
 Epoch: 173, lr: 1.0e-02, train_loss: 0.9756, train_acc: 0.6480 test_loss: 1.0080, test_acc: 0.6394, best: 0.6574, time: 0:00:49
 Epoch: 174, lr: 1.0e-02, train_loss: 0.9583, train_acc: 0.6504 test_loss: 0.9781, test_acc: 0.6538, best: 0.6574, time: 0:00:49
 Epoch: 175, lr: 1.0e-02, train_loss: 0.9433, train_acc: 0.6600 test_loss: 0.9441, test_acc: 0.6667, best: 0.6667, time: 0:00:49
 Epoch: 176, lr: 1.0e-02, train_loss: 0.9493, train_acc: 0.6574 test_loss: 0.9709, test_acc: 0.6544, best: 0.6667, time: 0:00:49
 Epoch: 177, lr: 1.0e-02, train_loss: 0.9668, train_acc: 0.6562 test_loss: 0.9643, test_acc: 0.6597, best: 0.6667, time: 0:00:49
 Epoch: 178, lr: 1.0e-02, train_loss: 0.9625, train_acc: 0.6536 test_loss: 0.9871, test_acc: 0.6481, best: 0.6667, time: 0:00:49
 Epoch: 179, lr: 1.0e-02, train_loss: 0.9510, train_acc: 0.6582 test_loss: 0.9393, test_acc: 0.6649, best: 0.6667, time: 0:00:49
 Epoch: 180, lr: 2.0e-03, train_loss: 0.8814, train_acc: 0.6718 test_loss: 0.9252, test_acc: 0.6703, best: 0.6703, time: 0:00:49
 Epoch: 181, lr: 2.0e-03, train_loss: 0.8508, train_acc: 0.6948 test_loss: 0.9086, test_acc: 0.6767, best: 0.6767, time: 0:00:49
 Epoch: 182, lr: 2.0e-03, train_loss: 0.8761, train_acc: 0.6838 test_loss: 0.9058, test_acc: 0.6757, best: 0.6767, time: 0:00:49
 Epoch: 183, lr: 2.0e-03, train_loss: 0.8409, train_acc: 0.6988 test_loss: 0.8928, test_acc: 0.6864, best: 0.6864, time: 0:00:49
 Epoch: 184, lr: 2.0e-03, train_loss: 0.8325, train_acc: 0.7022 test_loss: 0.9252, test_acc: 0.6719, best: 0.6864, time: 0:00:49
 Epoch: 185, lr: 2.0e-03, train_loss: 0.8215, train_acc: 0.7058 test_loss: 0.9245, test_acc: 0.6733, best: 0.6864, time: 0:00:49
 Epoch: 186, lr: 2.0e-03, train_loss: 0.8379, train_acc: 0.6996 test_loss: 0.9024, test_acc: 0.6814, best: 0.6864, time: 0:00:49
 Epoch: 187, lr: 2.0e-03, train_loss: 0.8164, train_acc: 0.7110 test_loss: 0.9022, test_acc: 0.6797, best: 0.6864, time: 0:00:49
 Epoch: 188, lr: 2.0e-03, train_loss: 0.8142, train_acc: 0.7122 test_loss: 0.9031, test_acc: 0.6787, best: 0.6864, time: 0:00:49
 Epoch: 189, lr: 2.0e-03, train_loss: 0.8359, train_acc: 0.7018 test_loss: 0.9138, test_acc: 0.6764, best: 0.6864, time: 0:00:49
 Epoch: 190, lr: 2.0e-03, train_loss: 0.8215, train_acc: 0.7106 test_loss: 0.9184, test_acc: 0.6794, best: 0.6864, time: 0:00:49
 Epoch: 191, lr: 2.0e-03, train_loss: 0.8018, train_acc: 0.7214 test_loss: 0.9166, test_acc: 0.6753, best: 0.6864, time: 0:00:49
 Epoch: 192, lr: 2.0e-03, train_loss: 0.8135, train_acc: 0.7106 test_loss: 0.9189, test_acc: 0.6775, best: 0.6864, time: 0:00:49
 Epoch: 193, lr: 2.0e-03, train_loss: 0.8195, train_acc: 0.7036 test_loss: 0.9123, test_acc: 0.6823, best: 0.6864, time: 0:00:49
 Epoch: 194, lr: 2.0e-03, train_loss: 0.8073, train_acc: 0.7142 test_loss: 0.8917, test_acc: 0.6836, best: 0.6864, time: 0:00:49
 Epoch: 195, lr: 2.0e-03, train_loss: 0.8040, train_acc: 0.7130 test_loss: 0.8995, test_acc: 0.6821, best: 0.6864, time: 0:00:49
 Epoch: 196, lr: 2.0e-03, train_loss: 0.7894, train_acc: 0.7196 test_loss: 0.9339, test_acc: 0.6779, best: 0.6864, time: 0:00:49
 Epoch: 197, lr: 2.0e-03, train_loss: 0.8169, train_acc: 0.7008 test_loss: 0.9024, test_acc: 0.6836, best: 0.6864, time: 0:00:49
 Epoch: 198, lr: 2.0e-03, train_loss: 0.7946, train_acc: 0.7190 test_loss: 0.9148, test_acc: 0.6771, best: 0.6864, time: 0:00:49
 Epoch: 199, lr: 2.0e-03, train_loss: 0.7779, train_acc: 0.7158 test_loss: 0.9004, test_acc: 0.6829, best: 0.6864, time: 0:00:49
 Epoch: 200, lr: 2.0e-03, train_loss: 0.7943, train_acc: 0.7196 test_loss: 0.9101, test_acc: 0.6821, best: 0.6864, time: 0:00:49
 Epoch: 201, lr: 2.0e-03, train_loss: 0.7999, train_acc: 0.7156 test_loss: 0.9087, test_acc: 0.6824, best: 0.6864, time: 0:00:49
 Epoch: 202, lr: 2.0e-03, train_loss: 0.7817, train_acc: 0.7212 test_loss: 0.9156, test_acc: 0.6853, best: 0.6864, time: 0:00:49
 Epoch: 203, lr: 2.0e-03, train_loss: 0.7801, train_acc: 0.7244 test_loss: 0.9142, test_acc: 0.6791, best: 0.6864, time: 0:00:49
 Epoch: 204, lr: 2.0e-03, train_loss: 0.7720, train_acc: 0.7220 test_loss: 0.8849, test_acc: 0.6879, best: 0.6879, time: 0:00:49
 Epoch: 205, lr: 2.0e-03, train_loss: 0.7760, train_acc: 0.7286 test_loss: 0.9117, test_acc: 0.6810, best: 0.6879, time: 0:00:49
 Epoch: 206, lr: 2.0e-03, train_loss: 0.7966, train_acc: 0.7132 test_loss: 0.9042, test_acc: 0.6854, best: 0.6879, time: 0:00:49
 Epoch: 207, lr: 2.0e-03, train_loss: 0.7563, train_acc: 0.7328 test_loss: 0.8872, test_acc: 0.6896, best: 0.6896, time: 0:00:49
 Epoch: 208, lr: 2.0e-03, train_loss: 0.7763, train_acc: 0.7222 test_loss: 0.8998, test_acc: 0.6857, best: 0.6896, time: 0:00:49
 Epoch: 209, lr: 2.0e-03, train_loss: 0.7815, train_acc: 0.7198 test_loss: 0.9286, test_acc: 0.6779, best: 0.6896, time: 0:00:49
 Epoch: 210, lr: 2.0e-03, train_loss: 0.7755, train_acc: 0.7222 test_loss: 0.8950, test_acc: 0.6870, best: 0.6896, time: 0:00:49
 Epoch: 211, lr: 2.0e-03, train_loss: 0.7648, train_acc: 0.7266 test_loss: 0.9075, test_acc: 0.6815, best: 0.6896, time: 0:00:49
 Epoch: 212, lr: 2.0e-03, train_loss: 0.7590, train_acc: 0.7282 test_loss: 0.9066, test_acc: 0.6866, best: 0.6896, time: 0:00:49
 Epoch: 213, lr: 2.0e-03, train_loss: 0.7844, train_acc: 0.7222 test_loss: 0.9020, test_acc: 0.6854, best: 0.6896, time: 0:00:49
 Epoch: 214, lr: 2.0e-03, train_loss: 0.7650, train_acc: 0.7226 test_loss: 0.9153, test_acc: 0.6870, best: 0.6896, time: 0:00:49
 Epoch: 215, lr: 2.0e-03, train_loss: 0.7651, train_acc: 0.7222 test_loss: 0.9068, test_acc: 0.6847, best: 0.6896, time: 0:00:49
 Epoch: 216, lr: 2.0e-03, train_loss: 0.7663, train_acc: 0.7260 test_loss: 0.8943, test_acc: 0.6871, best: 0.6896, time: 0:00:49
 Epoch: 217, lr: 2.0e-03, train_loss: 0.7595, train_acc: 0.7304 test_loss: 0.9070, test_acc: 0.6837, best: 0.6896, time: 0:00:49
 Epoch: 218, lr: 2.0e-03, train_loss: 0.7432, train_acc: 0.7360 test_loss: 0.9017, test_acc: 0.6829, best: 0.6896, time: 0:00:49
 Epoch: 219, lr: 2.0e-03, train_loss: 0.7492, train_acc: 0.7292 test_loss: 0.9291, test_acc: 0.6841, best: 0.6896, time: 0:00:49
 Epoch: 220, lr: 2.0e-03, train_loss: 0.7498, train_acc: 0.7336 test_loss: 0.9053, test_acc: 0.6881, best: 0.6896, time: 0:00:49
 Epoch: 221, lr: 2.0e-03, train_loss: 0.7500, train_acc: 0.7314 test_loss: 0.9070, test_acc: 0.6843, best: 0.6896, time: 0:00:49
 Epoch: 222, lr: 2.0e-03, train_loss: 0.7557, train_acc: 0.7278 test_loss: 0.9235, test_acc: 0.6755, best: 0.6896, time: 0:00:49
 Epoch: 223, lr: 2.0e-03, train_loss: 0.7456, train_acc: 0.7358 test_loss: 0.8913, test_acc: 0.6894, best: 0.6896, time: 0:00:49
 Epoch: 224, lr: 2.0e-03, train_loss: 0.7414, train_acc: 0.7326 test_loss: 0.9004, test_acc: 0.6866, best: 0.6896, time: 0:00:49
 Epoch: 225, lr: 2.0e-03, train_loss: 0.7509, train_acc: 0.7256 test_loss: 0.9572, test_acc: 0.6724, best: 0.6896, time: 0:00:49
 Epoch: 226, lr: 2.0e-03, train_loss: 0.7501, train_acc: 0.7356 test_loss: 0.9099, test_acc: 0.6826, best: 0.6896, time: 0:00:49
 Epoch: 227, lr: 2.0e-03, train_loss: 0.7431, train_acc: 0.7370 test_loss: 0.9276, test_acc: 0.6789, best: 0.6896, time: 0:00:49
 Epoch: 228, lr: 2.0e-03, train_loss: 0.7565, train_acc: 0.7302 test_loss: 0.9144, test_acc: 0.6841, best: 0.6896, time: 0:00:49
 Epoch: 229, lr: 2.0e-03, train_loss: 0.7475, train_acc: 0.7346 test_loss: 0.9087, test_acc: 0.6860, best: 0.6896, time: 0:00:49
 Epoch: 230, lr: 2.0e-03, train_loss: 0.7513, train_acc: 0.7352 test_loss: 0.9267, test_acc: 0.6824, best: 0.6896, time: 0:00:49
 Epoch: 231, lr: 2.0e-03, train_loss: 0.7354, train_acc: 0.7358 test_loss: 0.9249, test_acc: 0.6813, best: 0.6896, time: 0:00:49
 Epoch: 232, lr: 2.0e-03, train_loss: 0.7355, train_acc: 0.7350 test_loss: 0.9081, test_acc: 0.6854, best: 0.6896, time: 0:00:49
 Epoch: 233, lr: 2.0e-03, train_loss: 0.7219, train_acc: 0.7414 test_loss: 0.9071, test_acc: 0.6857, best: 0.6896, time: 0:00:49
 Epoch: 234, lr: 2.0e-03, train_loss: 0.7592, train_acc: 0.7302 test_loss: 0.9099, test_acc: 0.6819, best: 0.6896, time: 0:00:49
 Epoch: 235, lr: 2.0e-03, train_loss: 0.7428, train_acc: 0.7350 test_loss: 0.9097, test_acc: 0.6787, best: 0.6896, time: 0:00:49
 Epoch: 236, lr: 2.0e-03, train_loss: 0.7392, train_acc: 0.7364 test_loss: 0.9099, test_acc: 0.6855, best: 0.6896, time: 0:00:49
 Epoch: 237, lr: 2.0e-03, train_loss: 0.7298, train_acc: 0.7362 test_loss: 0.9107, test_acc: 0.6865, best: 0.6896, time: 0:00:49
 Epoch: 238, lr: 2.0e-03, train_loss: 0.7456, train_acc: 0.7368 test_loss: 0.9053, test_acc: 0.6845, best: 0.6896, time: 0:00:49
 Epoch: 239, lr: 2.0e-03, train_loss: 0.7170, train_acc: 0.7468 test_loss: 0.9186, test_acc: 0.6810, best: 0.6896, time: 0:00:49
 Epoch: 240, lr: 4.0e-04, train_loss: 0.7077, train_acc: 0.7460 test_loss: 0.8960, test_acc: 0.6881, best: 0.6896, time: 0:00:49
 Epoch: 241, lr: 4.0e-04, train_loss: 0.6867, train_acc: 0.7518 test_loss: 0.9044, test_acc: 0.6931, best: 0.6931, time: 0:00:49
 Epoch: 242, lr: 4.0e-04, train_loss: 0.6908, train_acc: 0.7546 test_loss: 0.8963, test_acc: 0.6867, best: 0.6931, time: 0:00:49
 Epoch: 243, lr: 4.0e-04, train_loss: 0.7047, train_acc: 0.7500 test_loss: 0.9085, test_acc: 0.6883, best: 0.6931, time: 0:00:49
 Epoch: 244, lr: 4.0e-04, train_loss: 0.6969, train_acc: 0.7492 test_loss: 0.8976, test_acc: 0.6894, best: 0.6931, time: 0:00:49
 Epoch: 245, lr: 4.0e-04, train_loss: 0.7170, train_acc: 0.7474 test_loss: 0.9124, test_acc: 0.6851, best: 0.6931, time: 0:00:49
 Epoch: 246, lr: 4.0e-04, train_loss: 0.6980, train_acc: 0.7542 test_loss: 0.9090, test_acc: 0.6836, best: 0.6931, time: 0:00:49
 Epoch: 247, lr: 4.0e-04, train_loss: 0.7163, train_acc: 0.7476 test_loss: 0.9036, test_acc: 0.6863, best: 0.6931, time: 0:00:49
 Epoch: 248, lr: 4.0e-04, train_loss: 0.6987, train_acc: 0.7534 test_loss: 0.8993, test_acc: 0.6896, best: 0.6931, time: 0:00:49
 Epoch: 249, lr: 4.0e-04, train_loss: 0.7234, train_acc: 0.7348 test_loss: 0.8886, test_acc: 0.6923, best: 0.6931, time: 0:00:49
 Epoch: 250, lr: 4.0e-04, train_loss: 0.7129, train_acc: 0.7440 test_loss: 0.8894, test_acc: 0.6944, best: 0.6944, time: 0:00:49
 Epoch: 251, lr: 4.0e-04, train_loss: 0.6871, train_acc: 0.7544 test_loss: 0.9104, test_acc: 0.6866, best: 0.6944, time: 0:00:49
 Epoch: 252, lr: 4.0e-04, train_loss: 0.6887, train_acc: 0.7508 test_loss: 0.8969, test_acc: 0.6925, best: 0.6944, time: 0:00:49
 Epoch: 253, lr: 4.0e-04, train_loss: 0.6903, train_acc: 0.7572 test_loss: 0.9016, test_acc: 0.6885, best: 0.6944, time: 0:00:49
 Epoch: 254, lr: 4.0e-04, train_loss: 0.7121, train_acc: 0.7506 test_loss: 0.9051, test_acc: 0.6911, best: 0.6944, time: 0:00:49
 Epoch: 255, lr: 4.0e-04, train_loss: 0.6677, train_acc: 0.7630 test_loss: 0.8991, test_acc: 0.6917, best: 0.6944, time: 0:00:49
 Epoch: 256, lr: 4.0e-04, train_loss: 0.7096, train_acc: 0.7514 test_loss: 0.8990, test_acc: 0.6934, best: 0.6944, time: 0:00:49
 Epoch: 257, lr: 4.0e-04, train_loss: 0.6900, train_acc: 0.7522 test_loss: 0.9152, test_acc: 0.6866, best: 0.6944, time: 0:00:49
 Epoch: 258, lr: 4.0e-04, train_loss: 0.7044, train_acc: 0.7540 test_loss: 0.9157, test_acc: 0.6884, best: 0.6944, time: 0:00:49
 Epoch: 259, lr: 4.0e-04, train_loss: 0.6895, train_acc: 0.7480 test_loss: 0.9092, test_acc: 0.6877, best: 0.6944, time: 0:00:49
 Epoch: 260, lr: 4.0e-04, train_loss: 0.6794, train_acc: 0.7618 test_loss: 0.9047, test_acc: 0.6854, best: 0.6944, time: 0:00:49
 Epoch: 261, lr: 4.0e-04, train_loss: 0.6882, train_acc: 0.7614 test_loss: 0.9021, test_acc: 0.6904, best: 0.6944, time: 0:00:49
 Epoch: 262, lr: 4.0e-04, train_loss: 0.7000, train_acc: 0.7526 test_loss: 0.9151, test_acc: 0.6844, best: 0.6944, time: 0:00:49
 Epoch: 263, lr: 4.0e-04, train_loss: 0.6735, train_acc: 0.7680 test_loss: 0.9038, test_acc: 0.6917, best: 0.6944, time: 0:00:49
 Epoch: 264, lr: 4.0e-04, train_loss: 0.6916, train_acc: 0.7554 test_loss: 0.9266, test_acc: 0.6840, best: 0.6944, time: 0:00:49
 Epoch: 265, lr: 4.0e-04, train_loss: 0.6835, train_acc: 0.7566 test_loss: 0.9109, test_acc: 0.6901, best: 0.6944, time: 0:00:49
 Epoch: 266, lr: 4.0e-04, train_loss: 0.7028, train_acc: 0.7516 test_loss: 0.8977, test_acc: 0.6900, best: 0.6944, time: 0:00:49
 Epoch: 267, lr: 4.0e-04, train_loss: 0.6732, train_acc: 0.7590 test_loss: 0.8895, test_acc: 0.6905, best: 0.6944, time: 0:00:49
 Epoch: 268, lr: 4.0e-04, train_loss: 0.6718, train_acc: 0.7572 test_loss: 0.8917, test_acc: 0.6924, best: 0.6944, time: 0:00:50
 Epoch: 269, lr: 4.0e-04, train_loss: 0.7068, train_acc: 0.7494 test_loss: 0.8945, test_acc: 0.6900, best: 0.6944, time: 0:00:49
 Epoch: 270, lr: 8.0e-05, train_loss: 0.6912, train_acc: 0.7636 test_loss: 0.8997, test_acc: 0.6955, best: 0.6955, time: 0:00:49
 Epoch: 271, lr: 8.0e-05, train_loss: 0.6914, train_acc: 0.7584 test_loss: 0.9078, test_acc: 0.6936, best: 0.6955, time: 0:00:49
 Epoch: 272, lr: 8.0e-05, train_loss: 0.6929, train_acc: 0.7542 test_loss: 0.8937, test_acc: 0.6939, best: 0.6955, time: 0:00:49
 Epoch: 273, lr: 8.0e-05, train_loss: 0.6721, train_acc: 0.7666 test_loss: 0.9001, test_acc: 0.6921, best: 0.6955, time: 0:00:49
 Epoch: 274, lr: 8.0e-05, train_loss: 0.6838, train_acc: 0.7584 test_loss: 0.8982, test_acc: 0.6961, best: 0.6961, time: 0:00:49
 Epoch: 275, lr: 8.0e-05, train_loss: 0.6892, train_acc: 0.7572 test_loss: 0.8947, test_acc: 0.6915, best: 0.6961, time: 0:00:49
 Epoch: 276, lr: 8.0e-05, train_loss: 0.6731, train_acc: 0.7608 test_loss: 0.9069, test_acc: 0.6874, best: 0.6961, time: 0:00:49
 Epoch: 277, lr: 8.0e-05, train_loss: 0.6838, train_acc: 0.7662 test_loss: 0.9125, test_acc: 0.6890, best: 0.6961, time: 0:00:49
 Epoch: 278, lr: 8.0e-05, train_loss: 0.6901, train_acc: 0.7550 test_loss: 0.8814, test_acc: 0.6929, best: 0.6961, time: 0:00:49
 Epoch: 279, lr: 8.0e-05, train_loss: 0.6828, train_acc: 0.7584 test_loss: 0.9064, test_acc: 0.6904, best: 0.6961, time: 0:00:49
 Epoch: 280, lr: 8.0e-05, train_loss: 0.6836, train_acc: 0.7598 test_loss: 0.9046, test_acc: 0.6894, best: 0.6961, time: 0:00:49
 Epoch: 281, lr: 8.0e-05, train_loss: 0.6629, train_acc: 0.7666 test_loss: 0.8917, test_acc: 0.6913, best: 0.6961, time: 0:00:49
 Epoch: 282, lr: 8.0e-05, train_loss: 0.6944, train_acc: 0.7490 test_loss: 0.9045, test_acc: 0.6910, best: 0.6961, time: 0:00:49
 Epoch: 283, lr: 8.0e-05, train_loss: 0.6782, train_acc: 0.7608 test_loss: 0.9151, test_acc: 0.6874, best: 0.6961, time: 0:00:49
 Epoch: 284, lr: 8.0e-05, train_loss: 0.6692, train_acc: 0.7634 test_loss: 0.9036, test_acc: 0.6913, best: 0.6961, time: 0:00:49
 Epoch: 285, lr: 8.0e-05, train_loss: 0.6921, train_acc: 0.7556 test_loss: 0.9079, test_acc: 0.6909, best: 0.6961, time: 0:00:49
 Epoch: 286, lr: 8.0e-05, train_loss: 0.6746, train_acc: 0.7530 test_loss: 0.8996, test_acc: 0.6914, best: 0.6961, time: 0:00:49
 Epoch: 287, lr: 8.0e-05, train_loss: 0.6803, train_acc: 0.7574 test_loss: 0.9014, test_acc: 0.6923, best: 0.6961, time: 0:00:49
 Epoch: 288, lr: 8.0e-05, train_loss: 0.6798, train_acc: 0.7592 test_loss: 0.9145, test_acc: 0.6883, best: 0.6961, time: 0:00:49
 Epoch: 289, lr: 8.0e-05, train_loss: 0.6841, train_acc: 0.7576 test_loss: 0.9209, test_acc: 0.6877, best: 0.6961, time: 0:00:49
 Epoch: 290, lr: 8.0e-05, train_loss: 0.6832, train_acc: 0.7582 test_loss: 0.9232, test_acc: 0.6849, best: 0.6961, time: 0:00:49
 Epoch: 291, lr: 8.0e-05, train_loss: 0.6757, train_acc: 0.7636 test_loss: 0.8873, test_acc: 0.6946, best: 0.6961, time: 0:00:49
 Epoch: 292, lr: 8.0e-05, train_loss: 0.6915, train_acc: 0.7552 test_loss: 0.8895, test_acc: 0.6943, best: 0.6961, time: 0:00:49
 Epoch: 293, lr: 8.0e-05, train_loss: 0.6858, train_acc: 0.7550 test_loss: 0.9241, test_acc: 0.6841, best: 0.6961, time: 0:00:49
 Epoch: 294, lr: 8.0e-05, train_loss: 0.6793, train_acc: 0.7642 test_loss: 0.9001, test_acc: 0.6927, best: 0.6961, time: 0:00:49
 Epoch: 295, lr: 8.0e-05, train_loss: 0.6887, train_acc: 0.7604 test_loss: 0.8956, test_acc: 0.6936, best: 0.6961, time: 0:00:49
 Epoch: 296, lr: 8.0e-05, train_loss: 0.6747, train_acc: 0.7624 test_loss: 0.9000, test_acc: 0.6877, best: 0.6961, time: 0:00:48
 Epoch: 297, lr: 8.0e-05, train_loss: 0.6839, train_acc: 0.7566 test_loss: 0.8877, test_acc: 0.6975, best: 0.6975, time: 0:00:48
 Epoch: 298, lr: 8.0e-05, train_loss: 0.6669, train_acc: 0.7666 test_loss: 0.9174, test_acc: 0.6873, best: 0.6975, time: 0:00:48
 Epoch: 299, lr: 8.0e-05, train_loss: 0.6553, train_acc: 0.7666 test_loss: 0.9013, test_acc: 0.6895, best: 0.6975, time: 0:00:48
 Highest accuracy: 0.6975