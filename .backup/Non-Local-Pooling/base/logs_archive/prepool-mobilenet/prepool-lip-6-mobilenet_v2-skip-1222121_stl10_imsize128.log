
 Run on time: 2022-07-04 20:47:22.611957

 Architecture: prepool-lip-6-mobilenet_v2-skip-1222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "lip",
            "_stride": 6,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : prepool-lip-6-mobilenet_v2-skip-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (conv1_pool): Pool2d(
        (logit): Sequential(
          (pool_weight): LIP_BASE(
            (logit): Sequential(
              (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
          )
        )
        (pool): AvgPool2d(kernel_size=6, stride=6, padding=0)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.6443, train_acc: 0.1432 test_loss: 2.0128, test_acc: 0.2460, best: 0.2460, time: 0:00:49
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1386, train_acc: 0.2046 test_loss: 1.8746, test_acc: 0.2370, best: 0.2460, time: 0:00:48
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0931, train_acc: 0.2020 test_loss: 1.9018, test_acc: 0.2501, best: 0.2501, time: 0:00:49
 Epoch: 4, lr: 1.0e-02, train_loss: 2.0666, train_acc: 0.2198 test_loss: 1.8791, test_acc: 0.2775, best: 0.2775, time: 0:00:49
 Epoch: 5, lr: 1.0e-02, train_loss: 2.0150, train_acc: 0.2246 test_loss: 1.8203, test_acc: 0.2845, best: 0.2845, time: 0:00:49
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9724, train_acc: 0.2496 test_loss: 1.7788, test_acc: 0.3094, best: 0.3094, time: 0:00:49
 Epoch: 7, lr: 1.0e-02, train_loss: 2.0043, train_acc: 0.2372 test_loss: 1.7846, test_acc: 0.3050, best: 0.3094, time: 0:00:49
 Epoch: 8, lr: 1.0e-02, train_loss: 1.9815, train_acc: 0.2406 test_loss: 1.7898, test_acc: 0.2968, best: 0.3094, time: 0:00:49
 Epoch: 9, lr: 1.0e-02, train_loss: 1.9909, train_acc: 0.2246 test_loss: 1.8427, test_acc: 0.2839, best: 0.3094, time: 0:00:49
 Epoch: 10, lr: 1.0e-02, train_loss: 1.9781, train_acc: 0.2372 test_loss: 1.7901, test_acc: 0.3063, best: 0.3094, time: 0:00:49
 Epoch: 11, lr: 1.0e-02, train_loss: 1.9949, train_acc: 0.2300 test_loss: 1.7938, test_acc: 0.3010, best: 0.3094, time: 0:00:49
 Epoch: 12, lr: 1.0e-02, train_loss: 1.9318, train_acc: 0.2714 test_loss: 1.6921, test_acc: 0.3634, best: 0.3634, time: 0:00:49
 Epoch: 13, lr: 1.0e-02, train_loss: 1.9029, train_acc: 0.2780 test_loss: 1.7258, test_acc: 0.3275, best: 0.3634, time: 0:00:49
 Epoch: 14, lr: 1.0e-02, train_loss: 1.9123, train_acc: 0.2644 test_loss: 1.7288, test_acc: 0.3430, best: 0.3634, time: 0:00:49
 Epoch: 15, lr: 1.0e-02, train_loss: 1.8879, train_acc: 0.2718 test_loss: 1.7406, test_acc: 0.3429, best: 0.3634, time: 0:00:49
 Epoch: 16, lr: 1.0e-02, train_loss: 1.8895, train_acc: 0.2812 test_loss: 1.7060, test_acc: 0.3384, best: 0.3634, time: 0:00:49
 Epoch: 17, lr: 1.0e-02, train_loss: 1.8644, train_acc: 0.2838 test_loss: 1.6513, test_acc: 0.3723, best: 0.3723, time: 0:00:49
 Epoch: 18, lr: 1.0e-02, train_loss: 1.8546, train_acc: 0.2910 test_loss: 1.6810, test_acc: 0.3491, best: 0.3723, time: 0:00:49
 Epoch: 19, lr: 1.0e-02, train_loss: 1.8375, train_acc: 0.3022 test_loss: 1.6333, test_acc: 0.3789, best: 0.3789, time: 0:00:49
 Epoch: 20, lr: 1.0e-02, train_loss: 1.8468, train_acc: 0.2900 test_loss: 1.6691, test_acc: 0.3740, best: 0.3789, time: 0:00:49
 Epoch: 21, lr: 1.0e-02, train_loss: 1.8135, train_acc: 0.3028 test_loss: 1.6104, test_acc: 0.3879, best: 0.3879, time: 0:00:49
 Epoch: 22, lr: 1.0e-02, train_loss: 1.8031, train_acc: 0.3098 test_loss: 1.5981, test_acc: 0.3941, best: 0.3941, time: 0:00:49
 Epoch: 23, lr: 1.0e-02, train_loss: 1.7867, train_acc: 0.3136 test_loss: 1.6262, test_acc: 0.3736, best: 0.3941, time: 0:00:49
 Epoch: 24, lr: 1.0e-02, train_loss: 1.7814, train_acc: 0.3152 test_loss: 1.6070, test_acc: 0.3809, best: 0.3941, time: 0:00:49
 Epoch: 25, lr: 1.0e-02, train_loss: 1.7862, train_acc: 0.3214 test_loss: 1.6152, test_acc: 0.3812, best: 0.3941, time: 0:00:49
 Epoch: 26, lr: 1.0e-02, train_loss: 1.7636, train_acc: 0.3330 test_loss: 1.6404, test_acc: 0.3786, best: 0.3941, time: 0:00:49
 Epoch: 27, lr: 1.0e-02, train_loss: 1.8443, train_acc: 0.3012 test_loss: 1.6236, test_acc: 0.3849, best: 0.3941, time: 0:00:49
 Epoch: 28, lr: 1.0e-02, train_loss: 1.7616, train_acc: 0.3250 test_loss: 1.5848, test_acc: 0.3947, best: 0.3947, time: 0:00:49
 Epoch: 29, lr: 1.0e-02, train_loss: 1.7635, train_acc: 0.3286 test_loss: 1.5675, test_acc: 0.3801, best: 0.3947, time: 0:00:49
 Epoch: 30, lr: 1.0e-02, train_loss: 1.7274, train_acc: 0.3364 test_loss: 1.5982, test_acc: 0.3992, best: 0.3992, time: 0:00:49
 Epoch: 31, lr: 1.0e-02, train_loss: 1.7212, train_acc: 0.3394 test_loss: 1.5643, test_acc: 0.4070, best: 0.4070, time: 0:00:49
 Epoch: 32, lr: 1.0e-02, train_loss: 1.7383, train_acc: 0.3390 test_loss: 1.5542, test_acc: 0.4148, best: 0.4148, time: 0:00:49
 Epoch: 33, lr: 1.0e-02, train_loss: 1.7522, train_acc: 0.3386 test_loss: 1.6603, test_acc: 0.3691, best: 0.4148, time: 0:00:49
 Epoch: 34, lr: 1.0e-02, train_loss: 1.7587, train_acc: 0.3302 test_loss: 1.5974, test_acc: 0.3935, best: 0.4148, time: 0:00:49
 Epoch: 35, lr: 1.0e-02, train_loss: 1.7332, train_acc: 0.3390 test_loss: 1.5479, test_acc: 0.4139, best: 0.4148, time: 0:00:49
 Epoch: 36, lr: 1.0e-02, train_loss: 1.7040, train_acc: 0.3502 test_loss: 1.5185, test_acc: 0.4181, best: 0.4181, time: 0:00:49
 Epoch: 37, lr: 1.0e-02, train_loss: 1.7154, train_acc: 0.3420 test_loss: 1.5599, test_acc: 0.4114, best: 0.4181, time: 0:00:49
 Epoch: 38, lr: 1.0e-02, train_loss: 1.6815, train_acc: 0.3596 test_loss: 1.5346, test_acc: 0.4245, best: 0.4245, time: 0:00:49
 Epoch: 39, lr: 1.0e-02, train_loss: 1.7069, train_acc: 0.3416 test_loss: 1.5390, test_acc: 0.4129, best: 0.4245, time: 0:00:49
 Epoch: 40, lr: 1.0e-02, train_loss: 1.7045, train_acc: 0.3482 test_loss: 1.5569, test_acc: 0.4108, best: 0.4245, time: 0:00:49
 Epoch: 41, lr: 1.0e-02, train_loss: 1.6550, train_acc: 0.3670 test_loss: 1.5499, test_acc: 0.3894, best: 0.4245, time: 0:00:49
 Epoch: 42, lr: 1.0e-02, train_loss: 1.6394, train_acc: 0.3660 test_loss: 1.5836, test_acc: 0.4037, best: 0.4245, time: 0:00:49
 Epoch: 43, lr: 1.0e-02, train_loss: 1.6796, train_acc: 0.3686 test_loss: 1.4962, test_acc: 0.4289, best: 0.4289, time: 0:00:49
 Epoch: 44, lr: 1.0e-02, train_loss: 1.6562, train_acc: 0.3682 test_loss: 1.4808, test_acc: 0.4275, best: 0.4289, time: 0:00:49
 Epoch: 45, lr: 1.0e-02, train_loss: 1.6542, train_acc: 0.3756 test_loss: 1.5428, test_acc: 0.4128, best: 0.4289, time: 0:00:49
 Epoch: 46, lr: 1.0e-02, train_loss: 1.6157, train_acc: 0.3860 test_loss: 1.4530, test_acc: 0.4511, best: 0.4511, time: 0:00:49
 Epoch: 47, lr: 1.0e-02, train_loss: 1.6665, train_acc: 0.3652 test_loss: 1.4957, test_acc: 0.4311, best: 0.4511, time: 0:00:49
 Epoch: 48, lr: 1.0e-02, train_loss: 1.6288, train_acc: 0.3762 test_loss: 1.4774, test_acc: 0.4481, best: 0.4511, time: 0:00:49
 Epoch: 49, lr: 1.0e-02, train_loss: 1.6280, train_acc: 0.3804 test_loss: 1.4388, test_acc: 0.4591, best: 0.4591, time: 0:00:49
 Epoch: 50, lr: 1.0e-02, train_loss: 1.5924, train_acc: 0.4000 test_loss: 1.4628, test_acc: 0.4516, best: 0.4591, time: 0:00:49
 Epoch: 51, lr: 1.0e-02, train_loss: 1.6002, train_acc: 0.3968 test_loss: 1.4345, test_acc: 0.4594, best: 0.4594, time: 0:00:49
 Epoch: 52, lr: 1.0e-02, train_loss: 1.5975, train_acc: 0.3968 test_loss: 1.4914, test_acc: 0.4396, best: 0.4594, time: 0:00:49
 Epoch: 53, lr: 1.0e-02, train_loss: 1.5842, train_acc: 0.4076 test_loss: 1.4024, test_acc: 0.4671, best: 0.4671, time: 0:00:49
 Epoch: 54, lr: 1.0e-02, train_loss: 1.5624, train_acc: 0.4094 test_loss: 1.4242, test_acc: 0.4744, best: 0.4744, time: 0:00:49
 Epoch: 55, lr: 1.0e-02, train_loss: 1.5607, train_acc: 0.4080 test_loss: 1.4218, test_acc: 0.4566, best: 0.4744, time: 0:00:49
 Epoch: 56, lr: 1.0e-02, train_loss: 1.6130, train_acc: 0.3952 test_loss: 1.4124, test_acc: 0.4655, best: 0.4744, time: 0:00:49
 Epoch: 57, lr: 1.0e-02, train_loss: 1.6030, train_acc: 0.4004 test_loss: 1.4306, test_acc: 0.4619, best: 0.4744, time: 0:00:49
 Epoch: 58, lr: 1.0e-02, train_loss: 1.5687, train_acc: 0.4042 test_loss: 1.4077, test_acc: 0.4715, best: 0.4744, time: 0:00:49
 Epoch: 59, lr: 1.0e-02, train_loss: 1.5624, train_acc: 0.4144 test_loss: 1.4148, test_acc: 0.4715, best: 0.4744, time: 0:00:49
 Epoch: 60, lr: 1.0e-02, train_loss: 1.5402, train_acc: 0.4188 test_loss: 1.4070, test_acc: 0.4650, best: 0.4744, time: 0:00:49
 Epoch: 61, lr: 1.0e-02, train_loss: 1.5255, train_acc: 0.4282 test_loss: 1.3649, test_acc: 0.4838, best: 0.4838, time: 0:00:49
 Epoch: 62, lr: 1.0e-02, train_loss: 1.5546, train_acc: 0.4164 test_loss: 1.3876, test_acc: 0.4820, best: 0.4838, time: 0:00:49
 Epoch: 63, lr: 1.0e-02, train_loss: 1.4945, train_acc: 0.4400 test_loss: 1.3800, test_acc: 0.4876, best: 0.4876, time: 0:00:49
 Epoch: 64, lr: 1.0e-02, train_loss: 1.5006, train_acc: 0.4486 test_loss: 1.4161, test_acc: 0.4719, best: 0.4876, time: 0:00:49
 Epoch: 65, lr: 1.0e-02, train_loss: 1.4882, train_acc: 0.4390 test_loss: 1.3374, test_acc: 0.4965, best: 0.4965, time: 0:00:49
 Epoch: 66, lr: 1.0e-02, train_loss: 1.4850, train_acc: 0.4506 test_loss: 1.3517, test_acc: 0.5018, best: 0.5018, time: 0:00:49
 Epoch: 67, lr: 1.0e-02, train_loss: 1.4855, train_acc: 0.4468 test_loss: 1.3492, test_acc: 0.4939, best: 0.5018, time: 0:00:49
 Epoch: 68, lr: 1.0e-02, train_loss: 1.4691, train_acc: 0.4596 test_loss: 1.3369, test_acc: 0.5059, best: 0.5059, time: 0:00:49
 Epoch: 69, lr: 1.0e-02, train_loss: 1.4746, train_acc: 0.4486 test_loss: 1.3286, test_acc: 0.5030, best: 0.5059, time: 0:00:49
 Epoch: 70, lr: 1.0e-02, train_loss: 1.4709, train_acc: 0.4538 test_loss: 1.3182, test_acc: 0.5104, best: 0.5104, time: 0:00:49
 Epoch: 71, lr: 1.0e-02, train_loss: 1.4744, train_acc: 0.4432 test_loss: 1.3190, test_acc: 0.5160, best: 0.5160, time: 0:00:49
 Epoch: 72, lr: 1.0e-02, train_loss: 1.4547, train_acc: 0.4598 test_loss: 1.2911, test_acc: 0.5215, best: 0.5215, time: 0:00:49
 Epoch: 73, lr: 1.0e-02, train_loss: 1.4801, train_acc: 0.4424 test_loss: 1.3448, test_acc: 0.5112, best: 0.5215, time: 0:00:49
 Epoch: 74, lr: 1.0e-02, train_loss: 1.4854, train_acc: 0.4478 test_loss: 1.3513, test_acc: 0.4996, best: 0.5215, time: 0:00:49
 Epoch: 75, lr: 1.0e-02, train_loss: 1.4662, train_acc: 0.4610 test_loss: 1.3650, test_acc: 0.4968, best: 0.5215, time: 0:00:49
 Epoch: 76, lr: 1.0e-02, train_loss: 1.4466, train_acc: 0.4656 test_loss: 1.3203, test_acc: 0.5125, best: 0.5215, time: 0:00:49
 Epoch: 77, lr: 1.0e-02, train_loss: 1.4308, train_acc: 0.4734 test_loss: 1.3502, test_acc: 0.5042, best: 0.5215, time: 0:00:49
 Epoch: 78, lr: 1.0e-02, train_loss: 1.4430, train_acc: 0.4626 test_loss: 1.3182, test_acc: 0.5128, best: 0.5215, time: 0:00:49
 Epoch: 79, lr: 1.0e-02, train_loss: 1.4341, train_acc: 0.4684 test_loss: 1.3118, test_acc: 0.5171, best: 0.5215, time: 0:00:49
 Epoch: 80, lr: 1.0e-02, train_loss: 1.4355, train_acc: 0.4676 test_loss: 1.2680, test_acc: 0.5304, best: 0.5304, time: 0:00:49
 Epoch: 81, lr: 1.0e-02, train_loss: 1.4052, train_acc: 0.4756 test_loss: 1.2721, test_acc: 0.5235, best: 0.5304, time: 0:00:49
 Epoch: 82, lr: 1.0e-02, train_loss: 1.4291, train_acc: 0.4728 test_loss: 1.2533, test_acc: 0.5306, best: 0.5306, time: 0:00:49
 Epoch: 83, lr: 1.0e-02, train_loss: 1.4184, train_acc: 0.4728 test_loss: 1.2882, test_acc: 0.5198, best: 0.5306, time: 0:00:49
 Epoch: 84, lr: 1.0e-02, train_loss: 1.4083, train_acc: 0.4780 test_loss: 1.2761, test_acc: 0.5321, best: 0.5321, time: 0:00:49
 Epoch: 85, lr: 1.0e-02, train_loss: 1.3998, train_acc: 0.4820 test_loss: 1.3406, test_acc: 0.5060, best: 0.5321, time: 0:00:49
 Epoch: 86, lr: 1.0e-02, train_loss: 1.4277, train_acc: 0.4704 test_loss: 1.3229, test_acc: 0.5152, best: 0.5321, time: 0:00:49
 Epoch: 87, lr: 1.0e-02, train_loss: 1.4165, train_acc: 0.4760 test_loss: 1.2872, test_acc: 0.5239, best: 0.5321, time: 0:00:49
 Epoch: 88, lr: 1.0e-02, train_loss: 1.4248, train_acc: 0.4732 test_loss: 1.2871, test_acc: 0.5231, best: 0.5321, time: 0:00:49
 Epoch: 89, lr: 1.0e-02, train_loss: 1.4181, train_acc: 0.4778 test_loss: 1.2983, test_acc: 0.5212, best: 0.5321, time: 0:00:49
 Epoch: 90, lr: 1.0e-02, train_loss: 1.3938, train_acc: 0.4820 test_loss: 1.2698, test_acc: 0.5294, best: 0.5321, time: 0:00:49
 Epoch: 91, lr: 1.0e-02, train_loss: 1.3813, train_acc: 0.4956 test_loss: 1.2855, test_acc: 0.5184, best: 0.5321, time: 0:00:49
 Epoch: 92, lr: 1.0e-02, train_loss: 1.4104, train_acc: 0.4822 test_loss: 1.2323, test_acc: 0.5430, best: 0.5430, time: 0:00:49
 Epoch: 93, lr: 1.0e-02, train_loss: 1.3813, train_acc: 0.4890 test_loss: 1.2808, test_acc: 0.5241, best: 0.5430, time: 0:00:49
 Epoch: 94, lr: 1.0e-02, train_loss: 1.3795, train_acc: 0.4884 test_loss: 1.2409, test_acc: 0.5353, best: 0.5430, time: 0:00:49
 Epoch: 95, lr: 1.0e-02, train_loss: 1.3712, train_acc: 0.4956 test_loss: 1.2645, test_acc: 0.5346, best: 0.5430, time: 0:00:49
 Epoch: 96, lr: 1.0e-02, train_loss: 1.3752, train_acc: 0.4884 test_loss: 1.2594, test_acc: 0.5453, best: 0.5453, time: 0:00:49
 Epoch: 97, lr: 1.0e-02, train_loss: 1.3677, train_acc: 0.4972 test_loss: 1.2437, test_acc: 0.5355, best: 0.5453, time: 0:00:49
 Epoch: 98, lr: 1.0e-02, train_loss: 1.4046, train_acc: 0.4806 test_loss: 1.2410, test_acc: 0.5443, best: 0.5453, time: 0:00:49
 Epoch: 99, lr: 1.0e-02, train_loss: 1.3807, train_acc: 0.4910 test_loss: 1.2288, test_acc: 0.5460, best: 0.5460, time: 0:00:49
 Epoch: 100, lr: 1.0e-02, train_loss: 1.3620, train_acc: 0.4982 test_loss: 1.1953, test_acc: 0.5643, best: 0.5643, time: 0:00:49
 Epoch: 101, lr: 1.0e-02, train_loss: 1.3589, train_acc: 0.4984 test_loss: 1.2062, test_acc: 0.5546, best: 0.5643, time: 0:00:49
 Epoch: 102, lr: 1.0e-02, train_loss: 1.3083, train_acc: 0.5172 test_loss: 1.1791, test_acc: 0.5667, best: 0.5667, time: 0:00:49
 Epoch: 103, lr: 1.0e-02, train_loss: 1.3459, train_acc: 0.5066 test_loss: 1.1947, test_acc: 0.5576, best: 0.5667, time: 0:00:49
 Epoch: 104, lr: 1.0e-02, train_loss: 1.3271, train_acc: 0.5124 test_loss: 1.1792, test_acc: 0.5709, best: 0.5709, time: 0:00:49
 Epoch: 105, lr: 1.0e-02, train_loss: 1.3099, train_acc: 0.5212 test_loss: 1.2066, test_acc: 0.5584, best: 0.5709, time: 0:00:49
 Epoch: 106, lr: 1.0e-02, train_loss: 1.3284, train_acc: 0.5110 test_loss: 1.1755, test_acc: 0.5703, best: 0.5709, time: 0:00:49
 Epoch: 107, lr: 1.0e-02, train_loss: 1.3034, train_acc: 0.5312 test_loss: 1.1928, test_acc: 0.5524, best: 0.5709, time: 0:00:49
 Epoch: 108, lr: 1.0e-02, train_loss: 1.3082, train_acc: 0.5224 test_loss: 1.1645, test_acc: 0.5814, best: 0.5814, time: 0:00:49
 Epoch: 109, lr: 1.0e-02, train_loss: 1.2910, train_acc: 0.5322 test_loss: 1.2374, test_acc: 0.5510, best: 0.5814, time: 0:00:49
 Epoch: 110, lr: 1.0e-02, train_loss: 1.2880, train_acc: 0.5374 test_loss: 1.1676, test_acc: 0.5737, best: 0.5814, time: 0:00:49
 Epoch: 111, lr: 1.0e-02, train_loss: 1.2922, train_acc: 0.5306 test_loss: 1.1754, test_acc: 0.5761, best: 0.5814, time: 0:00:49
 Epoch: 112, lr: 1.0e-02, train_loss: 1.3023, train_acc: 0.5188 test_loss: 1.1565, test_acc: 0.5793, best: 0.5814, time: 0:00:49
 Epoch: 113, lr: 1.0e-02, train_loss: 1.2864, train_acc: 0.5348 test_loss: 1.1292, test_acc: 0.5905, best: 0.5905, time: 0:00:49
 Epoch: 114, lr: 1.0e-02, train_loss: 1.2961, train_acc: 0.5274 test_loss: 1.1376, test_acc: 0.5845, best: 0.5905, time: 0:00:49
 Epoch: 115, lr: 1.0e-02, train_loss: 1.2962, train_acc: 0.5250 test_loss: 1.1736, test_acc: 0.5690, best: 0.5905, time: 0:00:49
 Epoch: 116, lr: 1.0e-02, train_loss: 1.2733, train_acc: 0.5332 test_loss: 1.2200, test_acc: 0.5497, best: 0.5905, time: 0:00:49
 Epoch: 117, lr: 1.0e-02, train_loss: 1.2830, train_acc: 0.5292 test_loss: 1.1962, test_acc: 0.5615, best: 0.5905, time: 0:00:49
 Epoch: 118, lr: 1.0e-02, train_loss: 1.2637, train_acc: 0.5336 test_loss: 1.1831, test_acc: 0.5576, best: 0.5905, time: 0:00:49
 Epoch: 119, lr: 1.0e-02, train_loss: 1.2481, train_acc: 0.5452 test_loss: 1.1185, test_acc: 0.5865, best: 0.5905, time: 0:00:49
 Epoch: 120, lr: 1.0e-02, train_loss: 1.2368, train_acc: 0.5464 test_loss: 1.1483, test_acc: 0.5789, best: 0.5905, time: 0:00:49
 Epoch: 121, lr: 1.0e-02, train_loss: 1.2556, train_acc: 0.5450 test_loss: 1.1535, test_acc: 0.5735, best: 0.5905, time: 0:00:49
 Epoch: 122, lr: 1.0e-02, train_loss: 1.2449, train_acc: 0.5446 test_loss: 1.1328, test_acc: 0.5942, best: 0.5942, time: 0:00:49
 Epoch: 123, lr: 1.0e-02, train_loss: 1.2437, train_acc: 0.5470 test_loss: 1.1110, test_acc: 0.5960, best: 0.5960, time: 0:00:49
 Epoch: 124, lr: 1.0e-02, train_loss: 1.2178, train_acc: 0.5562 test_loss: 1.1592, test_acc: 0.5814, best: 0.5960, time: 0:00:49
 Epoch: 125, lr: 1.0e-02, train_loss: 1.2267, train_acc: 0.5616 test_loss: 1.1641, test_acc: 0.5781, best: 0.5960, time: 0:00:49
 Epoch: 126, lr: 1.0e-02, train_loss: 1.2401, train_acc: 0.5480 test_loss: 1.1148, test_acc: 0.5927, best: 0.5960, time: 0:00:49
 Epoch: 127, lr: 1.0e-02, train_loss: 1.2262, train_acc: 0.5612 test_loss: 1.1074, test_acc: 0.5990, best: 0.5990, time: 0:00:49
 Epoch: 128, lr: 1.0e-02, train_loss: 1.2363, train_acc: 0.5478 test_loss: 1.1226, test_acc: 0.5873, best: 0.5990, time: 0:00:49
 Epoch: 129, lr: 1.0e-02, train_loss: 1.2368, train_acc: 0.5520 test_loss: 1.1349, test_acc: 0.5826, best: 0.5990, time: 0:00:49
 Epoch: 130, lr: 1.0e-02, train_loss: 1.2206, train_acc: 0.5504 test_loss: 1.1180, test_acc: 0.5929, best: 0.5990, time: 0:00:49
 Epoch: 131, lr: 1.0e-02, train_loss: 1.2178, train_acc: 0.5516 test_loss: 1.1154, test_acc: 0.5924, best: 0.5990, time: 0:00:49
 Epoch: 132, lr: 1.0e-02, train_loss: 1.2293, train_acc: 0.5536 test_loss: 1.1456, test_acc: 0.5849, best: 0.5990, time: 0:00:49
 Epoch: 133, lr: 1.0e-02, train_loss: 1.2430, train_acc: 0.5462 test_loss: 1.0780, test_acc: 0.6119, best: 0.6119, time: 0:00:49
 Epoch: 134, lr: 1.0e-02, train_loss: 1.2258, train_acc: 0.5632 test_loss: 1.1235, test_acc: 0.5907, best: 0.6119, time: 0:00:49
 Epoch: 135, lr: 1.0e-02, train_loss: 1.2163, train_acc: 0.5616 test_loss: 1.1486, test_acc: 0.5811, best: 0.6119, time: 0:00:49
 Epoch: 136, lr: 1.0e-02, train_loss: 1.2201, train_acc: 0.5508 test_loss: 1.0995, test_acc: 0.5964, best: 0.6119, time: 0:00:49
 Epoch: 137, lr: 1.0e-02, train_loss: 1.2107, train_acc: 0.5652 test_loss: 1.0956, test_acc: 0.5999, best: 0.6119, time: 0:00:49
 Epoch: 138, lr: 1.0e-02, train_loss: 1.1808, train_acc: 0.5706 test_loss: 1.1215, test_acc: 0.5934, best: 0.6119, time: 0:00:49
 Epoch: 139, lr: 1.0e-02, train_loss: 1.1913, train_acc: 0.5672 test_loss: 1.1564, test_acc: 0.5821, best: 0.6119, time: 0:00:49
 Epoch: 140, lr: 1.0e-02, train_loss: 1.1938, train_acc: 0.5676 test_loss: 1.0983, test_acc: 0.5965, best: 0.6119, time: 0:00:49
 Epoch: 141, lr: 1.0e-02, train_loss: 1.2013, train_acc: 0.5654 test_loss: 1.0704, test_acc: 0.6041, best: 0.6119, time: 0:00:49
 Epoch: 142, lr: 1.0e-02, train_loss: 1.1744, train_acc: 0.5692 test_loss: 1.1625, test_acc: 0.5763, best: 0.6119, time: 0:00:49
 Epoch: 143, lr: 1.0e-02, train_loss: 1.1780, train_acc: 0.5700 test_loss: 1.1371, test_acc: 0.5837, best: 0.6119, time: 0:00:49
 Epoch: 144, lr: 1.0e-02, train_loss: 1.1978, train_acc: 0.5612 test_loss: 1.0876, test_acc: 0.6024, best: 0.6119, time: 0:00:49
 Epoch: 145, lr: 1.0e-02, train_loss: 1.1855, train_acc: 0.5636 test_loss: 1.1264, test_acc: 0.5843, best: 0.6119, time: 0:00:49
 Epoch: 146, lr: 1.0e-02, train_loss: 1.1656, train_acc: 0.5736 test_loss: 1.0755, test_acc: 0.6146, best: 0.6146, time: 0:00:49
 Epoch: 147, lr: 1.0e-02, train_loss: 1.1756, train_acc: 0.5714 test_loss: 1.1214, test_acc: 0.5914, best: 0.6146, time: 0:00:49
 Epoch: 148, lr: 1.0e-02, train_loss: 1.1593, train_acc: 0.5772 test_loss: 1.1139, test_acc: 0.5954, best: 0.6146, time: 0:00:49
 Epoch: 149, lr: 1.0e-02, train_loss: 1.1873, train_acc: 0.5668 test_loss: 1.1418, test_acc: 0.5844, best: 0.6146, time: 0:00:49
 Epoch: 150, lr: 1.0e-02, train_loss: 1.1758, train_acc: 0.5704 test_loss: 1.1240, test_acc: 0.5900, best: 0.6146, time: 0:00:49
 Epoch: 151, lr: 1.0e-02, train_loss: 1.1723, train_acc: 0.5724 test_loss: 1.1053, test_acc: 0.6008, best: 0.6146, time: 0:00:49
 Epoch: 152, lr: 1.0e-02, train_loss: 1.1601, train_acc: 0.5780 test_loss: 1.0668, test_acc: 0.6209, best: 0.6209, time: 0:00:49
 Epoch: 153, lr: 1.0e-02, train_loss: 1.1604, train_acc: 0.5760 test_loss: 1.0910, test_acc: 0.6056, best: 0.6209, time: 0:00:49
 Epoch: 154, lr: 1.0e-02, train_loss: 1.1747, train_acc: 0.5758 test_loss: 1.0772, test_acc: 0.6090, best: 0.6209, time: 0:00:49
 Epoch: 155, lr: 1.0e-02, train_loss: 1.1320, train_acc: 0.5918 test_loss: 1.0746, test_acc: 0.6106, best: 0.6209, time: 0:00:49
 Epoch: 156, lr: 1.0e-02, train_loss: 1.1396, train_acc: 0.5822 test_loss: 1.0626, test_acc: 0.6145, best: 0.6209, time: 0:00:49
 Epoch: 157, lr: 1.0e-02, train_loss: 1.1559, train_acc: 0.5824 test_loss: 1.0876, test_acc: 0.6056, best: 0.6209, time: 0:00:49
 Epoch: 158, lr: 1.0e-02, train_loss: 1.1624, train_acc: 0.5840 test_loss: 1.0921, test_acc: 0.6052, best: 0.6209, time: 0:00:49
 Epoch: 159, lr: 1.0e-02, train_loss: 1.1606, train_acc: 0.5780 test_loss: 1.1008, test_acc: 0.6029, best: 0.6209, time: 0:00:49
 Epoch: 160, lr: 1.0e-02, train_loss: 1.1392, train_acc: 0.5894 test_loss: 1.0401, test_acc: 0.6239, best: 0.6239, time: 0:00:49
 Epoch: 161, lr: 1.0e-02, train_loss: 1.1656, train_acc: 0.5786 test_loss: 1.0960, test_acc: 0.5941, best: 0.6239, time: 0:00:49
 Epoch: 162, lr: 1.0e-02, train_loss: 1.1512, train_acc: 0.5868 test_loss: 1.0842, test_acc: 0.6074, best: 0.6239, time: 0:00:49
 Epoch: 163, lr: 1.0e-02, train_loss: 1.1260, train_acc: 0.5910 test_loss: 1.0586, test_acc: 0.6142, best: 0.6239, time: 0:00:49
 Epoch: 164, lr: 1.0e-02, train_loss: 1.1280, train_acc: 0.5878 test_loss: 1.0714, test_acc: 0.6078, best: 0.6239, time: 0:00:49
 Epoch: 165, lr: 1.0e-02, train_loss: 1.1343, train_acc: 0.5870 test_loss: 1.0873, test_acc: 0.6021, best: 0.6239, time: 0:00:49
 Epoch: 166, lr: 1.0e-02, train_loss: 1.1569, train_acc: 0.5876 test_loss: 1.1468, test_acc: 0.5971, best: 0.6239, time: 0:00:49
 Epoch: 167, lr: 1.0e-02, train_loss: 1.1261, train_acc: 0.5910 test_loss: 1.1096, test_acc: 0.6008, best: 0.6239, time: 0:00:49
 Epoch: 168, lr: 1.0e-02, train_loss: 1.1264, train_acc: 0.5936 test_loss: 1.1064, test_acc: 0.6005, best: 0.6239, time: 0:00:49
 Epoch: 169, lr: 1.0e-02, train_loss: 1.1204, train_acc: 0.5950 test_loss: 1.0426, test_acc: 0.6298, best: 0.6298, time: 0:00:49
 Epoch: 170, lr: 1.0e-02, train_loss: 1.1268, train_acc: 0.5866 test_loss: 1.0448, test_acc: 0.6212, best: 0.6298, time: 0:00:49
 Epoch: 171, lr: 1.0e-02, train_loss: 1.0990, train_acc: 0.5982 test_loss: 1.0749, test_acc: 0.6119, best: 0.6298, time: 0:00:49
 Epoch: 172, lr: 1.0e-02, train_loss: 1.0950, train_acc: 0.6084 test_loss: 1.0340, test_acc: 0.6228, best: 0.6298, time: 0:00:49
 Epoch: 173, lr: 1.0e-02, train_loss: 1.1126, train_acc: 0.6002 test_loss: 1.0686, test_acc: 0.6146, best: 0.6298, time: 0:00:49
 Epoch: 174, lr: 1.0e-02, train_loss: 1.1115, train_acc: 0.5976 test_loss: 1.0655, test_acc: 0.6162, best: 0.6298, time: 0:00:49
 Epoch: 175, lr: 1.0e-02, train_loss: 1.0715, train_acc: 0.6096 test_loss: 1.0428, test_acc: 0.6195, best: 0.6298, time: 0:00:49
 Epoch: 176, lr: 1.0e-02, train_loss: 1.0905, train_acc: 0.6008 test_loss: 1.0551, test_acc: 0.6169, best: 0.6298, time: 0:00:49
 Epoch: 177, lr: 1.0e-02, train_loss: 1.0962, train_acc: 0.6052 test_loss: 1.0552, test_acc: 0.6139, best: 0.6298, time: 0:00:49
 Epoch: 178, lr: 1.0e-02, train_loss: 1.1006, train_acc: 0.6018 test_loss: 1.1206, test_acc: 0.5910, best: 0.6298, time: 0:00:49
 Epoch: 179, lr: 1.0e-02, train_loss: 1.0906, train_acc: 0.6112 test_loss: 1.0562, test_acc: 0.6160, best: 0.6298, time: 0:00:49
 Epoch: 180, lr: 2.0e-03, train_loss: 1.0210, train_acc: 0.6296 test_loss: 0.9890, test_acc: 0.6401, best: 0.6401, time: 0:00:49
 Epoch: 181, lr: 2.0e-03, train_loss: 1.0103, train_acc: 0.6272 test_loss: 0.9811, test_acc: 0.6446, best: 0.6446, time: 0:00:49
 Epoch: 182, lr: 2.0e-03, train_loss: 1.0090, train_acc: 0.6410 test_loss: 0.9853, test_acc: 0.6442, best: 0.6446, time: 0:00:49
 Epoch: 183, lr: 2.0e-03, train_loss: 0.9765, train_acc: 0.6500 test_loss: 0.9631, test_acc: 0.6539, best: 0.6539, time: 0:00:49
 Epoch: 184, lr: 2.0e-03, train_loss: 0.9765, train_acc: 0.6434 test_loss: 0.9914, test_acc: 0.6411, best: 0.6539, time: 0:00:49
 Epoch: 185, lr: 2.0e-03, train_loss: 0.9677, train_acc: 0.6484 test_loss: 0.9768, test_acc: 0.6465, best: 0.6539, time: 0:00:49
 Epoch: 186, lr: 2.0e-03, train_loss: 0.9811, train_acc: 0.6470 test_loss: 0.9726, test_acc: 0.6500, best: 0.6539, time: 0:00:49
 Epoch: 187, lr: 2.0e-03, train_loss: 0.9535, train_acc: 0.6598 test_loss: 0.9904, test_acc: 0.6429, best: 0.6539, time: 0:00:49
 Epoch: 188, lr: 2.0e-03, train_loss: 0.9598, train_acc: 0.6542 test_loss: 0.9816, test_acc: 0.6464, best: 0.6539, time: 0:00:49
 Epoch: 189, lr: 2.0e-03, train_loss: 0.9806, train_acc: 0.6476 test_loss: 0.9944, test_acc: 0.6421, best: 0.6539, time: 0:00:49
 Epoch: 190, lr: 2.0e-03, train_loss: 0.9561, train_acc: 0.6584 test_loss: 0.9716, test_acc: 0.6495, best: 0.6539, time: 0:00:49
 Epoch: 191, lr: 2.0e-03, train_loss: 0.9534, train_acc: 0.6570 test_loss: 0.9715, test_acc: 0.6449, best: 0.6539, time: 0:00:49
 Epoch: 192, lr: 2.0e-03, train_loss: 0.9562, train_acc: 0.6524 test_loss: 0.9714, test_acc: 0.6489, best: 0.6539, time: 0:00:49
 Epoch: 193, lr: 2.0e-03, train_loss: 0.9457, train_acc: 0.6562 test_loss: 0.9869, test_acc: 0.6444, best: 0.6539, time: 0:00:49
 Epoch: 194, lr: 2.0e-03, train_loss: 0.9476, train_acc: 0.6548 test_loss: 0.9713, test_acc: 0.6479, best: 0.6539, time: 0:00:49
 Epoch: 195, lr: 2.0e-03, train_loss: 0.9502, train_acc: 0.6578 test_loss: 0.9662, test_acc: 0.6474, best: 0.6539, time: 0:00:49
 Epoch: 196, lr: 2.0e-03, train_loss: 0.9460, train_acc: 0.6610 test_loss: 0.9941, test_acc: 0.6422, best: 0.6539, time: 0:00:49
 Epoch: 197, lr: 2.0e-03, train_loss: 0.9325, train_acc: 0.6654 test_loss: 0.9858, test_acc: 0.6454, best: 0.6539, time: 0:00:49
 Epoch: 198, lr: 2.0e-03, train_loss: 0.9358, train_acc: 0.6630 test_loss: 0.9981, test_acc: 0.6394, best: 0.6539, time: 0:00:49
 Epoch: 199, lr: 2.0e-03, train_loss: 0.9120, train_acc: 0.6678 test_loss: 0.9890, test_acc: 0.6465, best: 0.6539, time: 0:00:49
 Epoch: 200, lr: 2.0e-03, train_loss: 0.9481, train_acc: 0.6578 test_loss: 0.9967, test_acc: 0.6428, best: 0.6539, time: 0:00:49
 Epoch: 201, lr: 2.0e-03, train_loss: 0.9395, train_acc: 0.6592 test_loss: 0.9716, test_acc: 0.6486, best: 0.6539, time: 0:00:49
 Epoch: 202, lr: 2.0e-03, train_loss: 0.9263, train_acc: 0.6620 test_loss: 0.9771, test_acc: 0.6461, best: 0.6539, time: 0:00:49
 Epoch: 203, lr: 2.0e-03, train_loss: 0.9360, train_acc: 0.6576 test_loss: 0.9793, test_acc: 0.6438, best: 0.6539, time: 0:00:49
 Epoch: 204, lr: 2.0e-03, train_loss: 0.9106, train_acc: 0.6724 test_loss: 0.9759, test_acc: 0.6471, best: 0.6539, time: 0:00:49
 Epoch: 205, lr: 2.0e-03, train_loss: 0.9213, train_acc: 0.6718 test_loss: 1.0023, test_acc: 0.6418, best: 0.6539, time: 0:00:49
 Epoch: 206, lr: 2.0e-03, train_loss: 0.9286, train_acc: 0.6706 test_loss: 0.9777, test_acc: 0.6526, best: 0.6539, time: 0:00:49
 Epoch: 207, lr: 2.0e-03, train_loss: 0.8872, train_acc: 0.6846 test_loss: 0.9891, test_acc: 0.6489, best: 0.6539, time: 0:00:49
 Epoch: 208, lr: 2.0e-03, train_loss: 0.9169, train_acc: 0.6716 test_loss: 0.9630, test_acc: 0.6546, best: 0.6546, time: 0:00:49
 Epoch: 209, lr: 2.0e-03, train_loss: 0.9221, train_acc: 0.6660 test_loss: 0.9666, test_acc: 0.6501, best: 0.6546, time: 0:00:49
 Epoch: 210, lr: 2.0e-03, train_loss: 0.9147, train_acc: 0.6686 test_loss: 0.9569, test_acc: 0.6536, best: 0.6546, time: 0:00:49
 Epoch: 211, lr: 2.0e-03, train_loss: 0.9116, train_acc: 0.6758 test_loss: 0.9770, test_acc: 0.6490, best: 0.6546, time: 0:00:49
 Epoch: 212, lr: 2.0e-03, train_loss: 0.8991, train_acc: 0.6774 test_loss: 0.9631, test_acc: 0.6552, best: 0.6552, time: 0:00:49
 Epoch: 213, lr: 2.0e-03, train_loss: 0.9334, train_acc: 0.6722 test_loss: 0.9601, test_acc: 0.6550, best: 0.6552, time: 0:00:49
 Epoch: 214, lr: 2.0e-03, train_loss: 0.9007, train_acc: 0.6848 test_loss: 0.9757, test_acc: 0.6482, best: 0.6552, time: 0:00:49
 Epoch: 215, lr: 2.0e-03, train_loss: 0.9158, train_acc: 0.6670 test_loss: 0.9890, test_acc: 0.6480, best: 0.6552, time: 0:00:49
 Epoch: 216, lr: 2.0e-03, train_loss: 0.9141, train_acc: 0.6738 test_loss: 0.9743, test_acc: 0.6494, best: 0.6552, time: 0:00:49
 Epoch: 217, lr: 2.0e-03, train_loss: 0.9089, train_acc: 0.6716 test_loss: 0.9619, test_acc: 0.6524, best: 0.6552, time: 0:00:49
 Epoch: 218, lr: 2.0e-03, train_loss: 0.8953, train_acc: 0.6724 test_loss: 0.9680, test_acc: 0.6525, best: 0.6552, time: 0:00:49
 Epoch: 219, lr: 2.0e-03, train_loss: 0.9175, train_acc: 0.6712 test_loss: 0.9745, test_acc: 0.6522, best: 0.6552, time: 0:00:49
 Epoch: 220, lr: 2.0e-03, train_loss: 0.8859, train_acc: 0.6824 test_loss: 0.9828, test_acc: 0.6451, best: 0.6552, time: 0:00:49
 Epoch: 221, lr: 2.0e-03, train_loss: 0.8946, train_acc: 0.6780 test_loss: 0.9894, test_acc: 0.6404, best: 0.6552, time: 0:00:49
 Epoch: 222, lr: 2.0e-03, train_loss: 0.8838, train_acc: 0.6806 test_loss: 0.9861, test_acc: 0.6481, best: 0.6552, time: 0:00:49
 Epoch: 223, lr: 2.0e-03, train_loss: 0.8959, train_acc: 0.6738 test_loss: 0.9727, test_acc: 0.6536, best: 0.6552, time: 0:00:49
 Epoch: 224, lr: 2.0e-03, train_loss: 0.8860, train_acc: 0.6854 test_loss: 0.9839, test_acc: 0.6529, best: 0.6552, time: 0:00:49
 Epoch: 225, lr: 2.0e-03, train_loss: 0.9053, train_acc: 0.6696 test_loss: 0.9932, test_acc: 0.6479, best: 0.6552, time: 0:00:49
 Epoch: 226, lr: 2.0e-03, train_loss: 0.8822, train_acc: 0.6856 test_loss: 1.0049, test_acc: 0.6469, best: 0.6552, time: 0:00:49
 Epoch: 227, lr: 2.0e-03, train_loss: 0.8939, train_acc: 0.6844 test_loss: 0.9724, test_acc: 0.6550, best: 0.6552, time: 0:00:49
 Epoch: 228, lr: 2.0e-03, train_loss: 0.8990, train_acc: 0.6762 test_loss: 0.9550, test_acc: 0.6629, best: 0.6629, time: 0:00:49
 Epoch: 229, lr: 2.0e-03, train_loss: 0.8937, train_acc: 0.6792 test_loss: 0.9849, test_acc: 0.6471, best: 0.6629, time: 0:00:49
 Epoch: 230, lr: 2.0e-03, train_loss: 0.8751, train_acc: 0.6852 test_loss: 0.9955, test_acc: 0.6452, best: 0.6629, time: 0:00:49
 Epoch: 231, lr: 2.0e-03, train_loss: 0.8945, train_acc: 0.6828 test_loss: 0.9761, test_acc: 0.6512, best: 0.6629, time: 0:00:49
 Epoch: 232, lr: 2.0e-03, train_loss: 0.8708, train_acc: 0.6888 test_loss: 1.0048, test_acc: 0.6464, best: 0.6629, time: 0:00:49
 Epoch: 233, lr: 2.0e-03, train_loss: 0.8593, train_acc: 0.6914 test_loss: 0.9788, test_acc: 0.6502, best: 0.6629, time: 0:00:49
 Epoch: 234, lr: 2.0e-03, train_loss: 0.9087, train_acc: 0.6830 test_loss: 0.9683, test_acc: 0.6518, best: 0.6629, time: 0:00:49
 Epoch: 235, lr: 2.0e-03, train_loss: 0.8943, train_acc: 0.6814 test_loss: 0.9700, test_acc: 0.6538, best: 0.6629, time: 0:00:49
 Epoch: 236, lr: 2.0e-03, train_loss: 0.8819, train_acc: 0.6824 test_loss: 0.9884, test_acc: 0.6514, best: 0.6629, time: 0:00:49
 Epoch: 237, lr: 2.0e-03, train_loss: 0.8792, train_acc: 0.6826 test_loss: 0.9775, test_acc: 0.6531, best: 0.6629, time: 0:00:49
 Epoch: 238, lr: 2.0e-03, train_loss: 0.8827, train_acc: 0.6834 test_loss: 0.9840, test_acc: 0.6510, best: 0.6629, time: 0:00:49
 Epoch: 239, lr: 2.0e-03, train_loss: 0.8709, train_acc: 0.6840 test_loss: 0.9737, test_acc: 0.6511, best: 0.6629, time: 0:00:49
 Epoch: 240, lr: 4.0e-04, train_loss: 0.8537, train_acc: 0.6964 test_loss: 0.9660, test_acc: 0.6512, best: 0.6629, time: 0:00:49
 Epoch: 241, lr: 4.0e-04, train_loss: 0.8285, train_acc: 0.7062 test_loss: 0.9734, test_acc: 0.6515, best: 0.6629, time: 0:00:49
 Epoch: 242, lr: 4.0e-04, train_loss: 0.8406, train_acc: 0.7002 test_loss: 0.9654, test_acc: 0.6501, best: 0.6629, time: 0:00:49
 Epoch: 243, lr: 4.0e-04, train_loss: 0.8288, train_acc: 0.7116 test_loss: 0.9756, test_acc: 0.6574, best: 0.6629, time: 0:00:49
 Epoch: 244, lr: 4.0e-04, train_loss: 0.8375, train_acc: 0.7010 test_loss: 0.9799, test_acc: 0.6525, best: 0.6629, time: 0:00:49
 Epoch: 245, lr: 4.0e-04, train_loss: 0.8595, train_acc: 0.6918 test_loss: 0.9693, test_acc: 0.6544, best: 0.6629, time: 0:00:49
 Epoch: 246, lr: 4.0e-04, train_loss: 0.8676, train_acc: 0.6882 test_loss: 0.9706, test_acc: 0.6529, best: 0.6629, time: 0:00:49
 Epoch: 247, lr: 4.0e-04, train_loss: 0.8513, train_acc: 0.6894 test_loss: 0.9692, test_acc: 0.6539, best: 0.6629, time: 0:00:49
 Epoch: 248, lr: 4.0e-04, train_loss: 0.8347, train_acc: 0.6962 test_loss: 0.9640, test_acc: 0.6559, best: 0.6629, time: 0:00:49
 Epoch: 249, lr: 4.0e-04, train_loss: 0.8513, train_acc: 0.6958 test_loss: 0.9600, test_acc: 0.6544, best: 0.6629, time: 0:00:49
 Epoch: 250, lr: 4.0e-04, train_loss: 0.8497, train_acc: 0.6922 test_loss: 0.9643, test_acc: 0.6536, best: 0.6629, time: 0:00:49
 Epoch: 251, lr: 4.0e-04, train_loss: 0.8296, train_acc: 0.7030 test_loss: 0.9726, test_acc: 0.6566, best: 0.6629, time: 0:00:49
 Epoch: 252, lr: 4.0e-04, train_loss: 0.8313, train_acc: 0.6988 test_loss: 0.9692, test_acc: 0.6587, best: 0.6629, time: 0:00:49
 Epoch: 253, lr: 4.0e-04, train_loss: 0.8332, train_acc: 0.7012 test_loss: 0.9632, test_acc: 0.6599, best: 0.6629, time: 0:00:49
 Epoch: 254, lr: 4.0e-04, train_loss: 0.8456, train_acc: 0.6998 test_loss: 0.9670, test_acc: 0.6570, best: 0.6629, time: 0:00:49
 Epoch: 255, lr: 4.0e-04, train_loss: 0.8166, train_acc: 0.7094 test_loss: 0.9552, test_acc: 0.6629, best: 0.6629, time: 0:00:49
 Epoch: 256, lr: 4.0e-04, train_loss: 0.8525, train_acc: 0.6920 test_loss: 0.9738, test_acc: 0.6552, best: 0.6629, time: 0:00:49
 Epoch: 257, lr: 4.0e-04, train_loss: 0.8394, train_acc: 0.6938 test_loss: 0.9859, test_acc: 0.6532, best: 0.6629, time: 0:00:49
 Epoch: 258, lr: 4.0e-04, train_loss: 0.8441, train_acc: 0.6994 test_loss: 0.9765, test_acc: 0.6550, best: 0.6629, time: 0:00:49
 Epoch: 259, lr: 4.0e-04, train_loss: 0.8396, train_acc: 0.7040 test_loss: 0.9720, test_acc: 0.6518, best: 0.6629, time: 0:00:49
 Epoch: 260, lr: 4.0e-04, train_loss: 0.8404, train_acc: 0.6986 test_loss: 0.9644, test_acc: 0.6550, best: 0.6629, time: 0:00:49
 Epoch: 261, lr: 4.0e-04, train_loss: 0.8304, train_acc: 0.7058 test_loss: 0.9615, test_acc: 0.6581, best: 0.6629, time: 0:00:49
 Epoch: 262, lr: 4.0e-04, train_loss: 0.8512, train_acc: 0.6982 test_loss: 0.9740, test_acc: 0.6534, best: 0.6629, time: 0:00:49
 Epoch: 263, lr: 4.0e-04, train_loss: 0.8298, train_acc: 0.7018 test_loss: 0.9572, test_acc: 0.6600, best: 0.6629, time: 0:00:49
 Epoch: 264, lr: 4.0e-04, train_loss: 0.8389, train_acc: 0.7004 test_loss: 0.9652, test_acc: 0.6566, best: 0.6629, time: 0:00:49
 Epoch: 265, lr: 4.0e-04, train_loss: 0.8349, train_acc: 0.7022 test_loss: 0.9669, test_acc: 0.6599, best: 0.6629, time: 0:00:49
 Epoch: 266, lr: 4.0e-04, train_loss: 0.8323, train_acc: 0.6994 test_loss: 0.9615, test_acc: 0.6594, best: 0.6629, time: 0:00:49
 Epoch: 267, lr: 4.0e-04, train_loss: 0.8232, train_acc: 0.6976 test_loss: 0.9744, test_acc: 0.6558, best: 0.6629, time: 0:00:49
 Epoch: 268, lr: 4.0e-04, train_loss: 0.8030, train_acc: 0.7122 test_loss: 0.9734, test_acc: 0.6544, best: 0.6629, time: 0:00:49
 Epoch: 269, lr: 4.0e-04, train_loss: 0.8500, train_acc: 0.7040 test_loss: 0.9576, test_acc: 0.6609, best: 0.6629, time: 0:00:49
 Epoch: 270, lr: 8.0e-05, train_loss: 0.8308, train_acc: 0.7004 test_loss: 0.9623, test_acc: 0.6575, best: 0.6629, time: 0:00:49
 Epoch: 271, lr: 8.0e-05, train_loss: 0.8239, train_acc: 0.7080 test_loss: 0.9686, test_acc: 0.6590, best: 0.6629, time: 0:00:49
 Epoch: 272, lr: 8.0e-05, train_loss: 0.8120, train_acc: 0.7102 test_loss: 0.9721, test_acc: 0.6554, best: 0.6629, time: 0:00:49
 Epoch: 273, lr: 8.0e-05, train_loss: 0.8309, train_acc: 0.7012 test_loss: 0.9660, test_acc: 0.6585, best: 0.6629, time: 0:00:49
 Epoch: 274, lr: 8.0e-05, train_loss: 0.8301, train_acc: 0.7072 test_loss: 0.9615, test_acc: 0.6587, best: 0.6629, time: 0:00:48
 Epoch: 275, lr: 8.0e-05, train_loss: 0.8277, train_acc: 0.7074 test_loss: 0.9602, test_acc: 0.6601, best: 0.6629, time: 0:00:48
 Epoch: 276, lr: 8.0e-05, train_loss: 0.8187, train_acc: 0.7060 test_loss: 0.9667, test_acc: 0.6589, best: 0.6629, time: 0:00:48
 Epoch: 277, lr: 8.0e-05, train_loss: 0.8336, train_acc: 0.7010 test_loss: 0.9625, test_acc: 0.6579, best: 0.6629, time: 0:00:48
 Epoch: 278, lr: 8.0e-05, train_loss: 0.8150, train_acc: 0.7118 test_loss: 0.9603, test_acc: 0.6596, best: 0.6629, time: 0:00:48
 Epoch: 279, lr: 8.0e-05, train_loss: 0.8338, train_acc: 0.7040 test_loss: 0.9672, test_acc: 0.6559, best: 0.6629, time: 0:00:48
 Epoch: 280, lr: 8.0e-05, train_loss: 0.8345, train_acc: 0.7030 test_loss: 0.9607, test_acc: 0.6585, best: 0.6629, time: 0:00:48
 Epoch: 281, lr: 8.0e-05, train_loss: 0.8056, train_acc: 0.7116 test_loss: 0.9669, test_acc: 0.6604, best: 0.6629, time: 0:00:48
 Epoch: 282, lr: 8.0e-05, train_loss: 0.8503, train_acc: 0.7010 test_loss: 0.9660, test_acc: 0.6585, best: 0.6629, time: 0:00:48
 Epoch: 283, lr: 8.0e-05, train_loss: 0.8238, train_acc: 0.7062 test_loss: 0.9777, test_acc: 0.6579, best: 0.6629, time: 0:00:48
 Epoch: 284, lr: 8.0e-05, train_loss: 0.8292, train_acc: 0.7034 test_loss: 0.9566, test_acc: 0.6583, best: 0.6629, time: 0:00:48
 Epoch: 285, lr: 8.0e-05, train_loss: 0.8275, train_acc: 0.7064 test_loss: 0.9670, test_acc: 0.6606, best: 0.6629, time: 0:00:48
 Epoch: 286, lr: 8.0e-05, train_loss: 0.8121, train_acc: 0.7066 test_loss: 0.9618, test_acc: 0.6580, best: 0.6629, time: 0:00:48
 Epoch: 287, lr: 8.0e-05, train_loss: 0.8240, train_acc: 0.7022 test_loss: 0.9630, test_acc: 0.6574, best: 0.6629, time: 0:00:48
 Epoch: 288, lr: 8.0e-05, train_loss: 0.8255, train_acc: 0.7084 test_loss: 0.9759, test_acc: 0.6573, best: 0.6629, time: 0:00:48
 Epoch: 289, lr: 8.0e-05, train_loss: 0.8132, train_acc: 0.7062 test_loss: 0.9736, test_acc: 0.6580, best: 0.6629, time: 0:00:48
 Epoch: 290, lr: 8.0e-05, train_loss: 0.8245, train_acc: 0.7102 test_loss: 0.9761, test_acc: 0.6546, best: 0.6629, time: 0:00:48
 Epoch: 291, lr: 8.0e-05, train_loss: 0.8254, train_acc: 0.7060 test_loss: 0.9707, test_acc: 0.6556, best: 0.6629, time: 0:00:48
 Epoch: 292, lr: 8.0e-05, train_loss: 0.8289, train_acc: 0.7038 test_loss: 0.9662, test_acc: 0.6594, best: 0.6629, time: 0:00:48
 Epoch: 293, lr: 8.0e-05, train_loss: 0.8171, train_acc: 0.7080 test_loss: 0.9729, test_acc: 0.6548, best: 0.6629, time: 0:00:48
 Epoch: 294, lr: 8.0e-05, train_loss: 0.8187, train_acc: 0.7096 test_loss: 0.9804, test_acc: 0.6556, best: 0.6629, time: 0:00:48
 Epoch: 295, lr: 8.0e-05, train_loss: 0.8292, train_acc: 0.7066 test_loss: 0.9577, test_acc: 0.6646, best: 0.6646, time: 0:00:48
 Epoch: 296, lr: 8.0e-05, train_loss: 0.7918, train_acc: 0.7158 test_loss: 0.9669, test_acc: 0.6580, best: 0.6646, time: 0:00:48
 Epoch: 297, lr: 8.0e-05, train_loss: 0.8313, train_acc: 0.7006 test_loss: 0.9665, test_acc: 0.6593, best: 0.6646, time: 0:00:48
 Epoch: 298, lr: 8.0e-05, train_loss: 0.8267, train_acc: 0.7056 test_loss: 0.9742, test_acc: 0.6558, best: 0.6646, time: 0:00:48
 Epoch: 299, lr: 8.0e-05, train_loss: 0.8174, train_acc: 0.7100 test_loss: 0.9755, test_acc: 0.6542, best: 0.6646, time: 0:00:48
 Highest accuracy: 0.6646