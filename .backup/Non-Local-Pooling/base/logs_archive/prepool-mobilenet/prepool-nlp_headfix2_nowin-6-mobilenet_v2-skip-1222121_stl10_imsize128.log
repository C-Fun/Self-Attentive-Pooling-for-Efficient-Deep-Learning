
 Run on time: 2022-07-04 21:01:22.065262

 Architecture: prepool-nlp_headfix2_nowin-6-mobilenet_v2-skip-1222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 6,
            "_psize": 2,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : prepool-nlp_headfix2_nowin-6-mobilenet_v2-skip-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (conv1_pool): Pool2d(
        (logit): Sequential(
          (pool_weight): NLP_BASE(
            (downsample): Sequential(
              (0): Conv2d(32, 32, kernel_size=(2, 2), stride=(2, 2))
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=32, out_features=32, bias=True)
            )
            (restore): Sequential(
              (0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (pos_embed): PositionEmbeddingLearned(
              (row_embed): Embedding(256, 16)
              (col_embed): Embedding(256, 16)
            )
          )
        )
        (pool): AvgPool2d(kernel_size=6, stride=6, padding=0)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.5644, train_acc: 0.1558 test_loss: 2.0635, test_acc: 0.2131, best: 0.2131, time: 0:01:52
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1364, train_acc: 0.1948 test_loss: 1.8881, test_acc: 0.2891, best: 0.2891, time: 0:01:52
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0709, train_acc: 0.2200 test_loss: 1.8450, test_acc: 0.2675, best: 0.2891, time: 0:01:53
 Epoch: 4, lr: 1.0e-02, train_loss: 2.0295, train_acc: 0.2192 test_loss: 1.8289, test_acc: 0.2851, best: 0.2891, time: 0:01:53
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9945, train_acc: 0.2370 test_loss: 1.7999, test_acc: 0.2958, best: 0.2958, time: 0:01:52
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9452, train_acc: 0.2578 test_loss: 1.8086, test_acc: 0.2958, best: 0.2958, time: 0:01:52
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9700, train_acc: 0.2526 test_loss: 1.8231, test_acc: 0.2629, best: 0.2958, time: 0:01:52
 Epoch: 8, lr: 1.0e-02, train_loss: 1.9378, train_acc: 0.2562 test_loss: 1.7655, test_acc: 0.3196, best: 0.3196, time: 0:01:52
 Epoch: 9, lr: 1.0e-02, train_loss: 1.9285, train_acc: 0.2778 test_loss: 1.7236, test_acc: 0.3349, best: 0.3349, time: 0:01:52
 Epoch: 10, lr: 1.0e-02, train_loss: 1.8931, train_acc: 0.2828 test_loss: 1.7508, test_acc: 0.3207, best: 0.3349, time: 0:01:52
 Epoch: 11, lr: 1.0e-02, train_loss: 1.8955, train_acc: 0.2824 test_loss: 1.7112, test_acc: 0.3249, best: 0.3349, time: 0:01:52
 Epoch: 12, lr: 1.0e-02, train_loss: 1.9111, train_acc: 0.2640 test_loss: 1.7763, test_acc: 0.3305, best: 0.3349, time: 0:01:52
 Epoch: 13, lr: 1.0e-02, train_loss: 1.9059, train_acc: 0.2686 test_loss: 1.6826, test_acc: 0.3475, best: 0.3475, time: 0:01:52
 Epoch: 14, lr: 1.0e-02, train_loss: 1.8940, train_acc: 0.2840 test_loss: 1.7114, test_acc: 0.3177, best: 0.3475, time: 0:01:53
 Epoch: 15, lr: 1.0e-02, train_loss: 1.8867, train_acc: 0.2898 test_loss: 1.6121, test_acc: 0.3829, best: 0.3829, time: 0:01:53
 Epoch: 16, lr: 1.0e-02, train_loss: 1.8397, train_acc: 0.2982 test_loss: 1.6738, test_acc: 0.3506, best: 0.3829, time: 0:01:52
 Epoch: 17, lr: 1.0e-02, train_loss: 1.8202, train_acc: 0.2976 test_loss: 1.6007, test_acc: 0.3812, best: 0.3829, time: 0:01:53
 Epoch: 18, lr: 1.0e-02, train_loss: 1.8366, train_acc: 0.3048 test_loss: 1.6309, test_acc: 0.3765, best: 0.3829, time: 0:01:52
 Epoch: 19, lr: 1.0e-02, train_loss: 1.8386, train_acc: 0.3058 test_loss: 1.6434, test_acc: 0.3764, best: 0.3829, time: 0:01:52
 Epoch: 20, lr: 1.0e-02, train_loss: 1.8010, train_acc: 0.3140 test_loss: 1.6241, test_acc: 0.3646, best: 0.3829, time: 0:01:52
 Epoch: 21, lr: 1.0e-02, train_loss: 1.8567, train_acc: 0.2968 test_loss: 1.6269, test_acc: 0.3764, best: 0.3829, time: 0:01:53
 Epoch: 22, lr: 1.0e-02, train_loss: 1.8271, train_acc: 0.3192 test_loss: 1.5775, test_acc: 0.4066, best: 0.4066, time: 0:01:52
 Epoch: 23, lr: 1.0e-02, train_loss: 1.7977, train_acc: 0.3190 test_loss: 1.5374, test_acc: 0.4153, best: 0.4153, time: 0:01:52
 Epoch: 24, lr: 1.0e-02, train_loss: 1.7593, train_acc: 0.3240 test_loss: 1.5854, test_acc: 0.4017, best: 0.4153, time: 0:01:52
 Epoch: 25, lr: 1.0e-02, train_loss: 1.7571, train_acc: 0.3278 test_loss: 1.6370, test_acc: 0.3681, best: 0.4153, time: 0:01:52
 Epoch: 26, lr: 1.0e-02, train_loss: 1.8685, train_acc: 0.2958 test_loss: 1.6529, test_acc: 0.3454, best: 0.4153, time: 0:01:52
 Epoch: 27, lr: 1.0e-02, train_loss: 1.8265, train_acc: 0.3076 test_loss: 1.6602, test_acc: 0.3551, best: 0.4153, time: 0:01:52
 Epoch: 28, lr: 1.0e-02, train_loss: 1.8035, train_acc: 0.3126 test_loss: 1.5749, test_acc: 0.3977, best: 0.4153, time: 0:01:52
 Epoch: 29, lr: 1.0e-02, train_loss: 1.7529, train_acc: 0.3262 test_loss: 1.6268, test_acc: 0.3847, best: 0.4153, time: 0:01:53
 Epoch: 30, lr: 1.0e-02, train_loss: 1.7417, train_acc: 0.3298 test_loss: 1.5744, test_acc: 0.3932, best: 0.4153, time: 0:01:52
 Epoch: 31, lr: 1.0e-02, train_loss: 1.7327, train_acc: 0.3382 test_loss: 1.5720, test_acc: 0.3939, best: 0.4153, time: 0:01:53
 Epoch: 32, lr: 1.0e-02, train_loss: 1.7500, train_acc: 0.3394 test_loss: 1.5738, test_acc: 0.4065, best: 0.4153, time: 0:01:53
 Epoch: 33, lr: 1.0e-02, train_loss: 1.7166, train_acc: 0.3468 test_loss: 1.5633, test_acc: 0.4059, best: 0.4153, time: 0:01:54
 Epoch: 34, lr: 1.0e-02, train_loss: 1.7176, train_acc: 0.3434 test_loss: 1.5195, test_acc: 0.4239, best: 0.4239, time: 0:01:54
 Epoch: 35, lr: 1.0e-02, train_loss: 1.7120, train_acc: 0.3566 test_loss: 1.5929, test_acc: 0.4005, best: 0.4239, time: 0:01:53
 Epoch: 36, lr: 1.0e-02, train_loss: 1.6963, train_acc: 0.3562 test_loss: 1.4984, test_acc: 0.4275, best: 0.4275, time: 0:01:54
 Epoch: 37, lr: 1.0e-02, train_loss: 1.6888, train_acc: 0.3564 test_loss: 1.5228, test_acc: 0.4108, best: 0.4275, time: 0:01:54
 Epoch: 38, lr: 1.0e-02, train_loss: 1.6750, train_acc: 0.3670 test_loss: 1.5210, test_acc: 0.4185, best: 0.4275, time: 0:01:54
 Epoch: 39, lr: 1.0e-02, train_loss: 1.6583, train_acc: 0.3784 test_loss: 1.4966, test_acc: 0.4290, best: 0.4290, time: 0:01:54
 Epoch: 40, lr: 1.0e-02, train_loss: 1.6654, train_acc: 0.3662 test_loss: 1.4865, test_acc: 0.4392, best: 0.4392, time: 0:01:54
 Epoch: 41, lr: 1.0e-02, train_loss: 1.6504, train_acc: 0.3816 test_loss: 1.5093, test_acc: 0.4180, best: 0.4392, time: 0:01:54
 Epoch: 42, lr: 1.0e-02, train_loss: 1.6380, train_acc: 0.3828 test_loss: 1.4767, test_acc: 0.4395, best: 0.4395, time: 0:01:54
 Epoch: 43, lr: 1.0e-02, train_loss: 1.6113, train_acc: 0.3924 test_loss: 1.4908, test_acc: 0.4341, best: 0.4395, time: 0:01:54
 Epoch: 44, lr: 1.0e-02, train_loss: 1.6344, train_acc: 0.3900 test_loss: 1.4639, test_acc: 0.4373, best: 0.4395, time: 0:01:54
 Epoch: 45, lr: 1.0e-02, train_loss: 1.6037, train_acc: 0.3950 test_loss: 1.4694, test_acc: 0.4385, best: 0.4395, time: 0:01:54
 Epoch: 46, lr: 1.0e-02, train_loss: 1.6189, train_acc: 0.3922 test_loss: 1.4709, test_acc: 0.4392, best: 0.4395, time: 0:01:54
 Epoch: 47, lr: 1.0e-02, train_loss: 1.6204, train_acc: 0.3854 test_loss: 1.4542, test_acc: 0.4510, best: 0.4510, time: 0:01:54
 Epoch: 48, lr: 1.0e-02, train_loss: 1.6198, train_acc: 0.3910 test_loss: 1.4391, test_acc: 0.4645, best: 0.4645, time: 0:01:54
 Epoch: 49, lr: 1.0e-02, train_loss: 1.5653, train_acc: 0.4012 test_loss: 1.3977, test_acc: 0.4814, best: 0.4814, time: 0:01:54
 Epoch: 50, lr: 1.0e-02, train_loss: 1.5652, train_acc: 0.4090 test_loss: 1.3835, test_acc: 0.4728, best: 0.4814, time: 0:01:54
 Epoch: 51, lr: 1.0e-02, train_loss: 1.5601, train_acc: 0.4002 test_loss: 1.4094, test_acc: 0.4645, best: 0.4814, time: 0:01:54
 Epoch: 52, lr: 1.0e-02, train_loss: 1.5895, train_acc: 0.3968 test_loss: 1.3873, test_acc: 0.4808, best: 0.4814, time: 0:01:54
 Epoch: 53, lr: 1.0e-02, train_loss: 1.5845, train_acc: 0.4000 test_loss: 1.4403, test_acc: 0.4700, best: 0.4814, time: 0:01:54
 Epoch: 54, lr: 1.0e-02, train_loss: 1.5261, train_acc: 0.4248 test_loss: 1.3839, test_acc: 0.4764, best: 0.4814, time: 0:01:54
 Epoch: 55, lr: 1.0e-02, train_loss: 1.5373, train_acc: 0.4160 test_loss: 1.3753, test_acc: 0.4768, best: 0.4814, time: 0:01:54
 Epoch: 56, lr: 1.0e-02, train_loss: 1.5180, train_acc: 0.4290 test_loss: 1.3387, test_acc: 0.5004, best: 0.5004, time: 0:01:54
 Epoch: 57, lr: 1.0e-02, train_loss: 1.5178, train_acc: 0.4330 test_loss: 1.3846, test_acc: 0.4828, best: 0.5004, time: 0:01:54
 Epoch: 58, lr: 1.0e-02, train_loss: 1.5208, train_acc: 0.4256 test_loss: 1.3733, test_acc: 0.4890, best: 0.5004, time: 0:01:54
 Epoch: 59, lr: 1.0e-02, train_loss: 1.5039, train_acc: 0.4400 test_loss: 1.3761, test_acc: 0.4814, best: 0.5004, time: 0:01:54
 Epoch: 60, lr: 1.0e-02, train_loss: 1.5202, train_acc: 0.4348 test_loss: 1.3480, test_acc: 0.4950, best: 0.5004, time: 0:01:53
 Epoch: 61, lr: 1.0e-02, train_loss: 1.4865, train_acc: 0.4520 test_loss: 1.3642, test_acc: 0.4938, best: 0.5004, time: 0:01:54
 Epoch: 62, lr: 1.0e-02, train_loss: 1.5140, train_acc: 0.4332 test_loss: 1.3392, test_acc: 0.5032, best: 0.5032, time: 0:01:54
 Epoch: 63, lr: 1.0e-02, train_loss: 1.5009, train_acc: 0.4334 test_loss: 1.3681, test_acc: 0.4940, best: 0.5032, time: 0:01:54
 Epoch: 64, lr: 1.0e-02, train_loss: 1.4837, train_acc: 0.4450 test_loss: 1.3193, test_acc: 0.5180, best: 0.5180, time: 0:01:54
 Epoch: 65, lr: 1.0e-02, train_loss: 1.4712, train_acc: 0.4502 test_loss: 1.3337, test_acc: 0.5105, best: 0.5180, time: 0:01:54
 Epoch: 66, lr: 1.0e-02, train_loss: 1.4775, train_acc: 0.4486 test_loss: 1.2835, test_acc: 0.5130, best: 0.5180, time: 0:01:53
 Epoch: 67, lr: 1.0e-02, train_loss: 1.4541, train_acc: 0.4610 test_loss: 1.3198, test_acc: 0.5095, best: 0.5180, time: 0:01:53
 Epoch: 68, lr: 1.0e-02, train_loss: 1.4673, train_acc: 0.4506 test_loss: 1.2866, test_acc: 0.5255, best: 0.5255, time: 0:01:53
 Epoch: 69, lr: 1.0e-02, train_loss: 1.4569, train_acc: 0.4538 test_loss: 1.3159, test_acc: 0.5101, best: 0.5255, time: 0:01:53
 Epoch: 70, lr: 1.0e-02, train_loss: 1.4423, train_acc: 0.4606 test_loss: 1.2839, test_acc: 0.5275, best: 0.5275, time: 0:01:54
 Epoch: 71, lr: 1.0e-02, train_loss: 1.4791, train_acc: 0.4468 test_loss: 1.2636, test_acc: 0.5355, best: 0.5355, time: 0:01:54
 Epoch: 72, lr: 1.0e-02, train_loss: 1.4454, train_acc: 0.4698 test_loss: 1.3347, test_acc: 0.5099, best: 0.5355, time: 0:01:54
 Epoch: 73, lr: 1.0e-02, train_loss: 1.4284, train_acc: 0.4662 test_loss: 1.2749, test_acc: 0.5259, best: 0.5355, time: 0:01:54
 Epoch: 74, lr: 1.0e-02, train_loss: 1.4239, train_acc: 0.4684 test_loss: 1.2653, test_acc: 0.5275, best: 0.5355, time: 0:01:53
 Epoch: 75, lr: 1.0e-02, train_loss: 1.4108, train_acc: 0.4708 test_loss: 1.2894, test_acc: 0.5152, best: 0.5355, time: 0:01:53
 Epoch: 76, lr: 1.0e-02, train_loss: 1.3921, train_acc: 0.4704 test_loss: 1.2535, test_acc: 0.5278, best: 0.5355, time: 0:01:53
 Epoch: 77, lr: 1.0e-02, train_loss: 1.3835, train_acc: 0.4860 test_loss: 1.2222, test_acc: 0.5476, best: 0.5476, time: 0:01:53
 Epoch: 78, lr: 1.0e-02, train_loss: 1.3855, train_acc: 0.4774 test_loss: 1.2378, test_acc: 0.5443, best: 0.5476, time: 0:01:53
 Epoch: 79, lr: 1.0e-02, train_loss: 1.3845, train_acc: 0.4754 test_loss: 1.2285, test_acc: 0.5484, best: 0.5484, time: 0:01:54
 Epoch: 80, lr: 1.0e-02, train_loss: 1.3867, train_acc: 0.4888 test_loss: 1.2183, test_acc: 0.5543, best: 0.5543, time: 0:01:53
 Epoch: 81, lr: 1.0e-02, train_loss: 1.3849, train_acc: 0.4826 test_loss: 1.1977, test_acc: 0.5625, best: 0.5625, time: 0:01:53
 Epoch: 82, lr: 1.0e-02, train_loss: 1.3761, train_acc: 0.4852 test_loss: 1.2197, test_acc: 0.5495, best: 0.5625, time: 0:01:54
 Epoch: 83, lr: 1.0e-02, train_loss: 1.3549, train_acc: 0.5020 test_loss: 1.1874, test_acc: 0.5656, best: 0.5656, time: 0:01:54
 Epoch: 84, lr: 1.0e-02, train_loss: 1.3570, train_acc: 0.4968 test_loss: 1.2055, test_acc: 0.5666, best: 0.5666, time: 0:01:54
 Epoch: 85, lr: 1.0e-02, train_loss: 1.3540, train_acc: 0.5032 test_loss: 1.2166, test_acc: 0.5617, best: 0.5666, time: 0:01:54
 Epoch: 86, lr: 1.0e-02, train_loss: 1.3570, train_acc: 0.4964 test_loss: 1.2157, test_acc: 0.5556, best: 0.5666, time: 0:01:54
 Epoch: 87, lr: 1.0e-02, train_loss: 1.3374, train_acc: 0.5086 test_loss: 1.2395, test_acc: 0.5490, best: 0.5666, time: 0:01:54
 Epoch: 88, lr: 1.0e-02, train_loss: 1.3243, train_acc: 0.5082 test_loss: 1.2289, test_acc: 0.5429, best: 0.5666, time: 0:01:53
 Epoch: 89, lr: 1.0e-02, train_loss: 1.3381, train_acc: 0.5136 test_loss: 1.2145, test_acc: 0.5573, best: 0.5666, time: 0:01:53
 Epoch: 90, lr: 1.0e-02, train_loss: 1.3347, train_acc: 0.5042 test_loss: 1.2455, test_acc: 0.5537, best: 0.5666, time: 0:01:53
 Epoch: 91, lr: 1.0e-02, train_loss: 1.3371, train_acc: 0.5096 test_loss: 1.2363, test_acc: 0.5404, best: 0.5666, time: 0:01:53
 Epoch: 92, lr: 1.0e-02, train_loss: 1.3367, train_acc: 0.4986 test_loss: 1.1650, test_acc: 0.5821, best: 0.5821, time: 0:01:54
 Epoch: 93, lr: 1.0e-02, train_loss: 1.3195, train_acc: 0.5118 test_loss: 1.2333, test_acc: 0.5495, best: 0.5821, time: 0:01:54
 Epoch: 94, lr: 1.0e-02, train_loss: 1.3178, train_acc: 0.5058 test_loss: 1.1972, test_acc: 0.5687, best: 0.5821, time: 0:01:53
 Epoch: 95, lr: 1.0e-02, train_loss: 1.2881, train_acc: 0.5320 test_loss: 1.1890, test_acc: 0.5705, best: 0.5821, time: 0:01:53
 Epoch: 96, lr: 1.0e-02, train_loss: 1.2893, train_acc: 0.5292 test_loss: 1.1853, test_acc: 0.5630, best: 0.5821, time: 0:01:54
 Epoch: 97, lr: 1.0e-02, train_loss: 1.2985, train_acc: 0.5156 test_loss: 1.1572, test_acc: 0.5724, best: 0.5821, time: 0:01:53
 Epoch: 98, lr: 1.0e-02, train_loss: 1.3004, train_acc: 0.5294 test_loss: 1.1449, test_acc: 0.5869, best: 0.5869, time: 0:01:54
 Epoch: 99, lr: 1.0e-02, train_loss: 1.3076, train_acc: 0.5296 test_loss: 1.1831, test_acc: 0.5784, best: 0.5869, time: 0:01:54
 Epoch: 100, lr: 1.0e-02, train_loss: 1.3533, train_acc: 0.5016 test_loss: 1.2187, test_acc: 0.5493, best: 0.5869, time: 0:01:53
 Epoch: 101, lr: 1.0e-02, train_loss: 1.3151, train_acc: 0.5166 test_loss: 1.2064, test_acc: 0.5646, best: 0.5869, time: 0:01:54
 Epoch: 102, lr: 1.0e-02, train_loss: 1.3088, train_acc: 0.5190 test_loss: 1.2017, test_acc: 0.5626, best: 0.5869, time: 0:01:53
 Epoch: 103, lr: 1.0e-02, train_loss: 1.2870, train_acc: 0.5274 test_loss: 1.1288, test_acc: 0.5909, best: 0.5909, time: 0:01:53
 Epoch: 104, lr: 1.0e-02, train_loss: 1.2856, train_acc: 0.5324 test_loss: 1.2024, test_acc: 0.5547, best: 0.5909, time: 0:01:53
 Epoch: 105, lr: 1.0e-02, train_loss: 1.2934, train_acc: 0.5248 test_loss: 1.1394, test_acc: 0.5843, best: 0.5909, time: 0:01:53
 Epoch: 106, lr: 1.0e-02, train_loss: 1.2525, train_acc: 0.5378 test_loss: 1.1257, test_acc: 0.5860, best: 0.5909, time: 0:01:53
 Epoch: 107, lr: 1.0e-02, train_loss: 1.2615, train_acc: 0.5360 test_loss: 1.1227, test_acc: 0.5864, best: 0.5909, time: 0:01:53
 Epoch: 108, lr: 1.0e-02, train_loss: 1.2732, train_acc: 0.5340 test_loss: 1.1767, test_acc: 0.5775, best: 0.5909, time: 0:01:53
 Epoch: 109, lr: 1.0e-02, train_loss: 1.2765, train_acc: 0.5306 test_loss: 1.1337, test_acc: 0.5926, best: 0.5926, time: 0:01:53
 Epoch: 110, lr: 1.0e-02, train_loss: 1.2837, train_acc: 0.5290 test_loss: 1.1571, test_acc: 0.5786, best: 0.5926, time: 0:01:53
 Epoch: 111, lr: 1.0e-02, train_loss: 1.2424, train_acc: 0.5498 test_loss: 1.1068, test_acc: 0.6035, best: 0.6035, time: 0:01:53
 Epoch: 112, lr: 1.0e-02, train_loss: 1.2480, train_acc: 0.5412 test_loss: 1.2321, test_acc: 0.5511, best: 0.6035, time: 0:01:54
 Epoch: 113, lr: 1.0e-02, train_loss: 1.2616, train_acc: 0.5384 test_loss: 1.1264, test_acc: 0.5819, best: 0.6035, time: 0:01:53
 Epoch: 114, lr: 1.0e-02, train_loss: 1.2306, train_acc: 0.5512 test_loss: 1.0829, test_acc: 0.6090, best: 0.6090, time: 0:01:53
 Epoch: 115, lr: 1.0e-02, train_loss: 1.2421, train_acc: 0.5402 test_loss: 1.1452, test_acc: 0.5894, best: 0.6090, time: 0:01:53
 Epoch: 116, lr: 1.0e-02, train_loss: 1.2407, train_acc: 0.5420 test_loss: 1.1187, test_acc: 0.5954, best: 0.6090, time: 0:01:53
 Epoch: 117, lr: 1.0e-02, train_loss: 1.2207, train_acc: 0.5566 test_loss: 1.1206, test_acc: 0.5915, best: 0.6090, time: 0:01:53
 Epoch: 118, lr: 1.0e-02, train_loss: 1.2190, train_acc: 0.5542 test_loss: 1.0921, test_acc: 0.6039, best: 0.6090, time: 0:01:53
 Epoch: 119, lr: 1.0e-02, train_loss: 1.2581, train_acc: 0.5484 test_loss: 1.1332, test_acc: 0.5799, best: 0.6090, time: 0:01:53
 Epoch: 120, lr: 1.0e-02, train_loss: 1.2427, train_acc: 0.5490 test_loss: 1.1467, test_acc: 0.5805, best: 0.6090, time: 0:01:53
 Epoch: 121, lr: 1.0e-02, train_loss: 1.2334, train_acc: 0.5598 test_loss: 1.0896, test_acc: 0.6050, best: 0.6090, time: 0:01:53
 Epoch: 122, lr: 1.0e-02, train_loss: 1.2275, train_acc: 0.5468 test_loss: 1.0911, test_acc: 0.6150, best: 0.6150, time: 0:01:53
 Epoch: 123, lr: 1.0e-02, train_loss: 1.1998, train_acc: 0.5638 test_loss: 1.0985, test_acc: 0.6048, best: 0.6150, time: 0:01:53
 Epoch: 124, lr: 1.0e-02, train_loss: 1.1950, train_acc: 0.5594 test_loss: 1.0649, test_acc: 0.6146, best: 0.6150, time: 0:01:53
 Epoch: 125, lr: 1.0e-02, train_loss: 1.2026, train_acc: 0.5712 test_loss: 1.0965, test_acc: 0.6064, best: 0.6150, time: 0:01:53
 Epoch: 126, lr: 1.0e-02, train_loss: 1.2016, train_acc: 0.5566 test_loss: 1.0844, test_acc: 0.6096, best: 0.6150, time: 0:01:53
 Epoch: 127, lr: 1.0e-02, train_loss: 1.1702, train_acc: 0.5742 test_loss: 1.0952, test_acc: 0.6009, best: 0.6150, time: 0:01:54
 Epoch: 128, lr: 1.0e-02, train_loss: 1.2109, train_acc: 0.5502 test_loss: 1.0904, test_acc: 0.6119, best: 0.6150, time: 0:01:54
 Epoch: 129, lr: 1.0e-02, train_loss: 1.2069, train_acc: 0.5576 test_loss: 1.1098, test_acc: 0.6001, best: 0.6150, time: 0:01:53
 Epoch: 130, lr: 1.0e-02, train_loss: 1.2338, train_acc: 0.5548 test_loss: 1.0818, test_acc: 0.6189, best: 0.6189, time: 0:01:53
 Epoch: 131, lr: 1.0e-02, train_loss: 1.1821, train_acc: 0.5700 test_loss: 1.1771, test_acc: 0.5803, best: 0.6189, time: 0:01:54
 Epoch: 132, lr: 1.0e-02, train_loss: 1.2138, train_acc: 0.5592 test_loss: 1.0739, test_acc: 0.6121, best: 0.6189, time: 0:01:54
 Epoch: 133, lr: 1.0e-02, train_loss: 1.2066, train_acc: 0.5558 test_loss: 1.0728, test_acc: 0.6212, best: 0.6212, time: 0:01:54
 Epoch: 134, lr: 1.0e-02, train_loss: 1.1559, train_acc: 0.5802 test_loss: 1.1082, test_acc: 0.6008, best: 0.6212, time: 0:01:53
 Epoch: 135, lr: 1.0e-02, train_loss: 1.1716, train_acc: 0.5682 test_loss: 1.0801, test_acc: 0.6116, best: 0.6212, time: 0:01:53
 Epoch: 136, lr: 1.0e-02, train_loss: 1.1570, train_acc: 0.5790 test_loss: 1.0981, test_acc: 0.6020, best: 0.6212, time: 0:01:53
 Epoch: 137, lr: 1.0e-02, train_loss: 1.1434, train_acc: 0.5934 test_loss: 1.0895, test_acc: 0.6029, best: 0.6212, time: 0:01:53
 Epoch: 138, lr: 1.0e-02, train_loss: 1.1869, train_acc: 0.5684 test_loss: 1.1003, test_acc: 0.6048, best: 0.6212, time: 0:01:54
 Epoch: 139, lr: 1.0e-02, train_loss: 1.1629, train_acc: 0.5724 test_loss: 1.0353, test_acc: 0.6259, best: 0.6259, time: 0:01:54
 Epoch: 140, lr: 1.0e-02, train_loss: 1.1710, train_acc: 0.5708 test_loss: 1.0641, test_acc: 0.6228, best: 0.6259, time: 0:01:53
 Epoch: 141, lr: 1.0e-02, train_loss: 1.1437, train_acc: 0.5808 test_loss: 1.0504, test_acc: 0.6274, best: 0.6274, time: 0:01:54
 Epoch: 142, lr: 1.0e-02, train_loss: 1.1488, train_acc: 0.5844 test_loss: 1.0842, test_acc: 0.6082, best: 0.6274, time: 0:01:53
 Epoch: 143, lr: 1.0e-02, train_loss: 1.1369, train_acc: 0.5856 test_loss: 1.0527, test_acc: 0.6121, best: 0.6274, time: 0:01:53
 Epoch: 144, lr: 1.0e-02, train_loss: 1.1360, train_acc: 0.5876 test_loss: 1.0281, test_acc: 0.6259, best: 0.6274, time: 0:01:53
 Epoch: 145, lr: 1.0e-02, train_loss: 1.1313, train_acc: 0.5862 test_loss: 1.1354, test_acc: 0.5849, best: 0.6274, time: 0:01:53
 Epoch: 146, lr: 1.0e-02, train_loss: 1.1472, train_acc: 0.5854 test_loss: 1.0724, test_acc: 0.6071, best: 0.6274, time: 0:01:53
 Epoch: 147, lr: 1.0e-02, train_loss: 1.1374, train_acc: 0.5916 test_loss: 1.0954, test_acc: 0.5974, best: 0.6274, time: 0:01:53
 Epoch: 148, lr: 1.0e-02, train_loss: 1.1258, train_acc: 0.5938 test_loss: 1.0918, test_acc: 0.6006, best: 0.6274, time: 0:01:53
 Epoch: 149, lr: 1.0e-02, train_loss: 1.1488, train_acc: 0.5736 test_loss: 1.0605, test_acc: 0.6198, best: 0.6274, time: 0:01:53
 Epoch: 150, lr: 1.0e-02, train_loss: 1.1333, train_acc: 0.5828 test_loss: 1.0712, test_acc: 0.6102, best: 0.6274, time: 0:01:53
 Epoch: 151, lr: 1.0e-02, train_loss: 1.1389, train_acc: 0.5888 test_loss: 1.0488, test_acc: 0.6258, best: 0.6274, time: 0:01:53
 Epoch: 152, lr: 1.0e-02, train_loss: 1.1137, train_acc: 0.5958 test_loss: 1.0403, test_acc: 0.6270, best: 0.6274, time: 0:01:53
 Epoch: 153, lr: 1.0e-02, train_loss: 1.1371, train_acc: 0.5884 test_loss: 1.0365, test_acc: 0.6274, best: 0.6274, time: 0:01:53
 Epoch: 154, lr: 1.0e-02, train_loss: 1.1605, train_acc: 0.5806 test_loss: 1.0958, test_acc: 0.6012, best: 0.6274, time: 0:01:53
 Epoch: 155, lr: 1.0e-02, train_loss: 1.1248, train_acc: 0.5922 test_loss: 1.1098, test_acc: 0.6070, best: 0.6274, time: 0:01:53
 Epoch: 156, lr: 1.0e-02, train_loss: 1.1395, train_acc: 0.5848 test_loss: 1.1125, test_acc: 0.6050, best: 0.6274, time: 0:01:53
 Epoch: 157, lr: 1.0e-02, train_loss: 1.2202, train_acc: 0.5602 test_loss: 1.0767, test_acc: 0.6136, best: 0.6274, time: 0:01:53
 Epoch: 158, lr: 1.0e-02, train_loss: 1.1665, train_acc: 0.5750 test_loss: 1.0625, test_acc: 0.6261, best: 0.6274, time: 0:01:53
 Epoch: 159, lr: 1.0e-02, train_loss: 1.1512, train_acc: 0.5836 test_loss: 1.0642, test_acc: 0.6212, best: 0.6274, time: 0:01:53
 Epoch: 160, lr: 1.0e-02, train_loss: 1.1340, train_acc: 0.5932 test_loss: 1.0575, test_acc: 0.6252, best: 0.6274, time: 0:01:53
 Epoch: 161, lr: 1.0e-02, train_loss: 1.1046, train_acc: 0.6014 test_loss: 1.0335, test_acc: 0.6301, best: 0.6301, time: 0:01:54
 Epoch: 162, lr: 1.0e-02, train_loss: 1.0923, train_acc: 0.6072 test_loss: 1.0490, test_acc: 0.6229, best: 0.6301, time: 0:01:53
 Epoch: 163, lr: 1.0e-02, train_loss: 1.0758, train_acc: 0.6074 test_loss: 1.0332, test_acc: 0.6314, best: 0.6314, time: 0:01:53
 Epoch: 164, lr: 1.0e-02, train_loss: 1.1009, train_acc: 0.5910 test_loss: 1.0078, test_acc: 0.6420, best: 0.6420, time: 0:01:54
 Epoch: 165, lr: 1.0e-02, train_loss: 1.0756, train_acc: 0.6172 test_loss: 1.0146, test_acc: 0.6355, best: 0.6420, time: 0:01:54
 Epoch: 166, lr: 1.0e-02, train_loss: 1.0979, train_acc: 0.6066 test_loss: 1.0244, test_acc: 0.6411, best: 0.6420, time: 0:01:53
 Epoch: 167, lr: 1.0e-02, train_loss: 1.0894, train_acc: 0.6056 test_loss: 1.0686, test_acc: 0.6209, best: 0.6420, time: 0:01:54
 Epoch: 168, lr: 1.0e-02, train_loss: 1.0597, train_acc: 0.6194 test_loss: 1.0326, test_acc: 0.6252, best: 0.6420, time: 0:01:54
 Epoch: 169, lr: 1.0e-02, train_loss: 1.0641, train_acc: 0.6100 test_loss: 1.0189, test_acc: 0.6355, best: 0.6420, time: 0:01:53
 Epoch: 170, lr: 1.0e-02, train_loss: 1.0671, train_acc: 0.6046 test_loss: 1.0538, test_acc: 0.6140, best: 0.6420, time: 0:01:53
 Epoch: 171, lr: 1.0e-02, train_loss: 1.0711, train_acc: 0.6164 test_loss: 1.0196, test_acc: 0.6395, best: 0.6420, time: 0:01:54
 Epoch: 172, lr: 1.0e-02, train_loss: 1.0625, train_acc: 0.6190 test_loss: 1.0621, test_acc: 0.6242, best: 0.6420, time: 0:01:53
 Epoch: 173, lr: 1.0e-02, train_loss: 1.0661, train_acc: 0.6150 test_loss: 1.0380, test_acc: 0.6290, best: 0.6420, time: 0:01:53
 Epoch: 174, lr: 1.0e-02, train_loss: 1.0355, train_acc: 0.6288 test_loss: 1.0289, test_acc: 0.6362, best: 0.6420, time: 0:01:53
 Epoch: 175, lr: 1.0e-02, train_loss: 1.0698, train_acc: 0.6146 test_loss: 1.0250, test_acc: 0.6396, best: 0.6420, time: 0:01:53
 Epoch: 176, lr: 1.0e-02, train_loss: 1.0570, train_acc: 0.6178 test_loss: 1.0463, test_acc: 0.6291, best: 0.6420, time: 0:01:53
 Epoch: 177, lr: 1.0e-02, train_loss: 1.0479, train_acc: 0.6202 test_loss: 1.0093, test_acc: 0.6404, best: 0.6420, time: 0:01:53
 Epoch: 178, lr: 1.0e-02, train_loss: 1.0431, train_acc: 0.6234 test_loss: 1.0384, test_acc: 0.6355, best: 0.6420, time: 0:01:53
 Epoch: 179, lr: 1.0e-02, train_loss: 1.0488, train_acc: 0.6294 test_loss: 1.0275, test_acc: 0.6359, best: 0.6420, time: 0:01:53
 Epoch: 180, lr: 2.0e-03, train_loss: 0.9996, train_acc: 0.6334 test_loss: 0.9783, test_acc: 0.6548, best: 0.6548, time: 0:01:53
 Epoch: 181, lr: 2.0e-03, train_loss: 0.9723, train_acc: 0.6516 test_loss: 0.9630, test_acc: 0.6601, best: 0.6601, time: 0:01:53
 Epoch: 182, lr: 2.0e-03, train_loss: 0.9374, train_acc: 0.6616 test_loss: 0.9632, test_acc: 0.6570, best: 0.6601, time: 0:01:53
 Epoch: 183, lr: 2.0e-03, train_loss: 0.9377, train_acc: 0.6604 test_loss: 0.9460, test_acc: 0.6627, best: 0.6627, time: 0:01:53
 Epoch: 184, lr: 2.0e-03, train_loss: 0.9499, train_acc: 0.6584 test_loss: 0.9744, test_acc: 0.6531, best: 0.6627, time: 0:01:53
 Epoch: 185, lr: 2.0e-03, train_loss: 0.9648, train_acc: 0.6566 test_loss: 0.9650, test_acc: 0.6570, best: 0.6627, time: 0:01:53
 Epoch: 186, lr: 2.0e-03, train_loss: 0.9501, train_acc: 0.6632 test_loss: 0.9593, test_acc: 0.6620, best: 0.6627, time: 0:01:53
 Epoch: 187, lr: 2.0e-03, train_loss: 0.9372, train_acc: 0.6638 test_loss: 0.9563, test_acc: 0.6609, best: 0.6627, time: 0:01:54
 Epoch: 188, lr: 2.0e-03, train_loss: 0.9463, train_acc: 0.6566 test_loss: 0.9646, test_acc: 0.6550, best: 0.6627, time: 0:01:53
 Epoch: 189, lr: 2.0e-03, train_loss: 0.9311, train_acc: 0.6690 test_loss: 0.9751, test_acc: 0.6548, best: 0.6627, time: 0:01:53
 Epoch: 190, lr: 2.0e-03, train_loss: 0.9269, train_acc: 0.6686 test_loss: 0.9525, test_acc: 0.6619, best: 0.6627, time: 0:01:53
 Epoch: 191, lr: 2.0e-03, train_loss: 0.9390, train_acc: 0.6674 test_loss: 0.9640, test_acc: 0.6613, best: 0.6627, time: 0:01:53
 Epoch: 192, lr: 2.0e-03, train_loss: 0.9112, train_acc: 0.6686 test_loss: 0.9565, test_acc: 0.6639, best: 0.6639, time: 0:01:53
 Epoch: 193, lr: 2.0e-03, train_loss: 0.9277, train_acc: 0.6750 test_loss: 0.9709, test_acc: 0.6570, best: 0.6639, time: 0:01:53
 Epoch: 194, lr: 2.0e-03, train_loss: 0.9134, train_acc: 0.6630 test_loss: 0.9718, test_acc: 0.6560, best: 0.6639, time: 0:01:53
 Epoch: 195, lr: 2.0e-03, train_loss: 0.8907, train_acc: 0.6800 test_loss: 0.9714, test_acc: 0.6551, best: 0.6639, time: 0:01:53
 Epoch: 196, lr: 2.0e-03, train_loss: 0.9079, train_acc: 0.6714 test_loss: 0.9753, test_acc: 0.6534, best: 0.6639, time: 0:01:53
 Epoch: 197, lr: 2.0e-03, train_loss: 0.9061, train_acc: 0.6688 test_loss: 0.9511, test_acc: 0.6636, best: 0.6639, time: 0:01:54
 Epoch: 198, lr: 2.0e-03, train_loss: 0.9020, train_acc: 0.6754 test_loss: 0.9649, test_acc: 0.6596, best: 0.6639, time: 0:01:54
 Epoch: 199, lr: 2.0e-03, train_loss: 0.9048, train_acc: 0.6780 test_loss: 0.9785, test_acc: 0.6566, best: 0.6639, time: 0:01:53
 Epoch: 200, lr: 2.0e-03, train_loss: 0.8957, train_acc: 0.6844 test_loss: 0.9612, test_acc: 0.6584, best: 0.6639, time: 0:01:54
 Epoch: 201, lr: 2.0e-03, train_loss: 0.8950, train_acc: 0.6812 test_loss: 0.9654, test_acc: 0.6604, best: 0.6639, time: 0:01:54
 Epoch: 202, lr: 2.0e-03, train_loss: 0.8702, train_acc: 0.6908 test_loss: 0.9663, test_acc: 0.6623, best: 0.6639, time: 0:01:53
 Epoch: 203, lr: 2.0e-03, train_loss: 0.8891, train_acc: 0.6754 test_loss: 0.9676, test_acc: 0.6610, best: 0.6639, time: 0:01:53
 Epoch: 204, lr: 2.0e-03, train_loss: 0.9061, train_acc: 0.6726 test_loss: 0.9574, test_acc: 0.6611, best: 0.6639, time: 0:01:53
 Epoch: 205, lr: 2.0e-03, train_loss: 0.8915, train_acc: 0.6824 test_loss: 0.9660, test_acc: 0.6630, best: 0.6639, time: 0:01:53
 Epoch: 206, lr: 2.0e-03, train_loss: 0.8846, train_acc: 0.6808 test_loss: 0.9586, test_acc: 0.6587, best: 0.6639, time: 0:01:53
 Epoch: 207, lr: 2.0e-03, train_loss: 0.8821, train_acc: 0.6844 test_loss: 0.9621, test_acc: 0.6594, best: 0.6639, time: 0:01:53
 Epoch: 208, lr: 2.0e-03, train_loss: 0.8984, train_acc: 0.6762 test_loss: 0.9373, test_acc: 0.6667, best: 0.6667, time: 0:01:53
 Epoch: 209, lr: 2.0e-03, train_loss: 0.8945, train_acc: 0.6788 test_loss: 0.9520, test_acc: 0.6621, best: 0.6667, time: 0:01:53
 Epoch: 210, lr: 2.0e-03, train_loss: 0.8727, train_acc: 0.6900 test_loss: 0.9500, test_acc: 0.6631, best: 0.6667, time: 0:01:53
 Epoch: 211, lr: 2.0e-03, train_loss: 0.9070, train_acc: 0.6760 test_loss: 0.9694, test_acc: 0.6611, best: 0.6667, time: 0:01:53
 Epoch: 212, lr: 2.0e-03, train_loss: 0.8868, train_acc: 0.6912 test_loss: 0.9492, test_acc: 0.6646, best: 0.6667, time: 0:01:53
 Epoch: 213, lr: 2.0e-03, train_loss: 0.8892, train_acc: 0.6760 test_loss: 0.9319, test_acc: 0.6721, best: 0.6721, time: 0:01:53
 Epoch: 214, lr: 2.0e-03, train_loss: 0.8680, train_acc: 0.6860 test_loss: 0.9495, test_acc: 0.6684, best: 0.6721, time: 0:01:53
 Epoch: 215, lr: 2.0e-03, train_loss: 0.8947, train_acc: 0.6854 test_loss: 0.9489, test_acc: 0.6644, best: 0.6721, time: 0:01:53
 Epoch: 216, lr: 2.0e-03, train_loss: 0.8626, train_acc: 0.6886 test_loss: 0.9877, test_acc: 0.6491, best: 0.6721, time: 0:01:53
 Epoch: 217, lr: 2.0e-03, train_loss: 0.8757, train_acc: 0.6838 test_loss: 0.9634, test_acc: 0.6630, best: 0.6721, time: 0:01:53
 Epoch: 218, lr: 2.0e-03, train_loss: 0.8831, train_acc: 0.6822 test_loss: 0.9945, test_acc: 0.6482, best: 0.6721, time: 0:01:53
 Epoch: 219, lr: 2.0e-03, train_loss: 0.8519, train_acc: 0.7014 test_loss: 0.9725, test_acc: 0.6577, best: 0.6721, time: 0:01:53
 Epoch: 220, lr: 2.0e-03, train_loss: 0.8897, train_acc: 0.6840 test_loss: 0.9684, test_acc: 0.6565, best: 0.6721, time: 0:01:54
 Epoch: 221, lr: 2.0e-03, train_loss: 0.8600, train_acc: 0.6946 test_loss: 0.9491, test_acc: 0.6626, best: 0.6721, time: 0:01:53
 Epoch: 222, lr: 2.0e-03, train_loss: 0.8443, train_acc: 0.6934 test_loss: 0.9726, test_acc: 0.6600, best: 0.6721, time: 0:01:53
 Epoch: 223, lr: 2.0e-03, train_loss: 0.8594, train_acc: 0.6912 test_loss: 0.9684, test_acc: 0.6562, best: 0.6721, time: 0:01:53
 Epoch: 224, lr: 2.0e-03, train_loss: 0.8679, train_acc: 0.6882 test_loss: 0.9827, test_acc: 0.6561, best: 0.6721, time: 0:01:53
 Epoch: 225, lr: 2.0e-03, train_loss: 0.8772, train_acc: 0.6828 test_loss: 0.9451, test_acc: 0.6650, best: 0.6721, time: 0:01:53
 Epoch: 226, lr: 2.0e-03, train_loss: 0.8795, train_acc: 0.6858 test_loss: 0.9341, test_acc: 0.6715, best: 0.6721, time: 0:01:53
 Epoch: 227, lr: 2.0e-03, train_loss: 0.8800, train_acc: 0.6812 test_loss: 0.9409, test_acc: 0.6666, best: 0.6721, time: 0:01:53
 Epoch: 228, lr: 2.0e-03, train_loss: 0.8676, train_acc: 0.6870 test_loss: 0.9515, test_acc: 0.6666, best: 0.6721, time: 0:01:53
 Epoch: 229, lr: 2.0e-03, train_loss: 0.8498, train_acc: 0.7002 test_loss: 0.9530, test_acc: 0.6690, best: 0.6721, time: 0:01:53
 Epoch: 230, lr: 2.0e-03, train_loss: 0.8638, train_acc: 0.6942 test_loss: 0.9435, test_acc: 0.6630, best: 0.6721, time: 0:01:54
 Epoch: 231, lr: 2.0e-03, train_loss: 0.8589, train_acc: 0.6834 test_loss: 0.9585, test_acc: 0.6660, best: 0.6721, time: 0:01:54
 Epoch: 232, lr: 2.0e-03, train_loss: 0.8334, train_acc: 0.7072 test_loss: 0.9656, test_acc: 0.6605, best: 0.6721, time: 0:01:53
 Epoch: 233, lr: 2.0e-03, train_loss: 0.8757, train_acc: 0.6846 test_loss: 0.9473, test_acc: 0.6677, best: 0.6721, time: 0:01:53
 Epoch: 234, lr: 2.0e-03, train_loss: 0.8552, train_acc: 0.6944 test_loss: 0.9609, test_acc: 0.6609, best: 0.6721, time: 0:01:53
 Epoch: 235, lr: 2.0e-03, train_loss: 0.8643, train_acc: 0.6952 test_loss: 0.9649, test_acc: 0.6586, best: 0.6721, time: 0:01:53
 Epoch: 236, lr: 2.0e-03, train_loss: 0.8580, train_acc: 0.6922 test_loss: 0.9648, test_acc: 0.6597, best: 0.6721, time: 0:01:53
 Epoch: 237, lr: 2.0e-03, train_loss: 0.8529, train_acc: 0.6920 test_loss: 0.9464, test_acc: 0.6673, best: 0.6721, time: 0:01:53
 Epoch: 238, lr: 2.0e-03, train_loss: 0.8261, train_acc: 0.7074 test_loss: 1.0208, test_acc: 0.6412, best: 0.6721, time: 0:01:53
 Epoch: 239, lr: 2.0e-03, train_loss: 0.8557, train_acc: 0.6902 test_loss: 0.9627, test_acc: 0.6617, best: 0.6721, time: 0:01:53
 Epoch: 240, lr: 4.0e-04, train_loss: 0.8087, train_acc: 0.7070 test_loss: 0.9575, test_acc: 0.6666, best: 0.6721, time: 0:01:53
 Epoch: 241, lr: 4.0e-04, train_loss: 0.8454, train_acc: 0.7030 test_loss: 0.9466, test_acc: 0.6660, best: 0.6721, time: 0:01:53
 Epoch: 242, lr: 4.0e-04, train_loss: 0.8368, train_acc: 0.7002 test_loss: 0.9645, test_acc: 0.6614, best: 0.6721, time: 0:01:53
 Epoch: 243, lr: 4.0e-04, train_loss: 0.8163, train_acc: 0.7048 test_loss: 0.9523, test_acc: 0.6686, best: 0.6721, time: 0:01:53
 Epoch: 244, lr: 4.0e-04, train_loss: 0.8197, train_acc: 0.7034 test_loss: 0.9500, test_acc: 0.6669, best: 0.6721, time: 0:01:53
 Epoch: 245, lr: 4.0e-04, train_loss: 0.8108, train_acc: 0.7104 test_loss: 0.9437, test_acc: 0.6677, best: 0.6721, time: 0:01:53
 Epoch: 246, lr: 4.0e-04, train_loss: 0.8171, train_acc: 0.7094 test_loss: 0.9678, test_acc: 0.6617, best: 0.6721, time: 0:01:53
 Epoch: 247, lr: 4.0e-04, train_loss: 0.8087, train_acc: 0.7154 test_loss: 0.9670, test_acc: 0.6644, best: 0.6721, time: 0:01:53
 Epoch: 248, lr: 4.0e-04, train_loss: 0.8130, train_acc: 0.7098 test_loss: 0.9517, test_acc: 0.6663, best: 0.6721, time: 0:01:53
 Epoch: 249, lr: 4.0e-04, train_loss: 0.8188, train_acc: 0.7076 test_loss: 0.9580, test_acc: 0.6620, best: 0.6721, time: 0:01:53
 Epoch: 250, lr: 4.0e-04, train_loss: 0.7913, train_acc: 0.7126 test_loss: 0.9658, test_acc: 0.6637, best: 0.6721, time: 0:01:54
 Epoch: 251, lr: 4.0e-04, train_loss: 0.8400, train_acc: 0.7032 test_loss: 0.9469, test_acc: 0.6696, best: 0.6721, time: 0:01:53
 Epoch: 252, lr: 4.0e-04, train_loss: 0.7946, train_acc: 0.7198 test_loss: 0.9657, test_acc: 0.6636, best: 0.6721, time: 0:01:53
 Epoch: 253, lr: 4.0e-04, train_loss: 0.8045, train_acc: 0.7082 test_loss: 0.9464, test_acc: 0.6687, best: 0.6721, time: 0:01:54
 Epoch: 254, lr: 4.0e-04, train_loss: 0.8006, train_acc: 0.7190 test_loss: 0.9651, test_acc: 0.6679, best: 0.6721, time: 0:01:53
 Epoch: 255, lr: 4.0e-04, train_loss: 0.8307, train_acc: 0.7114 test_loss: 0.9537, test_acc: 0.6709, best: 0.6721, time: 0:01:53
 Epoch: 256, lr: 4.0e-04, train_loss: 0.8089, train_acc: 0.7140 test_loss: 0.9598, test_acc: 0.6661, best: 0.6721, time: 0:01:53
 Epoch: 257, lr: 4.0e-04, train_loss: 0.8057, train_acc: 0.7106 test_loss: 0.9522, test_acc: 0.6673, best: 0.6721, time: 0:01:53
 Epoch: 258, lr: 4.0e-04, train_loss: 0.8004, train_acc: 0.7084 test_loss: 0.9557, test_acc: 0.6673, best: 0.6721, time: 0:01:53
 Epoch: 259, lr: 4.0e-04, train_loss: 0.7838, train_acc: 0.7188 test_loss: 0.9575, test_acc: 0.6680, best: 0.6721, time: 0:01:53
 Epoch: 260, lr: 4.0e-04, train_loss: 0.7845, train_acc: 0.7202 test_loss: 0.9532, test_acc: 0.6704, best: 0.6721, time: 0:01:53
 Epoch: 261, lr: 4.0e-04, train_loss: 0.8326, train_acc: 0.7044 test_loss: 0.9313, test_acc: 0.6743, best: 0.6743, time: 0:01:54
 Epoch: 262, lr: 4.0e-04, train_loss: 0.8047, train_acc: 0.7130 test_loss: 0.9590, test_acc: 0.6621, best: 0.6743, time: 0:01:53
 Epoch: 263, lr: 4.0e-04, train_loss: 0.8100, train_acc: 0.7138 test_loss: 0.9485, test_acc: 0.6695, best: 0.6743, time: 0:01:53
 Epoch: 264, lr: 4.0e-04, train_loss: 0.7941, train_acc: 0.7216 test_loss: 0.9437, test_acc: 0.6721, best: 0.6743, time: 0:01:54
 Epoch: 265, lr: 4.0e-04, train_loss: 0.8063, train_acc: 0.7126 test_loss: 0.9476, test_acc: 0.6706, best: 0.6743, time: 0:01:53
 Epoch: 266, lr: 4.0e-04, train_loss: 0.8124, train_acc: 0.7088 test_loss: 0.9573, test_acc: 0.6663, best: 0.6743, time: 0:01:53
 Epoch: 267, lr: 4.0e-04, train_loss: 0.7930, train_acc: 0.7136 test_loss: 0.9545, test_acc: 0.6671, best: 0.6743, time: 0:01:53
 Epoch: 268, lr: 4.0e-04, train_loss: 0.7979, train_acc: 0.7162 test_loss: 0.9680, test_acc: 0.6633, best: 0.6743, time: 0:01:53
 Epoch: 269, lr: 4.0e-04, train_loss: 0.7876, train_acc: 0.7172 test_loss: 0.9542, test_acc: 0.6696, best: 0.6743, time: 0:01:53
 Epoch: 270, lr: 8.0e-05, train_loss: 0.8029, train_acc: 0.7078 test_loss: 0.9574, test_acc: 0.6683, best: 0.6743, time: 0:01:53
 Epoch: 271, lr: 8.0e-05, train_loss: 0.8224, train_acc: 0.7100 test_loss: 0.9558, test_acc: 0.6686, best: 0.6743, time: 0:01:53
 Epoch: 272, lr: 8.0e-05, train_loss: 0.7786, train_acc: 0.7220 test_loss: 0.9770, test_acc: 0.6617, best: 0.6743, time: 0:01:53
 Epoch: 273, lr: 8.0e-05, train_loss: 0.8083, train_acc: 0.7016 test_loss: 0.9503, test_acc: 0.6694, best: 0.6743, time: 0:01:53
 Epoch: 274, lr: 8.0e-05, train_loss: 0.7973, train_acc: 0.7212 test_loss: 0.9603, test_acc: 0.6686, best: 0.6743, time: 0:01:53
 Epoch: 275, lr: 8.0e-05, train_loss: 0.7820, train_acc: 0.7280 test_loss: 0.9573, test_acc: 0.6694, best: 0.6743, time: 0:01:53
 Epoch: 276, lr: 8.0e-05, train_loss: 0.8130, train_acc: 0.7096 test_loss: 0.9502, test_acc: 0.6715, best: 0.6743, time: 0:01:54
 Epoch: 277, lr: 8.0e-05, train_loss: 0.7973, train_acc: 0.7182 test_loss: 0.9591, test_acc: 0.6670, best: 0.6743, time: 0:01:53
 Epoch: 278, lr: 8.0e-05, train_loss: 0.7951, train_acc: 0.7232 test_loss: 0.9551, test_acc: 0.6669, best: 0.6743, time: 0:01:53
 Epoch: 279, lr: 8.0e-05, train_loss: 0.7926, train_acc: 0.7190 test_loss: 0.9623, test_acc: 0.6651, best: 0.6743, time: 0:01:53
 Epoch: 280, lr: 8.0e-05, train_loss: 0.8014, train_acc: 0.7202 test_loss: 0.9682, test_acc: 0.6636, best: 0.6743, time: 0:01:53
 Epoch: 281, lr: 8.0e-05, train_loss: 0.7952, train_acc: 0.7158 test_loss: 0.9644, test_acc: 0.6655, best: 0.6743, time: 0:01:53
 Epoch: 282, lr: 8.0e-05, train_loss: 0.8034, train_acc: 0.7124 test_loss: 0.9595, test_acc: 0.6665, best: 0.6743, time: 0:01:53
 Epoch: 283, lr: 8.0e-05, train_loss: 0.7630, train_acc: 0.7308 test_loss: 0.9511, test_acc: 0.6701, best: 0.6743, time: 0:01:53
 Epoch: 284, lr: 8.0e-05, train_loss: 0.8020, train_acc: 0.7114 test_loss: 0.9579, test_acc: 0.6677, best: 0.6743, time: 0:01:53
 Epoch: 285, lr: 8.0e-05, train_loss: 0.7957, train_acc: 0.7154 test_loss: 0.9614, test_acc: 0.6667, best: 0.6743, time: 0:01:53
 Epoch: 286, lr: 8.0e-05, train_loss: 0.7841, train_acc: 0.7236 test_loss: 0.9541, test_acc: 0.6689, best: 0.6743, time: 0:01:53
 Epoch: 287, lr: 8.0e-05, train_loss: 0.8053, train_acc: 0.7108 test_loss: 0.9586, test_acc: 0.6651, best: 0.6743, time: 0:01:53
 Epoch: 288, lr: 8.0e-05, train_loss: 0.8045, train_acc: 0.7146 test_loss: 0.9603, test_acc: 0.6694, best: 0.6743, time: 0:01:53
 Epoch: 289, lr: 8.0e-05, train_loss: 0.7866, train_acc: 0.7166 test_loss: 0.9528, test_acc: 0.6695, best: 0.6743, time: 0:01:53
 Epoch: 290, lr: 8.0e-05, train_loss: 0.7739, train_acc: 0.7236 test_loss: 0.9576, test_acc: 0.6685, best: 0.6743, time: 0:01:53
 Epoch: 291, lr: 8.0e-05, train_loss: 0.8006, train_acc: 0.7192 test_loss: 0.9608, test_acc: 0.6663, best: 0.6743, time: 0:01:53
 Epoch: 292, lr: 8.0e-05, train_loss: 0.7643, train_acc: 0.7312 test_loss: 0.9576, test_acc: 0.6665, best: 0.6743, time: 0:01:53
 Epoch: 293, lr: 8.0e-05, train_loss: 0.7928, train_acc: 0.7190 test_loss: 0.9513, test_acc: 0.6667, best: 0.6743, time: 0:01:53
 Epoch: 294, lr: 8.0e-05, train_loss: 0.7857, train_acc: 0.7212 test_loss: 0.9554, test_acc: 0.6714, best: 0.6743, time: 0:01:53
 Epoch: 295, lr: 8.0e-05, train_loss: 0.8101, train_acc: 0.7138 test_loss: 0.9537, test_acc: 0.6644, best: 0.6743, time: 0:01:53
 Epoch: 296, lr: 8.0e-05, train_loss: 0.7934, train_acc: 0.7162 test_loss: 0.9498, test_acc: 0.6700, best: 0.6743, time: 0:01:53
 Epoch: 297, lr: 8.0e-05, train_loss: 0.8132, train_acc: 0.7072 test_loss: 0.9518, test_acc: 0.6696, best: 0.6743, time: 0:01:54
 Epoch: 298, lr: 8.0e-05, train_loss: 0.7702, train_acc: 0.7258 test_loss: 0.9492, test_acc: 0.6683, best: 0.6743, time: 0:01:53
 Epoch: 299, lr: 8.0e-05, train_loss: 0.7780, train_acc: 0.7194 test_loss: 0.9533, test_acc: 0.6684, best: 0.6743, time: 0:01:52
 Highest accuracy: 0.6743