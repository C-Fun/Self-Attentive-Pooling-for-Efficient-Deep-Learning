
 Run on time: 2022-07-04 20:39:46.549037

 Architecture: prepool-skip-2-mobilenet_v2-skip-1222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : prepool-skip-2-mobilenet_v2-skip-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.4523, train_acc: 0.1806 test_loss: 1.8942, test_acc: 0.2605, best: 0.2605, time: 0:00:53
 Epoch: 2, lr: 1.0e-02, train_loss: 1.9950, train_acc: 0.2410 test_loss: 1.7335, test_acc: 0.3093, best: 0.3093, time: 0:00:52
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9224, train_acc: 0.2750 test_loss: 1.7684, test_acc: 0.3142, best: 0.3142, time: 0:00:52
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8766, train_acc: 0.2862 test_loss: 1.6002, test_acc: 0.3862, best: 0.3862, time: 0:00:52
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8457, train_acc: 0.3034 test_loss: 1.6132, test_acc: 0.3605, best: 0.3862, time: 0:00:52
 Epoch: 6, lr: 1.0e-02, train_loss: 1.7930, train_acc: 0.3266 test_loss: 1.5627, test_acc: 0.3840, best: 0.3862, time: 0:00:52
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7571, train_acc: 0.3318 test_loss: 1.5561, test_acc: 0.4073, best: 0.4073, time: 0:00:52
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7183, train_acc: 0.3472 test_loss: 1.5285, test_acc: 0.4079, best: 0.4079, time: 0:00:52
 Epoch: 9, lr: 1.0e-02, train_loss: 1.6764, train_acc: 0.3660 test_loss: 1.4691, test_acc: 0.4215, best: 0.4215, time: 0:00:53
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6536, train_acc: 0.3704 test_loss: 1.4525, test_acc: 0.4449, best: 0.4449, time: 0:00:54
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6165, train_acc: 0.3914 test_loss: 1.3794, test_acc: 0.4793, best: 0.4793, time: 0:00:54
 Epoch: 12, lr: 1.0e-02, train_loss: 1.5855, train_acc: 0.4086 test_loss: 1.3588, test_acc: 0.4955, best: 0.4955, time: 0:00:55
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5483, train_acc: 0.4166 test_loss: 1.3623, test_acc: 0.4859, best: 0.4955, time: 0:00:54
 Epoch: 14, lr: 1.0e-02, train_loss: 1.5426, train_acc: 0.4298 test_loss: 1.3009, test_acc: 0.5070, best: 0.5070, time: 0:00:54
 Epoch: 15, lr: 1.0e-02, train_loss: 1.5111, train_acc: 0.4390 test_loss: 1.3588, test_acc: 0.4978, best: 0.5070, time: 0:00:54
 Epoch: 16, lr: 1.0e-02, train_loss: 1.4775, train_acc: 0.4434 test_loss: 1.3174, test_acc: 0.5078, best: 0.5078, time: 0:00:54
 Epoch: 17, lr: 1.0e-02, train_loss: 1.4546, train_acc: 0.4568 test_loss: 1.2922, test_acc: 0.5226, best: 0.5226, time: 0:00:54
 Epoch: 18, lr: 1.0e-02, train_loss: 1.4389, train_acc: 0.4630 test_loss: 1.2623, test_acc: 0.5380, best: 0.5380, time: 0:00:54
 Epoch: 19, lr: 1.0e-02, train_loss: 1.4155, train_acc: 0.4864 test_loss: 1.3536, test_acc: 0.5178, best: 0.5380, time: 0:00:54
 Epoch: 20, lr: 1.0e-02, train_loss: 1.4019, train_acc: 0.4898 test_loss: 1.2536, test_acc: 0.5497, best: 0.5497, time: 0:00:54
 Epoch: 21, lr: 1.0e-02, train_loss: 1.3894, train_acc: 0.5000 test_loss: 1.1886, test_acc: 0.5625, best: 0.5625, time: 0:00:54
 Epoch: 22, lr: 1.0e-02, train_loss: 1.3648, train_acc: 0.4982 test_loss: 1.1847, test_acc: 0.5591, best: 0.5625, time: 0:00:54
 Epoch: 23, lr: 1.0e-02, train_loss: 1.3632, train_acc: 0.4952 test_loss: 1.2788, test_acc: 0.5359, best: 0.5625, time: 0:00:54
 Epoch: 24, lr: 1.0e-02, train_loss: 1.3306, train_acc: 0.5118 test_loss: 1.2138, test_acc: 0.5610, best: 0.5625, time: 0:00:54
 Epoch: 25, lr: 1.0e-02, train_loss: 1.3203, train_acc: 0.5146 test_loss: 1.1546, test_acc: 0.5865, best: 0.5865, time: 0:00:54
 Epoch: 26, lr: 1.0e-02, train_loss: 1.3127, train_acc: 0.5224 test_loss: 1.1338, test_acc: 0.5845, best: 0.5865, time: 0:00:54
 Epoch: 27, lr: 1.0e-02, train_loss: 1.2844, train_acc: 0.5300 test_loss: 1.1328, test_acc: 0.5891, best: 0.5891, time: 0:00:54
 Epoch: 28, lr: 1.0e-02, train_loss: 1.2786, train_acc: 0.5302 test_loss: 1.0938, test_acc: 0.6065, best: 0.6065, time: 0:00:54
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2712, train_acc: 0.5332 test_loss: 1.0878, test_acc: 0.6094, best: 0.6094, time: 0:00:54
 Epoch: 30, lr: 1.0e-02, train_loss: 1.2494, train_acc: 0.5468 test_loss: 1.0425, test_acc: 0.6274, best: 0.6274, time: 0:00:54
 Epoch: 31, lr: 1.0e-02, train_loss: 1.2213, train_acc: 0.5504 test_loss: 1.1099, test_acc: 0.5903, best: 0.6274, time: 0:00:54
 Epoch: 32, lr: 1.0e-02, train_loss: 1.2251, train_acc: 0.5566 test_loss: 1.0339, test_acc: 0.6241, best: 0.6274, time: 0:00:54
 Epoch: 33, lr: 1.0e-02, train_loss: 1.2029, train_acc: 0.5658 test_loss: 1.0639, test_acc: 0.6176, best: 0.6274, time: 0:00:54
 Epoch: 34, lr: 1.0e-02, train_loss: 1.1934, train_acc: 0.5620 test_loss: 1.0871, test_acc: 0.6148, best: 0.6274, time: 0:00:54
 Epoch: 35, lr: 1.0e-02, train_loss: 1.2065, train_acc: 0.5574 test_loss: 1.0594, test_acc: 0.6144, best: 0.6274, time: 0:00:54
 Epoch: 36, lr: 1.0e-02, train_loss: 1.1890, train_acc: 0.5682 test_loss: 1.0079, test_acc: 0.6328, best: 0.6328, time: 0:00:54
 Epoch: 37, lr: 1.0e-02, train_loss: 1.1466, train_acc: 0.5796 test_loss: 1.0151, test_acc: 0.6394, best: 0.6394, time: 0:00:54
 Epoch: 38, lr: 1.0e-02, train_loss: 1.1476, train_acc: 0.5784 test_loss: 0.9635, test_acc: 0.6511, best: 0.6511, time: 0:00:54
 Epoch: 39, lr: 1.0e-02, train_loss: 1.1435, train_acc: 0.5842 test_loss: 0.9933, test_acc: 0.6386, best: 0.6511, time: 0:00:54
 Epoch: 40, lr: 1.0e-02, train_loss: 1.1136, train_acc: 0.5960 test_loss: 0.9803, test_acc: 0.6454, best: 0.6511, time: 0:00:54
 Epoch: 41, lr: 1.0e-02, train_loss: 1.1295, train_acc: 0.5920 test_loss: 0.9665, test_acc: 0.6512, best: 0.6512, time: 0:00:54
 Epoch: 42, lr: 1.0e-02, train_loss: 1.1096, train_acc: 0.6074 test_loss: 0.9567, test_acc: 0.6552, best: 0.6552, time: 0:00:54
 Epoch: 43, lr: 1.0e-02, train_loss: 1.0872, train_acc: 0.6056 test_loss: 0.9565, test_acc: 0.6542, best: 0.6552, time: 0:00:54
 Epoch: 44, lr: 1.0e-02, train_loss: 1.0933, train_acc: 0.5976 test_loss: 0.9197, test_acc: 0.6601, best: 0.6601, time: 0:00:54
 Epoch: 45, lr: 1.0e-02, train_loss: 1.0637, train_acc: 0.6238 test_loss: 0.9212, test_acc: 0.6697, best: 0.6697, time: 0:00:54
 Epoch: 46, lr: 1.0e-02, train_loss: 1.0683, train_acc: 0.6148 test_loss: 0.9466, test_acc: 0.6616, best: 0.6697, time: 0:00:54
 Epoch: 47, lr: 1.0e-02, train_loss: 1.0552, train_acc: 0.6174 test_loss: 0.9743, test_acc: 0.6583, best: 0.6697, time: 0:00:54
 Epoch: 48, lr: 1.0e-02, train_loss: 1.0686, train_acc: 0.6128 test_loss: 0.9500, test_acc: 0.6637, best: 0.6697, time: 0:00:54
 Epoch: 49, lr: 1.0e-02, train_loss: 1.0364, train_acc: 0.6202 test_loss: 0.9310, test_acc: 0.6625, best: 0.6697, time: 0:00:54
 Epoch: 50, lr: 1.0e-02, train_loss: 1.0198, train_acc: 0.6262 test_loss: 0.8924, test_acc: 0.6851, best: 0.6851, time: 0:00:54
 Epoch: 51, lr: 1.0e-02, train_loss: 1.0194, train_acc: 0.6364 test_loss: 0.8912, test_acc: 0.6806, best: 0.6851, time: 0:00:54
 Epoch: 52, lr: 1.0e-02, train_loss: 1.0200, train_acc: 0.6352 test_loss: 0.9226, test_acc: 0.6689, best: 0.6851, time: 0:00:54
 Epoch: 53, lr: 1.0e-02, train_loss: 1.0053, train_acc: 0.6386 test_loss: 0.9223, test_acc: 0.6690, best: 0.6851, time: 0:00:54
 Epoch: 54, lr: 1.0e-02, train_loss: 1.0260, train_acc: 0.6256 test_loss: 0.9423, test_acc: 0.6686, best: 0.6851, time: 0:00:54
 Epoch: 55, lr: 1.0e-02, train_loss: 0.9850, train_acc: 0.6478 test_loss: 0.8990, test_acc: 0.6734, best: 0.6851, time: 0:00:54
 Epoch: 56, lr: 1.0e-02, train_loss: 0.9854, train_acc: 0.6492 test_loss: 0.8930, test_acc: 0.6823, best: 0.6851, time: 0:00:54
 Epoch: 57, lr: 1.0e-02, train_loss: 0.9858, train_acc: 0.6402 test_loss: 0.9142, test_acc: 0.6771, best: 0.6851, time: 0:00:54
 Epoch: 58, lr: 1.0e-02, train_loss: 0.9472, train_acc: 0.6656 test_loss: 0.8718, test_acc: 0.6926, best: 0.6926, time: 0:00:54
 Epoch: 59, lr: 1.0e-02, train_loss: 0.9728, train_acc: 0.6496 test_loss: 0.9145, test_acc: 0.6853, best: 0.6926, time: 0:00:54
 Epoch: 60, lr: 1.0e-02, train_loss: 0.9395, train_acc: 0.6576 test_loss: 0.8853, test_acc: 0.6771, best: 0.6926, time: 0:00:54
 Epoch: 61, lr: 1.0e-02, train_loss: 0.9641, train_acc: 0.6506 test_loss: 0.8682, test_acc: 0.6915, best: 0.6926, time: 0:00:54
 Epoch: 62, lr: 1.0e-02, train_loss: 0.9370, train_acc: 0.6530 test_loss: 0.8976, test_acc: 0.6781, best: 0.6926, time: 0:00:54
 Epoch: 63, lr: 1.0e-02, train_loss: 0.9295, train_acc: 0.6518 test_loss: 0.8276, test_acc: 0.7014, best: 0.7014, time: 0:00:54
 Epoch: 64, lr: 1.0e-02, train_loss: 0.9217, train_acc: 0.6704 test_loss: 0.8819, test_acc: 0.6924, best: 0.7014, time: 0:00:54
 Epoch: 65, lr: 1.0e-02, train_loss: 0.9223, train_acc: 0.6656 test_loss: 0.8395, test_acc: 0.7070, best: 0.7070, time: 0:00:54
 Epoch: 66, lr: 1.0e-02, train_loss: 0.8981, train_acc: 0.6804 test_loss: 0.9004, test_acc: 0.6820, best: 0.7070, time: 0:00:54
 Epoch: 67, lr: 1.0e-02, train_loss: 0.9145, train_acc: 0.6738 test_loss: 0.8346, test_acc: 0.7017, best: 0.7070, time: 0:00:54
 Epoch: 68, lr: 1.0e-02, train_loss: 0.8906, train_acc: 0.6848 test_loss: 0.8569, test_acc: 0.7055, best: 0.7070, time: 0:00:54
 Epoch: 69, lr: 1.0e-02, train_loss: 0.8992, train_acc: 0.6766 test_loss: 0.8382, test_acc: 0.7047, best: 0.7070, time: 0:00:54
 Epoch: 70, lr: 1.0e-02, train_loss: 0.8859, train_acc: 0.6864 test_loss: 0.8718, test_acc: 0.6921, best: 0.7070, time: 0:00:54
 Epoch: 71, lr: 1.0e-02, train_loss: 0.9037, train_acc: 0.6768 test_loss: 0.8130, test_acc: 0.7094, best: 0.7094, time: 0:00:54
 Epoch: 72, lr: 1.0e-02, train_loss: 0.8722, train_acc: 0.6868 test_loss: 0.8514, test_acc: 0.7056, best: 0.7094, time: 0:00:54
 Epoch: 73, lr: 1.0e-02, train_loss: 0.8685, train_acc: 0.6838 test_loss: 0.8433, test_acc: 0.7023, best: 0.7094, time: 0:00:54
 Epoch: 74, lr: 1.0e-02, train_loss: 0.8766, train_acc: 0.6786 test_loss: 0.8371, test_acc: 0.7061, best: 0.7094, time: 0:00:54
 Epoch: 75, lr: 1.0e-02, train_loss: 0.8604, train_acc: 0.6934 test_loss: 0.7912, test_acc: 0.7199, best: 0.7199, time: 0:00:54
 Epoch: 76, lr: 1.0e-02, train_loss: 0.8478, train_acc: 0.6996 test_loss: 0.8020, test_acc: 0.7248, best: 0.7248, time: 0:00:54
 Epoch: 77, lr: 1.0e-02, train_loss: 0.8469, train_acc: 0.6958 test_loss: 0.8011, test_acc: 0.7235, best: 0.7248, time: 0:00:54
 Epoch: 78, lr: 1.0e-02, train_loss: 0.8425, train_acc: 0.6964 test_loss: 0.8570, test_acc: 0.7081, best: 0.7248, time: 0:00:54
 Epoch: 79, lr: 1.0e-02, train_loss: 0.8417, train_acc: 0.6990 test_loss: 0.8120, test_acc: 0.7170, best: 0.7248, time: 0:00:54
 Epoch: 80, lr: 1.0e-02, train_loss: 0.8278, train_acc: 0.6976 test_loss: 0.8051, test_acc: 0.7184, best: 0.7248, time: 0:00:54
 Epoch: 81, lr: 1.0e-02, train_loss: 0.8378, train_acc: 0.7022 test_loss: 0.7555, test_acc: 0.7406, best: 0.7406, time: 0:00:54
 Epoch: 82, lr: 1.0e-02, train_loss: 0.8194, train_acc: 0.7000 test_loss: 0.8051, test_acc: 0.7205, best: 0.7406, time: 0:00:54
 Epoch: 83, lr: 1.0e-02, train_loss: 0.7961, train_acc: 0.7194 test_loss: 0.8334, test_acc: 0.7124, best: 0.7406, time: 0:00:54
 Epoch: 84, lr: 1.0e-02, train_loss: 0.8080, train_acc: 0.7132 test_loss: 0.8204, test_acc: 0.7165, best: 0.7406, time: 0:00:54
 Epoch: 85, lr: 1.0e-02, train_loss: 0.8053, train_acc: 0.7126 test_loss: 0.8804, test_acc: 0.7056, best: 0.7406, time: 0:00:54
 Epoch: 86, lr: 1.0e-02, train_loss: 0.7991, train_acc: 0.7146 test_loss: 0.7775, test_acc: 0.7308, best: 0.7406, time: 0:00:54
 Epoch: 87, lr: 1.0e-02, train_loss: 0.8013, train_acc: 0.7140 test_loss: 0.7829, test_acc: 0.7274, best: 0.7406, time: 0:00:54
 Epoch: 88, lr: 1.0e-02, train_loss: 0.7786, train_acc: 0.7214 test_loss: 0.8502, test_acc: 0.7146, best: 0.7406, time: 0:00:54
 Epoch: 89, lr: 1.0e-02, train_loss: 0.7714, train_acc: 0.7226 test_loss: 0.7867, test_acc: 0.7368, best: 0.7406, time: 0:00:54
 Epoch: 90, lr: 1.0e-02, train_loss: 0.7818, train_acc: 0.7186 test_loss: 0.8359, test_acc: 0.7154, best: 0.7406, time: 0:00:54
 Epoch: 91, lr: 1.0e-02, train_loss: 0.7750, train_acc: 0.7172 test_loss: 0.7225, test_acc: 0.7472, best: 0.7472, time: 0:00:54
 Epoch: 92, lr: 1.0e-02, train_loss: 0.7696, train_acc: 0.7238 test_loss: 0.7743, test_acc: 0.7335, best: 0.7472, time: 0:00:54
 Epoch: 93, lr: 1.0e-02, train_loss: 0.7789, train_acc: 0.7284 test_loss: 0.7499, test_acc: 0.7394, best: 0.7472, time: 0:00:54
 Epoch: 94, lr: 1.0e-02, train_loss: 0.7663, train_acc: 0.7302 test_loss: 0.8106, test_acc: 0.7169, best: 0.7472, time: 0:00:54
 Epoch: 95, lr: 1.0e-02, train_loss: 0.7475, train_acc: 0.7358 test_loss: 0.7674, test_acc: 0.7295, best: 0.7472, time: 0:00:54
 Epoch: 96, lr: 1.0e-02, train_loss: 0.7401, train_acc: 0.7350 test_loss: 0.7678, test_acc: 0.7355, best: 0.7472, time: 0:00:54
 Epoch: 97, lr: 1.0e-02, train_loss: 0.7337, train_acc: 0.7406 test_loss: 0.7754, test_acc: 0.7308, best: 0.7472, time: 0:00:54
 Epoch: 98, lr: 1.0e-02, train_loss: 0.7305, train_acc: 0.7422 test_loss: 0.8321, test_acc: 0.7291, best: 0.7472, time: 0:00:54
 Epoch: 99, lr: 1.0e-02, train_loss: 0.7378, train_acc: 0.7418 test_loss: 0.7866, test_acc: 0.7412, best: 0.7472, time: 0:00:54
 Epoch: 100, lr: 1.0e-02, train_loss: 0.7174, train_acc: 0.7480 test_loss: 0.8424, test_acc: 0.7254, best: 0.7472, time: 0:00:54
 Epoch: 101, lr: 1.0e-02, train_loss: 0.7173, train_acc: 0.7454 test_loss: 0.7890, test_acc: 0.7280, best: 0.7472, time: 0:00:54
 Epoch: 102, lr: 1.0e-02, train_loss: 0.7192, train_acc: 0.7362 test_loss: 0.7988, test_acc: 0.7322, best: 0.7472, time: 0:00:54
 Epoch: 103, lr: 1.0e-02, train_loss: 0.7287, train_acc: 0.7366 test_loss: 0.7680, test_acc: 0.7408, best: 0.7472, time: 0:00:54
 Epoch: 104, lr: 1.0e-02, train_loss: 0.7047, train_acc: 0.7454 test_loss: 0.8506, test_acc: 0.7206, best: 0.7472, time: 0:00:54
 Epoch: 105, lr: 1.0e-02, train_loss: 0.7315, train_acc: 0.7396 test_loss: 0.7786, test_acc: 0.7402, best: 0.7472, time: 0:00:54
 Epoch: 106, lr: 1.0e-02, train_loss: 0.7134, train_acc: 0.7486 test_loss: 0.7519, test_acc: 0.7445, best: 0.7472, time: 0:00:54
 Epoch: 107, lr: 1.0e-02, train_loss: 0.7099, train_acc: 0.7488 test_loss: 0.8135, test_acc: 0.7279, best: 0.7472, time: 0:00:54
 Epoch: 108, lr: 1.0e-02, train_loss: 0.6947, train_acc: 0.7546 test_loss: 0.7472, test_acc: 0.7479, best: 0.7479, time: 0:00:54
 Epoch: 109, lr: 1.0e-02, train_loss: 0.7158, train_acc: 0.7460 test_loss: 0.7270, test_acc: 0.7519, best: 0.7519, time: 0:00:54
 Epoch: 110, lr: 1.0e-02, train_loss: 0.6787, train_acc: 0.7536 test_loss: 0.7457, test_acc: 0.7528, best: 0.7528, time: 0:00:54
 Epoch: 111, lr: 1.0e-02, train_loss: 0.6852, train_acc: 0.7558 test_loss: 0.8020, test_acc: 0.7391, best: 0.7528, time: 0:00:54
 Epoch: 112, lr: 1.0e-02, train_loss: 0.6996, train_acc: 0.7480 test_loss: 0.7873, test_acc: 0.7359, best: 0.7528, time: 0:00:54
 Epoch: 113, lr: 1.0e-02, train_loss: 0.6785, train_acc: 0.7594 test_loss: 0.7560, test_acc: 0.7411, best: 0.7528, time: 0:00:54
 Epoch: 114, lr: 1.0e-02, train_loss: 0.6880, train_acc: 0.7490 test_loss: 0.7937, test_acc: 0.7365, best: 0.7528, time: 0:00:54
 Epoch: 115, lr: 1.0e-02, train_loss: 0.6794, train_acc: 0.7612 test_loss: 0.7876, test_acc: 0.7351, best: 0.7528, time: 0:00:54
 Epoch: 116, lr: 1.0e-02, train_loss: 0.6831, train_acc: 0.7570 test_loss: 0.7382, test_acc: 0.7498, best: 0.7528, time: 0:00:54
 Epoch: 117, lr: 1.0e-02, train_loss: 0.6767, train_acc: 0.7610 test_loss: 0.9116, test_acc: 0.7145, best: 0.7528, time: 0:00:54
 Epoch: 118, lr: 1.0e-02, train_loss: 0.6791, train_acc: 0.7542 test_loss: 0.7625, test_acc: 0.7496, best: 0.7528, time: 0:00:54
 Epoch: 119, lr: 1.0e-02, train_loss: 0.6763, train_acc: 0.7578 test_loss: 0.7596, test_acc: 0.7421, best: 0.7528, time: 0:00:54
 Epoch: 120, lr: 1.0e-02, train_loss: 0.6508, train_acc: 0.7690 test_loss: 0.7644, test_acc: 0.7458, best: 0.7528, time: 0:00:54
 Epoch: 121, lr: 1.0e-02, train_loss: 0.6486, train_acc: 0.7744 test_loss: 0.7410, test_acc: 0.7570, best: 0.7570, time: 0:00:54
 Epoch: 122, lr: 1.0e-02, train_loss: 0.6499, train_acc: 0.7644 test_loss: 0.8053, test_acc: 0.7382, best: 0.7570, time: 0:00:54
 Epoch: 123, lr: 1.0e-02, train_loss: 0.6497, train_acc: 0.7658 test_loss: 0.7858, test_acc: 0.7465, best: 0.7570, time: 0:00:54
 Epoch: 124, lr: 1.0e-02, train_loss: 0.6439, train_acc: 0.7712 test_loss: 0.7626, test_acc: 0.7535, best: 0.7570, time: 0:00:54
 Epoch: 125, lr: 1.0e-02, train_loss: 0.6530, train_acc: 0.7692 test_loss: 0.8070, test_acc: 0.7394, best: 0.7570, time: 0:00:54
 Epoch: 126, lr: 1.0e-02, train_loss: 0.6324, train_acc: 0.7770 test_loss: 0.7461, test_acc: 0.7561, best: 0.7570, time: 0:00:54
 Epoch: 127, lr: 1.0e-02, train_loss: 0.6524, train_acc: 0.7718 test_loss: 0.7755, test_acc: 0.7480, best: 0.7570, time: 0:00:54
 Epoch: 128, lr: 1.0e-02, train_loss: 0.6334, train_acc: 0.7762 test_loss: 0.8056, test_acc: 0.7418, best: 0.7570, time: 0:00:54
 Epoch: 129, lr: 1.0e-02, train_loss: 0.6329, train_acc: 0.7782 test_loss: 0.8548, test_acc: 0.7319, best: 0.7570, time: 0:00:54
 Epoch: 130, lr: 1.0e-02, train_loss: 0.6200, train_acc: 0.7794 test_loss: 0.7891, test_acc: 0.7426, best: 0.7570, time: 0:00:54
 Epoch: 131, lr: 1.0e-02, train_loss: 0.6193, train_acc: 0.7792 test_loss: 0.7561, test_acc: 0.7519, best: 0.7570, time: 0:00:54
 Epoch: 132, lr: 1.0e-02, train_loss: 0.6338, train_acc: 0.7806 test_loss: 0.7977, test_acc: 0.7462, best: 0.7570, time: 0:00:54
 Epoch: 133, lr: 1.0e-02, train_loss: 0.6231, train_acc: 0.7762 test_loss: 0.7436, test_acc: 0.7570, best: 0.7570, time: 0:00:54
 Epoch: 134, lr: 1.0e-02, train_loss: 0.6202, train_acc: 0.7814 test_loss: 0.7968, test_acc: 0.7424, best: 0.7570, time: 0:00:54
 Epoch: 135, lr: 1.0e-02, train_loss: 0.6343, train_acc: 0.7704 test_loss: 0.7374, test_acc: 0.7570, best: 0.7570, time: 0:00:54
 Epoch: 136, lr: 1.0e-02, train_loss: 0.6021, train_acc: 0.7844 test_loss: 0.7229, test_acc: 0.7669, best: 0.7669, time: 0:00:54
 Epoch: 137, lr: 1.0e-02, train_loss: 0.6051, train_acc: 0.7892 test_loss: 0.7193, test_acc: 0.7570, best: 0.7669, time: 0:00:54
 Epoch: 138, lr: 1.0e-02, train_loss: 0.6044, train_acc: 0.7886 test_loss: 0.7596, test_acc: 0.7594, best: 0.7669, time: 0:00:54
 Epoch: 139, lr: 1.0e-02, train_loss: 0.6186, train_acc: 0.7788 test_loss: 0.7677, test_acc: 0.7519, best: 0.7669, time: 0:00:54
 Epoch: 140, lr: 1.0e-02, train_loss: 0.5792, train_acc: 0.7902 test_loss: 0.7256, test_acc: 0.7665, best: 0.7669, time: 0:00:54
 Epoch: 141, lr: 1.0e-02, train_loss: 0.5746, train_acc: 0.7870 test_loss: 0.7708, test_acc: 0.7534, best: 0.7669, time: 0:00:54
 Epoch: 142, lr: 1.0e-02, train_loss: 0.5934, train_acc: 0.7978 test_loss: 0.8023, test_acc: 0.7511, best: 0.7669, time: 0:00:54
 Epoch: 143, lr: 1.0e-02, train_loss: 0.5883, train_acc: 0.7892 test_loss: 0.7403, test_acc: 0.7664, best: 0.7669, time: 0:00:54
 Epoch: 144, lr: 1.0e-02, train_loss: 0.5873, train_acc: 0.7946 test_loss: 0.7356, test_acc: 0.7696, best: 0.7696, time: 0:00:54
 Epoch: 145, lr: 1.0e-02, train_loss: 0.6113, train_acc: 0.7814 test_loss: 0.7627, test_acc: 0.7570, best: 0.7696, time: 0:00:54
 Epoch: 146, lr: 1.0e-02, train_loss: 0.5635, train_acc: 0.7974 test_loss: 0.7628, test_acc: 0.7614, best: 0.7696, time: 0:00:54
 Epoch: 147, lr: 1.0e-02, train_loss: 0.5715, train_acc: 0.7908 test_loss: 0.7961, test_acc: 0.7408, best: 0.7696, time: 0:00:54
 Epoch: 148, lr: 1.0e-02, train_loss: 0.5780, train_acc: 0.7930 test_loss: 0.8288, test_acc: 0.7494, best: 0.7696, time: 0:00:54
 Epoch: 149, lr: 1.0e-02, train_loss: 0.5628, train_acc: 0.7980 test_loss: 0.7801, test_acc: 0.7538, best: 0.7696, time: 0:00:54
 Epoch: 150, lr: 1.0e-02, train_loss: 0.5414, train_acc: 0.8050 test_loss: 0.7324, test_acc: 0.7756, best: 0.7756, time: 0:00:54
 Epoch: 151, lr: 1.0e-02, train_loss: 0.5666, train_acc: 0.7986 test_loss: 0.7268, test_acc: 0.7594, best: 0.7756, time: 0:00:54
 Epoch: 152, lr: 1.0e-02, train_loss: 0.5667, train_acc: 0.7966 test_loss: 0.7229, test_acc: 0.7596, best: 0.7756, time: 0:00:54
 Epoch: 153, lr: 1.0e-02, train_loss: 0.5768, train_acc: 0.7930 test_loss: 0.7534, test_acc: 0.7634, best: 0.7756, time: 0:00:54
 Epoch: 154, lr: 1.0e-02, train_loss: 0.5667, train_acc: 0.8022 test_loss: 0.7636, test_acc: 0.7548, best: 0.7756, time: 0:00:54
 Epoch: 155, lr: 1.0e-02, train_loss: 0.5368, train_acc: 0.8100 test_loss: 0.8251, test_acc: 0.7394, best: 0.7756, time: 0:00:54
 Epoch: 156, lr: 1.0e-02, train_loss: 0.5482, train_acc: 0.8080 test_loss: 0.7402, test_acc: 0.7644, best: 0.7756, time: 0:00:54
 Epoch: 157, lr: 1.0e-02, train_loss: 0.5590, train_acc: 0.8004 test_loss: 0.7666, test_acc: 0.7659, best: 0.7756, time: 0:00:54
 Epoch: 158, lr: 1.0e-02, train_loss: 0.5668, train_acc: 0.8046 test_loss: 0.7080, test_acc: 0.7789, best: 0.7789, time: 0:00:54
 Epoch: 159, lr: 1.0e-02, train_loss: 0.5367, train_acc: 0.8090 test_loss: 0.8212, test_acc: 0.7608, best: 0.7789, time: 0:00:54
 Epoch: 160, lr: 1.0e-02, train_loss: 0.5610, train_acc: 0.8014 test_loss: 0.7740, test_acc: 0.7611, best: 0.7789, time: 0:00:54
 Epoch: 161, lr: 1.0e-02, train_loss: 0.5605, train_acc: 0.8104 test_loss: 0.7622, test_acc: 0.7690, best: 0.7789, time: 0:00:54
 Epoch: 162, lr: 1.0e-02, train_loss: 0.5511, train_acc: 0.8072 test_loss: 0.7723, test_acc: 0.7622, best: 0.7789, time: 0:00:54
 Epoch: 163, lr: 1.0e-02, train_loss: 0.5363, train_acc: 0.8092 test_loss: 0.7452, test_acc: 0.7665, best: 0.7789, time: 0:00:54
 Epoch: 164, lr: 1.0e-02, train_loss: 0.5548, train_acc: 0.8012 test_loss: 0.7591, test_acc: 0.7628, best: 0.7789, time: 0:00:54
 Epoch: 165, lr: 1.0e-02, train_loss: 0.5234, train_acc: 0.8162 test_loss: 0.7648, test_acc: 0.7652, best: 0.7789, time: 0:00:54
 Epoch: 166, lr: 1.0e-02, train_loss: 0.5457, train_acc: 0.8076 test_loss: 0.7542, test_acc: 0.7664, best: 0.7789, time: 0:00:54
 Epoch: 167, lr: 1.0e-02, train_loss: 0.5351, train_acc: 0.8130 test_loss: 0.7233, test_acc: 0.7726, best: 0.7789, time: 0:00:54
 Epoch: 168, lr: 1.0e-02, train_loss: 0.5258, train_acc: 0.8134 test_loss: 0.8048, test_acc: 0.7534, best: 0.7789, time: 0:00:54
 Epoch: 169, lr: 1.0e-02, train_loss: 0.5508, train_acc: 0.8068 test_loss: 0.7763, test_acc: 0.7525, best: 0.7789, time: 0:00:54
 Epoch: 170, lr: 1.0e-02, train_loss: 0.5159, train_acc: 0.8194 test_loss: 0.8602, test_acc: 0.7518, best: 0.7789, time: 0:00:54
 Epoch: 171, lr: 1.0e-02, train_loss: 0.5151, train_acc: 0.8174 test_loss: 0.7830, test_acc: 0.7741, best: 0.7789, time: 0:00:54
 Epoch: 172, lr: 1.0e-02, train_loss: 0.5094, train_acc: 0.8160 test_loss: 0.8219, test_acc: 0.7575, best: 0.7789, time: 0:00:54
 Epoch: 173, lr: 1.0e-02, train_loss: 0.5112, train_acc: 0.8186 test_loss: 0.8363, test_acc: 0.7495, best: 0.7789, time: 0:00:54
 Epoch: 174, lr: 1.0e-02, train_loss: 0.5368, train_acc: 0.8106 test_loss: 0.7246, test_acc: 0.7754, best: 0.7789, time: 0:00:54
 Epoch: 175, lr: 1.0e-02, train_loss: 0.4799, train_acc: 0.8342 test_loss: 0.8354, test_acc: 0.7525, best: 0.7789, time: 0:00:54
 Epoch: 176, lr: 1.0e-02, train_loss: 0.5017, train_acc: 0.8184 test_loss: 0.8099, test_acc: 0.7576, best: 0.7789, time: 0:00:54
 Epoch: 177, lr: 1.0e-02, train_loss: 0.4993, train_acc: 0.8244 test_loss: 0.8298, test_acc: 0.7596, best: 0.7789, time: 0:00:54
 Epoch: 178, lr: 1.0e-02, train_loss: 0.5149, train_acc: 0.8202 test_loss: 0.7565, test_acc: 0.7661, best: 0.7789, time: 0:00:54
 Epoch: 179, lr: 1.0e-02, train_loss: 0.5220, train_acc: 0.8156 test_loss: 0.7229, test_acc: 0.7762, best: 0.7789, time: 0:00:54
 Epoch: 180, lr: 2.0e-03, train_loss: 0.4358, train_acc: 0.8436 test_loss: 0.7139, test_acc: 0.7895, best: 0.7895, time: 0:00:54
 Epoch: 181, lr: 2.0e-03, train_loss: 0.4160, train_acc: 0.8562 test_loss: 0.7449, test_acc: 0.7884, best: 0.7895, time: 0:00:54
 Epoch: 182, lr: 2.0e-03, train_loss: 0.3956, train_acc: 0.8628 test_loss: 0.7432, test_acc: 0.7870, best: 0.7895, time: 0:00:54
 Epoch: 183, lr: 2.0e-03, train_loss: 0.3878, train_acc: 0.8644 test_loss: 0.7333, test_acc: 0.7854, best: 0.7895, time: 0:00:54
 Epoch: 184, lr: 2.0e-03, train_loss: 0.3908, train_acc: 0.8602 test_loss: 0.7297, test_acc: 0.7920, best: 0.7920, time: 0:00:54
 Epoch: 185, lr: 2.0e-03, train_loss: 0.3782, train_acc: 0.8642 test_loss: 0.7194, test_acc: 0.7929, best: 0.7929, time: 0:00:54
 Epoch: 186, lr: 2.0e-03, train_loss: 0.3810, train_acc: 0.8680 test_loss: 0.7378, test_acc: 0.7895, best: 0.7929, time: 0:00:54
 Epoch: 187, lr: 2.0e-03, train_loss: 0.3676, train_acc: 0.8692 test_loss: 0.7524, test_acc: 0.7930, best: 0.7930, time: 0:00:54
 Epoch: 188, lr: 2.0e-03, train_loss: 0.3808, train_acc: 0.8682 test_loss: 0.7419, test_acc: 0.7920, best: 0.7930, time: 0:00:54
 Epoch: 189, lr: 2.0e-03, train_loss: 0.3831, train_acc: 0.8608 test_loss: 0.7110, test_acc: 0.7965, best: 0.7965, time: 0:00:54
 Epoch: 190, lr: 2.0e-03, train_loss: 0.3752, train_acc: 0.8716 test_loss: 0.7326, test_acc: 0.7916, best: 0.7965, time: 0:00:54
 Epoch: 191, lr: 2.0e-03, train_loss: 0.3881, train_acc: 0.8682 test_loss: 0.7369, test_acc: 0.7919, best: 0.7965, time: 0:00:54
 Epoch: 192, lr: 2.0e-03, train_loss: 0.3807, train_acc: 0.8660 test_loss: 0.7258, test_acc: 0.7941, best: 0.7965, time: 0:00:54
 Epoch: 193, lr: 2.0e-03, train_loss: 0.3522, train_acc: 0.8792 test_loss: 0.7693, test_acc: 0.7874, best: 0.7965, time: 0:00:54
 Epoch: 194, lr: 2.0e-03, train_loss: 0.3639, train_acc: 0.8716 test_loss: 0.7758, test_acc: 0.7875, best: 0.7965, time: 0:00:54
 Epoch: 195, lr: 2.0e-03, train_loss: 0.3643, train_acc: 0.8682 test_loss: 0.7570, test_acc: 0.7913, best: 0.7965, time: 0:00:54
 Epoch: 196, lr: 2.0e-03, train_loss: 0.3703, train_acc: 0.8670 test_loss: 0.7548, test_acc: 0.7915, best: 0.7965, time: 0:00:54
 Epoch: 197, lr: 2.0e-03, train_loss: 0.3579, train_acc: 0.8736 test_loss: 0.7313, test_acc: 0.7920, best: 0.7965, time: 0:00:54
 Epoch: 198, lr: 2.0e-03, train_loss: 0.3551, train_acc: 0.8796 test_loss: 0.7294, test_acc: 0.7961, best: 0.7965, time: 0:00:55
 Epoch: 199, lr: 2.0e-03, train_loss: 0.3473, train_acc: 0.8762 test_loss: 0.7472, test_acc: 0.7903, best: 0.7965, time: 0:00:54
 Epoch: 200, lr: 2.0e-03, train_loss: 0.3488, train_acc: 0.8828 test_loss: 0.7747, test_acc: 0.7904, best: 0.7965, time: 0:00:54
 Epoch: 201, lr: 2.0e-03, train_loss: 0.3377, train_acc: 0.8830 test_loss: 0.7542, test_acc: 0.7917, best: 0.7965, time: 0:00:54
 Epoch: 202, lr: 2.0e-03, train_loss: 0.3598, train_acc: 0.8720 test_loss: 0.7790, test_acc: 0.7913, best: 0.7965, time: 0:00:54
 Epoch: 203, lr: 2.0e-03, train_loss: 0.3430, train_acc: 0.8786 test_loss: 0.7616, test_acc: 0.7887, best: 0.7965, time: 0:00:54
 Epoch: 204, lr: 2.0e-03, train_loss: 0.3285, train_acc: 0.8886 test_loss: 0.7642, test_acc: 0.7909, best: 0.7965, time: 0:00:54
 Epoch: 205, lr: 2.0e-03, train_loss: 0.3373, train_acc: 0.8824 test_loss: 0.7710, test_acc: 0.7901, best: 0.7965, time: 0:00:54
 Epoch: 206, lr: 2.0e-03, train_loss: 0.3623, train_acc: 0.8784 test_loss: 0.7550, test_acc: 0.7921, best: 0.7965, time: 0:00:54
 Epoch: 207, lr: 2.0e-03, train_loss: 0.3183, train_acc: 0.8834 test_loss: 0.7787, test_acc: 0.7870, best: 0.7965, time: 0:00:54
 Epoch: 208, lr: 2.0e-03, train_loss: 0.3378, train_acc: 0.8862 test_loss: 0.7625, test_acc: 0.7869, best: 0.7965, time: 0:00:54
 Epoch: 209, lr: 2.0e-03, train_loss: 0.3443, train_acc: 0.8786 test_loss: 0.7407, test_acc: 0.7947, best: 0.7965, time: 0:00:54
 Epoch: 210, lr: 2.0e-03, train_loss: 0.3495, train_acc: 0.8788 test_loss: 0.7733, test_acc: 0.7844, best: 0.7965, time: 0:00:54
 Epoch: 211, lr: 2.0e-03, train_loss: 0.3551, train_acc: 0.8750 test_loss: 0.7516, test_acc: 0.7920, best: 0.7965, time: 0:00:54
 Epoch: 212, lr: 2.0e-03, train_loss: 0.3359, train_acc: 0.8850 test_loss: 0.7560, test_acc: 0.7889, best: 0.7965, time: 0:00:54
 Epoch: 213, lr: 2.0e-03, train_loss: 0.3515, train_acc: 0.8758 test_loss: 0.7637, test_acc: 0.7919, best: 0.7965, time: 0:00:54
 Epoch: 214, lr: 2.0e-03, train_loss: 0.3337, train_acc: 0.8876 test_loss: 0.8226, test_acc: 0.7829, best: 0.7965, time: 0:00:54
 Epoch: 215, lr: 2.0e-03, train_loss: 0.3400, train_acc: 0.8798 test_loss: 0.7758, test_acc: 0.7879, best: 0.7965, time: 0:00:54
 Epoch: 216, lr: 2.0e-03, train_loss: 0.3535, train_acc: 0.8788 test_loss: 0.7952, test_acc: 0.7883, best: 0.7965, time: 0:00:54
 Epoch: 217, lr: 2.0e-03, train_loss: 0.3348, train_acc: 0.8828 test_loss: 0.8108, test_acc: 0.7853, best: 0.7965, time: 0:00:54
 Epoch: 218, lr: 2.0e-03, train_loss: 0.3215, train_acc: 0.8848 test_loss: 0.8162, test_acc: 0.7855, best: 0.7965, time: 0:00:54
 Epoch: 219, lr: 2.0e-03, train_loss: 0.3300, train_acc: 0.8832 test_loss: 0.7890, test_acc: 0.7914, best: 0.7965, time: 0:00:54
 Epoch: 220, lr: 2.0e-03, train_loss: 0.3232, train_acc: 0.8824 test_loss: 0.7884, test_acc: 0.7874, best: 0.7965, time: 0:00:54
 Epoch: 221, lr: 2.0e-03, train_loss: 0.3320, train_acc: 0.8862 test_loss: 0.7813, test_acc: 0.7844, best: 0.7965, time: 0:00:54
 Epoch: 222, lr: 2.0e-03, train_loss: 0.3274, train_acc: 0.8878 test_loss: 0.7841, test_acc: 0.7880, best: 0.7965, time: 0:00:54
 Epoch: 223, lr: 2.0e-03, train_loss: 0.3300, train_acc: 0.8900 test_loss: 0.7590, test_acc: 0.7940, best: 0.7965, time: 0:00:54
 Epoch: 224, lr: 2.0e-03, train_loss: 0.3201, train_acc: 0.8856 test_loss: 0.7686, test_acc: 0.7899, best: 0.7965, time: 0:00:54
 Epoch: 225, lr: 2.0e-03, train_loss: 0.3156, train_acc: 0.8864 test_loss: 0.7911, test_acc: 0.7891, best: 0.7965, time: 0:00:54
 Epoch: 226, lr: 2.0e-03, train_loss: 0.3656, train_acc: 0.8730 test_loss: 0.7587, test_acc: 0.7896, best: 0.7965, time: 0:00:54
 Epoch: 227, lr: 2.0e-03, train_loss: 0.3261, train_acc: 0.8892 test_loss: 0.7734, test_acc: 0.7914, best: 0.7965, time: 0:00:54
 Epoch: 228, lr: 2.0e-03, train_loss: 0.3295, train_acc: 0.8860 test_loss: 0.7672, test_acc: 0.7939, best: 0.7965, time: 0:00:54
 Epoch: 229, lr: 2.0e-03, train_loss: 0.3320, train_acc: 0.8850 test_loss: 0.8001, test_acc: 0.7880, best: 0.7965, time: 0:00:54
 Epoch: 230, lr: 2.0e-03, train_loss: 0.3352, train_acc: 0.8868 test_loss: 0.7785, test_acc: 0.7873, best: 0.7965, time: 0:00:54
 Epoch: 231, lr: 2.0e-03, train_loss: 0.3167, train_acc: 0.8894 test_loss: 0.8068, test_acc: 0.7800, best: 0.7965, time: 0:00:54
 Epoch: 232, lr: 2.0e-03, train_loss: 0.3335, train_acc: 0.8818 test_loss: 0.7721, test_acc: 0.7894, best: 0.7965, time: 0:00:54
 Epoch: 233, lr: 2.0e-03, train_loss: 0.3229, train_acc: 0.8852 test_loss: 0.7965, test_acc: 0.7851, best: 0.7965, time: 0:00:54
 Epoch: 234, lr: 2.0e-03, train_loss: 0.3274, train_acc: 0.8854 test_loss: 0.8126, test_acc: 0.7823, best: 0.7965, time: 0:00:54
 Epoch: 235, lr: 2.0e-03, train_loss: 0.3211, train_acc: 0.8892 test_loss: 0.7737, test_acc: 0.7906, best: 0.7965, time: 0:00:54
 Epoch: 236, lr: 2.0e-03, train_loss: 0.2964, train_acc: 0.8936 test_loss: 0.8188, test_acc: 0.7859, best: 0.7965, time: 0:00:54
 Epoch: 237, lr: 2.0e-03, train_loss: 0.3065, train_acc: 0.8888 test_loss: 0.8004, test_acc: 0.7869, best: 0.7965, time: 0:00:54
 Epoch: 238, lr: 2.0e-03, train_loss: 0.3062, train_acc: 0.8912 test_loss: 0.8016, test_acc: 0.7861, best: 0.7965, time: 0:00:54
 Epoch: 239, lr: 2.0e-03, train_loss: 0.3241, train_acc: 0.8920 test_loss: 0.7899, test_acc: 0.7903, best: 0.7965, time: 0:00:54
 Epoch: 240, lr: 4.0e-04, train_loss: 0.3008, train_acc: 0.8946 test_loss: 0.7846, test_acc: 0.7910, best: 0.7965, time: 0:00:54
 Epoch: 241, lr: 4.0e-04, train_loss: 0.2975, train_acc: 0.8976 test_loss: 0.7569, test_acc: 0.7895, best: 0.7965, time: 0:00:54
 Epoch: 242, lr: 4.0e-04, train_loss: 0.3027, train_acc: 0.8974 test_loss: 0.7787, test_acc: 0.7911, best: 0.7965, time: 0:00:54
 Epoch: 243, lr: 4.0e-04, train_loss: 0.3085, train_acc: 0.8896 test_loss: 0.7836, test_acc: 0.7894, best: 0.7965, time: 0:00:54
 Epoch: 244, lr: 4.0e-04, train_loss: 0.3017, train_acc: 0.8942 test_loss: 0.7868, test_acc: 0.7879, best: 0.7965, time: 0:00:54
 Epoch: 245, lr: 4.0e-04, train_loss: 0.3041, train_acc: 0.8866 test_loss: 0.7920, test_acc: 0.7930, best: 0.7965, time: 0:00:54
 Epoch: 246, lr: 4.0e-04, train_loss: 0.3073, train_acc: 0.8870 test_loss: 0.7786, test_acc: 0.7900, best: 0.7965, time: 0:00:54
 Epoch: 247, lr: 4.0e-04, train_loss: 0.2977, train_acc: 0.8940 test_loss: 0.7869, test_acc: 0.7901, best: 0.7965, time: 0:00:54
 Epoch: 248, lr: 4.0e-04, train_loss: 0.2843, train_acc: 0.8990 test_loss: 0.8164, test_acc: 0.7881, best: 0.7965, time: 0:00:54
 Epoch: 249, lr: 4.0e-04, train_loss: 0.3069, train_acc: 0.8956 test_loss: 0.8051, test_acc: 0.7901, best: 0.7965, time: 0:00:54
 Epoch: 250, lr: 4.0e-04, train_loss: 0.3031, train_acc: 0.8972 test_loss: 0.7797, test_acc: 0.7930, best: 0.7965, time: 0:00:54
 Epoch: 251, lr: 4.0e-04, train_loss: 0.2845, train_acc: 0.8984 test_loss: 0.7846, test_acc: 0.7909, best: 0.7965, time: 0:00:54
 Epoch: 252, lr: 4.0e-04, train_loss: 0.2923, train_acc: 0.9014 test_loss: 0.8001, test_acc: 0.7904, best: 0.7965, time: 0:00:54
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2958, train_acc: 0.8978 test_loss: 0.7811, test_acc: 0.7890, best: 0.7965, time: 0:00:54
 Epoch: 254, lr: 4.0e-04, train_loss: 0.2927, train_acc: 0.8964 test_loss: 0.7767, test_acc: 0.7929, best: 0.7965, time: 0:00:54
 Epoch: 255, lr: 4.0e-04, train_loss: 0.2949, train_acc: 0.8964 test_loss: 0.7805, test_acc: 0.7914, best: 0.7965, time: 0:00:54
 Epoch: 256, lr: 4.0e-04, train_loss: 0.2907, train_acc: 0.8990 test_loss: 0.7914, test_acc: 0.7936, best: 0.7965, time: 0:00:54
 Epoch: 257, lr: 4.0e-04, train_loss: 0.2881, train_acc: 0.8988 test_loss: 0.7747, test_acc: 0.7925, best: 0.7965, time: 0:00:54
 Epoch: 258, lr: 4.0e-04, train_loss: 0.3006, train_acc: 0.8918 test_loss: 0.7965, test_acc: 0.7930, best: 0.7965, time: 0:00:53
 Epoch: 259, lr: 4.0e-04, train_loss: 0.3091, train_acc: 0.8902 test_loss: 0.7871, test_acc: 0.7920, best: 0.7965, time: 0:00:53
 Epoch: 260, lr: 4.0e-04, train_loss: 0.3068, train_acc: 0.8908 test_loss: 0.8055, test_acc: 0.7905, best: 0.7965, time: 0:00:53
 Epoch: 261, lr: 4.0e-04, train_loss: 0.3019, train_acc: 0.8958 test_loss: 0.7747, test_acc: 0.7920, best: 0.7965, time: 0:00:53
 Epoch: 262, lr: 4.0e-04, train_loss: 0.2986, train_acc: 0.8984 test_loss: 0.7844, test_acc: 0.7927, best: 0.7965, time: 0:00:53
 Epoch: 263, lr: 4.0e-04, train_loss: 0.2829, train_acc: 0.9020 test_loss: 0.7956, test_acc: 0.7925, best: 0.7965, time: 0:00:53
 Epoch: 264, lr: 4.0e-04, train_loss: 0.2878, train_acc: 0.8988 test_loss: 0.8024, test_acc: 0.7903, best: 0.7965, time: 0:00:53
 Epoch: 265, lr: 4.0e-04, train_loss: 0.2877, train_acc: 0.8978 test_loss: 0.7764, test_acc: 0.7950, best: 0.7965, time: 0:00:53
 Epoch: 266, lr: 4.0e-04, train_loss: 0.2919, train_acc: 0.9016 test_loss: 0.7861, test_acc: 0.7957, best: 0.7965, time: 0:00:53
 Epoch: 267, lr: 4.0e-04, train_loss: 0.2877, train_acc: 0.9058 test_loss: 0.7777, test_acc: 0.7954, best: 0.7965, time: 0:00:53
 Epoch: 268, lr: 4.0e-04, train_loss: 0.2824, train_acc: 0.9020 test_loss: 0.7854, test_acc: 0.7963, best: 0.7965, time: 0:00:53
 Epoch: 269, lr: 4.0e-04, train_loss: 0.2861, train_acc: 0.8996 test_loss: 0.7816, test_acc: 0.7916, best: 0.7965, time: 0:00:53
 Epoch: 270, lr: 8.0e-05, train_loss: 0.2786, train_acc: 0.9064 test_loss: 0.7818, test_acc: 0.7969, best: 0.7969, time: 0:00:54
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2951, train_acc: 0.8976 test_loss: 0.7727, test_acc: 0.7943, best: 0.7969, time: 0:00:53
 Epoch: 272, lr: 8.0e-05, train_loss: 0.2825, train_acc: 0.9024 test_loss: 0.7877, test_acc: 0.7937, best: 0.7969, time: 0:00:53
 Epoch: 273, lr: 8.0e-05, train_loss: 0.2788, train_acc: 0.9000 test_loss: 0.8070, test_acc: 0.7943, best: 0.7969, time: 0:00:53
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2954, train_acc: 0.8978 test_loss: 0.7811, test_acc: 0.7936, best: 0.7969, time: 0:00:53
 Epoch: 275, lr: 8.0e-05, train_loss: 0.3103, train_acc: 0.8894 test_loss: 0.7916, test_acc: 0.7947, best: 0.7969, time: 0:00:53
 Epoch: 276, lr: 8.0e-05, train_loss: 0.2757, train_acc: 0.9018 test_loss: 0.7657, test_acc: 0.7959, best: 0.7969, time: 0:00:53
 Epoch: 277, lr: 8.0e-05, train_loss: 0.2980, train_acc: 0.8972 test_loss: 0.7849, test_acc: 0.7881, best: 0.7969, time: 0:00:53
 Epoch: 278, lr: 8.0e-05, train_loss: 0.2886, train_acc: 0.8978 test_loss: 0.7915, test_acc: 0.7921, best: 0.7969, time: 0:00:53
 Epoch: 279, lr: 8.0e-05, train_loss: 0.3064, train_acc: 0.8976 test_loss: 0.7745, test_acc: 0.7934, best: 0.7969, time: 0:00:53
 Epoch: 280, lr: 8.0e-05, train_loss: 0.2784, train_acc: 0.9078 test_loss: 0.7673, test_acc: 0.7961, best: 0.7969, time: 0:00:53
 Epoch: 281, lr: 8.0e-05, train_loss: 0.2720, train_acc: 0.9068 test_loss: 0.7753, test_acc: 0.7940, best: 0.7969, time: 0:00:53
 Epoch: 282, lr: 8.0e-05, train_loss: 0.2869, train_acc: 0.9018 test_loss: 0.7610, test_acc: 0.7951, best: 0.7969, time: 0:00:52
 Epoch: 283, lr: 8.0e-05, train_loss: 0.2874, train_acc: 0.9006 test_loss: 0.7722, test_acc: 0.7960, best: 0.7969, time: 0:00:52
 Epoch: 284, lr: 8.0e-05, train_loss: 0.2757, train_acc: 0.9048 test_loss: 0.7735, test_acc: 0.7933, best: 0.7969, time: 0:00:52
 Epoch: 285, lr: 8.0e-05, train_loss: 0.2801, train_acc: 0.8992 test_loss: 0.7703, test_acc: 0.7939, best: 0.7969, time: 0:00:52
 Epoch: 286, lr: 8.0e-05, train_loss: 0.2650, train_acc: 0.9074 test_loss: 0.7827, test_acc: 0.7931, best: 0.7969, time: 0:00:52
 Epoch: 287, lr: 8.0e-05, train_loss: 0.2708, train_acc: 0.9054 test_loss: 0.7989, test_acc: 0.7957, best: 0.7969, time: 0:00:52
 Epoch: 288, lr: 8.0e-05, train_loss: 0.2705, train_acc: 0.9074 test_loss: 0.7669, test_acc: 0.7927, best: 0.7969, time: 0:00:52
 Epoch: 289, lr: 8.0e-05, train_loss: 0.2849, train_acc: 0.8994 test_loss: 0.7821, test_acc: 0.7953, best: 0.7969, time: 0:00:52
 Epoch: 290, lr: 8.0e-05, train_loss: 0.2832, train_acc: 0.9016 test_loss: 0.7813, test_acc: 0.7943, best: 0.7969, time: 0:00:52
 Epoch: 291, lr: 8.0e-05, train_loss: 0.2875, train_acc: 0.8998 test_loss: 0.7818, test_acc: 0.7925, best: 0.7969, time: 0:00:52
 Epoch: 292, lr: 8.0e-05, train_loss: 0.2798, train_acc: 0.9020 test_loss: 0.7935, test_acc: 0.7905, best: 0.7969, time: 0:00:52
 Epoch: 293, lr: 8.0e-05, train_loss: 0.2924, train_acc: 0.9024 test_loss: 0.7904, test_acc: 0.7921, best: 0.7969, time: 0:00:52
 Epoch: 294, lr: 8.0e-05, train_loss: 0.2564, train_acc: 0.9116 test_loss: 0.7932, test_acc: 0.7925, best: 0.7969, time: 0:00:52
 Epoch: 295, lr: 8.0e-05, train_loss: 0.2794, train_acc: 0.9044 test_loss: 0.7811, test_acc: 0.7917, best: 0.7969, time: 0:00:52
 Epoch: 296, lr: 8.0e-05, train_loss: 0.3017, train_acc: 0.8948 test_loss: 0.7885, test_acc: 0.7957, best: 0.7969, time: 0:00:52
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2917, train_acc: 0.8962 test_loss: 0.7656, test_acc: 0.7944, best: 0.7969, time: 0:00:52
 Epoch: 298, lr: 8.0e-05, train_loss: 0.2950, train_acc: 0.8966 test_loss: 0.7768, test_acc: 0.7947, best: 0.7969, time: 0:00:52
 Epoch: 299, lr: 8.0e-05, train_loss: 0.2801, train_acc: 0.9022 test_loss: 0.7900, test_acc: 0.7907, best: 0.7969, time: 0:00:52
 Highest accuracy: 0.7969