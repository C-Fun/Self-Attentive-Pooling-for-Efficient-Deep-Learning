
 Run on time: 2022-07-04 20:39:56.200130

 Architecture: prepool-skip-4-mobilenet_v2-skip-1222121

 Pool Config: {
    "arch": "mobilenet_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 4,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer5": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer6": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer7": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "conv2": {
        "_conv2d": "norm",
        "pool_cfg": {}
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : prepool-skip-4-mobilenet_v2-skip-1222121
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (conv1): Sequential(
        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(4, 4), padding=(1, 1), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (features): Sequential(
        (0): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv2): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.6743, train_acc: 0.1556 test_loss: 2.0970, test_acc: 0.2221, best: 0.2221, time: 0:00:45
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1008, train_acc: 0.2092 test_loss: 1.8458, test_acc: 0.3009, best: 0.3009, time: 0:00:44
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0041, train_acc: 0.2350 test_loss: 1.7922, test_acc: 0.2916, best: 0.3009, time: 0:00:44
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9921, train_acc: 0.2392 test_loss: 1.8038, test_acc: 0.2964, best: 0.3009, time: 0:00:44
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9465, train_acc: 0.2662 test_loss: 1.7360, test_acc: 0.3099, best: 0.3099, time: 0:00:44
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9274, train_acc: 0.2648 test_loss: 1.6778, test_acc: 0.3350, best: 0.3350, time: 0:00:45
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9193, train_acc: 0.2720 test_loss: 1.7621, test_acc: 0.3351, best: 0.3351, time: 0:00:44
 Epoch: 8, lr: 1.0e-02, train_loss: 1.8922, train_acc: 0.2832 test_loss: 1.6917, test_acc: 0.3329, best: 0.3351, time: 0:00:44
 Epoch: 9, lr: 1.0e-02, train_loss: 1.8776, train_acc: 0.2840 test_loss: 1.7042, test_acc: 0.3280, best: 0.3351, time: 0:00:44
 Epoch: 10, lr: 1.0e-02, train_loss: 1.8535, train_acc: 0.2932 test_loss: 1.6576, test_acc: 0.3743, best: 0.3743, time: 0:00:45
 Epoch: 11, lr: 1.0e-02, train_loss: 1.8204, train_acc: 0.3146 test_loss: 1.6233, test_acc: 0.3779, best: 0.3779, time: 0:00:45
 Epoch: 12, lr: 1.0e-02, train_loss: 1.8058, train_acc: 0.3120 test_loss: 1.6016, test_acc: 0.3816, best: 0.3816, time: 0:00:45
 Epoch: 13, lr: 1.0e-02, train_loss: 1.8390, train_acc: 0.2988 test_loss: 1.6409, test_acc: 0.3636, best: 0.3816, time: 0:00:46
 Epoch: 14, lr: 1.0e-02, train_loss: 1.8403, train_acc: 0.3078 test_loss: 1.5993, test_acc: 0.3718, best: 0.3816, time: 0:00:46
 Epoch: 15, lr: 1.0e-02, train_loss: 1.8426, train_acc: 0.2998 test_loss: 1.6193, test_acc: 0.3891, best: 0.3891, time: 0:00:46
 Epoch: 16, lr: 1.0e-02, train_loss: 1.7888, train_acc: 0.3048 test_loss: 1.6254, test_acc: 0.3626, best: 0.3891, time: 0:00:46
 Epoch: 17, lr: 1.0e-02, train_loss: 1.7497, train_acc: 0.3266 test_loss: 1.5647, test_acc: 0.4106, best: 0.4106, time: 0:00:46
 Epoch: 18, lr: 1.0e-02, train_loss: 1.7485, train_acc: 0.3274 test_loss: 1.5261, test_acc: 0.4164, best: 0.4164, time: 0:00:46
 Epoch: 19, lr: 1.0e-02, train_loss: 1.7525, train_acc: 0.3312 test_loss: 1.5393, test_acc: 0.4061, best: 0.4164, time: 0:00:46
 Epoch: 20, lr: 1.0e-02, train_loss: 1.7306, train_acc: 0.3350 test_loss: 1.5599, test_acc: 0.4216, best: 0.4216, time: 0:00:46
 Epoch: 21, lr: 1.0e-02, train_loss: 1.6973, train_acc: 0.3492 test_loss: 1.5107, test_acc: 0.4318, best: 0.4318, time: 0:00:46
 Epoch: 22, lr: 1.0e-02, train_loss: 1.6831, train_acc: 0.3568 test_loss: 1.5224, test_acc: 0.4216, best: 0.4318, time: 0:00:46
 Epoch: 23, lr: 1.0e-02, train_loss: 1.6759, train_acc: 0.3644 test_loss: 1.5167, test_acc: 0.4171, best: 0.4318, time: 0:00:46
 Epoch: 24, lr: 1.0e-02, train_loss: 1.6435, train_acc: 0.3734 test_loss: 1.4591, test_acc: 0.4517, best: 0.4517, time: 0:00:46
 Epoch: 25, lr: 1.0e-02, train_loss: 1.6669, train_acc: 0.3720 test_loss: 1.5301, test_acc: 0.4330, best: 0.4517, time: 0:00:46
 Epoch: 26, lr: 1.0e-02, train_loss: 1.6529, train_acc: 0.3686 test_loss: 1.8164, test_acc: 0.3216, best: 0.4517, time: 0:00:46
 Epoch: 27, lr: 1.0e-02, train_loss: 1.6662, train_acc: 0.3696 test_loss: 1.4982, test_acc: 0.4411, best: 0.4517, time: 0:00:46
 Epoch: 28, lr: 1.0e-02, train_loss: 1.6394, train_acc: 0.3838 test_loss: 1.4560, test_acc: 0.4487, best: 0.4517, time: 0:00:46
 Epoch: 29, lr: 1.0e-02, train_loss: 1.6179, train_acc: 0.3950 test_loss: 1.4980, test_acc: 0.4274, best: 0.4517, time: 0:00:46
 Epoch: 30, lr: 1.0e-02, train_loss: 1.6059, train_acc: 0.3944 test_loss: 1.4521, test_acc: 0.4619, best: 0.4619, time: 0:00:46
 Epoch: 31, lr: 1.0e-02, train_loss: 1.5927, train_acc: 0.3978 test_loss: 1.4675, test_acc: 0.4566, best: 0.4619, time: 0:00:46
 Epoch: 32, lr: 1.0e-02, train_loss: 1.5769, train_acc: 0.4068 test_loss: 1.3770, test_acc: 0.4836, best: 0.4836, time: 0:00:46
 Epoch: 33, lr: 1.0e-02, train_loss: 1.5719, train_acc: 0.4076 test_loss: 1.4414, test_acc: 0.4661, best: 0.4836, time: 0:00:46
 Epoch: 34, lr: 1.0e-02, train_loss: 1.5520, train_acc: 0.4182 test_loss: 1.4449, test_acc: 0.4589, best: 0.4836, time: 0:00:46
 Epoch: 35, lr: 1.0e-02, train_loss: 1.5631, train_acc: 0.4118 test_loss: 1.3780, test_acc: 0.4750, best: 0.4836, time: 0:00:46
 Epoch: 36, lr: 1.0e-02, train_loss: 1.5816, train_acc: 0.3972 test_loss: 1.3569, test_acc: 0.4849, best: 0.4849, time: 0:00:46
 Epoch: 37, lr: 1.0e-02, train_loss: 1.5582, train_acc: 0.4174 test_loss: 1.3419, test_acc: 0.4989, best: 0.4989, time: 0:00:46
 Epoch: 38, lr: 1.0e-02, train_loss: 1.5373, train_acc: 0.4206 test_loss: 1.3924, test_acc: 0.4876, best: 0.4989, time: 0:00:46
 Epoch: 39, lr: 1.0e-02, train_loss: 1.5023, train_acc: 0.4408 test_loss: 1.3651, test_acc: 0.5019, best: 0.5019, time: 0:00:46
 Epoch: 40, lr: 1.0e-02, train_loss: 1.5073, train_acc: 0.4386 test_loss: 1.3687, test_acc: 0.4871, best: 0.5019, time: 0:00:46
 Epoch: 41, lr: 1.0e-02, train_loss: 1.5078, train_acc: 0.4348 test_loss: 1.3200, test_acc: 0.5190, best: 0.5190, time: 0:00:46
 Epoch: 42, lr: 1.0e-02, train_loss: 1.5003, train_acc: 0.4314 test_loss: 1.3532, test_acc: 0.5102, best: 0.5190, time: 0:00:46
 Epoch: 43, lr: 1.0e-02, train_loss: 1.4795, train_acc: 0.4500 test_loss: 1.3325, test_acc: 0.5096, best: 0.5190, time: 0:00:46
 Epoch: 44, lr: 1.0e-02, train_loss: 1.4672, train_acc: 0.4472 test_loss: 1.2553, test_acc: 0.5420, best: 0.5420, time: 0:00:46
 Epoch: 45, lr: 1.0e-02, train_loss: 1.4299, train_acc: 0.4686 test_loss: 1.2942, test_acc: 0.5351, best: 0.5420, time: 0:00:46
 Epoch: 46, lr: 1.0e-02, train_loss: 1.4623, train_acc: 0.4548 test_loss: 1.3200, test_acc: 0.5131, best: 0.5420, time: 0:00:46
 Epoch: 47, lr: 1.0e-02, train_loss: 1.4447, train_acc: 0.4678 test_loss: 1.3132, test_acc: 0.5168, best: 0.5420, time: 0:00:46
 Epoch: 48, lr: 1.0e-02, train_loss: 1.4511, train_acc: 0.4674 test_loss: 1.2588, test_acc: 0.5385, best: 0.5420, time: 0:00:46
 Epoch: 49, lr: 1.0e-02, train_loss: 1.4147, train_acc: 0.4688 test_loss: 1.2359, test_acc: 0.5443, best: 0.5443, time: 0:00:46
 Epoch: 50, lr: 1.0e-02, train_loss: 1.3968, train_acc: 0.4722 test_loss: 1.2161, test_acc: 0.5414, best: 0.5443, time: 0:00:46
 Epoch: 51, lr: 1.0e-02, train_loss: 1.4206, train_acc: 0.4814 test_loss: 1.2741, test_acc: 0.5300, best: 0.5443, time: 0:00:46
 Epoch: 52, lr: 1.0e-02, train_loss: 1.4284, train_acc: 0.4730 test_loss: 1.2364, test_acc: 0.5343, best: 0.5443, time: 0:00:46
 Epoch: 53, lr: 1.0e-02, train_loss: 1.4320, train_acc: 0.4666 test_loss: 1.2882, test_acc: 0.5266, best: 0.5443, time: 0:00:46
 Epoch: 54, lr: 1.0e-02, train_loss: 1.4455, train_acc: 0.4642 test_loss: 1.2565, test_acc: 0.5384, best: 0.5443, time: 0:00:46
 Epoch: 55, lr: 1.0e-02, train_loss: 1.4089, train_acc: 0.4800 test_loss: 1.2104, test_acc: 0.5519, best: 0.5519, time: 0:00:46
 Epoch: 56, lr: 1.0e-02, train_loss: 1.3931, train_acc: 0.4920 test_loss: 1.2184, test_acc: 0.5445, best: 0.5519, time: 0:00:46
 Epoch: 57, lr: 1.0e-02, train_loss: 1.3881, train_acc: 0.4858 test_loss: 1.2259, test_acc: 0.5496, best: 0.5519, time: 0:00:46
 Epoch: 58, lr: 1.0e-02, train_loss: 1.3656, train_acc: 0.4910 test_loss: 1.2307, test_acc: 0.5493, best: 0.5519, time: 0:00:46
 Epoch: 59, lr: 1.0e-02, train_loss: 1.3864, train_acc: 0.4930 test_loss: 1.2118, test_acc: 0.5627, best: 0.5627, time: 0:00:46
 Epoch: 60, lr: 1.0e-02, train_loss: 1.3560, train_acc: 0.4888 test_loss: 1.2049, test_acc: 0.5596, best: 0.5627, time: 0:00:46
 Epoch: 61, lr: 1.0e-02, train_loss: 1.3558, train_acc: 0.5012 test_loss: 1.2224, test_acc: 0.5493, best: 0.5627, time: 0:00:46
 Epoch: 62, lr: 1.0e-02, train_loss: 1.3569, train_acc: 0.5020 test_loss: 1.2125, test_acc: 0.5505, best: 0.5627, time: 0:00:46
 Epoch: 63, lr: 1.0e-02, train_loss: 1.3461, train_acc: 0.5036 test_loss: 1.1667, test_acc: 0.5706, best: 0.5706, time: 0:00:46
 Epoch: 64, lr: 1.0e-02, train_loss: 1.3367, train_acc: 0.5060 test_loss: 1.1790, test_acc: 0.5655, best: 0.5706, time: 0:00:46
 Epoch: 65, lr: 1.0e-02, train_loss: 1.3071, train_acc: 0.5208 test_loss: 1.1792, test_acc: 0.5689, best: 0.5706, time: 0:00:46
 Epoch: 66, lr: 1.0e-02, train_loss: 1.2950, train_acc: 0.5312 test_loss: 1.2001, test_acc: 0.5641, best: 0.5706, time: 0:00:46
 Epoch: 67, lr: 1.0e-02, train_loss: 1.3111, train_acc: 0.5178 test_loss: 1.1878, test_acc: 0.5641, best: 0.5706, time: 0:00:46
 Epoch: 68, lr: 1.0e-02, train_loss: 1.3018, train_acc: 0.5228 test_loss: 1.1990, test_acc: 0.5561, best: 0.5706, time: 0:00:46
 Epoch: 69, lr: 1.0e-02, train_loss: 1.3164, train_acc: 0.5164 test_loss: 1.1827, test_acc: 0.5543, best: 0.5706, time: 0:00:46
 Epoch: 70, lr: 1.0e-02, train_loss: 1.3093, train_acc: 0.5284 test_loss: 1.1760, test_acc: 0.5586, best: 0.5706, time: 0:00:46
 Epoch: 71, lr: 1.0e-02, train_loss: 1.3163, train_acc: 0.5160 test_loss: 1.1907, test_acc: 0.5590, best: 0.5706, time: 0:00:46
 Epoch: 72, lr: 1.0e-02, train_loss: 1.2944, train_acc: 0.5260 test_loss: 1.1476, test_acc: 0.5774, best: 0.5774, time: 0:00:46
 Epoch: 73, lr: 1.0e-02, train_loss: 1.2961, train_acc: 0.5216 test_loss: 1.1931, test_acc: 0.5675, best: 0.5774, time: 0:00:46
 Epoch: 74, lr: 1.0e-02, train_loss: 1.2665, train_acc: 0.5412 test_loss: 1.1332, test_acc: 0.5795, best: 0.5795, time: 0:00:46
 Epoch: 75, lr: 1.0e-02, train_loss: 1.2759, train_acc: 0.5340 test_loss: 1.0819, test_acc: 0.6015, best: 0.6015, time: 0:00:46
 Epoch: 76, lr: 1.0e-02, train_loss: 1.2601, train_acc: 0.5384 test_loss: 1.1799, test_acc: 0.5621, best: 0.6015, time: 0:00:46
 Epoch: 77, lr: 1.0e-02, train_loss: 1.2584, train_acc: 0.5356 test_loss: 1.1472, test_acc: 0.5897, best: 0.6015, time: 0:00:46
 Epoch: 78, lr: 1.0e-02, train_loss: 1.2455, train_acc: 0.5514 test_loss: 1.1910, test_acc: 0.5759, best: 0.6015, time: 0:00:46
 Epoch: 79, lr: 1.0e-02, train_loss: 1.2454, train_acc: 0.5426 test_loss: 1.1429, test_acc: 0.5781, best: 0.6015, time: 0:00:46
 Epoch: 80, lr: 1.0e-02, train_loss: 1.2463, train_acc: 0.5398 test_loss: 1.1000, test_acc: 0.5996, best: 0.6015, time: 0:00:46
 Epoch: 81, lr: 1.0e-02, train_loss: 1.2416, train_acc: 0.5484 test_loss: 1.1119, test_acc: 0.5990, best: 0.6015, time: 0:00:46
 Epoch: 82, lr: 1.0e-02, train_loss: 1.2224, train_acc: 0.5616 test_loss: 1.1372, test_acc: 0.5845, best: 0.6015, time: 0:00:46
 Epoch: 83, lr: 1.0e-02, train_loss: 1.2106, train_acc: 0.5572 test_loss: 1.1069, test_acc: 0.5931, best: 0.6015, time: 0:00:46
 Epoch: 84, lr: 1.0e-02, train_loss: 1.2215, train_acc: 0.5468 test_loss: 1.1184, test_acc: 0.5935, best: 0.6015, time: 0:00:46
 Epoch: 85, lr: 1.0e-02, train_loss: 1.2016, train_acc: 0.5650 test_loss: 1.1739, test_acc: 0.5757, best: 0.6015, time: 0:00:46
 Epoch: 86, lr: 1.0e-02, train_loss: 1.2056, train_acc: 0.5622 test_loss: 1.0858, test_acc: 0.6036, best: 0.6036, time: 0:00:46
 Epoch: 87, lr: 1.0e-02, train_loss: 1.2115, train_acc: 0.5564 test_loss: 1.0732, test_acc: 0.6062, best: 0.6062, time: 0:00:46
 Epoch: 88, lr: 1.0e-02, train_loss: 1.1692, train_acc: 0.5814 test_loss: 1.0899, test_acc: 0.5962, best: 0.6062, time: 0:00:46
 Epoch: 89, lr: 1.0e-02, train_loss: 1.1721, train_acc: 0.5794 test_loss: 1.0996, test_acc: 0.6008, best: 0.6062, time: 0:00:46
 Epoch: 90, lr: 1.0e-02, train_loss: 1.1778, train_acc: 0.5708 test_loss: 1.1321, test_acc: 0.5889, best: 0.6062, time: 0:00:46
 Epoch: 91, lr: 1.0e-02, train_loss: 1.1735, train_acc: 0.5780 test_loss: 1.0479, test_acc: 0.6216, best: 0.6216, time: 0:00:46
 Epoch: 92, lr: 1.0e-02, train_loss: 1.1705, train_acc: 0.5714 test_loss: 1.0867, test_acc: 0.6116, best: 0.6216, time: 0:00:46
 Epoch: 93, lr: 1.0e-02, train_loss: 1.1827, train_acc: 0.5722 test_loss: 1.0599, test_acc: 0.6246, best: 0.6246, time: 0:00:46
 Epoch: 94, lr: 1.0e-02, train_loss: 1.1882, train_acc: 0.5712 test_loss: 1.0815, test_acc: 0.6000, best: 0.6246, time: 0:00:46
 Epoch: 95, lr: 1.0e-02, train_loss: 1.1774, train_acc: 0.5692 test_loss: 1.0915, test_acc: 0.6074, best: 0.6246, time: 0:00:46
 Epoch: 96, lr: 1.0e-02, train_loss: 1.1581, train_acc: 0.5848 test_loss: 1.1151, test_acc: 0.5955, best: 0.6246, time: 0:00:46
 Epoch: 97, lr: 1.0e-02, train_loss: 1.1615, train_acc: 0.5858 test_loss: 1.0699, test_acc: 0.6174, best: 0.6246, time: 0:00:46
 Epoch: 98, lr: 1.0e-02, train_loss: 1.1560, train_acc: 0.5766 test_loss: 1.0803, test_acc: 0.6128, best: 0.6246, time: 0:00:46
 Epoch: 99, lr: 1.0e-02, train_loss: 1.1591, train_acc: 0.5792 test_loss: 1.0455, test_acc: 0.6266, best: 0.6266, time: 0:00:46
 Epoch: 100, lr: 1.0e-02, train_loss: 1.1634, train_acc: 0.5836 test_loss: 1.0694, test_acc: 0.6121, best: 0.6266, time: 0:00:46
 Epoch: 101, lr: 1.0e-02, train_loss: 1.1325, train_acc: 0.5934 test_loss: 1.0295, test_acc: 0.6325, best: 0.6325, time: 0:00:46
 Epoch: 102, lr: 1.0e-02, train_loss: 1.1334, train_acc: 0.5874 test_loss: 1.0552, test_acc: 0.6246, best: 0.6325, time: 0:00:46
 Epoch: 103, lr: 1.0e-02, train_loss: 1.1229, train_acc: 0.5956 test_loss: 1.1071, test_acc: 0.6102, best: 0.6325, time: 0:00:46
 Epoch: 104, lr: 1.0e-02, train_loss: 1.1231, train_acc: 0.5934 test_loss: 1.0188, test_acc: 0.6350, best: 0.6350, time: 0:00:46
 Epoch: 105, lr: 1.0e-02, train_loss: 1.1319, train_acc: 0.5822 test_loss: 1.1071, test_acc: 0.6095, best: 0.6350, time: 0:00:46
 Epoch: 106, lr: 1.0e-02, train_loss: 1.1302, train_acc: 0.5918 test_loss: 1.0405, test_acc: 0.6295, best: 0.6350, time: 0:00:46
 Epoch: 107, lr: 1.0e-02, train_loss: 1.1063, train_acc: 0.6018 test_loss: 1.0902, test_acc: 0.6001, best: 0.6350, time: 0:00:46
 Epoch: 108, lr: 1.0e-02, train_loss: 1.1095, train_acc: 0.5958 test_loss: 1.0623, test_acc: 0.6175, best: 0.6350, time: 0:00:46
 Epoch: 109, lr: 1.0e-02, train_loss: 1.1181, train_acc: 0.6006 test_loss: 0.9974, test_acc: 0.6419, best: 0.6419, time: 0:00:46
 Epoch: 110, lr: 1.0e-02, train_loss: 1.0837, train_acc: 0.6154 test_loss: 1.0100, test_acc: 0.6441, best: 0.6441, time: 0:00:46
 Epoch: 111, lr: 1.0e-02, train_loss: 1.0836, train_acc: 0.6032 test_loss: 1.0777, test_acc: 0.6099, best: 0.6441, time: 0:00:46
 Epoch: 112, lr: 1.0e-02, train_loss: 1.0961, train_acc: 0.6086 test_loss: 1.0415, test_acc: 0.6274, best: 0.6441, time: 0:00:46
 Epoch: 113, lr: 1.0e-02, train_loss: 1.0786, train_acc: 0.6102 test_loss: 1.0708, test_acc: 0.6141, best: 0.6441, time: 0:00:46
 Epoch: 114, lr: 1.0e-02, train_loss: 1.0849, train_acc: 0.6106 test_loss: 1.0550, test_acc: 0.6185, best: 0.6441, time: 0:00:46
 Epoch: 115, lr: 1.0e-02, train_loss: 1.0788, train_acc: 0.6132 test_loss: 1.0241, test_acc: 0.6328, best: 0.6441, time: 0:00:46
 Epoch: 116, lr: 1.0e-02, train_loss: 1.0826, train_acc: 0.6038 test_loss: 0.9750, test_acc: 0.6415, best: 0.6441, time: 0:00:46
 Epoch: 117, lr: 1.0e-02, train_loss: 1.0852, train_acc: 0.6128 test_loss: 1.0237, test_acc: 0.6322, best: 0.6441, time: 0:00:46
 Epoch: 118, lr: 1.0e-02, train_loss: 1.0820, train_acc: 0.6098 test_loss: 1.0395, test_acc: 0.6219, best: 0.6441, time: 0:00:46
 Epoch: 119, lr: 1.0e-02, train_loss: 1.0581, train_acc: 0.6172 test_loss: 1.0216, test_acc: 0.6338, best: 0.6441, time: 0:00:46
 Epoch: 120, lr: 1.0e-02, train_loss: 1.0487, train_acc: 0.6156 test_loss: 1.0538, test_acc: 0.6144, best: 0.6441, time: 0:00:46
 Epoch: 121, lr: 1.0e-02, train_loss: 1.0749, train_acc: 0.6092 test_loss: 0.9812, test_acc: 0.6426, best: 0.6441, time: 0:00:46
 Epoch: 122, lr: 1.0e-02, train_loss: 1.0495, train_acc: 0.6184 test_loss: 1.0765, test_acc: 0.6232, best: 0.6441, time: 0:00:46
 Epoch: 123, lr: 1.0e-02, train_loss: 1.0509, train_acc: 0.6282 test_loss: 1.0205, test_acc: 0.6310, best: 0.6441, time: 0:00:46
 Epoch: 124, lr: 1.0e-02, train_loss: 1.0492, train_acc: 0.6206 test_loss: 1.0469, test_acc: 0.6298, best: 0.6441, time: 0:00:46
 Epoch: 125, lr: 1.0e-02, train_loss: 1.0328, train_acc: 0.6342 test_loss: 1.0099, test_acc: 0.6406, best: 0.6441, time: 0:00:46
 Epoch: 126, lr: 1.0e-02, train_loss: 1.0531, train_acc: 0.6216 test_loss: 0.9838, test_acc: 0.6472, best: 0.6472, time: 0:00:46
 Epoch: 127, lr: 1.0e-02, train_loss: 1.0445, train_acc: 0.6228 test_loss: 0.9688, test_acc: 0.6560, best: 0.6560, time: 0:00:46
 Epoch: 128, lr: 1.0e-02, train_loss: 1.0344, train_acc: 0.6230 test_loss: 1.0364, test_acc: 0.6280, best: 0.6560, time: 0:00:46
 Epoch: 129, lr: 1.0e-02, train_loss: 1.0401, train_acc: 0.6300 test_loss: 1.0057, test_acc: 0.6444, best: 0.6560, time: 0:00:46
 Epoch: 130, lr: 1.0e-02, train_loss: 1.0238, train_acc: 0.6294 test_loss: 1.0186, test_acc: 0.6371, best: 0.6560, time: 0:00:46
 Epoch: 131, lr: 1.0e-02, train_loss: 1.0155, train_acc: 0.6334 test_loss: 0.9482, test_acc: 0.6644, best: 0.6644, time: 0:00:46
 Epoch: 132, lr: 1.0e-02, train_loss: 1.0306, train_acc: 0.6244 test_loss: 1.1071, test_acc: 0.6169, best: 0.6644, time: 0:00:46
 Epoch: 133, lr: 1.0e-02, train_loss: 1.0193, train_acc: 0.6326 test_loss: 0.9659, test_acc: 0.6570, best: 0.6644, time: 0:00:46
 Epoch: 134, lr: 1.0e-02, train_loss: 1.0328, train_acc: 0.6294 test_loss: 0.9997, test_acc: 0.6415, best: 0.6644, time: 0:00:46
 Epoch: 135, lr: 1.0e-02, train_loss: 1.0149, train_acc: 0.6346 test_loss: 0.9537, test_acc: 0.6605, best: 0.6644, time: 0:00:46
 Epoch: 136, lr: 1.0e-02, train_loss: 1.0055, train_acc: 0.6368 test_loss: 1.0030, test_acc: 0.6478, best: 0.6644, time: 0:00:46
 Epoch: 137, lr: 1.0e-02, train_loss: 1.0182, train_acc: 0.6424 test_loss: 0.9506, test_acc: 0.6587, best: 0.6644, time: 0:00:46
 Epoch: 138, lr: 1.0e-02, train_loss: 0.9928, train_acc: 0.6448 test_loss: 0.9120, test_acc: 0.6735, best: 0.6735, time: 0:00:46
 Epoch: 139, lr: 1.0e-02, train_loss: 0.9886, train_acc: 0.6396 test_loss: 0.9577, test_acc: 0.6639, best: 0.6735, time: 0:00:46
 Epoch: 140, lr: 1.0e-02, train_loss: 0.9863, train_acc: 0.6474 test_loss: 0.9527, test_acc: 0.6641, best: 0.6735, time: 0:00:46
 Epoch: 141, lr: 1.0e-02, train_loss: 0.9815, train_acc: 0.6460 test_loss: 0.9996, test_acc: 0.6338, best: 0.6735, time: 0:00:46
 Epoch: 142, lr: 1.0e-02, train_loss: 0.9579, train_acc: 0.6556 test_loss: 1.0109, test_acc: 0.6419, best: 0.6735, time: 0:00:46
 Epoch: 143, lr: 1.0e-02, train_loss: 0.9953, train_acc: 0.6428 test_loss: 0.9733, test_acc: 0.6560, best: 0.6735, time: 0:00:46
 Epoch: 144, lr: 1.0e-02, train_loss: 0.9865, train_acc: 0.6516 test_loss: 0.9477, test_acc: 0.6586, best: 0.6735, time: 0:00:46
 Epoch: 145, lr: 1.0e-02, train_loss: 0.9984, train_acc: 0.6370 test_loss: 0.9868, test_acc: 0.6489, best: 0.6735, time: 0:00:46
 Epoch: 146, lr: 1.0e-02, train_loss: 0.9597, train_acc: 0.6504 test_loss: 0.9725, test_acc: 0.6616, best: 0.6735, time: 0:00:46
 Epoch: 147, lr: 1.0e-02, train_loss: 0.9823, train_acc: 0.6522 test_loss: 1.0039, test_acc: 0.6391, best: 0.6735, time: 0:00:46
 Epoch: 148, lr: 1.0e-02, train_loss: 0.9678, train_acc: 0.6474 test_loss: 0.9598, test_acc: 0.6546, best: 0.6735, time: 0:00:46
 Epoch: 149, lr: 1.0e-02, train_loss: 0.9569, train_acc: 0.6546 test_loss: 0.9403, test_acc: 0.6665, best: 0.6735, time: 0:00:46
 Epoch: 150, lr: 1.0e-02, train_loss: 0.9513, train_acc: 0.6570 test_loss: 0.9503, test_acc: 0.6634, best: 0.6735, time: 0:00:46
 Epoch: 151, lr: 1.0e-02, train_loss: 0.9546, train_acc: 0.6512 test_loss: 0.9274, test_acc: 0.6669, best: 0.6735, time: 0:00:46
 Epoch: 152, lr: 1.0e-02, train_loss: 0.9559, train_acc: 0.6554 test_loss: 0.9186, test_acc: 0.6703, best: 0.6735, time: 0:00:46
 Epoch: 153, lr: 1.0e-02, train_loss: 0.9472, train_acc: 0.6574 test_loss: 0.9951, test_acc: 0.6444, best: 0.6735, time: 0:00:46
 Epoch: 154, lr: 1.0e-02, train_loss: 0.9751, train_acc: 0.6472 test_loss: 1.0084, test_acc: 0.6430, best: 0.6735, time: 0:00:46
 Epoch: 155, lr: 1.0e-02, train_loss: 0.9398, train_acc: 0.6656 test_loss: 0.9195, test_acc: 0.6794, best: 0.6794, time: 0:00:46
 Epoch: 156, lr: 1.0e-02, train_loss: 0.9500, train_acc: 0.6616 test_loss: 0.9741, test_acc: 0.6565, best: 0.6794, time: 0:00:46
 Epoch: 157, lr: 1.0e-02, train_loss: 0.9557, train_acc: 0.6640 test_loss: 0.9415, test_acc: 0.6644, best: 0.6794, time: 0:00:46
 Epoch: 158, lr: 1.0e-02, train_loss: 0.9451, train_acc: 0.6694 test_loss: 0.9429, test_acc: 0.6660, best: 0.6794, time: 0:00:46
 Epoch: 159, lr: 1.0e-02, train_loss: 0.9481, train_acc: 0.6602 test_loss: 0.9247, test_acc: 0.6731, best: 0.6794, time: 0:00:46
 Epoch: 160, lr: 1.0e-02, train_loss: 0.9474, train_acc: 0.6606 test_loss: 0.9339, test_acc: 0.6723, best: 0.6794, time: 0:00:46
 Epoch: 161, lr: 1.0e-02, train_loss: 0.9528, train_acc: 0.6602 test_loss: 0.9443, test_acc: 0.6669, best: 0.6794, time: 0:00:46
 Epoch: 162, lr: 1.0e-02, train_loss: 0.9464, train_acc: 0.6578 test_loss: 0.9505, test_acc: 0.6600, best: 0.6794, time: 0:00:46
 Epoch: 163, lr: 1.0e-02, train_loss: 0.9224, train_acc: 0.6670 test_loss: 0.9255, test_acc: 0.6686, best: 0.6794, time: 0:00:46
 Epoch: 164, lr: 1.0e-02, train_loss: 0.9333, train_acc: 0.6666 test_loss: 0.9343, test_acc: 0.6724, best: 0.6794, time: 0:00:46
 Epoch: 165, lr: 1.0e-02, train_loss: 0.9255, train_acc: 0.6706 test_loss: 0.9416, test_acc: 0.6660, best: 0.6794, time: 0:00:46
 Epoch: 166, lr: 1.0e-02, train_loss: 0.9165, train_acc: 0.6760 test_loss: 0.9201, test_acc: 0.6700, best: 0.6794, time: 0:00:46
 Epoch: 167, lr: 1.0e-02, train_loss: 0.9287, train_acc: 0.6614 test_loss: 0.9478, test_acc: 0.6714, best: 0.6794, time: 0:00:46
 Epoch: 168, lr: 1.0e-02, train_loss: 0.9182, train_acc: 0.6778 test_loss: 0.9013, test_acc: 0.6860, best: 0.6860, time: 0:00:46
 Epoch: 169, lr: 1.0e-02, train_loss: 0.9246, train_acc: 0.6624 test_loss: 0.9612, test_acc: 0.6589, best: 0.6860, time: 0:00:46
 Epoch: 170, lr: 1.0e-02, train_loss: 0.9080, train_acc: 0.6696 test_loss: 1.0174, test_acc: 0.6406, best: 0.6860, time: 0:00:46
 Epoch: 171, lr: 1.0e-02, train_loss: 0.9082, train_acc: 0.6790 test_loss: 0.9318, test_acc: 0.6753, best: 0.6860, time: 0:00:46
 Epoch: 172, lr: 1.0e-02, train_loss: 0.8937, train_acc: 0.6836 test_loss: 0.8819, test_acc: 0.6866, best: 0.6866, time: 0:00:46
 Epoch: 173, lr: 1.0e-02, train_loss: 0.8946, train_acc: 0.6840 test_loss: 0.9265, test_acc: 0.6754, best: 0.6866, time: 0:00:46
 Epoch: 174, lr: 1.0e-02, train_loss: 0.9081, train_acc: 0.6742 test_loss: 0.9030, test_acc: 0.6841, best: 0.6866, time: 0:00:46
 Epoch: 175, lr: 1.0e-02, train_loss: 0.8854, train_acc: 0.6828 test_loss: 1.0038, test_acc: 0.6540, best: 0.6866, time: 0:00:46
 Epoch: 176, lr: 1.0e-02, train_loss: 0.9026, train_acc: 0.6790 test_loss: 0.9056, test_acc: 0.6813, best: 0.6866, time: 0:00:46
 Epoch: 177, lr: 1.0e-02, train_loss: 0.8665, train_acc: 0.6926 test_loss: 0.9201, test_acc: 0.6761, best: 0.6866, time: 0:00:46
 Epoch: 178, lr: 1.0e-02, train_loss: 0.9054, train_acc: 0.6848 test_loss: 0.9156, test_acc: 0.6829, best: 0.6866, time: 0:00:46
 Epoch: 179, lr: 1.0e-02, train_loss: 0.8858, train_acc: 0.6840 test_loss: 0.9384, test_acc: 0.6699, best: 0.6866, time: 0:00:46
 Epoch: 180, lr: 2.0e-03, train_loss: 0.8407, train_acc: 0.7034 test_loss: 0.8435, test_acc: 0.7063, best: 0.7063, time: 0:00:46
 Epoch: 181, lr: 2.0e-03, train_loss: 0.7829, train_acc: 0.7152 test_loss: 0.8563, test_acc: 0.7020, best: 0.7063, time: 0:00:46
 Epoch: 182, lr: 2.0e-03, train_loss: 0.7822, train_acc: 0.7274 test_loss: 0.8336, test_acc: 0.7091, best: 0.7091, time: 0:00:47
 Epoch: 183, lr: 2.0e-03, train_loss: 0.7642, train_acc: 0.7284 test_loss: 0.8399, test_acc: 0.7113, best: 0.7113, time: 0:00:46
 Epoch: 184, lr: 2.0e-03, train_loss: 0.7565, train_acc: 0.7308 test_loss: 0.8545, test_acc: 0.7069, best: 0.7113, time: 0:00:46
 Epoch: 185, lr: 2.0e-03, train_loss: 0.7621, train_acc: 0.7274 test_loss: 0.8493, test_acc: 0.7015, best: 0.7113, time: 0:00:46
 Epoch: 186, lr: 2.0e-03, train_loss: 0.7724, train_acc: 0.7210 test_loss: 0.8433, test_acc: 0.7073, best: 0.7113, time: 0:00:46
 Epoch: 187, lr: 2.0e-03, train_loss: 0.7591, train_acc: 0.7306 test_loss: 0.8654, test_acc: 0.7025, best: 0.7113, time: 0:00:46
 Epoch: 188, lr: 2.0e-03, train_loss: 0.7427, train_acc: 0.7352 test_loss: 0.8593, test_acc: 0.7025, best: 0.7113, time: 0:00:46
 Epoch: 189, lr: 2.0e-03, train_loss: 0.7665, train_acc: 0.7220 test_loss: 0.8483, test_acc: 0.7043, best: 0.7113, time: 0:00:46
 Epoch: 190, lr: 2.0e-03, train_loss: 0.7357, train_acc: 0.7416 test_loss: 0.8528, test_acc: 0.7026, best: 0.7113, time: 0:00:46
 Epoch: 191, lr: 2.0e-03, train_loss: 0.7652, train_acc: 0.7252 test_loss: 0.8438, test_acc: 0.7036, best: 0.7113, time: 0:00:46
 Epoch: 192, lr: 2.0e-03, train_loss: 0.7557, train_acc: 0.7244 test_loss: 0.8379, test_acc: 0.7067, best: 0.7113, time: 0:00:46
 Epoch: 193, lr: 2.0e-03, train_loss: 0.7382, train_acc: 0.7364 test_loss: 0.8545, test_acc: 0.7010, best: 0.7113, time: 0:00:46
 Epoch: 194, lr: 2.0e-03, train_loss: 0.7140, train_acc: 0.7458 test_loss: 0.8662, test_acc: 0.7019, best: 0.7113, time: 0:00:46
 Epoch: 195, lr: 2.0e-03, train_loss: 0.7242, train_acc: 0.7410 test_loss: 0.8430, test_acc: 0.7020, best: 0.7113, time: 0:00:46
 Epoch: 196, lr: 2.0e-03, train_loss: 0.7291, train_acc: 0.7452 test_loss: 0.8406, test_acc: 0.7084, best: 0.7113, time: 0:00:46
 Epoch: 197, lr: 2.0e-03, train_loss: 0.7048, train_acc: 0.7506 test_loss: 0.8427, test_acc: 0.7095, best: 0.7113, time: 0:00:46
 Epoch: 198, lr: 2.0e-03, train_loss: 0.7062, train_acc: 0.7486 test_loss: 0.8500, test_acc: 0.7094, best: 0.7113, time: 0:00:46
 Epoch: 199, lr: 2.0e-03, train_loss: 0.7113, train_acc: 0.7440 test_loss: 0.8523, test_acc: 0.7083, best: 0.7113, time: 0:00:46
 Epoch: 200, lr: 2.0e-03, train_loss: 0.7055, train_acc: 0.7544 test_loss: 0.9041, test_acc: 0.6943, best: 0.7113, time: 0:00:46
 Epoch: 201, lr: 2.0e-03, train_loss: 0.7063, train_acc: 0.7478 test_loss: 0.8513, test_acc: 0.7079, best: 0.7113, time: 0:00:46
 Epoch: 202, lr: 2.0e-03, train_loss: 0.7139, train_acc: 0.7510 test_loss: 0.8658, test_acc: 0.7020, best: 0.7113, time: 0:00:46
 Epoch: 203, lr: 2.0e-03, train_loss: 0.7269, train_acc: 0.7458 test_loss: 0.8568, test_acc: 0.7045, best: 0.7113, time: 0:00:46
 Epoch: 204, lr: 2.0e-03, train_loss: 0.7097, train_acc: 0.7438 test_loss: 0.8612, test_acc: 0.7014, best: 0.7113, time: 0:00:46
 Epoch: 205, lr: 2.0e-03, train_loss: 0.6940, train_acc: 0.7472 test_loss: 0.8579, test_acc: 0.7067, best: 0.7113, time: 0:00:46
 Epoch: 206, lr: 2.0e-03, train_loss: 0.7078, train_acc: 0.7478 test_loss: 0.8456, test_acc: 0.7053, best: 0.7113, time: 0:00:46
 Epoch: 207, lr: 2.0e-03, train_loss: 0.6674, train_acc: 0.7624 test_loss: 0.8569, test_acc: 0.7055, best: 0.7113, time: 0:00:46
 Epoch: 208, lr: 2.0e-03, train_loss: 0.6955, train_acc: 0.7516 test_loss: 0.8679, test_acc: 0.7036, best: 0.7113, time: 0:00:46
 Epoch: 209, lr: 2.0e-03, train_loss: 0.6902, train_acc: 0.7580 test_loss: 0.8501, test_acc: 0.7074, best: 0.7113, time: 0:00:46
 Epoch: 210, lr: 2.0e-03, train_loss: 0.7104, train_acc: 0.7502 test_loss: 0.8516, test_acc: 0.7004, best: 0.7113, time: 0:00:46
 Epoch: 211, lr: 2.0e-03, train_loss: 0.7102, train_acc: 0.7488 test_loss: 0.8539, test_acc: 0.7057, best: 0.7113, time: 0:00:46
 Epoch: 212, lr: 2.0e-03, train_loss: 0.6936, train_acc: 0.7488 test_loss: 0.8413, test_acc: 0.7146, best: 0.7146, time: 0:00:46
 Epoch: 213, lr: 2.0e-03, train_loss: 0.7101, train_acc: 0.7478 test_loss: 0.8465, test_acc: 0.7114, best: 0.7146, time: 0:00:46
 Epoch: 214, lr: 2.0e-03, train_loss: 0.6826, train_acc: 0.7604 test_loss: 0.8905, test_acc: 0.7039, best: 0.7146, time: 0:00:46
 Epoch: 215, lr: 2.0e-03, train_loss: 0.6906, train_acc: 0.7528 test_loss: 0.8482, test_acc: 0.7104, best: 0.7146, time: 0:00:46
 Epoch: 216, lr: 2.0e-03, train_loss: 0.7129, train_acc: 0.7504 test_loss: 0.8726, test_acc: 0.7036, best: 0.7146, time: 0:00:46
 Epoch: 217, lr: 2.0e-03, train_loss: 0.6929, train_acc: 0.7510 test_loss: 0.8593, test_acc: 0.7010, best: 0.7146, time: 0:00:46
 Epoch: 218, lr: 2.0e-03, train_loss: 0.6848, train_acc: 0.7564 test_loss: 0.8839, test_acc: 0.6951, best: 0.7146, time: 0:00:46
 Epoch: 219, lr: 2.0e-03, train_loss: 0.6934, train_acc: 0.7500 test_loss: 0.8610, test_acc: 0.7109, best: 0.7146, time: 0:00:46
 Epoch: 220, lr: 2.0e-03, train_loss: 0.6709, train_acc: 0.7584 test_loss: 0.8672, test_acc: 0.7060, best: 0.7146, time: 0:00:46
 Epoch: 221, lr: 2.0e-03, train_loss: 0.6783, train_acc: 0.7568 test_loss: 0.8750, test_acc: 0.6937, best: 0.7146, time: 0:00:46
 Epoch: 222, lr: 2.0e-03, train_loss: 0.6816, train_acc: 0.7622 test_loss: 0.8570, test_acc: 0.7085, best: 0.7146, time: 0:00:46
 Epoch: 223, lr: 2.0e-03, train_loss: 0.6710, train_acc: 0.7606 test_loss: 0.8588, test_acc: 0.7051, best: 0.7146, time: 0:00:46
 Epoch: 224, lr: 2.0e-03, train_loss: 0.6907, train_acc: 0.7542 test_loss: 0.8835, test_acc: 0.7004, best: 0.7146, time: 0:00:46
 Epoch: 225, lr: 2.0e-03, train_loss: 0.6773, train_acc: 0.7600 test_loss: 0.9105, test_acc: 0.6947, best: 0.7146, time: 0:00:46
 Epoch: 226, lr: 2.0e-03, train_loss: 0.6961, train_acc: 0.7500 test_loss: 0.8648, test_acc: 0.7057, best: 0.7146, time: 0:00:46
 Epoch: 227, lr: 2.0e-03, train_loss: 0.6924, train_acc: 0.7594 test_loss: 0.8500, test_acc: 0.7106, best: 0.7146, time: 0:00:47
 Epoch: 228, lr: 2.0e-03, train_loss: 0.6801, train_acc: 0.7536 test_loss: 0.8492, test_acc: 0.7107, best: 0.7146, time: 0:00:46
 Epoch: 229, lr: 2.0e-03, train_loss: 0.6833, train_acc: 0.7582 test_loss: 0.8683, test_acc: 0.7064, best: 0.7146, time: 0:00:46
 Epoch: 230, lr: 2.0e-03, train_loss: 0.6775, train_acc: 0.7594 test_loss: 0.8631, test_acc: 0.7060, best: 0.7146, time: 0:00:46
 Epoch: 231, lr: 2.0e-03, train_loss: 0.6867, train_acc: 0.7534 test_loss: 0.8639, test_acc: 0.7074, best: 0.7146, time: 0:00:46
 Epoch: 232, lr: 2.0e-03, train_loss: 0.6754, train_acc: 0.7620 test_loss: 0.8619, test_acc: 0.7009, best: 0.7146, time: 0:00:46
 Epoch: 233, lr: 2.0e-03, train_loss: 0.6644, train_acc: 0.7694 test_loss: 0.8565, test_acc: 0.7071, best: 0.7146, time: 0:00:46
 Epoch: 234, lr: 2.0e-03, train_loss: 0.6501, train_acc: 0.7742 test_loss: 0.8760, test_acc: 0.7076, best: 0.7146, time: 0:00:46
 Epoch: 235, lr: 2.0e-03, train_loss: 0.6540, train_acc: 0.7614 test_loss: 0.8720, test_acc: 0.7085, best: 0.7146, time: 0:00:46
 Epoch: 236, lr: 2.0e-03, train_loss: 0.6268, train_acc: 0.7730 test_loss: 0.8952, test_acc: 0.7004, best: 0.7146, time: 0:00:46
 Epoch: 237, lr: 2.0e-03, train_loss: 0.6583, train_acc: 0.7658 test_loss: 0.8709, test_acc: 0.7040, best: 0.7146, time: 0:00:46
 Epoch: 238, lr: 2.0e-03, train_loss: 0.6574, train_acc: 0.7668 test_loss: 0.8577, test_acc: 0.7086, best: 0.7146, time: 0:00:46
 Epoch: 239, lr: 2.0e-03, train_loss: 0.6641, train_acc: 0.7670 test_loss: 0.8600, test_acc: 0.7101, best: 0.7146, time: 0:00:46
 Epoch: 240, lr: 4.0e-04, train_loss: 0.6322, train_acc: 0.7740 test_loss: 0.8517, test_acc: 0.7185, best: 0.7185, time: 0:00:46
 Epoch: 241, lr: 4.0e-04, train_loss: 0.6355, train_acc: 0.7768 test_loss: 0.8418, test_acc: 0.7177, best: 0.7185, time: 0:00:46
 Epoch: 242, lr: 4.0e-04, train_loss: 0.6341, train_acc: 0.7778 test_loss: 0.8502, test_acc: 0.7140, best: 0.7185, time: 0:00:46
 Epoch: 243, lr: 4.0e-04, train_loss: 0.6433, train_acc: 0.7718 test_loss: 0.8510, test_acc: 0.7139, best: 0.7185, time: 0:00:46
 Epoch: 244, lr: 4.0e-04, train_loss: 0.6323, train_acc: 0.7766 test_loss: 0.8738, test_acc: 0.7121, best: 0.7185, time: 0:00:46
 Epoch: 245, lr: 4.0e-04, train_loss: 0.6459, train_acc: 0.7662 test_loss: 0.8512, test_acc: 0.7147, best: 0.7185, time: 0:00:46
 Epoch: 246, lr: 4.0e-04, train_loss: 0.6340, train_acc: 0.7722 test_loss: 0.8702, test_acc: 0.7077, best: 0.7185, time: 0:00:46
 Epoch: 247, lr: 4.0e-04, train_loss: 0.6313, train_acc: 0.7760 test_loss: 0.8450, test_acc: 0.7135, best: 0.7185, time: 0:00:46
 Epoch: 248, lr: 4.0e-04, train_loss: 0.6252, train_acc: 0.7856 test_loss: 0.8662, test_acc: 0.7087, best: 0.7185, time: 0:00:46
 Epoch: 249, lr: 4.0e-04, train_loss: 0.6233, train_acc: 0.7732 test_loss: 0.8586, test_acc: 0.7103, best: 0.7185, time: 0:00:46
 Epoch: 250, lr: 4.0e-04, train_loss: 0.6374, train_acc: 0.7722 test_loss: 0.8729, test_acc: 0.7046, best: 0.7185, time: 0:00:46
 Epoch: 251, lr: 4.0e-04, train_loss: 0.6164, train_acc: 0.7842 test_loss: 0.8602, test_acc: 0.7104, best: 0.7185, time: 0:00:46
 Epoch: 252, lr: 4.0e-04, train_loss: 0.6287, train_acc: 0.7770 test_loss: 0.8568, test_acc: 0.7134, best: 0.7185, time: 0:00:46
 Epoch: 253, lr: 4.0e-04, train_loss: 0.6320, train_acc: 0.7840 test_loss: 0.8591, test_acc: 0.7097, best: 0.7185, time: 0:00:46
 Epoch: 254, lr: 4.0e-04, train_loss: 0.6258, train_acc: 0.7778 test_loss: 0.8440, test_acc: 0.7190, best: 0.7190, time: 0:00:46
 Epoch: 255, lr: 4.0e-04, train_loss: 0.6213, train_acc: 0.7726 test_loss: 0.8519, test_acc: 0.7131, best: 0.7190, time: 0:00:46
 Epoch: 256, lr: 4.0e-04, train_loss: 0.6118, train_acc: 0.7838 test_loss: 0.8633, test_acc: 0.7129, best: 0.7190, time: 0:00:46
 Epoch: 257, lr: 4.0e-04, train_loss: 0.6222, train_acc: 0.7824 test_loss: 0.8483, test_acc: 0.7129, best: 0.7190, time: 0:00:46
 Epoch: 258, lr: 4.0e-04, train_loss: 0.6220, train_acc: 0.7852 test_loss: 0.8755, test_acc: 0.7137, best: 0.7190, time: 0:00:46
 Epoch: 259, lr: 4.0e-04, train_loss: 0.6477, train_acc: 0.7670 test_loss: 0.8675, test_acc: 0.7111, best: 0.7190, time: 0:00:46
 Epoch: 260, lr: 4.0e-04, train_loss: 0.6179, train_acc: 0.7758 test_loss: 0.8655, test_acc: 0.7129, best: 0.7190, time: 0:00:46
 Epoch: 261, lr: 4.0e-04, train_loss: 0.6322, train_acc: 0.7812 test_loss: 0.8548, test_acc: 0.7164, best: 0.7190, time: 0:00:46
 Epoch: 262, lr: 4.0e-04, train_loss: 0.6154, train_acc: 0.7840 test_loss: 0.8425, test_acc: 0.7163, best: 0.7190, time: 0:00:46
 Epoch: 263, lr: 4.0e-04, train_loss: 0.6025, train_acc: 0.7850 test_loss: 0.8578, test_acc: 0.7151, best: 0.7190, time: 0:00:46
 Epoch: 264, lr: 4.0e-04, train_loss: 0.6064, train_acc: 0.7838 test_loss: 0.8710, test_acc: 0.7117, best: 0.7190, time: 0:00:46
 Epoch: 265, lr: 4.0e-04, train_loss: 0.6219, train_acc: 0.7810 test_loss: 0.8711, test_acc: 0.7120, best: 0.7190, time: 0:00:46
 Epoch: 266, lr: 4.0e-04, train_loss: 0.6212, train_acc: 0.7806 test_loss: 0.8467, test_acc: 0.7150, best: 0.7190, time: 0:00:47
 Epoch: 267, lr: 4.0e-04, train_loss: 0.6194, train_acc: 0.7832 test_loss: 0.8532, test_acc: 0.7124, best: 0.7190, time: 0:00:46
 Epoch: 268, lr: 4.0e-04, train_loss: 0.6094, train_acc: 0.7800 test_loss: 0.8676, test_acc: 0.7161, best: 0.7190, time: 0:00:46
 Epoch: 269, lr: 4.0e-04, train_loss: 0.6332, train_acc: 0.7746 test_loss: 0.8550, test_acc: 0.7146, best: 0.7190, time: 0:00:46
 Epoch: 270, lr: 8.0e-05, train_loss: 0.6104, train_acc: 0.7820 test_loss: 0.8553, test_acc: 0.7164, best: 0.7190, time: 0:00:46
 Epoch: 271, lr: 8.0e-05, train_loss: 0.6159, train_acc: 0.7842 test_loss: 0.8560, test_acc: 0.7206, best: 0.7206, time: 0:00:46
 Epoch: 272, lr: 8.0e-05, train_loss: 0.6080, train_acc: 0.7852 test_loss: 0.8596, test_acc: 0.7127, best: 0.7206, time: 0:00:46
 Epoch: 273, lr: 8.0e-05, train_loss: 0.5966, train_acc: 0.7912 test_loss: 0.8678, test_acc: 0.7121, best: 0.7206, time: 0:00:46
 Epoch: 274, lr: 8.0e-05, train_loss: 0.6362, train_acc: 0.7816 test_loss: 0.8491, test_acc: 0.7173, best: 0.7206, time: 0:00:46
 Epoch: 275, lr: 8.0e-05, train_loss: 0.6295, train_acc: 0.7800 test_loss: 0.8672, test_acc: 0.7104, best: 0.7206, time: 0:00:46
 Epoch: 276, lr: 8.0e-05, train_loss: 0.6005, train_acc: 0.7890 test_loss: 0.8565, test_acc: 0.7156, best: 0.7206, time: 0:00:46
 Epoch: 277, lr: 8.0e-05, train_loss: 0.6328, train_acc: 0.7788 test_loss: 0.8542, test_acc: 0.7129, best: 0.7206, time: 0:00:46
 Epoch: 278, lr: 8.0e-05, train_loss: 0.6121, train_acc: 0.7806 test_loss: 0.8591, test_acc: 0.7188, best: 0.7206, time: 0:00:46
 Epoch: 279, lr: 8.0e-05, train_loss: 0.6284, train_acc: 0.7796 test_loss: 0.8476, test_acc: 0.7169, best: 0.7206, time: 0:00:46
 Epoch: 280, lr: 8.0e-05, train_loss: 0.6164, train_acc: 0.7794 test_loss: 0.8530, test_acc: 0.7165, best: 0.7206, time: 0:00:46
 Epoch: 281, lr: 8.0e-05, train_loss: 0.6024, train_acc: 0.7810 test_loss: 0.8441, test_acc: 0.7161, best: 0.7206, time: 0:00:46
 Epoch: 282, lr: 8.0e-05, train_loss: 0.6103, train_acc: 0.7876 test_loss: 0.8544, test_acc: 0.7164, best: 0.7206, time: 0:00:46
 Epoch: 283, lr: 8.0e-05, train_loss: 0.6060, train_acc: 0.7876 test_loss: 0.8507, test_acc: 0.7157, best: 0.7206, time: 0:00:46
 Epoch: 284, lr: 8.0e-05, train_loss: 0.6112, train_acc: 0.7820 test_loss: 0.8510, test_acc: 0.7140, best: 0.7206, time: 0:00:46
 Epoch: 285, lr: 8.0e-05, train_loss: 0.5963, train_acc: 0.7894 test_loss: 0.8494, test_acc: 0.7157, best: 0.7206, time: 0:00:46
 Epoch: 286, lr: 8.0e-05, train_loss: 0.6024, train_acc: 0.7874 test_loss: 0.8570, test_acc: 0.7119, best: 0.7206, time: 0:00:46
 Epoch: 287, lr: 8.0e-05, train_loss: 0.6060, train_acc: 0.7826 test_loss: 0.8734, test_acc: 0.7116, best: 0.7206, time: 0:00:46
 Epoch: 288, lr: 8.0e-05, train_loss: 0.6108, train_acc: 0.7846 test_loss: 0.8522, test_acc: 0.7136, best: 0.7206, time: 0:00:46
 Epoch: 289, lr: 8.0e-05, train_loss: 0.5948, train_acc: 0.7894 test_loss: 0.8491, test_acc: 0.7166, best: 0.7206, time: 0:00:46
 Epoch: 290, lr: 8.0e-05, train_loss: 0.6035, train_acc: 0.7850 test_loss: 0.8454, test_acc: 0.7163, best: 0.7206, time: 0:00:46
 Epoch: 291, lr: 8.0e-05, train_loss: 0.5974, train_acc: 0.7892 test_loss: 0.8535, test_acc: 0.7161, best: 0.7206, time: 0:00:46
 Epoch: 292, lr: 8.0e-05, train_loss: 0.6162, train_acc: 0.7790 test_loss: 0.8480, test_acc: 0.7166, best: 0.7206, time: 0:00:46
 Epoch: 293, lr: 8.0e-05, train_loss: 0.6250, train_acc: 0.7798 test_loss: 0.8582, test_acc: 0.7144, best: 0.7206, time: 0:00:46
 Epoch: 294, lr: 8.0e-05, train_loss: 0.6092, train_acc: 0.7846 test_loss: 0.8579, test_acc: 0.7145, best: 0.7206, time: 0:00:46
 Epoch: 295, lr: 8.0e-05, train_loss: 0.6158, train_acc: 0.7808 test_loss: 0.8675, test_acc: 0.7114, best: 0.7206, time: 0:00:46
 Epoch: 296, lr: 8.0e-05, train_loss: 0.6226, train_acc: 0.7814 test_loss: 0.8480, test_acc: 0.7125, best: 0.7206, time: 0:00:46
 Epoch: 297, lr: 8.0e-05, train_loss: 0.6025, train_acc: 0.7842 test_loss: 0.8489, test_acc: 0.7157, best: 0.7206, time: 0:00:46
 Epoch: 298, lr: 8.0e-05, train_loss: 0.6153, train_acc: 0.7882 test_loss: 0.8411, test_acc: 0.7173, best: 0.7206, time: 0:00:46
 Epoch: 299, lr: 8.0e-05, train_loss: 0.6108, train_acc: 0.7832 test_loss: 0.8605, test_acc: 0.7140, best: 0.7206, time: 0:00:46
 Highest accuracy: 0.7206