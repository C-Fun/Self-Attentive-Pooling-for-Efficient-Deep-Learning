
 Run on time: 2022-07-01 13:37:48.315284

 Architecture: prepool-nlp_headfix2-4-resnet18-nlp_headfix2-1222

 Pool Config: {
    "arch": "resnet18",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "pool": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 4,
            "_psize": 2,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 1,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": 2,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : PREPOOL-NLP_HEADFIX2-4-RESNET18-NLP_HEADFIX2-1222
	 im_size              : None
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): Pool2d(
        (logit): Sequential(
          (pool_weight): NLP_BASE(
            (downsample): Sequential(
              (0): Conv2d(64, 64, kernel_size=(2, 2), stride=(2, 2))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (multihead_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
            )
            (restore): Sequential(
              (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (pos_embed): PositionEmbeddingLearned(
              (row_embed): Embedding(256, 32)
              (col_embed): Embedding(256, 32)
            )
          )
        )
        (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
      )
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 64)
                (col_embed): Embedding(256, 64)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 128)
                (col_embed): Embedding(256, 128)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 256)
                (col_embed): Embedding(256, 256)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=512, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.2577, train_acc: 0.1878 test_loss: 1.9888, test_acc: 0.2385, best: 0.2385, time: 0:01:19
 Epoch: 2, lr: 1.0e-02, train_loss: 1.9569, train_acc: 0.2508 test_loss: 1.7521, test_acc: 0.3260, best: 0.3260, time: 0:01:17
 Epoch: 3, lr: 1.0e-02, train_loss: 1.8477, train_acc: 0.2942 test_loss: 1.7168, test_acc: 0.3367, best: 0.3367, time: 0:01:17
 Epoch: 4, lr: 1.0e-02, train_loss: 1.7729, train_acc: 0.3224 test_loss: 1.7194, test_acc: 0.3708, best: 0.3708, time: 0:01:17
 Epoch: 5, lr: 1.0e-02, train_loss: 1.7020, train_acc: 0.3646 test_loss: 1.5172, test_acc: 0.4151, best: 0.4151, time: 0:01:17
 Epoch: 6, lr: 1.0e-02, train_loss: 1.6642, train_acc: 0.3742 test_loss: 1.4938, test_acc: 0.4376, best: 0.4376, time: 0:01:18
 Epoch: 7, lr: 1.0e-02, train_loss: 1.6075, train_acc: 0.3854 test_loss: 1.5506, test_acc: 0.4186, best: 0.4376, time: 0:01:17
 Epoch: 8, lr: 1.0e-02, train_loss: 1.5661, train_acc: 0.4168 test_loss: 1.4276, test_acc: 0.4809, best: 0.4809, time: 0:01:17
 Epoch: 9, lr: 1.0e-02, train_loss: 1.5189, train_acc: 0.4366 test_loss: 1.3294, test_acc: 0.5001, best: 0.5001, time: 0:01:17
 Epoch: 10, lr: 1.0e-02, train_loss: 1.4686, train_acc: 0.4598 test_loss: 1.3000, test_acc: 0.5072, best: 0.5072, time: 0:01:17
 Epoch: 11, lr: 1.0e-02, train_loss: 1.4280, train_acc: 0.4640 test_loss: 1.4109, test_acc: 0.4871, best: 0.5072, time: 0:01:17
 Epoch: 12, lr: 1.0e-02, train_loss: 1.4208, train_acc: 0.4754 test_loss: 1.4222, test_acc: 0.4861, best: 0.5072, time: 0:01:17
 Epoch: 13, lr: 1.0e-02, train_loss: 1.3858, train_acc: 0.4902 test_loss: 1.2087, test_acc: 0.5540, best: 0.5540, time: 0:01:17
 Epoch: 14, lr: 1.0e-02, train_loss: 1.3384, train_acc: 0.5160 test_loss: 1.2913, test_acc: 0.5404, best: 0.5540, time: 0:01:17
 Epoch: 15, lr: 1.0e-02, train_loss: 1.3182, train_acc: 0.5228 test_loss: 1.1581, test_acc: 0.5774, best: 0.5774, time: 0:01:17
 Epoch: 16, lr: 1.0e-02, train_loss: 1.2958, train_acc: 0.5286 test_loss: 1.1919, test_acc: 0.5613, best: 0.5774, time: 0:01:17
 Epoch: 17, lr: 1.0e-02, train_loss: 1.2811, train_acc: 0.5352 test_loss: 1.1497, test_acc: 0.5815, best: 0.5815, time: 0:01:17
 Epoch: 18, lr: 1.0e-02, train_loss: 1.2484, train_acc: 0.5496 test_loss: 1.1144, test_acc: 0.5894, best: 0.5894, time: 0:01:17
 Epoch: 19, lr: 1.0e-02, train_loss: 1.2265, train_acc: 0.5616 test_loss: 1.2532, test_acc: 0.5429, best: 0.5894, time: 0:01:17
 Epoch: 20, lr: 1.0e-02, train_loss: 1.2042, train_acc: 0.5598 test_loss: 1.1745, test_acc: 0.5831, best: 0.5894, time: 0:01:17
 Epoch: 21, lr: 1.0e-02, train_loss: 1.1804, train_acc: 0.5766 test_loss: 1.1651, test_acc: 0.5844, best: 0.5894, time: 0:01:17
 Epoch: 22, lr: 1.0e-02, train_loss: 1.1630, train_acc: 0.5784 test_loss: 1.2167, test_acc: 0.5757, best: 0.5894, time: 0:01:17
 Epoch: 23, lr: 1.0e-02, train_loss: 1.1301, train_acc: 0.5856 test_loss: 1.1149, test_acc: 0.6041, best: 0.6041, time: 0:01:17
 Epoch: 24, lr: 1.0e-02, train_loss: 1.1168, train_acc: 0.5974 test_loss: 0.9868, test_acc: 0.6401, best: 0.6401, time: 0:01:17
 Epoch: 25, lr: 1.0e-02, train_loss: 1.1133, train_acc: 0.5922 test_loss: 1.0544, test_acc: 0.6169, best: 0.6401, time: 0:01:17
 Epoch: 26, lr: 1.0e-02, train_loss: 1.0904, train_acc: 0.6038 test_loss: 1.1035, test_acc: 0.6131, best: 0.6401, time: 0:01:17
 Epoch: 27, lr: 1.0e-02, train_loss: 1.0730, train_acc: 0.6134 test_loss: 1.0270, test_acc: 0.6314, best: 0.6401, time: 0:01:17
 Epoch: 28, lr: 1.0e-02, train_loss: 1.0533, train_acc: 0.6268 test_loss: 1.1295, test_acc: 0.5990, best: 0.6401, time: 0:01:17
 Epoch: 29, lr: 1.0e-02, train_loss: 1.0283, train_acc: 0.6230 test_loss: 1.0395, test_acc: 0.6204, best: 0.6401, time: 0:01:17
 Epoch: 30, lr: 1.0e-02, train_loss: 1.0021, train_acc: 0.6406 test_loss: 1.0974, test_acc: 0.6199, best: 0.6401, time: 0:01:17
 Epoch: 31, lr: 1.0e-02, train_loss: 1.0043, train_acc: 0.6406 test_loss: 1.0004, test_acc: 0.6530, best: 0.6530, time: 0:01:17
 Epoch: 32, lr: 1.0e-02, train_loss: 0.9873, train_acc: 0.6494 test_loss: 1.0044, test_acc: 0.6549, best: 0.6549, time: 0:01:17
 Epoch: 33, lr: 1.0e-02, train_loss: 0.9854, train_acc: 0.6498 test_loss: 0.9775, test_acc: 0.6650, best: 0.6650, time: 0:01:17
 Epoch: 34, lr: 1.0e-02, train_loss: 0.9564, train_acc: 0.6556 test_loss: 0.9672, test_acc: 0.6640, best: 0.6650, time: 0:01:17
 Epoch: 35, lr: 1.0e-02, train_loss: 0.9565, train_acc: 0.6590 test_loss: 0.9385, test_acc: 0.6686, best: 0.6686, time: 0:01:17
 Epoch: 36, lr: 1.0e-02, train_loss: 0.9094, train_acc: 0.6706 test_loss: 1.0446, test_acc: 0.6486, best: 0.6686, time: 0:01:17
 Epoch: 37, lr: 1.0e-02, train_loss: 0.9261, train_acc: 0.6708 test_loss: 1.0038, test_acc: 0.6499, best: 0.6686, time: 0:01:17
 Epoch: 38, lr: 1.0e-02, train_loss: 0.9216, train_acc: 0.6700 test_loss: 1.0128, test_acc: 0.6532, best: 0.6686, time: 0:01:17
 Epoch: 39, lr: 1.0e-02, train_loss: 0.8872, train_acc: 0.6772 test_loss: 0.9424, test_acc: 0.6680, best: 0.6686, time: 0:01:17
 Epoch: 40, lr: 1.0e-02, train_loss: 0.8812, train_acc: 0.6854 test_loss: 0.8959, test_acc: 0.6837, best: 0.6837, time: 0:01:17
 Epoch: 41, lr: 1.0e-02, train_loss: 0.8737, train_acc: 0.6874 test_loss: 0.9239, test_acc: 0.6770, best: 0.6837, time: 0:01:17
 Epoch: 42, lr: 1.0e-02, train_loss: 0.8528, train_acc: 0.6940 test_loss: 0.9237, test_acc: 0.6853, best: 0.6853, time: 0:01:17
 Epoch: 43, lr: 1.0e-02, train_loss: 0.8411, train_acc: 0.6998 test_loss: 0.9983, test_acc: 0.6657, best: 0.6853, time: 0:01:17
 Epoch: 44, lr: 1.0e-02, train_loss: 0.8283, train_acc: 0.7008 test_loss: 0.9127, test_acc: 0.6885, best: 0.6885, time: 0:01:17
 Epoch: 45, lr: 1.0e-02, train_loss: 0.8307, train_acc: 0.7006 test_loss: 0.9966, test_acc: 0.6706, best: 0.6885, time: 0:01:17
 Epoch: 46, lr: 1.0e-02, train_loss: 0.8257, train_acc: 0.7050 test_loss: 0.9982, test_acc: 0.6675, best: 0.6885, time: 0:01:17
 Epoch: 47, lr: 1.0e-02, train_loss: 0.7958, train_acc: 0.7112 test_loss: 0.9804, test_acc: 0.6681, best: 0.6885, time: 0:01:17
 Epoch: 48, lr: 1.0e-02, train_loss: 0.7891, train_acc: 0.7146 test_loss: 0.9096, test_acc: 0.6973, best: 0.6973, time: 0:01:17
 Epoch: 49, lr: 1.0e-02, train_loss: 0.7802, train_acc: 0.7270 test_loss: 0.9852, test_acc: 0.6775, best: 0.6973, time: 0:01:17
 Epoch: 50, lr: 1.0e-02, train_loss: 0.7638, train_acc: 0.7270 test_loss: 0.9329, test_acc: 0.6874, best: 0.6973, time: 0:01:17
 Epoch: 51, lr: 1.0e-02, train_loss: 0.7452, train_acc: 0.7314 test_loss: 0.9384, test_acc: 0.6953, best: 0.6973, time: 0:01:17
 Epoch: 52, lr: 1.0e-02, train_loss: 0.7453, train_acc: 0.7386 test_loss: 0.9080, test_acc: 0.6949, best: 0.6973, time: 0:01:17
 Epoch: 53, lr: 1.0e-02, train_loss: 0.7361, train_acc: 0.7300 test_loss: 0.9124, test_acc: 0.6987, best: 0.6987, time: 0:01:17
 Epoch: 54, lr: 1.0e-02, train_loss: 0.7098, train_acc: 0.7484 test_loss: 1.0860, test_acc: 0.6561, best: 0.6987, time: 0:01:17
 Epoch: 55, lr: 1.0e-02, train_loss: 0.7154, train_acc: 0.7422 test_loss: 0.9834, test_acc: 0.6920, best: 0.6987, time: 0:01:17
 Epoch: 56, lr: 1.0e-02, train_loss: 0.7024, train_acc: 0.7562 test_loss: 0.9779, test_acc: 0.6865, best: 0.6987, time: 0:01:17
 Epoch: 57, lr: 1.0e-02, train_loss: 0.7208, train_acc: 0.7436 test_loss: 0.9360, test_acc: 0.6886, best: 0.6987, time: 0:01:17
 Epoch: 58, lr: 1.0e-02, train_loss: 0.6858, train_acc: 0.7536 test_loss: 1.0627, test_acc: 0.6756, best: 0.6987, time: 0:01:17
 Epoch: 59, lr: 1.0e-02, train_loss: 0.6898, train_acc: 0.7552 test_loss: 0.9488, test_acc: 0.6821, best: 0.6987, time: 0:01:17
 Epoch: 60, lr: 1.0e-02, train_loss: 0.6844, train_acc: 0.7550 test_loss: 0.9684, test_acc: 0.6939, best: 0.6987, time: 0:01:17
 Epoch: 61, lr: 1.0e-02, train_loss: 0.6604, train_acc: 0.7616 test_loss: 0.8406, test_acc: 0.7144, best: 0.7144, time: 0:01:17
 Epoch: 62, lr: 1.0e-02, train_loss: 0.6466, train_acc: 0.7690 test_loss: 0.9079, test_acc: 0.7111, best: 0.7144, time: 0:01:17
 Epoch: 63, lr: 1.0e-02, train_loss: 0.6559, train_acc: 0.7670 test_loss: 0.7993, test_acc: 0.7364, best: 0.7364, time: 0:01:17
 Epoch: 64, lr: 1.0e-02, train_loss: 0.6493, train_acc: 0.7676 test_loss: 0.9519, test_acc: 0.7025, best: 0.7364, time: 0:01:17
 Epoch: 65, lr: 1.0e-02, train_loss: 0.6412, train_acc: 0.7720 test_loss: 0.8910, test_acc: 0.7077, best: 0.7364, time: 0:01:17
 Epoch: 66, lr: 1.0e-02, train_loss: 0.6356, train_acc: 0.7750 test_loss: 0.9224, test_acc: 0.7157, best: 0.7364, time: 0:01:17
 Epoch: 67, lr: 1.0e-02, train_loss: 0.6108, train_acc: 0.7880 test_loss: 0.8727, test_acc: 0.7194, best: 0.7364, time: 0:01:17
 Epoch: 68, lr: 1.0e-02, train_loss: 0.6090, train_acc: 0.7890 test_loss: 0.8790, test_acc: 0.7254, best: 0.7364, time: 0:01:17
 Epoch: 69, lr: 1.0e-02, train_loss: 0.5806, train_acc: 0.7950 test_loss: 0.8648, test_acc: 0.7246, best: 0.7364, time: 0:01:17
 Epoch: 70, lr: 1.0e-02, train_loss: 0.6135, train_acc: 0.7854 test_loss: 0.8360, test_acc: 0.7222, best: 0.7364, time: 0:01:17
 Epoch: 71, lr: 1.0e-02, train_loss: 0.5830, train_acc: 0.7900 test_loss: 1.0907, test_acc: 0.6843, best: 0.7364, time: 0:01:17
 Epoch: 72, lr: 1.0e-02, train_loss: 0.5723, train_acc: 0.7936 test_loss: 0.8706, test_acc: 0.7210, best: 0.7364, time: 0:01:17
 Epoch: 73, lr: 1.0e-02, train_loss: 0.5853, train_acc: 0.7952 test_loss: 0.8278, test_acc: 0.7341, best: 0.7364, time: 0:01:17
 Epoch: 74, lr: 1.0e-02, train_loss: 0.5711, train_acc: 0.8018 test_loss: 0.8459, test_acc: 0.7399, best: 0.7399, time: 0:01:17
 Epoch: 75, lr: 1.0e-02, train_loss: 0.5673, train_acc: 0.8056 test_loss: 0.8851, test_acc: 0.7354, best: 0.7399, time: 0:01:17
 Epoch: 76, lr: 1.0e-02, train_loss: 0.5713, train_acc: 0.8004 test_loss: 0.8860, test_acc: 0.7264, best: 0.7399, time: 0:01:17
 Epoch: 77, lr: 1.0e-02, train_loss: 0.5572, train_acc: 0.8034 test_loss: 0.9006, test_acc: 0.7119, best: 0.7399, time: 0:01:17
 Epoch: 78, lr: 1.0e-02, train_loss: 0.5246, train_acc: 0.8170 test_loss: 1.0573, test_acc: 0.7103, best: 0.7399, time: 0:01:17
 Epoch: 79, lr: 1.0e-02, train_loss: 0.5413, train_acc: 0.8106 test_loss: 1.3674, test_acc: 0.6913, best: 0.7399, time: 0:01:17
 Epoch: 80, lr: 1.0e-02, train_loss: 0.5269, train_acc: 0.8178 test_loss: 0.9311, test_acc: 0.7245, best: 0.7399, time: 0:01:17
 Epoch: 81, lr: 1.0e-02, train_loss: 0.5205, train_acc: 0.8242 test_loss: 0.9138, test_acc: 0.7344, best: 0.7399, time: 0:01:17
 Epoch: 82, lr: 1.0e-02, train_loss: 0.5210, train_acc: 0.8126 test_loss: 0.9274, test_acc: 0.7177, best: 0.7399, time: 0:01:17
 Epoch: 83, lr: 1.0e-02, train_loss: 0.5167, train_acc: 0.8244 test_loss: 0.8264, test_acc: 0.7448, best: 0.7448, time: 0:01:17
 Epoch: 84, lr: 1.0e-02, train_loss: 0.5239, train_acc: 0.8200 test_loss: 0.9156, test_acc: 0.7290, best: 0.7448, time: 0:01:17
 Epoch: 85, lr: 1.0e-02, train_loss: 0.4888, train_acc: 0.8312 test_loss: 0.9472, test_acc: 0.7266, best: 0.7448, time: 0:01:17
 Epoch: 86, lr: 1.0e-02, train_loss: 0.4856, train_acc: 0.8314 test_loss: 0.8392, test_acc: 0.7389, best: 0.7448, time: 0:01:17
 Epoch: 87, lr: 1.0e-02, train_loss: 0.5035, train_acc: 0.8208 test_loss: 0.8881, test_acc: 0.7366, best: 0.7448, time: 0:01:17
 Epoch: 88, lr: 1.0e-02, train_loss: 0.4756, train_acc: 0.8348 test_loss: 0.9580, test_acc: 0.7216, best: 0.7448, time: 0:01:17
 Epoch: 89, lr: 1.0e-02, train_loss: 0.4838, train_acc: 0.8348 test_loss: 0.9042, test_acc: 0.7338, best: 0.7448, time: 0:01:17
 Epoch: 90, lr: 1.0e-02, train_loss: 0.4915, train_acc: 0.8280 test_loss: 0.9153, test_acc: 0.7306, best: 0.7448, time: 0:01:17
 Epoch: 91, lr: 1.0e-02, train_loss: 0.4637, train_acc: 0.8408 test_loss: 0.9934, test_acc: 0.7220, best: 0.7448, time: 0:01:17
 Epoch: 92, lr: 1.0e-02, train_loss: 0.4771, train_acc: 0.8382 test_loss: 0.9557, test_acc: 0.7232, best: 0.7448, time: 0:01:17
 Epoch: 93, lr: 1.0e-02, train_loss: 0.4508, train_acc: 0.8414 test_loss: 0.9185, test_acc: 0.7368, best: 0.7448, time: 0:01:17
 Epoch: 94, lr: 1.0e-02, train_loss: 0.4541, train_acc: 0.8380 test_loss: 0.9599, test_acc: 0.7239, best: 0.7448, time: 0:01:17
 Epoch: 95, lr: 1.0e-02, train_loss: 0.4389, train_acc: 0.8452 test_loss: 0.8546, test_acc: 0.7361, best: 0.7448, time: 0:01:17
 Epoch: 96, lr: 1.0e-02, train_loss: 0.4262, train_acc: 0.8470 test_loss: 0.8934, test_acc: 0.7378, best: 0.7448, time: 0:01:17
 Epoch: 97, lr: 1.0e-02, train_loss: 0.4531, train_acc: 0.8428 test_loss: 0.9181, test_acc: 0.7398, best: 0.7448, time: 0:01:17
 Epoch: 98, lr: 1.0e-02, train_loss: 0.4521, train_acc: 0.8428 test_loss: 0.9753, test_acc: 0.7271, best: 0.7448, time: 0:01:17
 Epoch: 99, lr: 1.0e-02, train_loss: 0.4294, train_acc: 0.8502 test_loss: 0.9872, test_acc: 0.7222, best: 0.7448, time: 0:01:17
 Epoch: 100, lr: 1.0e-02, train_loss: 0.4216, train_acc: 0.8552 test_loss: 0.9953, test_acc: 0.7196, best: 0.7448, time: 0:01:17
 Epoch: 101, lr: 1.0e-02, train_loss: 0.4358, train_acc: 0.8502 test_loss: 0.9155, test_acc: 0.7351, best: 0.7448, time: 0:01:17
 Epoch: 102, lr: 1.0e-02, train_loss: 0.4146, train_acc: 0.8544 test_loss: 0.9019, test_acc: 0.7274, best: 0.7448, time: 0:01:17
 Epoch: 103, lr: 1.0e-02, train_loss: 0.4031, train_acc: 0.8656 test_loss: 0.9010, test_acc: 0.7345, best: 0.7448, time: 0:01:17
 Epoch: 104, lr: 1.0e-02, train_loss: 0.3942, train_acc: 0.8680 test_loss: 1.0217, test_acc: 0.7238, best: 0.7448, time: 0:01:17
 Epoch: 105, lr: 1.0e-02, train_loss: 0.3966, train_acc: 0.8616 test_loss: 0.9371, test_acc: 0.7391, best: 0.7448, time: 0:01:17
 Epoch: 106, lr: 1.0e-02, train_loss: 0.4214, train_acc: 0.8554 test_loss: 1.0158, test_acc: 0.7289, best: 0.7448, time: 0:01:17
 Epoch: 107, lr: 1.0e-02, train_loss: 0.4006, train_acc: 0.8636 test_loss: 0.9377, test_acc: 0.7410, best: 0.7448, time: 0:01:17
 Epoch: 108, lr: 1.0e-02, train_loss: 0.3915, train_acc: 0.8718 test_loss: 0.9089, test_acc: 0.7318, best: 0.7448, time: 0:01:16
 Epoch: 109, lr: 1.0e-02, train_loss: 0.3806, train_acc: 0.8694 test_loss: 0.8482, test_acc: 0.7479, best: 0.7479, time: 0:01:17
 Epoch: 110, lr: 1.0e-02, train_loss: 0.3862, train_acc: 0.8712 test_loss: 0.8648, test_acc: 0.7456, best: 0.7479, time: 0:01:16
 Epoch: 111, lr: 1.0e-02, train_loss: 0.3898, train_acc: 0.8688 test_loss: 0.9400, test_acc: 0.7464, best: 0.7479, time: 0:01:17
 Epoch: 112, lr: 1.0e-02, train_loss: 0.3803, train_acc: 0.8696 test_loss: 0.8973, test_acc: 0.7586, best: 0.7586, time: 0:01:17
 Epoch: 113, lr: 1.0e-02, train_loss: 0.3843, train_acc: 0.8726 test_loss: 0.9871, test_acc: 0.7340, best: 0.7586, time: 0:01:17
 Epoch: 114, lr: 1.0e-02, train_loss: 0.3798, train_acc: 0.8670 test_loss: 0.8819, test_acc: 0.7584, best: 0.7586, time: 0:01:17
 Epoch: 115, lr: 1.0e-02, train_loss: 0.3550, train_acc: 0.8754 test_loss: 0.9372, test_acc: 0.7438, best: 0.7586, time: 0:01:17
 Epoch: 116, lr: 1.0e-02, train_loss: 0.3683, train_acc: 0.8736 test_loss: 0.8953, test_acc: 0.7430, best: 0.7586, time: 0:01:16
 Epoch: 117, lr: 1.0e-02, train_loss: 0.3691, train_acc: 0.8734 test_loss: 0.9516, test_acc: 0.7411, best: 0.7586, time: 0:01:17
 Epoch: 118, lr: 1.0e-02, train_loss: 0.3586, train_acc: 0.8776 test_loss: 0.9539, test_acc: 0.7404, best: 0.7586, time: 0:01:17
 Epoch: 119, lr: 1.0e-02, train_loss: 0.3643, train_acc: 0.8756 test_loss: 0.9311, test_acc: 0.7379, best: 0.7586, time: 0:01:17
 Epoch: 120, lr: 1.0e-02, train_loss: 0.3647, train_acc: 0.8774 test_loss: 0.9268, test_acc: 0.7344, best: 0.7586, time: 0:01:17
 Epoch: 121, lr: 1.0e-02, train_loss: 0.3744, train_acc: 0.8724 test_loss: 0.9348, test_acc: 0.7438, best: 0.7586, time: 0:01:17
 Epoch: 122, lr: 1.0e-02, train_loss: 0.3688, train_acc: 0.8758 test_loss: 0.9080, test_acc: 0.7498, best: 0.7586, time: 0:01:17
 Epoch: 123, lr: 1.0e-02, train_loss: 0.3503, train_acc: 0.8742 test_loss: 0.8937, test_acc: 0.7466, best: 0.7586, time: 0:01:17
 Epoch: 124, lr: 1.0e-02, train_loss: 0.3488, train_acc: 0.8784 test_loss: 0.9684, test_acc: 0.7349, best: 0.7586, time: 0:01:17
 Epoch: 125, lr: 1.0e-02, train_loss: 0.3525, train_acc: 0.8806 test_loss: 0.8963, test_acc: 0.7395, best: 0.7586, time: 0:01:17
 Epoch: 126, lr: 1.0e-02, train_loss: 0.3394, train_acc: 0.8836 test_loss: 0.9428, test_acc: 0.7304, best: 0.7586, time: 0:01:17
 Epoch: 127, lr: 1.0e-02, train_loss: 0.3471, train_acc: 0.8820 test_loss: 0.9807, test_acc: 0.7474, best: 0.7586, time: 0:01:17
 Epoch: 128, lr: 1.0e-02, train_loss: 0.3294, train_acc: 0.8866 test_loss: 1.0264, test_acc: 0.7340, best: 0.7586, time: 0:01:17
 Epoch: 129, lr: 1.0e-02, train_loss: 0.3283, train_acc: 0.8908 test_loss: 0.9854, test_acc: 0.7414, best: 0.7586, time: 0:01:17
 Epoch: 130, lr: 1.0e-02, train_loss: 0.3046, train_acc: 0.8938 test_loss: 1.0819, test_acc: 0.7346, best: 0.7586, time: 0:01:17
 Epoch: 131, lr: 1.0e-02, train_loss: 0.3235, train_acc: 0.8902 test_loss: 0.9023, test_acc: 0.7490, best: 0.7586, time: 0:01:17
 Epoch: 132, lr: 1.0e-02, train_loss: 0.3203, train_acc: 0.8878 test_loss: 0.9871, test_acc: 0.7392, best: 0.7586, time: 0:01:17
 Epoch: 133, lr: 1.0e-02, train_loss: 0.3229, train_acc: 0.8908 test_loss: 0.9330, test_acc: 0.7461, best: 0.7586, time: 0:01:17
 Epoch: 134, lr: 1.0e-02, train_loss: 0.3399, train_acc: 0.8844 test_loss: 0.9820, test_acc: 0.7429, best: 0.7586, time: 0:01:17
 Epoch: 135, lr: 1.0e-02, train_loss: 0.3221, train_acc: 0.8858 test_loss: 1.0103, test_acc: 0.7429, best: 0.7586, time: 0:01:17
 Epoch: 136, lr: 1.0e-02, train_loss: 0.3230, train_acc: 0.8886 test_loss: 0.9479, test_acc: 0.7472, best: 0.7586, time: 0:01:17
 Epoch: 137, lr: 1.0e-02, train_loss: 0.3190, train_acc: 0.8848 test_loss: 0.8687, test_acc: 0.7609, best: 0.7609, time: 0:01:17
 Epoch: 138, lr: 1.0e-02, train_loss: 0.3217, train_acc: 0.8916 test_loss: 1.0465, test_acc: 0.7335, best: 0.7609, time: 0:01:17
 Epoch: 139, lr: 1.0e-02, train_loss: 0.3245, train_acc: 0.8938 test_loss: 0.9218, test_acc: 0.7518, best: 0.7609, time: 0:01:17
 Epoch: 140, lr: 1.0e-02, train_loss: 0.3096, train_acc: 0.8982 test_loss: 0.9559, test_acc: 0.7445, best: 0.7609, time: 0:01:17
 Epoch: 141, lr: 1.0e-02, train_loss: 0.3056, train_acc: 0.8998 test_loss: 0.9419, test_acc: 0.7475, best: 0.7609, time: 0:01:17
 Epoch: 142, lr: 1.0e-02, train_loss: 0.3126, train_acc: 0.8922 test_loss: 0.9443, test_acc: 0.7538, best: 0.7609, time: 0:01:17
 Epoch: 143, lr: 1.0e-02, train_loss: 0.2920, train_acc: 0.8992 test_loss: 0.9119, test_acc: 0.7514, best: 0.7609, time: 0:01:17
 Epoch: 144, lr: 1.0e-02, train_loss: 0.2880, train_acc: 0.8984 test_loss: 0.9398, test_acc: 0.7611, best: 0.7611, time: 0:01:17
 Epoch: 145, lr: 1.0e-02, train_loss: 0.3033, train_acc: 0.8974 test_loss: 0.9188, test_acc: 0.7591, best: 0.7611, time: 0:01:17
 Epoch: 146, lr: 1.0e-02, train_loss: 0.2784, train_acc: 0.9058 test_loss: 0.8976, test_acc: 0.7605, best: 0.7611, time: 0:01:17
 Epoch: 147, lr: 1.0e-02, train_loss: 0.2910, train_acc: 0.8982 test_loss: 0.9292, test_acc: 0.7588, best: 0.7611, time: 0:01:17
 Epoch: 148, lr: 1.0e-02, train_loss: 0.3061, train_acc: 0.8980 test_loss: 0.8840, test_acc: 0.7581, best: 0.7611, time: 0:01:17
 Epoch: 149, lr: 1.0e-02, train_loss: 0.2809, train_acc: 0.9038 test_loss: 1.0349, test_acc: 0.7464, best: 0.7611, time: 0:01:17
 Epoch: 150, lr: 1.0e-02, train_loss: 0.2888, train_acc: 0.9032 test_loss: 0.9508, test_acc: 0.7508, best: 0.7611, time: 0:01:17
 Epoch: 151, lr: 1.0e-02, train_loss: 0.2920, train_acc: 0.9030 test_loss: 1.0133, test_acc: 0.7375, best: 0.7611, time: 0:01:17
 Epoch: 152, lr: 1.0e-02, train_loss: 0.2829, train_acc: 0.9070 test_loss: 0.9232, test_acc: 0.7599, best: 0.7611, time: 0:01:17
 Epoch: 153, lr: 1.0e-02, train_loss: 0.2829, train_acc: 0.9056 test_loss: 0.9626, test_acc: 0.7510, best: 0.7611, time: 0:01:17
 Epoch: 154, lr: 1.0e-02, train_loss: 0.2694, train_acc: 0.9102 test_loss: 0.9613, test_acc: 0.7520, best: 0.7611, time: 0:01:17
 Epoch: 155, lr: 1.0e-02, train_loss: 0.2564, train_acc: 0.9092 test_loss: 0.9940, test_acc: 0.7594, best: 0.7611, time: 0:01:17
 Epoch: 156, lr: 1.0e-02, train_loss: 0.3048, train_acc: 0.8956 test_loss: 0.9403, test_acc: 0.7570, best: 0.7611, time: 0:01:17
 Epoch: 157, lr: 1.0e-02, train_loss: 0.2826, train_acc: 0.9052 test_loss: 0.9615, test_acc: 0.7519, best: 0.7611, time: 0:01:17
 Epoch: 158, lr: 1.0e-02, train_loss: 0.2782, train_acc: 0.9078 test_loss: 0.9618, test_acc: 0.7570, best: 0.7611, time: 0:01:17
 Epoch: 159, lr: 1.0e-02, train_loss: 0.2648, train_acc: 0.9152 test_loss: 1.0756, test_acc: 0.7451, best: 0.7611, time: 0:01:17
 Epoch: 160, lr: 1.0e-02, train_loss: 0.2653, train_acc: 0.9102 test_loss: 0.9461, test_acc: 0.7602, best: 0.7611, time: 0:01:17
 Epoch: 161, lr: 1.0e-02, train_loss: 0.2672, train_acc: 0.9118 test_loss: 0.8808, test_acc: 0.7616, best: 0.7616, time: 0:01:18
 Epoch: 162, lr: 1.0e-02, train_loss: 0.2677, train_acc: 0.9102 test_loss: 0.8760, test_acc: 0.7624, best: 0.7624, time: 0:01:17
 Epoch: 163, lr: 1.0e-02, train_loss: 0.2814, train_acc: 0.9044 test_loss: 1.0622, test_acc: 0.7310, best: 0.7624, time: 0:01:17
 Epoch: 164, lr: 1.0e-02, train_loss: 0.2715, train_acc: 0.9036 test_loss: 1.0206, test_acc: 0.7470, best: 0.7624, time: 0:01:17
 Epoch: 165, lr: 1.0e-02, train_loss: 0.2695, train_acc: 0.9074 test_loss: 1.0200, test_acc: 0.7435, best: 0.7624, time: 0:01:17
 Epoch: 166, lr: 1.0e-02, train_loss: 0.2694, train_acc: 0.9084 test_loss: 0.9638, test_acc: 0.7530, best: 0.7624, time: 0:01:17
 Epoch: 167, lr: 1.0e-02, train_loss: 0.2603, train_acc: 0.9138 test_loss: 0.8903, test_acc: 0.7625, best: 0.7625, time: 0:01:17
 Epoch: 168, lr: 1.0e-02, train_loss: 0.2474, train_acc: 0.9178 test_loss: 1.0202, test_acc: 0.7442, best: 0.7625, time: 0:01:17
 Epoch: 169, lr: 1.0e-02, train_loss: 0.2530, train_acc: 0.9128 test_loss: 1.0534, test_acc: 0.7321, best: 0.7625, time: 0:01:17
 Epoch: 170, lr: 1.0e-02, train_loss: 0.2659, train_acc: 0.9080 test_loss: 1.0394, test_acc: 0.7464, best: 0.7625, time: 0:01:17
 Epoch: 171, lr: 1.0e-02, train_loss: 0.2814, train_acc: 0.9076 test_loss: 0.9170, test_acc: 0.7578, best: 0.7625, time: 0:01:17
 Epoch: 172, lr: 1.0e-02, train_loss: 0.2640, train_acc: 0.9104 test_loss: 1.0090, test_acc: 0.7509, best: 0.7625, time: 0:01:17
 Epoch: 173, lr: 1.0e-02, train_loss: 0.2515, train_acc: 0.9128 test_loss: 0.9785, test_acc: 0.7548, best: 0.7625, time: 0:01:17
 Epoch: 174, lr: 1.0e-02, train_loss: 0.2494, train_acc: 0.9174 test_loss: 1.0438, test_acc: 0.7516, best: 0.7625, time: 0:01:17
 Epoch: 175, lr: 1.0e-02, train_loss: 0.2562, train_acc: 0.9142 test_loss: 0.9558, test_acc: 0.7584, best: 0.7625, time: 0:01:17
 Epoch: 176, lr: 1.0e-02, train_loss: 0.2454, train_acc: 0.9174 test_loss: 1.0812, test_acc: 0.7451, best: 0.7625, time: 0:01:17
 Epoch: 177, lr: 1.0e-02, train_loss: 0.2536, train_acc: 0.9122 test_loss: 1.0263, test_acc: 0.7552, best: 0.7625, time: 0:01:17
 Epoch: 178, lr: 1.0e-02, train_loss: 0.2448, train_acc: 0.9178 test_loss: 0.9751, test_acc: 0.7598, best: 0.7625, time: 0:01:17
 Epoch: 179, lr: 1.0e-02, train_loss: 0.2486, train_acc: 0.9162 test_loss: 1.0774, test_acc: 0.7279, best: 0.7625, time: 0:01:17
 Epoch: 180, lr: 2.0e-03, train_loss: 0.2193, train_acc: 0.9252 test_loss: 0.9520, test_acc: 0.7612, best: 0.7625, time: 0:01:17
 Epoch: 181, lr: 2.0e-03, train_loss: 0.2021, train_acc: 0.9340 test_loss: 0.8690, test_acc: 0.7701, best: 0.7701, time: 0:01:17
 Epoch: 182, lr: 2.0e-03, train_loss: 0.1838, train_acc: 0.9398 test_loss: 0.8967, test_acc: 0.7761, best: 0.7761, time: 0:01:17
 Epoch: 183, lr: 2.0e-03, train_loss: 0.1740, train_acc: 0.9426 test_loss: 0.9086, test_acc: 0.7741, best: 0.7761, time: 0:01:17
 Epoch: 184, lr: 2.0e-03, train_loss: 0.1860, train_acc: 0.9354 test_loss: 0.9170, test_acc: 0.7765, best: 0.7765, time: 0:01:17
 Epoch: 185, lr: 2.0e-03, train_loss: 0.1770, train_acc: 0.9426 test_loss: 0.9092, test_acc: 0.7776, best: 0.7776, time: 0:01:17
 Epoch: 186, lr: 2.0e-03, train_loss: 0.1772, train_acc: 0.9384 test_loss: 0.9355, test_acc: 0.7744, best: 0.7776, time: 0:01:17
 Epoch: 187, lr: 2.0e-03, train_loss: 0.1697, train_acc: 0.9404 test_loss: 0.9030, test_acc: 0.7756, best: 0.7776, time: 0:01:17
 Epoch: 188, lr: 2.0e-03, train_loss: 0.1652, train_acc: 0.9438 test_loss: 0.9415, test_acc: 0.7714, best: 0.7776, time: 0:01:17
 Epoch: 189, lr: 2.0e-03, train_loss: 0.1668, train_acc: 0.9448 test_loss: 0.9474, test_acc: 0.7730, best: 0.7776, time: 0:01:16
 Epoch: 190, lr: 2.0e-03, train_loss: 0.1667, train_acc: 0.9422 test_loss: 0.9661, test_acc: 0.7648, best: 0.7776, time: 0:01:17
 Epoch: 191, lr: 2.0e-03, train_loss: 0.1693, train_acc: 0.9436 test_loss: 0.9524, test_acc: 0.7712, best: 0.7776, time: 0:01:17
 Epoch: 192, lr: 2.0e-03, train_loss: 0.1701, train_acc: 0.9442 test_loss: 0.9243, test_acc: 0.7779, best: 0.7779, time: 0:01:17
 Epoch: 193, lr: 2.0e-03, train_loss: 0.1590, train_acc: 0.9470 test_loss: 0.9277, test_acc: 0.7711, best: 0.7779, time: 0:01:17
 Epoch: 194, lr: 2.0e-03, train_loss: 0.1504, train_acc: 0.9502 test_loss: 0.9481, test_acc: 0.7708, best: 0.7779, time: 0:01:17
 Epoch: 195, lr: 2.0e-03, train_loss: 0.1669, train_acc: 0.9438 test_loss: 0.9177, test_acc: 0.7765, best: 0.7779, time: 0:01:17
 Epoch: 196, lr: 2.0e-03, train_loss: 0.1689, train_acc: 0.9418 test_loss: 0.9432, test_acc: 0.7735, best: 0.7779, time: 0:01:17
 Epoch: 197, lr: 2.0e-03, train_loss: 0.1624, train_acc: 0.9468 test_loss: 0.9835, test_acc: 0.7659, best: 0.7779, time: 0:01:17
 Epoch: 198, lr: 2.0e-03, train_loss: 0.1596, train_acc: 0.9508 test_loss: 0.9210, test_acc: 0.7759, best: 0.7779, time: 0:01:17
 Epoch: 199, lr: 2.0e-03, train_loss: 0.1582, train_acc: 0.9500 test_loss: 0.9086, test_acc: 0.7791, best: 0.7791, time: 0:01:17
 Epoch: 200, lr: 2.0e-03, train_loss: 0.1529, train_acc: 0.9456 test_loss: 0.9223, test_acc: 0.7745, best: 0.7791, time: 0:01:17
 Epoch: 201, lr: 2.0e-03, train_loss: 0.1515, train_acc: 0.9486 test_loss: 0.9851, test_acc: 0.7751, best: 0.7791, time: 0:01:17
 Epoch: 202, lr: 2.0e-03, train_loss: 0.1567, train_acc: 0.9440 test_loss: 0.9455, test_acc: 0.7752, best: 0.7791, time: 0:01:17
 Epoch: 203, lr: 2.0e-03, train_loss: 0.1686, train_acc: 0.9448 test_loss: 0.9306, test_acc: 0.7759, best: 0.7791, time: 0:01:17
 Epoch: 204, lr: 2.0e-03, train_loss: 0.1533, train_acc: 0.9462 test_loss: 0.9390, test_acc: 0.7714, best: 0.7791, time: 0:01:17
 Epoch: 205, lr: 2.0e-03, train_loss: 0.1670, train_acc: 0.9402 test_loss: 0.9868, test_acc: 0.7655, best: 0.7791, time: 0:01:16
 Epoch: 206, lr: 2.0e-03, train_loss: 0.1544, train_acc: 0.9474 test_loss: 0.9452, test_acc: 0.7711, best: 0.7791, time: 0:01:24
 Epoch: 207, lr: 2.0e-03, train_loss: 0.1594, train_acc: 0.9474 test_loss: 0.9354, test_acc: 0.7775, best: 0.7791, time: 0:01:17
 Epoch: 208, lr: 2.0e-03, train_loss: 0.1377, train_acc: 0.9538 test_loss: 0.9687, test_acc: 0.7661, best: 0.7791, time: 0:01:17
 Epoch: 209, lr: 2.0e-03, train_loss: 0.1468, train_acc: 0.9508 test_loss: 0.9375, test_acc: 0.7728, best: 0.7791, time: 0:01:17
 Epoch: 210, lr: 2.0e-03, train_loss: 0.1387, train_acc: 0.9552 test_loss: 0.9807, test_acc: 0.7746, best: 0.7791, time: 0:01:17
 Epoch: 211, lr: 2.0e-03, train_loss: 0.1582, train_acc: 0.9492 test_loss: 0.9335, test_acc: 0.7750, best: 0.7791, time: 0:01:17
 Epoch: 212, lr: 2.0e-03, train_loss: 0.1390, train_acc: 0.9546 test_loss: 0.9324, test_acc: 0.7809, best: 0.7809, time: 0:01:17
 Epoch: 213, lr: 2.0e-03, train_loss: 0.1536, train_acc: 0.9492 test_loss: 0.9341, test_acc: 0.7779, best: 0.7809, time: 0:01:17
 Epoch: 214, lr: 2.0e-03, train_loss: 0.1428, train_acc: 0.9496 test_loss: 0.9511, test_acc: 0.7765, best: 0.7809, time: 0:01:17
 Epoch: 215, lr: 2.0e-03, train_loss: 0.1471, train_acc: 0.9488 test_loss: 0.9371, test_acc: 0.7789, best: 0.7809, time: 0:01:17
 Epoch: 216, lr: 2.0e-03, train_loss: 0.1502, train_acc: 0.9508 test_loss: 0.9554, test_acc: 0.7746, best: 0.7809, time: 0:01:17
 Epoch: 217, lr: 2.0e-03, train_loss: 0.1510, train_acc: 0.9482 test_loss: 0.9387, test_acc: 0.7768, best: 0.7809, time: 0:01:17
 Epoch: 218, lr: 2.0e-03, train_loss: 0.1557, train_acc: 0.9464 test_loss: 0.9471, test_acc: 0.7735, best: 0.7809, time: 0:01:17
 Epoch: 219, lr: 2.0e-03, train_loss: 0.1463, train_acc: 0.9494 test_loss: 0.9324, test_acc: 0.7786, best: 0.7809, time: 0:01:17
 Epoch: 220, lr: 2.0e-03, train_loss: 0.1477, train_acc: 0.9552 test_loss: 0.9711, test_acc: 0.7745, best: 0.7809, time: 0:01:17
 Epoch: 221, lr: 2.0e-03, train_loss: 0.1426, train_acc: 0.9504 test_loss: 0.9722, test_acc: 0.7745, best: 0.7809, time: 0:01:17
 Epoch: 222, lr: 2.0e-03, train_loss: 0.1542, train_acc: 0.9496 test_loss: 0.9551, test_acc: 0.7728, best: 0.7809, time: 0:01:17
 Epoch: 223, lr: 2.0e-03, train_loss: 0.1590, train_acc: 0.9448 test_loss: 0.9561, test_acc: 0.7702, best: 0.7809, time: 0:01:17
 Epoch: 224, lr: 2.0e-03, train_loss: 0.1442, train_acc: 0.9492 test_loss: 0.9352, test_acc: 0.7735, best: 0.7809, time: 0:01:17
 Epoch: 225, lr: 2.0e-03, train_loss: 0.1482, train_acc: 0.9498 test_loss: 0.9669, test_acc: 0.7731, best: 0.7809, time: 0:01:17
 Epoch: 226, lr: 2.0e-03, train_loss: 0.1442, train_acc: 0.9524 test_loss: 0.9652, test_acc: 0.7726, best: 0.7809, time: 0:01:17
 Epoch: 227, lr: 2.0e-03, train_loss: 0.1426, train_acc: 0.9510 test_loss: 0.9375, test_acc: 0.7769, best: 0.7809, time: 0:01:17
 Epoch: 228, lr: 2.0e-03, train_loss: 0.1400, train_acc: 0.9522 test_loss: 0.9288, test_acc: 0.7824, best: 0.7824, time: 0:01:17
 Epoch: 229, lr: 2.0e-03, train_loss: 0.1336, train_acc: 0.9566 test_loss: 0.9252, test_acc: 0.7785, best: 0.7824, time: 0:01:17
 Epoch: 230, lr: 2.0e-03, train_loss: 0.1344, train_acc: 0.9548 test_loss: 0.9482, test_acc: 0.7755, best: 0.7824, time: 0:01:17
 Epoch: 231, lr: 2.0e-03, train_loss: 0.1455, train_acc: 0.9512 test_loss: 0.9430, test_acc: 0.7748, best: 0.7824, time: 0:01:17
 Epoch: 232, lr: 2.0e-03, train_loss: 0.1379, train_acc: 0.9504 test_loss: 0.9178, test_acc: 0.7802, best: 0.7824, time: 0:01:17
 Epoch: 233, lr: 2.0e-03, train_loss: 0.1437, train_acc: 0.9530 test_loss: 0.9435, test_acc: 0.7730, best: 0.7824, time: 0:01:17
 Epoch: 234, lr: 2.0e-03, train_loss: 0.1446, train_acc: 0.9512 test_loss: 0.9065, test_acc: 0.7776, best: 0.7824, time: 0:01:17
 Epoch: 235, lr: 2.0e-03, train_loss: 0.1336, train_acc: 0.9536 test_loss: 0.8934, test_acc: 0.7781, best: 0.7824, time: 0:01:17
 Epoch: 236, lr: 2.0e-03, train_loss: 0.1388, train_acc: 0.9522 test_loss: 0.9645, test_acc: 0.7700, best: 0.7824, time: 0:01:17
 Epoch: 237, lr: 2.0e-03, train_loss: 0.1427, train_acc: 0.9524 test_loss: 0.9409, test_acc: 0.7792, best: 0.7824, time: 0:01:17
 Epoch: 238, lr: 2.0e-03, train_loss: 0.1416, train_acc: 0.9510 test_loss: 0.9175, test_acc: 0.7736, best: 0.7824, time: 0:01:17
 Epoch: 239, lr: 2.0e-03, train_loss: 0.1391, train_acc: 0.9526 test_loss: 0.9526, test_acc: 0.7748, best: 0.7824, time: 0:01:17
 Epoch: 240, lr: 4.0e-04, train_loss: 0.1287, train_acc: 0.9576 test_loss: 0.9225, test_acc: 0.7795, best: 0.7824, time: 0:01:17
 Epoch: 241, lr: 4.0e-04, train_loss: 0.1285, train_acc: 0.9568 test_loss: 0.9336, test_acc: 0.7780, best: 0.7824, time: 0:01:17
 Epoch: 242, lr: 4.0e-04, train_loss: 0.1465, train_acc: 0.9550 test_loss: 0.9405, test_acc: 0.7772, best: 0.7824, time: 0:01:17
 Epoch: 243, lr: 4.0e-04, train_loss: 0.1390, train_acc: 0.9548 test_loss: 0.9013, test_acc: 0.7836, best: 0.7836, time: 0:01:17
 Epoch: 244, lr: 4.0e-04, train_loss: 0.1422, train_acc: 0.9516 test_loss: 0.9228, test_acc: 0.7792, best: 0.7836, time: 0:01:17
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1424, train_acc: 0.9518 test_loss: 0.9218, test_acc: 0.7806, best: 0.7836, time: 0:01:17
 Epoch: 246, lr: 4.0e-04, train_loss: 0.1223, train_acc: 0.9594 test_loss: 0.9308, test_acc: 0.7789, best: 0.7836, time: 0:01:17
 Epoch: 247, lr: 4.0e-04, train_loss: 0.1275, train_acc: 0.9586 test_loss: 0.9242, test_acc: 0.7774, best: 0.7836, time: 0:01:17
 Epoch: 248, lr: 4.0e-04, train_loss: 0.1290, train_acc: 0.9568 test_loss: 0.9564, test_acc: 0.7804, best: 0.7836, time: 0:01:17
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1264, train_acc: 0.9576 test_loss: 0.9395, test_acc: 0.7781, best: 0.7836, time: 0:01:17
 Epoch: 250, lr: 4.0e-04, train_loss: 0.1292, train_acc: 0.9544 test_loss: 0.9242, test_acc: 0.7802, best: 0.7836, time: 0:01:17
 Epoch: 251, lr: 4.0e-04, train_loss: 0.1284, train_acc: 0.9576 test_loss: 0.9515, test_acc: 0.7784, best: 0.7836, time: 0:01:17
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1220, train_acc: 0.9566 test_loss: 0.9202, test_acc: 0.7817, best: 0.7836, time: 0:01:29
 Epoch: 253, lr: 4.0e-04, train_loss: 0.1301, train_acc: 0.9550 test_loss: 0.9474, test_acc: 0.7782, best: 0.7836, time: 0:01:17
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1320, train_acc: 0.9564 test_loss: 0.9315, test_acc: 0.7806, best: 0.7836, time: 0:01:16
 Epoch: 255, lr: 4.0e-04, train_loss: 0.1184, train_acc: 0.9580 test_loss: 0.9106, test_acc: 0.7815, best: 0.7836, time: 0:01:16
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1322, train_acc: 0.9576 test_loss: 0.9520, test_acc: 0.7765, best: 0.7836, time: 0:01:17
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1161, train_acc: 0.9598 test_loss: 0.9185, test_acc: 0.7821, best: 0.7836, time: 0:01:17
 Epoch: 258, lr: 4.0e-04, train_loss: 0.1280, train_acc: 0.9552 test_loss: 0.9560, test_acc: 0.7788, best: 0.7836, time: 0:01:17
 Epoch: 259, lr: 4.0e-04, train_loss: 0.1298, train_acc: 0.9588 test_loss: 0.9087, test_acc: 0.7841, best: 0.7841, time: 0:01:17
 Epoch: 260, lr: 4.0e-04, train_loss: 0.1348, train_acc: 0.9562 test_loss: 0.9609, test_acc: 0.7799, best: 0.7841, time: 0:01:17
 Epoch: 261, lr: 4.0e-04, train_loss: 0.1277, train_acc: 0.9550 test_loss: 0.9338, test_acc: 0.7825, best: 0.7841, time: 0:01:17
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1336, train_acc: 0.9572 test_loss: 0.9460, test_acc: 0.7774, best: 0.7841, time: 0:01:17
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1325, train_acc: 0.9570 test_loss: 0.9521, test_acc: 0.7768, best: 0.7841, time: 0:01:16
 Epoch: 264, lr: 4.0e-04, train_loss: 0.1201, train_acc: 0.9604 test_loss: 0.9478, test_acc: 0.7808, best: 0.7841, time: 0:01:17
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1233, train_acc: 0.9584 test_loss: 0.9297, test_acc: 0.7830, best: 0.7841, time: 0:01:17
 Epoch: 266, lr: 4.0e-04, train_loss: 0.1258, train_acc: 0.9568 test_loss: 0.9402, test_acc: 0.7821, best: 0.7841, time: 0:01:17
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1335, train_acc: 0.9564 test_loss: 0.9315, test_acc: 0.7786, best: 0.7841, time: 0:01:17
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1217, train_acc: 0.9594 test_loss: 0.9161, test_acc: 0.7816, best: 0.7841, time: 0:01:17
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1311, train_acc: 0.9574 test_loss: 0.9529, test_acc: 0.7811, best: 0.7841, time: 0:01:17
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1237, train_acc: 0.9588 test_loss: 0.9457, test_acc: 0.7824, best: 0.7841, time: 0:01:17
 Epoch: 271, lr: 8.0e-05, train_loss: 0.1189, train_acc: 0.9570 test_loss: 0.9249, test_acc: 0.7791, best: 0.7841, time: 0:01:17
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1250, train_acc: 0.9580 test_loss: 0.9210, test_acc: 0.7806, best: 0.7841, time: 0:01:17
 Epoch: 273, lr: 8.0e-05, train_loss: 0.1099, train_acc: 0.9666 test_loss: 0.9352, test_acc: 0.7779, best: 0.7841, time: 0:01:17
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1279, train_acc: 0.9584 test_loss: 0.9263, test_acc: 0.7804, best: 0.7841, time: 0:01:17
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1255, train_acc: 0.9592 test_loss: 0.9302, test_acc: 0.7796, best: 0.7841, time: 0:01:16
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1176, train_acc: 0.9602 test_loss: 0.9299, test_acc: 0.7825, best: 0.7841, time: 0:01:16
 Epoch: 277, lr: 8.0e-05, train_loss: 0.1303, train_acc: 0.9560 test_loss: 0.9309, test_acc: 0.7849, best: 0.7849, time: 0:01:16
 Epoch: 278, lr: 8.0e-05, train_loss: 0.1301, train_acc: 0.9574 test_loss: 0.9250, test_acc: 0.7836, best: 0.7849, time: 0:01:16
 Epoch: 279, lr: 8.0e-05, train_loss: 0.1287, train_acc: 0.9554 test_loss: 0.9212, test_acc: 0.7817, best: 0.7849, time: 0:01:16
 Epoch: 280, lr: 8.0e-05, train_loss: 0.1121, train_acc: 0.9614 test_loss: 0.9441, test_acc: 0.7800, best: 0.7849, time: 0:01:16
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1174, train_acc: 0.9604 test_loss: 0.9411, test_acc: 0.7789, best: 0.7849, time: 0:01:16
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1204, train_acc: 0.9562 test_loss: 0.9359, test_acc: 0.7833, best: 0.7849, time: 0:01:16
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1239, train_acc: 0.9592 test_loss: 0.9422, test_acc: 0.7851, best: 0.7851, time: 0:01:16
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1388, train_acc: 0.9520 test_loss: 0.9429, test_acc: 0.7772, best: 0.7851, time: 0:01:16
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1320, train_acc: 0.9588 test_loss: 0.9276, test_acc: 0.7814, best: 0.7851, time: 0:01:16
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1141, train_acc: 0.9650 test_loss: 0.9413, test_acc: 0.7786, best: 0.7851, time: 0:01:16
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1215, train_acc: 0.9598 test_loss: 0.9409, test_acc: 0.7775, best: 0.7851, time: 0:01:16
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1289, train_acc: 0.9572 test_loss: 0.9885, test_acc: 0.7736, best: 0.7851, time: 0:01:16
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1224, train_acc: 0.9614 test_loss: 0.9554, test_acc: 0.7765, best: 0.7851, time: 0:01:16
 Epoch: 290, lr: 8.0e-05, train_loss: 0.1067, train_acc: 0.9646 test_loss: 0.9358, test_acc: 0.7791, best: 0.7851, time: 0:01:16
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1219, train_acc: 0.9574 test_loss: 0.9409, test_acc: 0.7796, best: 0.7851, time: 0:01:16
 Epoch: 292, lr: 8.0e-05, train_loss: 0.1175, train_acc: 0.9626 test_loss: 0.9362, test_acc: 0.7761, best: 0.7851, time: 0:01:16
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1212, train_acc: 0.9604 test_loss: 0.9427, test_acc: 0.7791, best: 0.7851, time: 0:01:16
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1239, train_acc: 0.9596 test_loss: 0.9194, test_acc: 0.7839, best: 0.7851, time: 0:01:16
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1206, train_acc: 0.9594 test_loss: 0.9282, test_acc: 0.7839, best: 0.7851, time: 0:01:16
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1317, train_acc: 0.9552 test_loss: 0.9410, test_acc: 0.7776, best: 0.7851, time: 0:01:16
 Epoch: 297, lr: 8.0e-05, train_loss: 0.1123, train_acc: 0.9630 test_loss: 0.9497, test_acc: 0.7792, best: 0.7851, time: 0:01:16
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1213, train_acc: 0.9604 test_loss: 0.9204, test_acc: 0.7835, best: 0.7851, time: 0:01:16
 Epoch: 299, lr: 8.0e-05, train_loss: 0.1160, train_acc: 0.9612 test_loss: 0.9284, test_acc: 0.7808, best: 0.7851, time: 0:01:16
 Highest accuracy: 0.7851