
 Run on time: 2022-06-29 16:01:18.030934

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET18_NLP_2222
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): NetworkByName(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 32)
                (col_embed): Embedding(256, 32)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 64)
                (col_embed): Embedding(256, 64)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 128)
                (col_embed): Embedding(256, 128)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 256)
                (col_embed): Embedding(256, 256)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=512, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.2954, train_acc: 0.2016 test_loss: 1.8529, test_acc: 0.2856, best: 0.2856, time: 0:01:11
 Epoch: 2, lr: 1.0e-02, train_loss: 1.9754, train_acc: 0.2492 test_loss: 1.9771, test_acc: 0.2702, best: 0.2856, time: 0:01:06
 Epoch: 3, lr: 1.0e-02, train_loss: 1.8513, train_acc: 0.2926 test_loss: 1.6125, test_acc: 0.3826, best: 0.3826, time: 0:01:06
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8044, train_acc: 0.3150 test_loss: 1.5628, test_acc: 0.3951, best: 0.3951, time: 0:01:06
 Epoch: 5, lr: 1.0e-02, train_loss: 1.7548, train_acc: 0.3330 test_loss: 1.5113, test_acc: 0.4250, best: 0.4250, time: 0:01:06
 Epoch: 6, lr: 1.0e-02, train_loss: 1.7108, train_acc: 0.3610 test_loss: 1.4567, test_acc: 0.4506, best: 0.4506, time: 0:01:06
 Epoch: 7, lr: 1.0e-02, train_loss: 1.6696, train_acc: 0.3822 test_loss: 1.4196, test_acc: 0.4626, best: 0.4626, time: 0:01:06
 Epoch: 8, lr: 1.0e-02, train_loss: 1.6020, train_acc: 0.4056 test_loss: 1.5341, test_acc: 0.4395, best: 0.4626, time: 0:01:05
 Epoch: 9, lr: 1.0e-02, train_loss: 1.5600, train_acc: 0.4290 test_loss: 1.4486, test_acc: 0.4721, best: 0.4721, time: 0:01:06
 Epoch: 10, lr: 1.0e-02, train_loss: 1.5169, train_acc: 0.4384 test_loss: 1.3731, test_acc: 0.4788, best: 0.4788, time: 0:01:06
 Epoch: 11, lr: 1.0e-02, train_loss: 1.4872, train_acc: 0.4454 test_loss: 1.3760, test_acc: 0.4959, best: 0.4959, time: 0:01:06
 Epoch: 12, lr: 1.0e-02, train_loss: 1.4477, train_acc: 0.4678 test_loss: 1.3843, test_acc: 0.4938, best: 0.4959, time: 0:01:06
 Epoch: 13, lr: 1.0e-02, train_loss: 1.4028, train_acc: 0.4884 test_loss: 1.2640, test_acc: 0.5271, best: 0.5271, time: 0:01:06
 Epoch: 14, lr: 1.0e-02, train_loss: 1.3734, train_acc: 0.5022 test_loss: 1.1658, test_acc: 0.5711, best: 0.5711, time: 0:01:06
 Epoch: 15, lr: 1.0e-02, train_loss: 1.3465, train_acc: 0.5186 test_loss: 1.1547, test_acc: 0.5760, best: 0.5760, time: 0:01:06
 Epoch: 16, lr: 1.0e-02, train_loss: 1.3119, train_acc: 0.5208 test_loss: 1.2360, test_acc: 0.5563, best: 0.5760, time: 0:01:05
 Epoch: 17, lr: 1.0e-02, train_loss: 1.2825, train_acc: 0.5308 test_loss: 1.1201, test_acc: 0.5970, best: 0.5970, time: 0:01:06
 Epoch: 18, lr: 1.0e-02, train_loss: 1.2555, train_acc: 0.5510 test_loss: 1.1852, test_acc: 0.5715, best: 0.5970, time: 0:01:05
 Epoch: 19, lr: 1.0e-02, train_loss: 1.2490, train_acc: 0.5400 test_loss: 1.1524, test_acc: 0.5952, best: 0.5970, time: 0:01:06
 Epoch: 20, lr: 1.0e-02, train_loss: 1.2187, train_acc: 0.5564 test_loss: 1.1225, test_acc: 0.5955, best: 0.5970, time: 0:01:06
 Epoch: 21, lr: 1.0e-02, train_loss: 1.1916, train_acc: 0.5646 test_loss: 1.1223, test_acc: 0.5899, best: 0.5970, time: 0:01:05
 Epoch: 22, lr: 1.0e-02, train_loss: 1.1637, train_acc: 0.5818 test_loss: 1.0872, test_acc: 0.6099, best: 0.6099, time: 0:01:05
 Epoch: 23, lr: 1.0e-02, train_loss: 1.1502, train_acc: 0.5848 test_loss: 1.0645, test_acc: 0.6180, best: 0.6180, time: 0:01:05
 Epoch: 24, lr: 1.0e-02, train_loss: 1.1223, train_acc: 0.5972 test_loss: 0.9651, test_acc: 0.6508, best: 0.6508, time: 0:01:05
 Epoch: 25, lr: 1.0e-02, train_loss: 1.0859, train_acc: 0.6116 test_loss: 1.0221, test_acc: 0.6354, best: 0.6508, time: 0:01:05
 Epoch: 26, lr: 1.0e-02, train_loss: 1.0806, train_acc: 0.6028 test_loss: 1.0677, test_acc: 0.6148, best: 0.6508, time: 0:01:05
 Epoch: 27, lr: 1.0e-02, train_loss: 1.0668, train_acc: 0.6230 test_loss: 0.9934, test_acc: 0.6462, best: 0.6508, time: 0:01:06
 Epoch: 28, lr: 1.0e-02, train_loss: 1.0442, train_acc: 0.6240 test_loss: 1.1016, test_acc: 0.6185, best: 0.6508, time: 0:01:05
 Epoch: 29, lr: 1.0e-02, train_loss: 1.0527, train_acc: 0.6146 test_loss: 0.9967, test_acc: 0.6505, best: 0.6508, time: 0:01:05
 Epoch: 30, lr: 1.0e-02, train_loss: 1.0118, train_acc: 0.6354 test_loss: 0.9026, test_acc: 0.6776, best: 0.6776, time: 0:01:05
 Epoch: 31, lr: 1.0e-02, train_loss: 1.0014, train_acc: 0.6362 test_loss: 0.9446, test_acc: 0.6733, best: 0.6776, time: 0:01:05
 Epoch: 32, lr: 1.0e-02, train_loss: 1.0112, train_acc: 0.6296 test_loss: 0.9270, test_acc: 0.6767, best: 0.6776, time: 0:01:05
 Epoch: 33, lr: 1.0e-02, train_loss: 0.9569, train_acc: 0.6506 test_loss: 0.9842, test_acc: 0.6559, best: 0.6776, time: 0:01:05
 Epoch: 34, lr: 1.0e-02, train_loss: 0.9572, train_acc: 0.6576 test_loss: 0.9403, test_acc: 0.6699, best: 0.6776, time: 0:01:05
 Epoch: 35, lr: 1.0e-02, train_loss: 0.9338, train_acc: 0.6652 test_loss: 0.9399, test_acc: 0.6857, best: 0.6857, time: 0:01:05
 Epoch: 36, lr: 1.0e-02, train_loss: 0.9304, train_acc: 0.6668 test_loss: 0.9374, test_acc: 0.6789, best: 0.6857, time: 0:01:05
 Epoch: 37, lr: 1.0e-02, train_loss: 0.9169, train_acc: 0.6684 test_loss: 0.9675, test_acc: 0.6674, best: 0.6857, time: 0:01:05
 Epoch: 38, lr: 1.0e-02, train_loss: 0.8892, train_acc: 0.6736 test_loss: 0.9288, test_acc: 0.6846, best: 0.6857, time: 0:01:05
 Epoch: 39, lr: 1.0e-02, train_loss: 0.8995, train_acc: 0.6706 test_loss: 0.8629, test_acc: 0.7010, best: 0.7010, time: 0:01:05
 Epoch: 40, lr: 1.0e-02, train_loss: 0.8690, train_acc: 0.6894 test_loss: 0.9833, test_acc: 0.6660, best: 0.7010, time: 0:01:05
 Epoch: 41, lr: 1.0e-02, train_loss: 0.8662, train_acc: 0.6902 test_loss: 0.9786, test_acc: 0.6819, best: 0.7010, time: 0:01:05
 Epoch: 42, lr: 1.0e-02, train_loss: 0.8260, train_acc: 0.7050 test_loss: 0.9327, test_acc: 0.6954, best: 0.7010, time: 0:01:05
 Epoch: 43, lr: 1.0e-02, train_loss: 0.8426, train_acc: 0.7004 test_loss: 0.8514, test_acc: 0.7051, best: 0.7051, time: 0:01:06
 Epoch: 44, lr: 1.0e-02, train_loss: 0.7940, train_acc: 0.7090 test_loss: 0.9852, test_acc: 0.6866, best: 0.7051, time: 0:01:05
 Epoch: 45, lr: 1.0e-02, train_loss: 0.8092, train_acc: 0.7036 test_loss: 0.8996, test_acc: 0.7016, best: 0.7051, time: 0:01:05
 Epoch: 46, lr: 1.0e-02, train_loss: 0.7883, train_acc: 0.7170 test_loss: 0.9114, test_acc: 0.7024, best: 0.7051, time: 0:01:05
 Epoch: 47, lr: 1.0e-02, train_loss: 0.7888, train_acc: 0.7142 test_loss: 0.8017, test_acc: 0.7261, best: 0.7261, time: 0:01:05
 Epoch: 48, lr: 1.0e-02, train_loss: 0.7720, train_acc: 0.7236 test_loss: 0.9503, test_acc: 0.6995, best: 0.7261, time: 0:01:05
 Epoch: 49, lr: 1.0e-02, train_loss: 0.7654, train_acc: 0.7216 test_loss: 0.8991, test_acc: 0.7091, best: 0.7261, time: 0:01:05
 Epoch: 50, lr: 1.0e-02, train_loss: 0.7604, train_acc: 0.7310 test_loss: 0.7860, test_acc: 0.7311, best: 0.7311, time: 0:01:05
 Epoch: 51, lr: 1.0e-02, train_loss: 0.7464, train_acc: 0.7340 test_loss: 0.9398, test_acc: 0.7125, best: 0.7311, time: 0:01:05
 Epoch: 52, lr: 1.0e-02, train_loss: 0.7437, train_acc: 0.7334 test_loss: 0.8740, test_acc: 0.7050, best: 0.7311, time: 0:01:05
 Epoch: 53, lr: 1.0e-02, train_loss: 0.7224, train_acc: 0.7426 test_loss: 0.8887, test_acc: 0.7115, best: 0.7311, time: 0:01:05
 Epoch: 54, lr: 1.0e-02, train_loss: 0.7115, train_acc: 0.7476 test_loss: 0.8615, test_acc: 0.7195, best: 0.7311, time: 0:01:05
 Epoch: 55, lr: 1.0e-02, train_loss: 0.6997, train_acc: 0.7432 test_loss: 1.0601, test_acc: 0.6821, best: 0.7311, time: 0:01:05
 Epoch: 56, lr: 1.0e-02, train_loss: 0.6817, train_acc: 0.7594 test_loss: 0.8419, test_acc: 0.7198, best: 0.7311, time: 0:01:04
 Epoch: 57, lr: 1.0e-02, train_loss: 0.6776, train_acc: 0.7568 test_loss: 0.8959, test_acc: 0.7191, best: 0.7311, time: 0:01:05
 Epoch: 58, lr: 1.0e-02, train_loss: 0.6912, train_acc: 0.7550 test_loss: 0.7332, test_acc: 0.7551, best: 0.7551, time: 0:01:07
 Epoch: 59, lr: 1.0e-02, train_loss: 0.6625, train_acc: 0.7690 test_loss: 0.8094, test_acc: 0.7319, best: 0.7551, time: 0:01:05
 Epoch: 60, lr: 1.0e-02, train_loss: 0.6551, train_acc: 0.7690 test_loss: 0.8621, test_acc: 0.7208, best: 0.7551, time: 0:01:05
 Epoch: 61, lr: 1.0e-02, train_loss: 0.6481, train_acc: 0.7622 test_loss: 0.8846, test_acc: 0.7291, best: 0.7551, time: 0:01:05
 Epoch: 62, lr: 1.0e-02, train_loss: 0.6334, train_acc: 0.7722 test_loss: 0.8969, test_acc: 0.7180, best: 0.7551, time: 0:01:05
 Epoch: 63, lr: 1.0e-02, train_loss: 0.6342, train_acc: 0.7794 test_loss: 0.7595, test_acc: 0.7471, best: 0.7551, time: 0:01:06
 Epoch: 64, lr: 1.0e-02, train_loss: 0.6302, train_acc: 0.7812 test_loss: 0.8217, test_acc: 0.7351, best: 0.7551, time: 0:01:05
 Epoch: 65, lr: 1.0e-02, train_loss: 0.6316, train_acc: 0.7764 test_loss: 0.9053, test_acc: 0.7278, best: 0.7551, time: 0:01:05
 Epoch: 66, lr: 1.0e-02, train_loss: 0.6194, train_acc: 0.7856 test_loss: 0.8464, test_acc: 0.7305, best: 0.7551, time: 0:01:05
 Epoch: 67, lr: 1.0e-02, train_loss: 0.6050, train_acc: 0.7888 test_loss: 0.8290, test_acc: 0.7380, best: 0.7551, time: 0:01:05
 Epoch: 68, lr: 1.0e-02, train_loss: 0.6144, train_acc: 0.7806 test_loss: 0.7952, test_acc: 0.7471, best: 0.7551, time: 0:01:05
 Epoch: 69, lr: 1.0e-02, train_loss: 0.5826, train_acc: 0.7986 test_loss: 0.8753, test_acc: 0.7238, best: 0.7551, time: 0:01:05
 Epoch: 70, lr: 1.0e-02, train_loss: 0.5728, train_acc: 0.7934 test_loss: 0.8384, test_acc: 0.7492, best: 0.7551, time: 0:01:05
 Epoch: 71, lr: 1.0e-02, train_loss: 0.5627, train_acc: 0.8012 test_loss: 0.8934, test_acc: 0.7329, best: 0.7551, time: 0:01:05
 Epoch: 72, lr: 1.0e-02, train_loss: 0.5650, train_acc: 0.8020 test_loss: 0.8693, test_acc: 0.7448, best: 0.7551, time: 0:01:05
 Epoch: 73, lr: 1.0e-02, train_loss: 0.5573, train_acc: 0.8032 test_loss: 0.7944, test_acc: 0.7479, best: 0.7551, time: 0:01:05
 Epoch: 74, lr: 1.0e-02, train_loss: 0.5439, train_acc: 0.8108 test_loss: 0.8436, test_acc: 0.7458, best: 0.7551, time: 0:01:05
 Epoch: 75, lr: 1.0e-02, train_loss: 0.5373, train_acc: 0.8150 test_loss: 1.0181, test_acc: 0.7252, best: 0.7551, time: 0:01:05
 Epoch: 76, lr: 1.0e-02, train_loss: 0.5488, train_acc: 0.8082 test_loss: 0.8821, test_acc: 0.7472, best: 0.7551, time: 0:01:05
 Epoch: 77, lr: 1.0e-02, train_loss: 0.5569, train_acc: 0.8006 test_loss: 0.8544, test_acc: 0.7541, best: 0.7551, time: 0:01:05
 Epoch: 78, lr: 1.0e-02, train_loss: 0.5319, train_acc: 0.8114 test_loss: 0.8262, test_acc: 0.7601, best: 0.7601, time: 0:01:06
 Epoch: 79, lr: 1.0e-02, train_loss: 0.5082, train_acc: 0.8218 test_loss: 0.9046, test_acc: 0.7438, best: 0.7601, time: 0:01:06
 Epoch: 80, lr: 1.0e-02, train_loss: 0.5263, train_acc: 0.8158 test_loss: 0.8753, test_acc: 0.7422, best: 0.7601, time: 0:01:05
 Epoch: 81, lr: 1.0e-02, train_loss: 0.5090, train_acc: 0.8194 test_loss: 0.8614, test_acc: 0.7536, best: 0.7601, time: 0:01:05
 Epoch: 82, lr: 1.0e-02, train_loss: 0.5263, train_acc: 0.8132 test_loss: 0.8345, test_acc: 0.7516, best: 0.7601, time: 0:01:05
 Epoch: 83, lr: 1.0e-02, train_loss: 0.4875, train_acc: 0.8248 test_loss: 0.8668, test_acc: 0.7565, best: 0.7601, time: 0:01:05
 Epoch: 84, lr: 1.0e-02, train_loss: 0.4891, train_acc: 0.8290 test_loss: 0.9144, test_acc: 0.7348, best: 0.7601, time: 0:01:05
 Epoch: 85, lr: 1.0e-02, train_loss: 0.4864, train_acc: 0.8266 test_loss: 0.8995, test_acc: 0.7455, best: 0.7601, time: 0:01:05
 Epoch: 86, lr: 1.0e-02, train_loss: 0.4800, train_acc: 0.8332 test_loss: 0.8982, test_acc: 0.7455, best: 0.7601, time: 0:01:06
 Epoch: 87, lr: 1.0e-02, train_loss: 0.4626, train_acc: 0.8382 test_loss: 0.9462, test_acc: 0.7444, best: 0.7601, time: 0:01:05
 Epoch: 88, lr: 1.0e-02, train_loss: 0.4825, train_acc: 0.8360 test_loss: 0.8641, test_acc: 0.7376, best: 0.7601, time: 0:01:05
 Epoch: 89, lr: 1.0e-02, train_loss: 0.4532, train_acc: 0.8380 test_loss: 0.9509, test_acc: 0.7440, best: 0.7601, time: 0:01:05
 Epoch: 90, lr: 1.0e-02, train_loss: 0.4740, train_acc: 0.8372 test_loss: 0.9682, test_acc: 0.7344, best: 0.7601, time: 0:01:05
 Epoch: 91, lr: 1.0e-02, train_loss: 0.4656, train_acc: 0.8362 test_loss: 0.8741, test_acc: 0.7530, best: 0.7601, time: 0:01:05
 Epoch: 92, lr: 1.0e-02, train_loss: 0.4577, train_acc: 0.8346 test_loss: 0.9039, test_acc: 0.7532, best: 0.7601, time: 0:01:05
 Epoch: 93, lr: 1.0e-02, train_loss: 0.4493, train_acc: 0.8372 test_loss: 0.8723, test_acc: 0.7520, best: 0.7601, time: 0:01:05
 Epoch: 94, lr: 1.0e-02, train_loss: 0.4393, train_acc: 0.8468 test_loss: 0.9217, test_acc: 0.7585, best: 0.7601, time: 0:01:05
 Epoch: 95, lr: 1.0e-02, train_loss: 0.4172, train_acc: 0.8552 test_loss: 0.8770, test_acc: 0.7609, best: 0.7609, time: 0:01:06
 Epoch: 96, lr: 1.0e-02, train_loss: 0.4012, train_acc: 0.8610 test_loss: 0.8978, test_acc: 0.7545, best: 0.7609, time: 0:01:06
 Epoch: 97, lr: 1.0e-02, train_loss: 0.4331, train_acc: 0.8504 test_loss: 0.9575, test_acc: 0.7418, best: 0.7609, time: 0:01:05
 Epoch: 98, lr: 1.0e-02, train_loss: 0.4283, train_acc: 0.8440 test_loss: 0.8815, test_acc: 0.7688, best: 0.7688, time: 0:01:05
 Epoch: 99, lr: 1.0e-02, train_loss: 0.4198, train_acc: 0.8570 test_loss: 0.9541, test_acc: 0.7448, best: 0.7688, time: 0:01:10
 Epoch: 100, lr: 1.0e-02, train_loss: 0.4154, train_acc: 0.8504 test_loss: 1.0311, test_acc: 0.7241, best: 0.7688, time: 0:01:02
 Epoch: 101, lr: 1.0e-02, train_loss: 0.4226, train_acc: 0.8556 test_loss: 0.8770, test_acc: 0.7604, best: 0.7688, time: 0:01:01
 Epoch: 102, lr: 1.0e-02, train_loss: 0.4188, train_acc: 0.8546 test_loss: 0.9054, test_acc: 0.7470, best: 0.7688, time: 0:01:03
 Epoch: 103, lr: 1.0e-02, train_loss: 0.4041, train_acc: 0.8588 test_loss: 0.8249, test_acc: 0.7752, best: 0.7752, time: 0:01:02
 Epoch: 104, lr: 1.0e-02, train_loss: 0.3824, train_acc: 0.8674 test_loss: 0.9541, test_acc: 0.7610, best: 0.7752, time: 0:01:02
 Epoch: 105, lr: 1.0e-02, train_loss: 0.3975, train_acc: 0.8662 test_loss: 0.9228, test_acc: 0.7634, best: 0.7752, time: 0:01:02
 Epoch: 106, lr: 1.0e-02, train_loss: 0.3943, train_acc: 0.8600 test_loss: 0.9574, test_acc: 0.7486, best: 0.7752, time: 0:01:02
 Epoch: 107, lr: 1.0e-02, train_loss: 0.4143, train_acc: 0.8484 test_loss: 0.8919, test_acc: 0.7712, best: 0.7752, time: 0:01:03
 Epoch: 108, lr: 1.0e-02, train_loss: 0.3837, train_acc: 0.8626 test_loss: 0.8588, test_acc: 0.7711, best: 0.7752, time: 0:01:02
 Epoch: 109, lr: 1.0e-02, train_loss: 0.3784, train_acc: 0.8678 test_loss: 0.8735, test_acc: 0.7744, best: 0.7752, time: 0:01:00
 Epoch: 110, lr: 1.0e-02, train_loss: 0.4083, train_acc: 0.8600 test_loss: 0.8993, test_acc: 0.7640, best: 0.7752, time: 0:01:00
 Epoch: 111, lr: 1.0e-02, train_loss: 0.3967, train_acc: 0.8634 test_loss: 1.0281, test_acc: 0.7431, best: 0.7752, time: 0:01:00
 Epoch: 112, lr: 1.0e-02, train_loss: 0.3899, train_acc: 0.8664 test_loss: 0.8220, test_acc: 0.7705, best: 0.7752, time: 0:01:03
 Epoch: 113, lr: 1.0e-02, train_loss: 0.3711, train_acc: 0.8684 test_loss: 0.8739, test_acc: 0.7712, best: 0.7752, time: 0:01:02
 Epoch: 114, lr: 1.0e-02, train_loss: 0.3838, train_acc: 0.8678 test_loss: 0.8764, test_acc: 0.7698, best: 0.7752, time: 0:01:04
 Epoch: 115, lr: 1.0e-02, train_loss: 0.3746, train_acc: 0.8678 test_loss: 0.9587, test_acc: 0.7626, best: 0.7752, time: 0:01:03
 Epoch: 116, lr: 1.0e-02, train_loss: 0.3829, train_acc: 0.8670 test_loss: 0.8941, test_acc: 0.7719, best: 0.7752, time: 0:01:02
 Epoch: 117, lr: 1.0e-02, train_loss: 0.3560, train_acc: 0.8776 test_loss: 0.9105, test_acc: 0.7648, best: 0.7752, time: 0:01:02
 Epoch: 118, lr: 1.0e-02, train_loss: 0.3717, train_acc: 0.8730 test_loss: 0.8823, test_acc: 0.7688, best: 0.7752, time: 0:01:03
 Epoch: 119, lr: 1.0e-02, train_loss: 0.3592, train_acc: 0.8726 test_loss: 1.0069, test_acc: 0.7621, best: 0.7752, time: 0:01:02
 Epoch: 120, lr: 1.0e-02, train_loss: 0.3581, train_acc: 0.8756 test_loss: 1.0181, test_acc: 0.7664, best: 0.7752, time: 0:01:02
 Epoch: 121, lr: 1.0e-02, train_loss: 0.3526, train_acc: 0.8774 test_loss: 0.9235, test_acc: 0.7658, best: 0.7752, time: 0:01:02
 Epoch: 122, lr: 1.0e-02, train_loss: 0.3690, train_acc: 0.8720 test_loss: 0.8756, test_acc: 0.7626, best: 0.7752, time: 0:01:02
 Epoch: 123, lr: 1.0e-02, train_loss: 0.3663, train_acc: 0.8702 test_loss: 0.9612, test_acc: 0.7715, best: 0.7752, time: 0:01:02
 Epoch: 124, lr: 1.0e-02, train_loss: 0.3453, train_acc: 0.8764 test_loss: 0.9570, test_acc: 0.7736, best: 0.7752, time: 0:01:02
 Epoch: 125, lr: 1.0e-02, train_loss: 0.3631, train_acc: 0.8756 test_loss: 0.9358, test_acc: 0.7716, best: 0.7752, time: 0:01:02
 Epoch: 126, lr: 1.0e-02, train_loss: 0.3301, train_acc: 0.8856 test_loss: 0.9191, test_acc: 0.7682, best: 0.7752, time: 0:01:02
 Epoch: 127, lr: 1.0e-02, train_loss: 0.3354, train_acc: 0.8812 test_loss: 0.9576, test_acc: 0.7700, best: 0.7752, time: 0:01:02
 Epoch: 128, lr: 1.0e-02, train_loss: 0.3513, train_acc: 0.8744 test_loss: 1.0755, test_acc: 0.7624, best: 0.7752, time: 0:01:02
 Epoch: 129, lr: 1.0e-02, train_loss: 0.3091, train_acc: 0.8938 test_loss: 1.0328, test_acc: 0.7574, best: 0.7752, time: 0:01:03
 Epoch: 130, lr: 1.0e-02, train_loss: 0.3311, train_acc: 0.8838 test_loss: 0.9820, test_acc: 0.7604, best: 0.7752, time: 0:01:04
 Epoch: 131, lr: 1.0e-02, train_loss: 0.3136, train_acc: 0.8902 test_loss: 0.9679, test_acc: 0.7645, best: 0.7752, time: 0:01:04
 Epoch: 132, lr: 1.0e-02, train_loss: 0.3411, train_acc: 0.8806 test_loss: 0.9669, test_acc: 0.7569, best: 0.7752, time: 0:01:03
 Epoch: 133, lr: 1.0e-02, train_loss: 0.3302, train_acc: 0.8860 test_loss: 0.8808, test_acc: 0.7778, best: 0.7778, time: 0:01:03
 Epoch: 134, lr: 1.0e-02, train_loss: 0.3278, train_acc: 0.8898 test_loss: 0.9784, test_acc: 0.7589, best: 0.7778, time: 0:01:03
 Epoch: 135, lr: 1.0e-02, train_loss: 0.3382, train_acc: 0.8826 test_loss: 0.9532, test_acc: 0.7769, best: 0.7778, time: 0:01:03
 Epoch: 136, lr: 1.0e-02, train_loss: 0.3081, train_acc: 0.8900 test_loss: 0.9881, test_acc: 0.7679, best: 0.7778, time: 0:01:03
 Epoch: 137, lr: 1.0e-02, train_loss: 0.3300, train_acc: 0.8858 test_loss: 0.8728, test_acc: 0.7840, best: 0.7840, time: 0:01:03
 Epoch: 138, lr: 1.0e-02, train_loss: 0.2991, train_acc: 0.8958 test_loss: 0.9913, test_acc: 0.7622, best: 0.7840, time: 0:01:03
 Epoch: 139, lr: 1.0e-02, train_loss: 0.3148, train_acc: 0.8922 test_loss: 1.0505, test_acc: 0.7626, best: 0.7840, time: 0:01:03
 Epoch: 140, lr: 1.0e-02, train_loss: 0.3180, train_acc: 0.8866 test_loss: 1.0282, test_acc: 0.7705, best: 0.7840, time: 0:01:02
 Epoch: 141, lr: 1.0e-02, train_loss: 0.3122, train_acc: 0.8924 test_loss: 0.9562, test_acc: 0.7686, best: 0.7840, time: 0:01:02
 Epoch: 142, lr: 1.0e-02, train_loss: 0.3027, train_acc: 0.8946 test_loss: 0.9007, test_acc: 0.7762, best: 0.7840, time: 0:01:02
 Epoch: 143, lr: 1.0e-02, train_loss: 0.3155, train_acc: 0.8868 test_loss: 1.0459, test_acc: 0.7565, best: 0.7840, time: 0:01:02
 Epoch: 144, lr: 1.0e-02, train_loss: 0.3061, train_acc: 0.8922 test_loss: 0.9610, test_acc: 0.7756, best: 0.7840, time: 0:01:02
 Epoch: 145, lr: 1.0e-02, train_loss: 0.3053, train_acc: 0.8952 test_loss: 0.9848, test_acc: 0.7740, best: 0.7840, time: 0:01:02
 Epoch: 146, lr: 1.0e-02, train_loss: 0.2993, train_acc: 0.8938 test_loss: 0.8969, test_acc: 0.7840, best: 0.7840, time: 0:01:02
 Epoch: 147, lr: 1.0e-02, train_loss: 0.3082, train_acc: 0.8944 test_loss: 0.9188, test_acc: 0.7741, best: 0.7840, time: 0:01:02
 Epoch: 148, lr: 1.0e-02, train_loss: 0.3063, train_acc: 0.8902 test_loss: 0.9708, test_acc: 0.7686, best: 0.7840, time: 0:01:02
 Epoch: 149, lr: 1.0e-02, train_loss: 0.2968, train_acc: 0.8960 test_loss: 0.9095, test_acc: 0.7841, best: 0.7841, time: 0:01:02
 Epoch: 150, lr: 1.0e-02, train_loss: 0.2970, train_acc: 0.8986 test_loss: 0.9846, test_acc: 0.7686, best: 0.7841, time: 0:01:02
 Epoch: 151, lr: 1.0e-02, train_loss: 0.2990, train_acc: 0.8942 test_loss: 0.9230, test_acc: 0.7668, best: 0.7841, time: 0:01:02
 Epoch: 152, lr: 1.0e-02, train_loss: 0.2893, train_acc: 0.9006 test_loss: 0.9182, test_acc: 0.7823, best: 0.7841, time: 0:01:02
 Epoch: 153, lr: 1.0e-02, train_loss: 0.2796, train_acc: 0.9060 test_loss: 0.9769, test_acc: 0.7664, best: 0.7841, time: 0:01:02
 Epoch: 154, lr: 1.0e-02, train_loss: 0.2813, train_acc: 0.9016 test_loss: 0.9564, test_acc: 0.7729, best: 0.7841, time: 0:01:02
 Epoch: 155, lr: 1.0e-02, train_loss: 0.2873, train_acc: 0.8988 test_loss: 0.9237, test_acc: 0.7769, best: 0.7841, time: 0:01:02
 Epoch: 156, lr: 1.0e-02, train_loss: 0.3039, train_acc: 0.8934 test_loss: 0.8828, test_acc: 0.7843, best: 0.7843, time: 0:01:02
 Epoch: 157, lr: 1.0e-02, train_loss: 0.2890, train_acc: 0.8990 test_loss: 1.0501, test_acc: 0.7596, best: 0.7843, time: 0:01:02
 Epoch: 158, lr: 1.0e-02, train_loss: 0.3076, train_acc: 0.8936 test_loss: 0.8766, test_acc: 0.7903, best: 0.7903, time: 0:01:02
 Epoch: 159, lr: 1.0e-02, train_loss: 0.2942, train_acc: 0.8980 test_loss: 0.8976, test_acc: 0.7841, best: 0.7903, time: 0:01:02
 Epoch: 160, lr: 1.0e-02, train_loss: 0.2797, train_acc: 0.9012 test_loss: 0.9692, test_acc: 0.7731, best: 0.7903, time: 0:01:02
 Epoch: 161, lr: 1.0e-02, train_loss: 0.2845, train_acc: 0.9042 test_loss: 0.8909, test_acc: 0.7812, best: 0.7903, time: 0:01:01
 Epoch: 162, lr: 1.0e-02, train_loss: 0.2935, train_acc: 0.8972 test_loss: 0.9880, test_acc: 0.7735, best: 0.7903, time: 0:01:02
 Epoch: 163, lr: 1.0e-02, train_loss: 0.2714, train_acc: 0.9058 test_loss: 1.0469, test_acc: 0.7644, best: 0.7903, time: 0:01:02
 Epoch: 164, lr: 1.0e-02, train_loss: 0.2971, train_acc: 0.8970 test_loss: 0.9225, test_acc: 0.7719, best: 0.7903, time: 0:01:02
 Epoch: 165, lr: 1.0e-02, train_loss: 0.2844, train_acc: 0.8980 test_loss: 0.9451, test_acc: 0.7809, best: 0.7903, time: 0:01:02
 Epoch: 166, lr: 1.0e-02, train_loss: 0.2655, train_acc: 0.9096 test_loss: 0.9783, test_acc: 0.7766, best: 0.7903, time: 0:01:02
 Epoch: 167, lr: 1.0e-02, train_loss: 0.2682, train_acc: 0.9068 test_loss: 0.9860, test_acc: 0.7789, best: 0.7903, time: 0:01:02
 Epoch: 168, lr: 1.0e-02, train_loss: 0.2633, train_acc: 0.9114 test_loss: 0.9697, test_acc: 0.7825, best: 0.7903, time: 0:01:02
 Epoch: 169, lr: 1.0e-02, train_loss: 0.2852, train_acc: 0.9040 test_loss: 0.8701, test_acc: 0.7916, best: 0.7916, time: 0:01:02
 Epoch: 170, lr: 1.0e-02, train_loss: 0.2508, train_acc: 0.9144 test_loss: 0.9095, test_acc: 0.7884, best: 0.7916, time: 0:01:02
 Epoch: 171, lr: 1.0e-02, train_loss: 0.2690, train_acc: 0.9056 test_loss: 0.9320, test_acc: 0.7879, best: 0.7916, time: 0:01:02
 Epoch: 172, lr: 1.0e-02, train_loss: 0.2796, train_acc: 0.9018 test_loss: 0.9106, test_acc: 0.7890, best: 0.7916, time: 0:01:02
 Epoch: 173, lr: 1.0e-02, train_loss: 0.2609, train_acc: 0.9084 test_loss: 0.9812, test_acc: 0.7785, best: 0.7916, time: 0:01:02
 Epoch: 174, lr: 1.0e-02, train_loss: 0.2672, train_acc: 0.9102 test_loss: 0.8881, test_acc: 0.7871, best: 0.7916, time: 0:01:02
 Epoch: 175, lr: 1.0e-02, train_loss: 0.2719, train_acc: 0.9076 test_loss: 0.9777, test_acc: 0.7782, best: 0.7916, time: 0:01:02
 Epoch: 176, lr: 1.0e-02, train_loss: 0.2730, train_acc: 0.9026 test_loss: 0.9270, test_acc: 0.7802, best: 0.7916, time: 0:01:02
 Epoch: 177, lr: 1.0e-02, train_loss: 0.2582, train_acc: 0.9122 test_loss: 0.9533, test_acc: 0.7792, best: 0.7916, time: 0:01:02
 Epoch: 178, lr: 1.0e-02, train_loss: 0.2684, train_acc: 0.9088 test_loss: 0.9154, test_acc: 0.7921, best: 0.7921, time: 0:01:02
 Epoch: 179, lr: 1.0e-02, train_loss: 0.2526, train_acc: 0.9116 test_loss: 0.9156, test_acc: 0.7881, best: 0.7921, time: 0:01:02
 Epoch: 180, lr: 2.0e-03, train_loss: 0.2217, train_acc: 0.9236 test_loss: 0.8561, test_acc: 0.7929, best: 0.7929, time: 0:01:03
 Epoch: 181, lr: 2.0e-03, train_loss: 0.2111, train_acc: 0.9278 test_loss: 0.8674, test_acc: 0.8030, best: 0.8030, time: 0:01:02
 Epoch: 182, lr: 2.0e-03, train_loss: 0.1854, train_acc: 0.9364 test_loss: 0.8867, test_acc: 0.7984, best: 0.8030, time: 0:01:02
 Epoch: 183, lr: 2.0e-03, train_loss: 0.1952, train_acc: 0.9322 test_loss: 0.8728, test_acc: 0.7977, best: 0.8030, time: 0:01:02
 Epoch: 184, lr: 2.0e-03, train_loss: 0.1918, train_acc: 0.9328 test_loss: 0.8727, test_acc: 0.7990, best: 0.8030, time: 0:01:02
 Epoch: 185, lr: 2.0e-03, train_loss: 0.1834, train_acc: 0.9372 test_loss: 0.8706, test_acc: 0.7987, best: 0.8030, time: 0:01:02
 Epoch: 186, lr: 2.0e-03, train_loss: 0.1904, train_acc: 0.9348 test_loss: 0.8609, test_acc: 0.8050, best: 0.8050, time: 0:01:03
 Epoch: 187, lr: 2.0e-03, train_loss: 0.1833, train_acc: 0.9344 test_loss: 0.8651, test_acc: 0.8026, best: 0.8050, time: 0:01:02
 Epoch: 188, lr: 2.0e-03, train_loss: 0.1809, train_acc: 0.9412 test_loss: 0.8503, test_acc: 0.8013, best: 0.8050, time: 0:01:02
 Epoch: 189, lr: 2.0e-03, train_loss: 0.1694, train_acc: 0.9374 test_loss: 0.8976, test_acc: 0.7986, best: 0.8050, time: 0:01:02
 Epoch: 190, lr: 2.0e-03, train_loss: 0.1882, train_acc: 0.9334 test_loss: 0.8946, test_acc: 0.8025, best: 0.8050, time: 0:01:02
 Epoch: 191, lr: 2.0e-03, train_loss: 0.1755, train_acc: 0.9400 test_loss: 0.8988, test_acc: 0.7986, best: 0.8050, time: 0:01:02
 Epoch: 192, lr: 2.0e-03, train_loss: 0.2060, train_acc: 0.9290 test_loss: 0.9029, test_acc: 0.7980, best: 0.8050, time: 0:01:02
 Epoch: 193, lr: 2.0e-03, train_loss: 0.1723, train_acc: 0.9458 test_loss: 0.8951, test_acc: 0.7997, best: 0.8050, time: 0:01:02
 Epoch: 194, lr: 2.0e-03, train_loss: 0.1745, train_acc: 0.9390 test_loss: 0.9072, test_acc: 0.7993, best: 0.8050, time: 0:01:02
 Epoch: 195, lr: 2.0e-03, train_loss: 0.1882, train_acc: 0.9334 test_loss: 0.9060, test_acc: 0.7970, best: 0.8050, time: 0:01:02
 Epoch: 196, lr: 2.0e-03, train_loss: 0.1911, train_acc: 0.9328 test_loss: 0.9414, test_acc: 0.7933, best: 0.8050, time: 0:01:02
 Epoch: 197, lr: 2.0e-03, train_loss: 0.1780, train_acc: 0.9390 test_loss: 0.9115, test_acc: 0.7953, best: 0.8050, time: 0:01:01
 Epoch: 198, lr: 2.0e-03, train_loss: 0.1824, train_acc: 0.9378 test_loss: 0.9279, test_acc: 0.7927, best: 0.8050, time: 0:01:02
 Epoch: 199, lr: 2.0e-03, train_loss: 0.1716, train_acc: 0.9448 test_loss: 0.9361, test_acc: 0.7941, best: 0.8050, time: 0:01:02
 Epoch: 200, lr: 2.0e-03, train_loss: 0.1739, train_acc: 0.9350 test_loss: 0.9282, test_acc: 0.7957, best: 0.8050, time: 0:01:02
 Epoch: 201, lr: 2.0e-03, train_loss: 0.1658, train_acc: 0.9422 test_loss: 0.9103, test_acc: 0.7986, best: 0.8050, time: 0:01:02
 Epoch: 202, lr: 2.0e-03, train_loss: 0.1731, train_acc: 0.9440 test_loss: 0.9296, test_acc: 0.7951, best: 0.8050, time: 0:01:02
 Epoch: 203, lr: 2.0e-03, train_loss: 0.1662, train_acc: 0.9440 test_loss: 0.9466, test_acc: 0.7919, best: 0.8050, time: 0:01:02
 Epoch: 204, lr: 2.0e-03, train_loss: 0.1795, train_acc: 0.9386 test_loss: 0.9033, test_acc: 0.8011, best: 0.8050, time: 0:01:02
 Epoch: 205, lr: 2.0e-03, train_loss: 0.1851, train_acc: 0.9370 test_loss: 0.9058, test_acc: 0.7984, best: 0.8050, time: 0:01:02
 Epoch: 206, lr: 2.0e-03, train_loss: 0.1774, train_acc: 0.9408 test_loss: 0.9593, test_acc: 0.7977, best: 0.8050, time: 0:01:02
 Epoch: 207, lr: 2.0e-03, train_loss: 0.1611, train_acc: 0.9474 test_loss: 0.9162, test_acc: 0.7979, best: 0.8050, time: 0:01:01
 Epoch: 208, lr: 2.0e-03, train_loss: 0.1542, train_acc: 0.9470 test_loss: 0.9061, test_acc: 0.7943, best: 0.8050, time: 0:01:02
 Epoch: 209, lr: 2.0e-03, train_loss: 0.1561, train_acc: 0.9458 test_loss: 0.9222, test_acc: 0.7971, best: 0.8050, time: 0:01:02
 Epoch: 210, lr: 2.0e-03, train_loss: 0.1638, train_acc: 0.9426 test_loss: 0.8963, test_acc: 0.7984, best: 0.8050, time: 0:01:02
 Epoch: 211, lr: 2.0e-03, train_loss: 0.1651, train_acc: 0.9432 test_loss: 0.9342, test_acc: 0.7966, best: 0.8050, time: 0:01:02
 Epoch: 212, lr: 2.0e-03, train_loss: 0.1732, train_acc: 0.9402 test_loss: 0.9140, test_acc: 0.7973, best: 0.8050, time: 0:01:02
 Epoch: 213, lr: 2.0e-03, train_loss: 0.1584, train_acc: 0.9454 test_loss: 0.9161, test_acc: 0.7990, best: 0.8050, time: 0:01:01
 Epoch: 214, lr: 2.0e-03, train_loss: 0.1480, train_acc: 0.9500 test_loss: 0.9110, test_acc: 0.7984, best: 0.8050, time: 0:01:02
 Epoch: 215, lr: 2.0e-03, train_loss: 0.1489, train_acc: 0.9508 test_loss: 0.9126, test_acc: 0.8003, best: 0.8050, time: 0:01:02
 Epoch: 216, lr: 2.0e-03, train_loss: 0.1608, train_acc: 0.9472 test_loss: 0.8973, test_acc: 0.8033, best: 0.8050, time: 0:01:02
 Epoch: 217, lr: 2.0e-03, train_loss: 0.1458, train_acc: 0.9512 test_loss: 0.8842, test_acc: 0.8029, best: 0.8050, time: 0:01:02
 Epoch: 218, lr: 2.0e-03, train_loss: 0.1625, train_acc: 0.9462 test_loss: 0.9352, test_acc: 0.7967, best: 0.8050, time: 0:01:02
 Epoch: 219, lr: 2.0e-03, train_loss: 0.1552, train_acc: 0.9486 test_loss: 0.8960, test_acc: 0.7997, best: 0.8050, time: 0:01:02
 Epoch: 220, lr: 2.0e-03, train_loss: 0.1555, train_acc: 0.9472 test_loss: 0.8993, test_acc: 0.8056, best: 0.8056, time: 0:01:03
 Epoch: 221, lr: 2.0e-03, train_loss: 0.1499, train_acc: 0.9504 test_loss: 0.8788, test_acc: 0.8013, best: 0.8056, time: 0:01:02
 Epoch: 222, lr: 2.0e-03, train_loss: 0.1393, train_acc: 0.9512 test_loss: 0.9197, test_acc: 0.7997, best: 0.8056, time: 0:01:02
 Epoch: 223, lr: 2.0e-03, train_loss: 0.1715, train_acc: 0.9426 test_loss: 0.8730, test_acc: 0.8016, best: 0.8056, time: 0:01:02
 Epoch: 224, lr: 2.0e-03, train_loss: 0.1584, train_acc: 0.9444 test_loss: 0.8786, test_acc: 0.8011, best: 0.8056, time: 0:01:02
 Epoch: 225, lr: 2.0e-03, train_loss: 0.1514, train_acc: 0.9488 test_loss: 0.8782, test_acc: 0.7977, best: 0.8056, time: 0:01:02
 Epoch: 226, lr: 2.0e-03, train_loss: 0.1583, train_acc: 0.9480 test_loss: 0.8768, test_acc: 0.8023, best: 0.8056, time: 0:01:02
 Epoch: 227, lr: 2.0e-03, train_loss: 0.1591, train_acc: 0.9440 test_loss: 0.9136, test_acc: 0.7994, best: 0.8056, time: 0:01:02
 Epoch: 228, lr: 2.0e-03, train_loss: 0.1512, train_acc: 0.9496 test_loss: 0.9063, test_acc: 0.8036, best: 0.8056, time: 0:01:02
 Epoch: 229, lr: 2.0e-03, train_loss: 0.1669, train_acc: 0.9442 test_loss: 0.9192, test_acc: 0.7957, best: 0.8056, time: 0:01:02
 Epoch: 230, lr: 2.0e-03, train_loss: 0.1535, train_acc: 0.9454 test_loss: 0.9243, test_acc: 0.7971, best: 0.8056, time: 0:01:02
 Epoch: 231, lr: 2.0e-03, train_loss: 0.1614, train_acc: 0.9466 test_loss: 0.9359, test_acc: 0.7941, best: 0.8056, time: 0:01:01
 Epoch: 232, lr: 2.0e-03, train_loss: 0.1575, train_acc: 0.9450 test_loss: 0.9056, test_acc: 0.7969, best: 0.8056, time: 0:01:02
 Epoch: 233, lr: 2.0e-03, train_loss: 0.1437, train_acc: 0.9508 test_loss: 0.8878, test_acc: 0.8054, best: 0.8056, time: 0:01:02
 Epoch: 234, lr: 2.0e-03, train_loss: 0.1434, train_acc: 0.9508 test_loss: 0.9137, test_acc: 0.8051, best: 0.8056, time: 0:01:02
 Epoch: 235, lr: 2.0e-03, train_loss: 0.1596, train_acc: 0.9474 test_loss: 0.9027, test_acc: 0.8023, best: 0.8056, time: 0:01:02
 Epoch: 236, lr: 2.0e-03, train_loss: 0.1455, train_acc: 0.9512 test_loss: 0.9372, test_acc: 0.7997, best: 0.8056, time: 0:01:02
 Epoch: 237, lr: 2.0e-03, train_loss: 0.1539, train_acc: 0.9478 test_loss: 0.9498, test_acc: 0.7973, best: 0.8056, time: 0:01:02
 Epoch: 238, lr: 2.0e-03, train_loss: 0.1493, train_acc: 0.9504 test_loss: 0.9437, test_acc: 0.8021, best: 0.8056, time: 0:01:02
 Epoch: 239, lr: 2.0e-03, train_loss: 0.1457, train_acc: 0.9490 test_loss: 0.9312, test_acc: 0.7997, best: 0.8056, time: 0:01:02
 Epoch: 240, lr: 4.0e-04, train_loss: 0.1539, train_acc: 0.9476 test_loss: 0.9316, test_acc: 0.8005, best: 0.8056, time: 0:01:02
 Epoch: 241, lr: 4.0e-04, train_loss: 0.1519, train_acc: 0.9510 test_loss: 0.9402, test_acc: 0.7996, best: 0.8056, time: 0:01:02
 Epoch: 242, lr: 4.0e-04, train_loss: 0.1525, train_acc: 0.9480 test_loss: 0.9349, test_acc: 0.7995, best: 0.8056, time: 0:01:02
 Epoch: 243, lr: 4.0e-04, train_loss: 0.1364, train_acc: 0.9550 test_loss: 0.9357, test_acc: 0.7949, best: 0.8056, time: 0:01:02
 Epoch: 244, lr: 4.0e-04, train_loss: 0.1421, train_acc: 0.9500 test_loss: 0.9363, test_acc: 0.8004, best: 0.8056, time: 0:01:01
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1353, train_acc: 0.9510 test_loss: 0.9465, test_acc: 0.7983, best: 0.8056, time: 0:01:02
 Epoch: 246, lr: 4.0e-04, train_loss: 0.1541, train_acc: 0.9510 test_loss: 0.9163, test_acc: 0.8030, best: 0.8056, time: 0:01:02
 Epoch: 247, lr: 4.0e-04, train_loss: 0.1452, train_acc: 0.9488 test_loss: 0.9238, test_acc: 0.8020, best: 0.8056, time: 0:01:02
 Epoch: 248, lr: 4.0e-04, train_loss: 0.1467, train_acc: 0.9490 test_loss: 0.9208, test_acc: 0.7971, best: 0.8056, time: 0:01:02
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1498, train_acc: 0.9454 test_loss: 0.9424, test_acc: 0.7983, best: 0.8056, time: 0:01:02
 Epoch: 250, lr: 4.0e-04, train_loss: 0.1330, train_acc: 0.9534 test_loss: 0.9110, test_acc: 0.7967, best: 0.8056, time: 0:01:02
 Epoch: 251, lr: 4.0e-04, train_loss: 0.1339, train_acc: 0.9526 test_loss: 0.9474, test_acc: 0.8004, best: 0.8056, time: 0:01:01
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1522, train_acc: 0.9482 test_loss: 0.9162, test_acc: 0.8011, best: 0.8056, time: 0:01:02
 Epoch: 253, lr: 4.0e-04, train_loss: 0.1424, train_acc: 0.9526 test_loss: 0.9173, test_acc: 0.8026, best: 0.8056, time: 0:01:02
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1379, train_acc: 0.9524 test_loss: 0.9438, test_acc: 0.8004, best: 0.8056, time: 0:01:02
 Epoch: 255, lr: 4.0e-04, train_loss: 0.1408, train_acc: 0.9508 test_loss: 0.9194, test_acc: 0.7996, best: 0.8056, time: 0:01:02
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1497, train_acc: 0.9474 test_loss: 0.9653, test_acc: 0.7996, best: 0.8056, time: 0:01:02
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1517, train_acc: 0.9476 test_loss: 0.9574, test_acc: 0.8009, best: 0.8056, time: 0:01:00
 Epoch: 258, lr: 4.0e-04, train_loss: 0.1311, train_acc: 0.9548 test_loss: 0.8982, test_acc: 0.8031, best: 0.8056, time: 0:01:00
 Epoch: 259, lr: 4.0e-04, train_loss: 0.1374, train_acc: 0.9528 test_loss: 0.9308, test_acc: 0.8011, best: 0.8056, time: 0:01:00
 Epoch: 260, lr: 4.0e-04, train_loss: 0.1472, train_acc: 0.9498 test_loss: 0.9209, test_acc: 0.8046, best: 0.8056, time: 0:01:00
 Epoch: 261, lr: 4.0e-04, train_loss: 0.1410, train_acc: 0.9532 test_loss: 0.9176, test_acc: 0.8027, best: 0.8056, time: 0:01:00
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1552, train_acc: 0.9446 test_loss: 0.8979, test_acc: 0.8047, best: 0.8056, time: 0:00:59
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1409, train_acc: 0.9496 test_loss: 0.8898, test_acc: 0.7993, best: 0.8056, time: 0:01:00
 Epoch: 264, lr: 4.0e-04, train_loss: 0.1468, train_acc: 0.9484 test_loss: 0.9129, test_acc: 0.8020, best: 0.8056, time: 0:01:00
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1403, train_acc: 0.9494 test_loss: 0.9356, test_acc: 0.8033, best: 0.8056, time: 0:01:00
 Epoch: 266, lr: 4.0e-04, train_loss: 0.1457, train_acc: 0.9504 test_loss: 0.9257, test_acc: 0.7990, best: 0.8056, time: 0:01:00
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1424, train_acc: 0.9506 test_loss: 0.9139, test_acc: 0.8009, best: 0.8056, time: 0:01:00
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1360, train_acc: 0.9524 test_loss: 0.9416, test_acc: 0.7994, best: 0.8056, time: 0:00:59
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1266, train_acc: 0.9598 test_loss: 0.9448, test_acc: 0.7990, best: 0.8056, time: 0:00:57
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1413, train_acc: 0.9502 test_loss: 0.9404, test_acc: 0.7991, best: 0.8056, time: 0:00:55
 Epoch: 271, lr: 8.0e-05, train_loss: 0.1252, train_acc: 0.9588 test_loss: 0.9239, test_acc: 0.8005, best: 0.8056, time: 0:00:55
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1325, train_acc: 0.9542 test_loss: 0.9452, test_acc: 0.8011, best: 0.8056, time: 0:00:55
 Epoch: 273, lr: 8.0e-05, train_loss: 0.1377, train_acc: 0.9540 test_loss: 0.9466, test_acc: 0.7997, best: 0.8056, time: 0:00:55
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1467, train_acc: 0.9490 test_loss: 0.9385, test_acc: 0.7984, best: 0.8056, time: 0:00:55
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1347, train_acc: 0.9528 test_loss: 0.9349, test_acc: 0.8011, best: 0.8056, time: 0:00:55
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1354, train_acc: 0.9544 test_loss: 0.9335, test_acc: 0.8013, best: 0.8056, time: 0:00:55
 Epoch: 277, lr: 8.0e-05, train_loss: 0.1436, train_acc: 0.9486 test_loss: 0.9362, test_acc: 0.7997, best: 0.8056, time: 0:00:55
 Epoch: 278, lr: 8.0e-05, train_loss: 0.1239, train_acc: 0.9564 test_loss: 0.9112, test_acc: 0.8005, best: 0.8056, time: 0:00:55
 Epoch: 279, lr: 8.0e-05, train_loss: 0.1494, train_acc: 0.9464 test_loss: 0.9155, test_acc: 0.8015, best: 0.8056, time: 0:00:56
 Epoch: 280, lr: 8.0e-05, train_loss: 0.1235, train_acc: 0.9568 test_loss: 0.9339, test_acc: 0.7997, best: 0.8056, time: 0:00:56
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1340, train_acc: 0.9538 test_loss: 0.9363, test_acc: 0.8031, best: 0.8056, time: 0:00:57
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1446, train_acc: 0.9518 test_loss: 0.9216, test_acc: 0.8003, best: 0.8056, time: 0:00:56
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1318, train_acc: 0.9558 test_loss: 0.9288, test_acc: 0.8005, best: 0.8056, time: 0:00:56
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1486, train_acc: 0.9488 test_loss: 0.9143, test_acc: 0.7995, best: 0.8056, time: 0:00:57
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1395, train_acc: 0.9532 test_loss: 0.9307, test_acc: 0.8010, best: 0.8056, time: 0:00:57
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1333, train_acc: 0.9554 test_loss: 0.9301, test_acc: 0.7997, best: 0.8056, time: 0:00:58
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1382, train_acc: 0.9530 test_loss: 0.9205, test_acc: 0.8009, best: 0.8056, time: 0:00:56
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1487, train_acc: 0.9476 test_loss: 0.9180, test_acc: 0.8026, best: 0.8056, time: 0:00:57
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1332, train_acc: 0.9516 test_loss: 0.9431, test_acc: 0.8016, best: 0.8056, time: 0:00:57
 Epoch: 290, lr: 8.0e-05, train_loss: 0.1248, train_acc: 0.9546 test_loss: 0.9211, test_acc: 0.8043, best: 0.8056, time: 0:01:00
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1295, train_acc: 0.9538 test_loss: 0.9081, test_acc: 0.7981, best: 0.8056, time: 0:01:04
 Epoch: 292, lr: 8.0e-05, train_loss: 0.1301, train_acc: 0.9558 test_loss: 0.9118, test_acc: 0.7993, best: 0.8056, time: 0:01:04
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1299, train_acc: 0.9562 test_loss: 0.9276, test_acc: 0.8006, best: 0.8056, time: 0:01:04
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1384, train_acc: 0.9518 test_loss: 0.9493, test_acc: 0.8001, best: 0.8056, time: 0:01:04
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1376, train_acc: 0.9532 test_loss: 0.9267, test_acc: 0.8014, best: 0.8056, time: 0:01:03
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1223, train_acc: 0.9600 test_loss: 0.9354, test_acc: 0.8023, best: 0.8056, time: 0:01:03
 Epoch: 297, lr: 8.0e-05, train_loss: 0.1359, train_acc: 0.9538 test_loss: 0.9272, test_acc: 0.8013, best: 0.8056, time: 0:01:02
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1267, train_acc: 0.9566 test_loss: 0.9195, test_acc: 0.8036, best: 0.8056, time: 0:01:03
 Epoch: 299, lr: 8.0e-05, train_loss: 0.1487, train_acc: 0.9496 test_loss: 0.9347, test_acc: 0.8000, best: 0.8056, time: 0:01:02
 Highest accuracy: 0.8056