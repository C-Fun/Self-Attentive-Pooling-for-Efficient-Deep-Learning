
 Run on time: 2022-07-01 02:32:25.007964

 Architecture: resnet18-nlp_headfix2-4222

 Pool Config: {
    "arch": "resnet18",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "pool": {
        "_conv2d": null,
        "pool_cfg": {
            "_ptype": "maxp",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 4,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET18-NLP_HEADFIX2-4222
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 32)
                (col_embed): Embedding(256, 32)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 64)
                (col_embed): Embedding(256, 64)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 128)
                (col_embed): Embedding(256, 128)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 256)
                (col_embed): Embedding(256, 256)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=512, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.3085, train_acc: 0.1986 test_loss: 1.8767, test_acc: 0.2702, best: 0.2702, time: 0:01:50
 Epoch: 2, lr: 1.0e-02, train_loss: 1.9898, train_acc: 0.2440 test_loss: 2.0860, test_acc: 0.3058, best: 0.3058, time: 0:01:47
 Epoch: 3, lr: 1.0e-02, train_loss: 1.8797, train_acc: 0.2914 test_loss: 1.6421, test_acc: 0.3695, best: 0.3695, time: 0:01:47
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8504, train_acc: 0.2978 test_loss: 1.6387, test_acc: 0.3790, best: 0.3790, time: 0:01:49
 Epoch: 5, lr: 1.0e-02, train_loss: 1.7910, train_acc: 0.3266 test_loss: 1.6867, test_acc: 0.3835, best: 0.3835, time: 0:01:49
 Epoch: 6, lr: 1.0e-02, train_loss: 1.7636, train_acc: 0.3476 test_loss: 1.5976, test_acc: 0.4081, best: 0.4081, time: 0:01:48
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7104, train_acc: 0.3660 test_loss: 1.5067, test_acc: 0.4374, best: 0.4374, time: 0:01:56
 Epoch: 8, lr: 1.0e-02, train_loss: 1.6597, train_acc: 0.3824 test_loss: 1.4339, test_acc: 0.4522, best: 0.4522, time: 0:01:51
 Epoch: 9, lr: 1.0e-02, train_loss: 1.6076, train_acc: 0.4054 test_loss: 1.7037, test_acc: 0.3945, best: 0.4522, time: 0:01:46
 Epoch: 10, lr: 1.0e-02, train_loss: 1.5584, train_acc: 0.4200 test_loss: 1.4497, test_acc: 0.4644, best: 0.4644, time: 0:01:49
 Epoch: 11, lr: 1.0e-02, train_loss: 1.5261, train_acc: 0.4364 test_loss: 1.4106, test_acc: 0.5000, best: 0.5000, time: 0:01:50
 Epoch: 12, lr: 1.0e-02, train_loss: 1.4855, train_acc: 0.4552 test_loss: 1.3359, test_acc: 0.5138, best: 0.5138, time: 0:01:50
 Epoch: 13, lr: 1.0e-02, train_loss: 1.4402, train_acc: 0.4740 test_loss: 1.3382, test_acc: 0.5112, best: 0.5138, time: 0:01:47
 Epoch: 14, lr: 1.0e-02, train_loss: 1.4137, train_acc: 0.4888 test_loss: 1.2648, test_acc: 0.5457, best: 0.5457, time: 0:02:09
 Epoch: 15, lr: 1.0e-02, train_loss: 1.3986, train_acc: 0.4940 test_loss: 1.2068, test_acc: 0.5616, best: 0.5616, time: 0:02:00
 Epoch: 16, lr: 1.0e-02, train_loss: 1.3552, train_acc: 0.5080 test_loss: 1.2862, test_acc: 0.5301, best: 0.5616, time: 0:01:57
 Epoch: 17, lr: 1.0e-02, train_loss: 1.3210, train_acc: 0.5192 test_loss: 1.3552, test_acc: 0.5335, best: 0.5616, time: 0:01:51
 Epoch: 18, lr: 1.0e-02, train_loss: 1.3016, train_acc: 0.5278 test_loss: 1.1665, test_acc: 0.5684, best: 0.5684, time: 0:01:51
 Epoch: 19, lr: 1.0e-02, train_loss: 1.3002, train_acc: 0.5212 test_loss: 1.2477, test_acc: 0.5564, best: 0.5684, time: 0:01:59
 Epoch: 20, lr: 1.0e-02, train_loss: 1.2802, train_acc: 0.5338 test_loss: 1.1373, test_acc: 0.5970, best: 0.5970, time: 0:01:49
 Epoch: 21, lr: 1.0e-02, train_loss: 1.2509, train_acc: 0.5462 test_loss: 1.1628, test_acc: 0.5711, best: 0.5970, time: 0:01:53
 Epoch: 22, lr: 1.0e-02, train_loss: 1.2224, train_acc: 0.5560 test_loss: 1.5004, test_acc: 0.5208, best: 0.5970, time: 0:02:00
 Epoch: 23, lr: 1.0e-02, train_loss: 1.1945, train_acc: 0.5710 test_loss: 1.1756, test_acc: 0.5961, best: 0.5970, time: 0:01:51
 Epoch: 24, lr: 1.0e-02, train_loss: 1.1817, train_acc: 0.5744 test_loss: 0.9557, test_acc: 0.6549, best: 0.6549, time: 0:02:00
 Epoch: 25, lr: 1.0e-02, train_loss: 1.1478, train_acc: 0.5878 test_loss: 1.1226, test_acc: 0.6135, best: 0.6549, time: 0:01:55
 Epoch: 26, lr: 1.0e-02, train_loss: 1.1443, train_acc: 0.5802 test_loss: 1.1184, test_acc: 0.5986, best: 0.6549, time: 0:01:48
 Epoch: 27, lr: 1.0e-02, train_loss: 1.1272, train_acc: 0.5864 test_loss: 0.9945, test_acc: 0.6476, best: 0.6549, time: 0:01:49
 Epoch: 28, lr: 1.0e-02, train_loss: 1.1146, train_acc: 0.5898 test_loss: 1.0846, test_acc: 0.6334, best: 0.6549, time: 0:01:56
 Epoch: 29, lr: 1.0e-02, train_loss: 1.1271, train_acc: 0.5894 test_loss: 1.0089, test_acc: 0.6388, best: 0.6549, time: 0:01:48
 Epoch: 30, lr: 1.0e-02, train_loss: 1.0767, train_acc: 0.6146 test_loss: 1.0298, test_acc: 0.6380, best: 0.6549, time: 0:02:06
 Epoch: 31, lr: 1.0e-02, train_loss: 1.0807, train_acc: 0.6112 test_loss: 0.9532, test_acc: 0.6610, best: 0.6610, time: 0:02:08
 Epoch: 32, lr: 1.0e-02, train_loss: 1.0676, train_acc: 0.6146 test_loss: 1.0016, test_acc: 0.6535, best: 0.6610, time: 0:01:51
 Epoch: 33, lr: 1.0e-02, train_loss: 1.0304, train_acc: 0.6214 test_loss: 1.1329, test_acc: 0.6204, best: 0.6610, time: 0:01:49
 Epoch: 34, lr: 1.0e-02, train_loss: 1.0408, train_acc: 0.6240 test_loss: 0.9752, test_acc: 0.6541, best: 0.6610, time: 0:01:44
 Epoch: 35, lr: 1.0e-02, train_loss: 1.0079, train_acc: 0.6386 test_loss: 1.0081, test_acc: 0.6626, best: 0.6626, time: 0:01:43
 Epoch: 36, lr: 1.0e-02, train_loss: 1.0119, train_acc: 0.6316 test_loss: 0.9929, test_acc: 0.6685, best: 0.6685, time: 0:01:50
 Epoch: 37, lr: 1.0e-02, train_loss: 1.0036, train_acc: 0.6342 test_loss: 0.9435, test_acc: 0.6713, best: 0.6713, time: 0:01:48
 Epoch: 38, lr: 1.0e-02, train_loss: 0.9728, train_acc: 0.6422 test_loss: 1.0269, test_acc: 0.6540, best: 0.6713, time: 0:02:05
 Epoch: 39, lr: 1.0e-02, train_loss: 0.9765, train_acc: 0.6408 test_loss: 0.9339, test_acc: 0.6721, best: 0.6721, time: 0:01:56
 Epoch: 40, lr: 1.0e-02, train_loss: 0.9591, train_acc: 0.6498 test_loss: 1.0449, test_acc: 0.6505, best: 0.6721, time: 0:01:49
 Epoch: 41, lr: 1.0e-02, train_loss: 0.9560, train_acc: 0.6532 test_loss: 0.8986, test_acc: 0.6843, best: 0.6843, time: 0:02:02
 Epoch: 42, lr: 1.0e-02, train_loss: 0.9286, train_acc: 0.6704 test_loss: 0.9836, test_acc: 0.6735, best: 0.6843, time: 0:01:54
 Epoch: 43, lr: 1.0e-02, train_loss: 0.9360, train_acc: 0.6742 test_loss: 0.9689, test_acc: 0.6687, best: 0.6843, time: 0:01:49
 Epoch: 44, lr: 1.0e-02, train_loss: 0.8894, train_acc: 0.6792 test_loss: 1.2387, test_acc: 0.6235, best: 0.6843, time: 0:01:53
 Epoch: 45, lr: 1.0e-02, train_loss: 0.8917, train_acc: 0.6830 test_loss: 0.9174, test_acc: 0.6825, best: 0.6843, time: 0:01:49
 Epoch: 46, lr: 1.0e-02, train_loss: 0.8979, train_acc: 0.6816 test_loss: 0.9306, test_acc: 0.6875, best: 0.6875, time: 0:01:50
 Epoch: 47, lr: 1.0e-02, train_loss: 0.8856, train_acc: 0.6846 test_loss: 0.8924, test_acc: 0.6964, best: 0.6964, time: 0:01:54
 Epoch: 48, lr: 1.0e-02, train_loss: 0.8859, train_acc: 0.6806 test_loss: 0.9829, test_acc: 0.6810, best: 0.6964, time: 0:01:51
 Epoch: 49, lr: 1.0e-02, train_loss: 0.8808, train_acc: 0.6884 test_loss: 0.9257, test_acc: 0.6847, best: 0.6964, time: 0:01:48
 Epoch: 50, lr: 1.0e-02, train_loss: 0.8618, train_acc: 0.6936 test_loss: 0.8531, test_acc: 0.7035, best: 0.7035, time: 0:01:48
 Epoch: 51, lr: 1.0e-02, train_loss: 0.8572, train_acc: 0.6936 test_loss: 0.9465, test_acc: 0.6961, best: 0.7035, time: 0:01:48
 Epoch: 52, lr: 1.0e-02, train_loss: 0.8402, train_acc: 0.7008 test_loss: 0.8967, test_acc: 0.7055, best: 0.7055, time: 0:01:47
 Epoch: 53, lr: 1.0e-02, train_loss: 0.8217, train_acc: 0.7090 test_loss: 0.9498, test_acc: 0.6926, best: 0.7055, time: 0:01:46
 Epoch: 54, lr: 1.0e-02, train_loss: 0.8338, train_acc: 0.6942 test_loss: 0.9041, test_acc: 0.7015, best: 0.7055, time: 0:01:49
 Epoch: 55, lr: 1.0e-02, train_loss: 0.8153, train_acc: 0.7046 test_loss: 0.9224, test_acc: 0.7014, best: 0.7055, time: 0:01:55
 Epoch: 56, lr: 1.0e-02, train_loss: 0.8062, train_acc: 0.7114 test_loss: 0.8817, test_acc: 0.7059, best: 0.7059, time: 0:01:48
 Epoch: 57, lr: 1.0e-02, train_loss: 0.7937, train_acc: 0.7080 test_loss: 0.9243, test_acc: 0.7026, best: 0.7059, time: 0:01:54
 Epoch: 58, lr: 1.0e-02, train_loss: 0.8046, train_acc: 0.7134 test_loss: 0.8668, test_acc: 0.7127, best: 0.7127, time: 0:01:51
 Epoch: 59, lr: 1.0e-02, train_loss: 0.7861, train_acc: 0.7192 test_loss: 0.8896, test_acc: 0.7061, best: 0.7127, time: 0:01:49
 Epoch: 60, lr: 1.0e-02, train_loss: 0.7744, train_acc: 0.7268 test_loss: 0.9919, test_acc: 0.6931, best: 0.7127, time: 0:01:55
 Epoch: 61, lr: 1.0e-02, train_loss: 0.7640, train_acc: 0.7282 test_loss: 0.8771, test_acc: 0.7140, best: 0.7140, time: 0:01:49
 Epoch: 62, lr: 1.0e-02, train_loss: 0.7542, train_acc: 0.7280 test_loss: 1.0104, test_acc: 0.6855, best: 0.7140, time: 0:01:48
 Epoch: 63, lr: 1.0e-02, train_loss: 0.7717, train_acc: 0.7252 test_loss: 0.8205, test_acc: 0.7268, best: 0.7268, time: 0:01:51
 Epoch: 64, lr: 1.0e-02, train_loss: 0.7708, train_acc: 0.7192 test_loss: 0.8500, test_acc: 0.7222, best: 0.7268, time: 0:01:59
 Epoch: 65, lr: 1.0e-02, train_loss: 0.7622, train_acc: 0.7370 test_loss: 0.9127, test_acc: 0.7056, best: 0.7268, time: 0:02:03
 Epoch: 66, lr: 1.0e-02, train_loss: 0.7302, train_acc: 0.7426 test_loss: 0.8763, test_acc: 0.7212, best: 0.7268, time: 0:01:48
 Epoch: 67, lr: 1.0e-02, train_loss: 0.7397, train_acc: 0.7414 test_loss: 0.8653, test_acc: 0.7183, best: 0.7268, time: 0:01:50
 Epoch: 68, lr: 1.0e-02, train_loss: 0.7321, train_acc: 0.7394 test_loss: 0.8670, test_acc: 0.7153, best: 0.7268, time: 0:01:49
 Epoch: 69, lr: 1.0e-02, train_loss: 0.7160, train_acc: 0.7426 test_loss: 0.9115, test_acc: 0.7016, best: 0.7268, time: 0:01:46
 Epoch: 70, lr: 1.0e-02, train_loss: 0.7073, train_acc: 0.7528 test_loss: 0.8154, test_acc: 0.7374, best: 0.7374, time: 0:01:51
 Epoch: 71, lr: 1.0e-02, train_loss: 0.6898, train_acc: 0.7488 test_loss: 0.8616, test_acc: 0.7259, best: 0.7374, time: 0:02:00
 Epoch: 72, lr: 1.0e-02, train_loss: 0.7033, train_acc: 0.7518 test_loss: 0.9016, test_acc: 0.7204, best: 0.7374, time: 0:01:55
 Epoch: 73, lr: 1.0e-02, train_loss: 0.6896, train_acc: 0.7534 test_loss: 0.8592, test_acc: 0.7269, best: 0.7374, time: 0:01:49
 Epoch: 74, lr: 1.0e-02, train_loss: 0.6853, train_acc: 0.7642 test_loss: 0.9634, test_acc: 0.7114, best: 0.7374, time: 0:01:50
 Epoch: 75, lr: 1.0e-02, train_loss: 0.6640, train_acc: 0.7696 test_loss: 0.9027, test_acc: 0.7224, best: 0.7374, time: 0:01:51
 Epoch: 76, lr: 1.0e-02, train_loss: 0.6673, train_acc: 0.7672 test_loss: 0.8635, test_acc: 0.7401, best: 0.7401, time: 0:01:50
 Epoch: 77, lr: 1.0e-02, train_loss: 0.6765, train_acc: 0.7588 test_loss: 0.8513, test_acc: 0.7315, best: 0.7401, time: 0:01:48
 Epoch: 78, lr: 1.0e-02, train_loss: 0.6600, train_acc: 0.7740 test_loss: 0.9134, test_acc: 0.7291, best: 0.7401, time: 0:01:52
 Epoch: 79, lr: 1.0e-02, train_loss: 0.6504, train_acc: 0.7654 test_loss: 0.8862, test_acc: 0.7346, best: 0.7401, time: 0:01:46
 Epoch: 80, lr: 1.0e-02, train_loss: 0.6521, train_acc: 0.7646 test_loss: 0.8933, test_acc: 0.7280, best: 0.7401, time: 0:02:20
 Epoch: 81, lr: 1.0e-02, train_loss: 0.6460, train_acc: 0.7690 test_loss: 0.8573, test_acc: 0.7330, best: 0.7401, time: 0:01:57
 Epoch: 82, lr: 1.0e-02, train_loss: 0.6476, train_acc: 0.7736 test_loss: 0.9579, test_acc: 0.7236, best: 0.7401, time: 0:02:17
 Epoch: 83, lr: 1.0e-02, train_loss: 0.6323, train_acc: 0.7728 test_loss: 0.8312, test_acc: 0.7458, best: 0.7458, time: 0:01:52
 Epoch: 84, lr: 1.0e-02, train_loss: 0.6336, train_acc: 0.7762 test_loss: 0.8748, test_acc: 0.7251, best: 0.7458, time: 0:01:47
 Epoch: 85, lr: 1.0e-02, train_loss: 0.6242, train_acc: 0.7768 test_loss: 0.9028, test_acc: 0.7266, best: 0.7458, time: 0:01:50
 Epoch: 86, lr: 1.0e-02, train_loss: 0.6352, train_acc: 0.7702 test_loss: 0.8798, test_acc: 0.7295, best: 0.7458, time: 0:01:50
 Epoch: 87, lr: 1.0e-02, train_loss: 0.5903, train_acc: 0.7896 test_loss: 0.8937, test_acc: 0.7301, best: 0.7458, time: 0:01:51
 Epoch: 88, lr: 1.0e-02, train_loss: 0.6195, train_acc: 0.7828 test_loss: 0.9044, test_acc: 0.7222, best: 0.7458, time: 0:01:48
 Epoch: 89, lr: 1.0e-02, train_loss: 0.5901, train_acc: 0.7940 test_loss: 0.8613, test_acc: 0.7335, best: 0.7458, time: 0:01:49
 Epoch: 90, lr: 1.0e-02, train_loss: 0.6103, train_acc: 0.7890 test_loss: 0.9005, test_acc: 0.7358, best: 0.7458, time: 0:01:47
 Epoch: 91, lr: 1.0e-02, train_loss: 0.5927, train_acc: 0.7924 test_loss: 0.8369, test_acc: 0.7375, best: 0.7458, time: 0:01:53
 Epoch: 92, lr: 1.0e-02, train_loss: 0.5973, train_acc: 0.7878 test_loss: 0.8522, test_acc: 0.7482, best: 0.7482, time: 0:01:48
 Epoch: 93, lr: 1.0e-02, train_loss: 0.5916, train_acc: 0.7880 test_loss: 0.8603, test_acc: 0.7405, best: 0.7482, time: 0:01:51
 Epoch: 94, lr: 1.0e-02, train_loss: 0.5664, train_acc: 0.8014 test_loss: 0.8370, test_acc: 0.7564, best: 0.7564, time: 0:02:08
 Epoch: 95, lr: 1.0e-02, train_loss: 0.5654, train_acc: 0.8002 test_loss: 0.9383, test_acc: 0.7201, best: 0.7564, time: 0:02:37
 Epoch: 96, lr: 1.0e-02, train_loss: 0.5487, train_acc: 0.8032 test_loss: 0.9969, test_acc: 0.7173, best: 0.7564, time: 0:01:47
 Epoch: 97, lr: 1.0e-02, train_loss: 0.5666, train_acc: 0.7992 test_loss: 0.9612, test_acc: 0.7306, best: 0.7564, time: 0:02:00
 Epoch: 98, lr: 1.0e-02, train_loss: 0.5591, train_acc: 0.8014 test_loss: 0.9372, test_acc: 0.7325, best: 0.7564, time: 0:02:18
 Epoch: 99, lr: 1.0e-02, train_loss: 0.5713, train_acc: 0.8020 test_loss: 0.9650, test_acc: 0.7275, best: 0.7564, time: 0:02:09
 Epoch: 100, lr: 1.0e-02, train_loss: 0.5479, train_acc: 0.8074 test_loss: 0.8915, test_acc: 0.7502, best: 0.7564, time: 0:01:46
 Epoch: 101, lr: 1.0e-02, train_loss: 0.5555, train_acc: 0.8020 test_loss: 0.9251, test_acc: 0.7319, best: 0.7564, time: 0:01:50
 Epoch: 102, lr: 1.0e-02, train_loss: 0.5474, train_acc: 0.8070 test_loss: 0.9517, test_acc: 0.7241, best: 0.7564, time: 0:02:13
 Epoch: 103, lr: 1.0e-02, train_loss: 0.5346, train_acc: 0.8156 test_loss: 0.9169, test_acc: 0.7454, best: 0.7564, time: 0:01:53
 Epoch: 104, lr: 1.0e-02, train_loss: 0.5241, train_acc: 0.8150 test_loss: 0.9451, test_acc: 0.7428, best: 0.7564, time: 0:01:50
 Epoch: 105, lr: 1.0e-02, train_loss: 0.5430, train_acc: 0.8108 test_loss: 0.8813, test_acc: 0.7562, best: 0.7564, time: 0:02:03
 Epoch: 106, lr: 1.0e-02, train_loss: 0.5311, train_acc: 0.8126 test_loss: 0.9008, test_acc: 0.7285, best: 0.7564, time: 0:01:50
 Epoch: 107, lr: 1.0e-02, train_loss: 0.5439, train_acc: 0.8082 test_loss: 0.9130, test_acc: 0.7462, best: 0.7564, time: 0:01:50
 Epoch: 108, lr: 1.0e-02, train_loss: 0.4975, train_acc: 0.8268 test_loss: 0.9064, test_acc: 0.7542, best: 0.7564, time: 0:02:00
 Epoch: 109, lr: 1.0e-02, train_loss: 0.5256, train_acc: 0.8134 test_loss: 0.9578, test_acc: 0.7351, best: 0.7564, time: 0:01:56
 Epoch: 110, lr: 1.0e-02, train_loss: 0.5405, train_acc: 0.8086 test_loss: 0.9358, test_acc: 0.7350, best: 0.7564, time: 0:01:55
 Epoch: 111, lr: 1.0e-02, train_loss: 0.5085, train_acc: 0.8194 test_loss: 0.9999, test_acc: 0.7389, best: 0.7564, time: 0:01:49
 Epoch: 112, lr: 1.0e-02, train_loss: 0.5379, train_acc: 0.8120 test_loss: 0.8190, test_acc: 0.7496, best: 0.7564, time: 0:01:54
 Epoch: 113, lr: 1.0e-02, train_loss: 0.5271, train_acc: 0.8118 test_loss: 0.8611, test_acc: 0.7544, best: 0.7564, time: 0:01:49
 Epoch: 114, lr: 1.0e-02, train_loss: 0.5233, train_acc: 0.8192 test_loss: 0.8919, test_acc: 0.7488, best: 0.7564, time: 0:02:02
 Epoch: 115, lr: 1.0e-02, train_loss: 0.5134, train_acc: 0.8222 test_loss: 0.8785, test_acc: 0.7599, best: 0.7599, time: 0:01:55
 Epoch: 116, lr: 1.0e-02, train_loss: 0.5089, train_acc: 0.8206 test_loss: 0.8733, test_acc: 0.7514, best: 0.7599, time: 0:01:55
 Epoch: 117, lr: 1.0e-02, train_loss: 0.4957, train_acc: 0.8254 test_loss: 0.9316, test_acc: 0.7465, best: 0.7599, time: 0:01:48
 Epoch: 118, lr: 1.0e-02, train_loss: 0.5016, train_acc: 0.8256 test_loss: 0.9462, test_acc: 0.7476, best: 0.7599, time: 0:01:47
 Epoch: 119, lr: 1.0e-02, train_loss: 0.4915, train_acc: 0.8274 test_loss: 1.0217, test_acc: 0.7442, best: 0.7599, time: 0:01:52
 Epoch: 120, lr: 1.0e-02, train_loss: 0.4739, train_acc: 0.8306 test_loss: 1.0794, test_acc: 0.7341, best: 0.7599, time: 0:01:49
 Epoch: 121, lr: 1.0e-02, train_loss: 0.4914, train_acc: 0.8216 test_loss: 1.1148, test_acc: 0.7309, best: 0.7599, time: 0:01:51
 Epoch: 122, lr: 1.0e-02, train_loss: 0.4953, train_acc: 0.8284 test_loss: 0.9742, test_acc: 0.7324, best: 0.7599, time: 0:01:49
 Epoch: 123, lr: 1.0e-02, train_loss: 0.4957, train_acc: 0.8230 test_loss: 0.9921, test_acc: 0.7484, best: 0.7599, time: 0:02:03
 Epoch: 124, lr: 1.0e-02, train_loss: 0.4619, train_acc: 0.8416 test_loss: 1.0032, test_acc: 0.7444, best: 0.7599, time: 0:01:50
 Epoch: 125, lr: 1.0e-02, train_loss: 0.5003, train_acc: 0.8248 test_loss: 0.9953, test_acc: 0.7449, best: 0.7599, time: 0:01:48
 Epoch: 126, lr: 1.0e-02, train_loss: 0.4674, train_acc: 0.8328 test_loss: 0.9189, test_acc: 0.7586, best: 0.7599, time: 0:02:00
 Epoch: 127, lr: 1.0e-02, train_loss: 0.4625, train_acc: 0.8368 test_loss: 0.9852, test_acc: 0.7482, best: 0.7599, time: 0:01:52
 Epoch: 128, lr: 1.0e-02, train_loss: 0.4817, train_acc: 0.8312 test_loss: 0.9771, test_acc: 0.7530, best: 0.7599, time: 0:01:46
 Epoch: 129, lr: 1.0e-02, train_loss: 0.4576, train_acc: 0.8372 test_loss: 0.9465, test_acc: 0.7515, best: 0.7599, time: 0:01:51
 Epoch: 130, lr: 1.0e-02, train_loss: 0.4760, train_acc: 0.8418 test_loss: 0.9593, test_acc: 0.7468, best: 0.7599, time: 0:01:46
 Epoch: 131, lr: 1.0e-02, train_loss: 0.4520, train_acc: 0.8400 test_loss: 0.9621, test_acc: 0.7502, best: 0.7599, time: 0:01:50
 Epoch: 132, lr: 1.0e-02, train_loss: 0.4742, train_acc: 0.8394 test_loss: 0.9465, test_acc: 0.7436, best: 0.7599, time: 0:01:53
 Epoch: 133, lr: 1.0e-02, train_loss: 0.4535, train_acc: 0.8384 test_loss: 0.9461, test_acc: 0.7486, best: 0.7599, time: 0:01:49
 Epoch: 134, lr: 1.0e-02, train_loss: 0.4683, train_acc: 0.8350 test_loss: 0.9446, test_acc: 0.7498, best: 0.7599, time: 0:01:47
 Epoch: 135, lr: 1.0e-02, train_loss: 0.4586, train_acc: 0.8384 test_loss: 1.0098, test_acc: 0.7575, best: 0.7599, time: 0:01:49
 Epoch: 136, lr: 1.0e-02, train_loss: 0.4519, train_acc: 0.8406 test_loss: 1.0730, test_acc: 0.7269, best: 0.7599, time: 0:01:50
 Epoch: 137, lr: 1.0e-02, train_loss: 0.4532, train_acc: 0.8390 test_loss: 0.9395, test_acc: 0.7564, best: 0.7599, time: 0:02:03
 Epoch: 138, lr: 1.0e-02, train_loss: 0.4145, train_acc: 0.8518 test_loss: 0.9932, test_acc: 0.7572, best: 0.7599, time: 0:01:59
 Epoch: 139, lr: 1.0e-02, train_loss: 0.4428, train_acc: 0.8482 test_loss: 1.0150, test_acc: 0.7531, best: 0.7599, time: 0:02:06
 Epoch: 140, lr: 1.0e-02, train_loss: 0.4401, train_acc: 0.8438 test_loss: 1.0141, test_acc: 0.7480, best: 0.7599, time: 0:02:02
 Epoch: 141, lr: 1.0e-02, train_loss: 0.4438, train_acc: 0.8450 test_loss: 0.9779, test_acc: 0.7495, best: 0.7599, time: 0:01:47
 Epoch: 142, lr: 1.0e-02, train_loss: 0.4552, train_acc: 0.8398 test_loss: 0.9710, test_acc: 0.7555, best: 0.7599, time: 0:01:57
 Epoch: 143, lr: 1.0e-02, train_loss: 0.4505, train_acc: 0.8472 test_loss: 1.0340, test_acc: 0.7420, best: 0.7599, time: 0:02:02
 Epoch: 144, lr: 1.0e-02, train_loss: 0.4197, train_acc: 0.8532 test_loss: 0.9904, test_acc: 0.7519, best: 0.7599, time: 0:01:51
 Epoch: 145, lr: 1.0e-02, train_loss: 0.4204, train_acc: 0.8534 test_loss: 1.0214, test_acc: 0.7558, best: 0.7599, time: 0:01:49
 Epoch: 146, lr: 1.0e-02, train_loss: 0.4164, train_acc: 0.8532 test_loss: 1.1214, test_acc: 0.7358, best: 0.7599, time: 0:01:48
 Epoch: 147, lr: 1.0e-02, train_loss: 0.4229, train_acc: 0.8544 test_loss: 0.9876, test_acc: 0.7554, best: 0.7599, time: 0:01:49
 Epoch: 148, lr: 1.0e-02, train_loss: 0.4480, train_acc: 0.8450 test_loss: 1.0314, test_acc: 0.7402, best: 0.7599, time: 0:01:51
 Epoch: 149, lr: 1.0e-02, train_loss: 0.4177, train_acc: 0.8504 test_loss: 0.9629, test_acc: 0.7544, best: 0.7599, time: 0:01:52
 Epoch: 150, lr: 1.0e-02, train_loss: 0.4201, train_acc: 0.8530 test_loss: 1.0113, test_acc: 0.7466, best: 0.7599, time: 0:01:50
 Epoch: 151, lr: 1.0e-02, train_loss: 0.4402, train_acc: 0.8470 test_loss: 0.9317, test_acc: 0.7585, best: 0.7599, time: 0:01:50
 Epoch: 152, lr: 1.0e-02, train_loss: 0.4226, train_acc: 0.8470 test_loss: 0.9534, test_acc: 0.7640, best: 0.7640, time: 0:01:55
 Epoch: 153, lr: 1.0e-02, train_loss: 0.4152, train_acc: 0.8572 test_loss: 0.9955, test_acc: 0.7546, best: 0.7640, time: 0:01:53
 Epoch: 154, lr: 1.0e-02, train_loss: 0.4008, train_acc: 0.8542 test_loss: 1.0048, test_acc: 0.7538, best: 0.7640, time: 0:01:51
 Epoch: 155, lr: 1.0e-02, train_loss: 0.4070, train_acc: 0.8626 test_loss: 0.9359, test_acc: 0.7499, best: 0.7640, time: 0:01:56
 Epoch: 156, lr: 1.0e-02, train_loss: 0.4165, train_acc: 0.8556 test_loss: 1.0059, test_acc: 0.7549, best: 0.7640, time: 0:01:51
 Epoch: 157, lr: 1.0e-02, train_loss: 0.4127, train_acc: 0.8520 test_loss: 1.0509, test_acc: 0.7526, best: 0.7640, time: 0:01:59
 Epoch: 158, lr: 1.0e-02, train_loss: 0.4344, train_acc: 0.8470 test_loss: 0.9696, test_acc: 0.7581, best: 0.7640, time: 0:02:01
 Epoch: 159, lr: 1.0e-02, train_loss: 0.4108, train_acc: 0.8592 test_loss: 1.0741, test_acc: 0.7429, best: 0.7640, time: 0:02:04
 Epoch: 160, lr: 1.0e-02, train_loss: 0.4078, train_acc: 0.8620 test_loss: 0.9686, test_acc: 0.7540, best: 0.7640, time: 0:02:05
 Epoch: 161, lr: 1.0e-02, train_loss: 0.3801, train_acc: 0.8702 test_loss: 0.9480, test_acc: 0.7529, best: 0.7640, time: 0:01:57
 Epoch: 162, lr: 1.0e-02, train_loss: 0.4140, train_acc: 0.8620 test_loss: 1.0295, test_acc: 0.7485, best: 0.7640, time: 0:02:07
 Epoch: 163, lr: 1.0e-02, train_loss: 0.3939, train_acc: 0.8618 test_loss: 0.9934, test_acc: 0.7520, best: 0.7640, time: 0:02:00
 Epoch: 164, lr: 1.0e-02, train_loss: 0.3877, train_acc: 0.8616 test_loss: 0.9783, test_acc: 0.7719, best: 0.7719, time: 0:01:54
 Epoch: 165, lr: 1.0e-02, train_loss: 0.3985, train_acc: 0.8598 test_loss: 1.0889, test_acc: 0.7460, best: 0.7719, time: 0:01:46
 Epoch: 166, lr: 1.0e-02, train_loss: 0.3815, train_acc: 0.8618 test_loss: 1.0720, test_acc: 0.7484, best: 0.7719, time: 0:01:48
 Epoch: 167, lr: 1.0e-02, train_loss: 0.4010, train_acc: 0.8606 test_loss: 0.9794, test_acc: 0.7646, best: 0.7719, time: 0:01:50
 Epoch: 168, lr: 1.0e-02, train_loss: 0.3965, train_acc: 0.8664 test_loss: 1.0869, test_acc: 0.7398, best: 0.7719, time: 0:01:50
 Epoch: 169, lr: 1.0e-02, train_loss: 0.3996, train_acc: 0.8634 test_loss: 1.0452, test_acc: 0.7529, best: 0.7719, time: 0:01:56
 Epoch: 170, lr: 1.0e-02, train_loss: 0.3712, train_acc: 0.8756 test_loss: 1.0017, test_acc: 0.7596, best: 0.7719, time: 0:01:59
 Epoch: 171, lr: 1.0e-02, train_loss: 0.3971, train_acc: 0.8606 test_loss: 1.0246, test_acc: 0.7581, best: 0.7719, time: 0:01:59
 Epoch: 172, lr: 1.0e-02, train_loss: 0.3880, train_acc: 0.8610 test_loss: 1.0093, test_acc: 0.7499, best: 0.7719, time: 0:02:03
 Epoch: 173, lr: 1.0e-02, train_loss: 0.3804, train_acc: 0.8666 test_loss: 1.0214, test_acc: 0.7558, best: 0.7719, time: 0:02:22
 Epoch: 174, lr: 1.0e-02, train_loss: 0.3734, train_acc: 0.8682 test_loss: 1.0001, test_acc: 0.7618, best: 0.7719, time: 0:02:03
 Epoch: 175, lr: 1.0e-02, train_loss: 0.3887, train_acc: 0.8678 test_loss: 1.1081, test_acc: 0.7424, best: 0.7719, time: 0:02:34
 Epoch: 176, lr: 1.0e-02, train_loss: 0.3925, train_acc: 0.8696 test_loss: 0.9949, test_acc: 0.7589, best: 0.7719, time: 0:02:10
 Epoch: 177, lr: 1.0e-02, train_loss: 0.3753, train_acc: 0.8720 test_loss: 0.9770, test_acc: 0.7636, best: 0.7719, time: 0:01:52
 Epoch: 178, lr: 1.0e-02, train_loss: 0.3715, train_acc: 0.8718 test_loss: 1.0206, test_acc: 0.7642, best: 0.7719, time: 0:01:50
 Epoch: 179, lr: 1.0e-02, train_loss: 0.3647, train_acc: 0.8752 test_loss: 0.9649, test_acc: 0.7581, best: 0.7719, time: 0:01:47
 Epoch: 180, lr: 2.0e-03, train_loss: 0.3304, train_acc: 0.8884 test_loss: 0.8765, test_acc: 0.7772, best: 0.7772, time: 0:01:50
 Epoch: 181, lr: 2.0e-03, train_loss: 0.3111, train_acc: 0.8934 test_loss: 0.9243, test_acc: 0.7796, best: 0.7796, time: 0:01:57
 Epoch: 182, lr: 2.0e-03, train_loss: 0.2762, train_acc: 0.9036 test_loss: 0.9241, test_acc: 0.7765, best: 0.7796, time: 0:02:04
 Epoch: 183, lr: 2.0e-03, train_loss: 0.2908, train_acc: 0.9044 test_loss: 0.8731, test_acc: 0.7821, best: 0.7821, time: 0:01:56
 Epoch: 184, lr: 2.0e-03, train_loss: 0.2932, train_acc: 0.9000 test_loss: 0.9101, test_acc: 0.7821, best: 0.7821, time: 0:01:50
 Epoch: 185, lr: 2.0e-03, train_loss: 0.2802, train_acc: 0.9032 test_loss: 0.8972, test_acc: 0.7841, best: 0.7841, time: 0:01:49
 Epoch: 186, lr: 2.0e-03, train_loss: 0.2795, train_acc: 0.9048 test_loss: 0.9229, test_acc: 0.7795, best: 0.7841, time: 0:02:01
 Epoch: 187, lr: 2.0e-03, train_loss: 0.2879, train_acc: 0.9002 test_loss: 0.9241, test_acc: 0.7841, best: 0.7841, time: 0:01:50
 Epoch: 188, lr: 2.0e-03, train_loss: 0.2727, train_acc: 0.9070 test_loss: 0.8703, test_acc: 0.7887, best: 0.7887, time: 0:01:50
 Epoch: 189, lr: 2.0e-03, train_loss: 0.2541, train_acc: 0.9142 test_loss: 0.9228, test_acc: 0.7881, best: 0.7887, time: 0:01:49
 Epoch: 190, lr: 2.0e-03, train_loss: 0.2665, train_acc: 0.9086 test_loss: 0.9464, test_acc: 0.7839, best: 0.7887, time: 0:01:47
 Epoch: 191, lr: 2.0e-03, train_loss: 0.2629, train_acc: 0.9100 test_loss: 0.9514, test_acc: 0.7809, best: 0.7887, time: 0:01:46
 Epoch: 192, lr: 2.0e-03, train_loss: 0.2858, train_acc: 0.8992 test_loss: 0.9526, test_acc: 0.7766, best: 0.7887, time: 0:01:50
 Epoch: 193, lr: 2.0e-03, train_loss: 0.2665, train_acc: 0.9128 test_loss: 0.9435, test_acc: 0.7825, best: 0.7887, time: 0:01:49
 Epoch: 194, lr: 2.0e-03, train_loss: 0.2592, train_acc: 0.9086 test_loss: 0.9448, test_acc: 0.7830, best: 0.7887, time: 0:01:49
 Epoch: 195, lr: 2.0e-03, train_loss: 0.2650, train_acc: 0.9110 test_loss: 0.9354, test_acc: 0.7865, best: 0.7887, time: 0:01:55
 Epoch: 196, lr: 2.0e-03, train_loss: 0.2840, train_acc: 0.8994 test_loss: 0.9893, test_acc: 0.7834, best: 0.7887, time: 0:01:49
 Epoch: 197, lr: 2.0e-03, train_loss: 0.2600, train_acc: 0.9090 test_loss: 0.9356, test_acc: 0.7879, best: 0.7887, time: 0:01:53
 Epoch: 198, lr: 2.0e-03, train_loss: 0.2599, train_acc: 0.9104 test_loss: 0.9803, test_acc: 0.7846, best: 0.7887, time: 0:01:49
 Epoch: 199, lr: 2.0e-03, train_loss: 0.2604, train_acc: 0.9136 test_loss: 0.9431, test_acc: 0.7855, best: 0.7887, time: 0:01:51
 Epoch: 200, lr: 2.0e-03, train_loss: 0.2496, train_acc: 0.9162 test_loss: 0.9548, test_acc: 0.7805, best: 0.7887, time: 0:01:52
 Epoch: 201, lr: 2.0e-03, train_loss: 0.2593, train_acc: 0.9102 test_loss: 0.9222, test_acc: 0.7881, best: 0.7887, time: 0:01:50
 Epoch: 202, lr: 2.0e-03, train_loss: 0.2620, train_acc: 0.9066 test_loss: 0.9267, test_acc: 0.7834, best: 0.7887, time: 0:01:49
 Epoch: 203, lr: 2.0e-03, train_loss: 0.2550, train_acc: 0.9100 test_loss: 0.9587, test_acc: 0.7830, best: 0.7887, time: 0:01:49
 Epoch: 204, lr: 2.0e-03, train_loss: 0.2597, train_acc: 0.9080 test_loss: 0.9295, test_acc: 0.7870, best: 0.7887, time: 0:01:49
 Epoch: 205, lr: 2.0e-03, train_loss: 0.2797, train_acc: 0.9068 test_loss: 0.9344, test_acc: 0.7856, best: 0.7887, time: 0:01:57
 Epoch: 206, lr: 2.0e-03, train_loss: 0.2647, train_acc: 0.9072 test_loss: 0.9313, test_acc: 0.7897, best: 0.7897, time: 0:01:52
 Epoch: 207, lr: 2.0e-03, train_loss: 0.2400, train_acc: 0.9190 test_loss: 0.9381, test_acc: 0.7871, best: 0.7897, time: 0:01:47
 Epoch: 208, lr: 2.0e-03, train_loss: 0.2238, train_acc: 0.9242 test_loss: 0.9684, test_acc: 0.7854, best: 0.7897, time: 0:01:47
 Epoch: 209, lr: 2.0e-03, train_loss: 0.2419, train_acc: 0.9178 test_loss: 0.9620, test_acc: 0.7837, best: 0.7897, time: 0:01:52
 Epoch: 210, lr: 2.0e-03, train_loss: 0.2428, train_acc: 0.9166 test_loss: 0.9538, test_acc: 0.7839, best: 0.7897, time: 0:02:19
 Epoch: 211, lr: 2.0e-03, train_loss: 0.2529, train_acc: 0.9136 test_loss: 0.9593, test_acc: 0.7847, best: 0.7897, time: 0:01:50
 Epoch: 212, lr: 2.0e-03, train_loss: 0.2450, train_acc: 0.9136 test_loss: 0.9752, test_acc: 0.7847, best: 0.7897, time: 0:01:51
 Epoch: 213, lr: 2.0e-03, train_loss: 0.2306, train_acc: 0.9258 test_loss: 0.9646, test_acc: 0.7863, best: 0.7897, time: 0:01:49
 Epoch: 214, lr: 2.0e-03, train_loss: 0.2347, train_acc: 0.9134 test_loss: 0.9368, test_acc: 0.7876, best: 0.7897, time: 0:01:53
 Epoch: 215, lr: 2.0e-03, train_loss: 0.2379, train_acc: 0.9170 test_loss: 0.9298, test_acc: 0.7834, best: 0.7897, time: 0:01:52
 Epoch: 216, lr: 2.0e-03, train_loss: 0.2331, train_acc: 0.9222 test_loss: 0.9399, test_acc: 0.7849, best: 0.7897, time: 0:01:51
 Epoch: 217, lr: 2.0e-03, train_loss: 0.2218, train_acc: 0.9248 test_loss: 0.9616, test_acc: 0.7819, best: 0.7897, time: 0:01:49
 Epoch: 218, lr: 2.0e-03, train_loss: 0.2620, train_acc: 0.9098 test_loss: 0.9892, test_acc: 0.7789, best: 0.7897, time: 0:01:51
 Epoch: 219, lr: 2.0e-03, train_loss: 0.2375, train_acc: 0.9206 test_loss: 0.9661, test_acc: 0.7833, best: 0.7897, time: 0:01:50
 Epoch: 220, lr: 2.0e-03, train_loss: 0.2458, train_acc: 0.9170 test_loss: 0.9572, test_acc: 0.7853, best: 0.7897, time: 0:01:49
 Epoch: 221, lr: 2.0e-03, train_loss: 0.2340, train_acc: 0.9176 test_loss: 0.9584, test_acc: 0.7856, best: 0.7897, time: 0:01:59
 Epoch: 222, lr: 2.0e-03, train_loss: 0.2109, train_acc: 0.9252 test_loss: 0.9864, test_acc: 0.7834, best: 0.7897, time: 0:01:48
 Epoch: 223, lr: 2.0e-03, train_loss: 0.2424, train_acc: 0.9188 test_loss: 0.9671, test_acc: 0.7820, best: 0.7897, time: 0:01:46
 Epoch: 224, lr: 2.0e-03, train_loss: 0.2355, train_acc: 0.9208 test_loss: 0.9588, test_acc: 0.7834, best: 0.7897, time: 0:01:49
 Epoch: 225, lr: 2.0e-03, train_loss: 0.2350, train_acc: 0.9184 test_loss: 0.9438, test_acc: 0.7834, best: 0.7897, time: 0:01:46
 Epoch: 226, lr: 2.0e-03, train_loss: 0.2377, train_acc: 0.9188 test_loss: 0.9488, test_acc: 0.7840, best: 0.7897, time: 0:01:44
 Epoch: 227, lr: 2.0e-03, train_loss: 0.2350, train_acc: 0.9178 test_loss: 0.9723, test_acc: 0.7841, best: 0.7897, time: 0:01:45
 Epoch: 228, lr: 2.0e-03, train_loss: 0.2325, train_acc: 0.9204 test_loss: 1.0133, test_acc: 0.7844, best: 0.7897, time: 0:01:43
 Epoch: 229, lr: 2.0e-03, train_loss: 0.2408, train_acc: 0.9180 test_loss: 0.9827, test_acc: 0.7815, best: 0.7897, time: 0:01:47
 Epoch: 230, lr: 2.0e-03, train_loss: 0.2261, train_acc: 0.9188 test_loss: 0.9525, test_acc: 0.7920, best: 0.7920, time: 0:01:46
 Epoch: 231, lr: 2.0e-03, train_loss: 0.2453, train_acc: 0.9130 test_loss: 0.9692, test_acc: 0.7864, best: 0.7920, time: 0:01:50
 Epoch: 232, lr: 2.0e-03, train_loss: 0.2296, train_acc: 0.9188 test_loss: 0.9773, test_acc: 0.7839, best: 0.7920, time: 0:01:49
 Epoch: 233, lr: 2.0e-03, train_loss: 0.2171, train_acc: 0.9268 test_loss: 0.9436, test_acc: 0.7879, best: 0.7920, time: 0:01:51
 Epoch: 234, lr: 2.0e-03, train_loss: 0.2122, train_acc: 0.9254 test_loss: 0.9450, test_acc: 0.7925, best: 0.7925, time: 0:01:47
 Epoch: 235, lr: 2.0e-03, train_loss: 0.2379, train_acc: 0.9224 test_loss: 0.9623, test_acc: 0.7865, best: 0.7925, time: 0:01:45
 Epoch: 236, lr: 2.0e-03, train_loss: 0.2207, train_acc: 0.9246 test_loss: 0.9944, test_acc: 0.7844, best: 0.7925, time: 0:01:49
 Epoch: 237, lr: 2.0e-03, train_loss: 0.2434, train_acc: 0.9164 test_loss: 0.9964, test_acc: 0.7865, best: 0.7925, time: 0:01:45
 Epoch: 238, lr: 2.0e-03, train_loss: 0.2476, train_acc: 0.9134 test_loss: 0.9669, test_acc: 0.7870, best: 0.7925, time: 0:01:57
 Epoch: 239, lr: 2.0e-03, train_loss: 0.2239, train_acc: 0.9232 test_loss: 0.9596, test_acc: 0.7835, best: 0.7925, time: 0:01:44
 Epoch: 240, lr: 4.0e-04, train_loss: 0.2402, train_acc: 0.9182 test_loss: 0.9495, test_acc: 0.7919, best: 0.7925, time: 0:01:46
 Epoch: 241, lr: 4.0e-04, train_loss: 0.2275, train_acc: 0.9240 test_loss: 0.9753, test_acc: 0.7887, best: 0.7925, time: 0:01:49
 Epoch: 242, lr: 4.0e-04, train_loss: 0.2331, train_acc: 0.9174 test_loss: 0.9545, test_acc: 0.7925, best: 0.7925, time: 0:01:49
 Epoch: 243, lr: 4.0e-04, train_loss: 0.2145, train_acc: 0.9272 test_loss: 0.9454, test_acc: 0.7886, best: 0.7925, time: 0:01:50
 Epoch: 244, lr: 4.0e-04, train_loss: 0.2129, train_acc: 0.9276 test_loss: 0.9635, test_acc: 0.7895, best: 0.7925, time: 0:01:49
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1978, train_acc: 0.9302 test_loss: 0.9854, test_acc: 0.7887, best: 0.7925, time: 0:01:49
 Epoch: 246, lr: 4.0e-04, train_loss: 0.2335, train_acc: 0.9174 test_loss: 0.9568, test_acc: 0.7907, best: 0.7925, time: 0:01:45
 Epoch: 247, lr: 4.0e-04, train_loss: 0.2180, train_acc: 0.9304 test_loss: 0.9457, test_acc: 0.7911, best: 0.7925, time: 0:01:49
 Epoch: 248, lr: 4.0e-04, train_loss: 0.2293, train_acc: 0.9244 test_loss: 0.9361, test_acc: 0.7863, best: 0.7925, time: 0:01:54
 Epoch: 249, lr: 4.0e-04, train_loss: 0.2233, train_acc: 0.9248 test_loss: 0.9614, test_acc: 0.7855, best: 0.7925, time: 0:01:52
 Epoch: 250, lr: 4.0e-04, train_loss: 0.2040, train_acc: 0.9302 test_loss: 0.9532, test_acc: 0.7884, best: 0.7925, time: 0:01:52
 Epoch: 251, lr: 4.0e-04, train_loss: 0.2087, train_acc: 0.9292 test_loss: 0.9758, test_acc: 0.7889, best: 0.7925, time: 0:01:50
 Epoch: 252, lr: 4.0e-04, train_loss: 0.2176, train_acc: 0.9278 test_loss: 0.9611, test_acc: 0.7854, best: 0.7925, time: 0:01:51
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2100, train_acc: 0.9294 test_loss: 0.9429, test_acc: 0.7909, best: 0.7925, time: 0:01:49
 Epoch: 254, lr: 4.0e-04, train_loss: 0.2141, train_acc: 0.9238 test_loss: 0.9641, test_acc: 0.7877, best: 0.7925, time: 0:01:52
 Epoch: 255, lr: 4.0e-04, train_loss: 0.2084, train_acc: 0.9298 test_loss: 0.9525, test_acc: 0.7881, best: 0.7925, time: 0:01:51
 Epoch: 256, lr: 4.0e-04, train_loss: 0.2319, train_acc: 0.9172 test_loss: 0.9575, test_acc: 0.7866, best: 0.7925, time: 0:01:47
 Epoch: 257, lr: 4.0e-04, train_loss: 0.2247, train_acc: 0.9266 test_loss: 0.9743, test_acc: 0.7905, best: 0.7925, time: 0:01:48
 Epoch: 258, lr: 4.0e-04, train_loss: 0.2104, train_acc: 0.9250 test_loss: 0.9310, test_acc: 0.7926, best: 0.7926, time: 0:01:46
 Epoch: 259, lr: 4.0e-04, train_loss: 0.2140, train_acc: 0.9248 test_loss: 0.9679, test_acc: 0.7899, best: 0.7926, time: 0:01:46
 Epoch: 260, lr: 4.0e-04, train_loss: 0.2190, train_acc: 0.9242 test_loss: 0.9509, test_acc: 0.7889, best: 0.7926, time: 0:01:51
 Epoch: 261, lr: 4.0e-04, train_loss: 0.2240, train_acc: 0.9198 test_loss: 0.9408, test_acc: 0.7901, best: 0.7926, time: 0:01:47
 Epoch: 262, lr: 4.0e-04, train_loss: 0.2245, train_acc: 0.9248 test_loss: 0.9335, test_acc: 0.7939, best: 0.7939, time: 0:01:45
 Epoch: 263, lr: 4.0e-04, train_loss: 0.2187, train_acc: 0.9280 test_loss: 0.9253, test_acc: 0.7887, best: 0.7939, time: 0:01:52
 Epoch: 264, lr: 4.0e-04, train_loss: 0.2115, train_acc: 0.9270 test_loss: 0.9481, test_acc: 0.7895, best: 0.7939, time: 0:01:48
 Epoch: 265, lr: 4.0e-04, train_loss: 0.2089, train_acc: 0.9290 test_loss: 0.9618, test_acc: 0.7895, best: 0.7939, time: 0:01:56
 Epoch: 266, lr: 4.0e-04, train_loss: 0.2150, train_acc: 0.9250 test_loss: 0.9703, test_acc: 0.7873, best: 0.7939, time: 0:01:45
 Epoch: 267, lr: 4.0e-04, train_loss: 0.2267, train_acc: 0.9254 test_loss: 0.9559, test_acc: 0.7879, best: 0.7939, time: 0:01:47
 Epoch: 268, lr: 4.0e-04, train_loss: 0.2064, train_acc: 0.9286 test_loss: 0.9591, test_acc: 0.7910, best: 0.7939, time: 0:01:58
 Epoch: 269, lr: 4.0e-04, train_loss: 0.2002, train_acc: 0.9290 test_loss: 0.9566, test_acc: 0.7885, best: 0.7939, time: 0:01:48
 Epoch: 270, lr: 8.0e-05, train_loss: 0.2134, train_acc: 0.9270 test_loss: 0.9380, test_acc: 0.7900, best: 0.7939, time: 0:01:44
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2048, train_acc: 0.9320 test_loss: 0.9711, test_acc: 0.7906, best: 0.7939, time: 0:01:47
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1997, train_acc: 0.9326 test_loss: 0.9624, test_acc: 0.7917, best: 0.7939, time: 0:01:48
 Epoch: 273, lr: 8.0e-05, train_loss: 0.2113, train_acc: 0.9274 test_loss: 0.9716, test_acc: 0.7887, best: 0.7939, time: 0:01:45
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2037, train_acc: 0.9308 test_loss: 0.9497, test_acc: 0.7855, best: 0.7939, time: 0:01:59
 Epoch: 275, lr: 8.0e-05, train_loss: 0.2118, train_acc: 0.9248 test_loss: 0.9551, test_acc: 0.7895, best: 0.7939, time: 0:01:44
 Epoch: 276, lr: 8.0e-05, train_loss: 0.2031, train_acc: 0.9278 test_loss: 0.9705, test_acc: 0.7876, best: 0.7939, time: 0:01:46
 Epoch: 277, lr: 8.0e-05, train_loss: 0.2224, train_acc: 0.9216 test_loss: 0.9837, test_acc: 0.7856, best: 0.7939, time: 0:01:50
 Epoch: 278, lr: 8.0e-05, train_loss: 0.2034, train_acc: 0.9280 test_loss: 0.9359, test_acc: 0.7914, best: 0.7939, time: 0:01:45
 Epoch: 279, lr: 8.0e-05, train_loss: 0.2258, train_acc: 0.9210 test_loss: 0.9578, test_acc: 0.7879, best: 0.7939, time: 0:01:59
 Epoch: 280, lr: 8.0e-05, train_loss: 0.2052, train_acc: 0.9266 test_loss: 0.9730, test_acc: 0.7885, best: 0.7939, time: 0:01:52
 Epoch: 281, lr: 8.0e-05, train_loss: 0.2057, train_acc: 0.9250 test_loss: 0.9528, test_acc: 0.7910, best: 0.7939, time: 0:01:51
 Epoch: 282, lr: 8.0e-05, train_loss: 0.2132, train_acc: 0.9296 test_loss: 0.9421, test_acc: 0.7916, best: 0.7939, time: 0:01:48
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1919, train_acc: 0.9308 test_loss: 0.9747, test_acc: 0.7877, best: 0.7939, time: 0:01:53
 Epoch: 284, lr: 8.0e-05, train_loss: 0.2348, train_acc: 0.9234 test_loss: 0.9498, test_acc: 0.7895, best: 0.7939, time: 0:02:08
 Epoch: 285, lr: 8.0e-05, train_loss: 0.2090, train_acc: 0.9262 test_loss: 0.9816, test_acc: 0.7883, best: 0.7939, time: 0:02:14
 Epoch: 286, lr: 8.0e-05, train_loss: 0.2037, train_acc: 0.9312 test_loss: 0.9670, test_acc: 0.7880, best: 0.7939, time: 0:01:53
 Epoch: 287, lr: 8.0e-05, train_loss: 0.2124, train_acc: 0.9232 test_loss: 0.9632, test_acc: 0.7890, best: 0.7939, time: 0:02:02
 Epoch: 288, lr: 8.0e-05, train_loss: 0.2206, train_acc: 0.9208 test_loss: 0.9516, test_acc: 0.7911, best: 0.7939, time: 0:01:57
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1982, train_acc: 0.9310 test_loss: 0.9718, test_acc: 0.7921, best: 0.7939, time: 0:01:47
 Epoch: 290, lr: 8.0e-05, train_loss: 0.2062, train_acc: 0.9270 test_loss: 0.9707, test_acc: 0.7907, best: 0.7939, time: 0:01:52
 Epoch: 291, lr: 8.0e-05, train_loss: 0.2102, train_acc: 0.9268 test_loss: 0.9471, test_acc: 0.7904, best: 0.7939, time: 0:01:59
 Epoch: 292, lr: 8.0e-05, train_loss: 0.2077, train_acc: 0.9290 test_loss: 0.9584, test_acc: 0.7886, best: 0.7939, time: 0:01:45
 Epoch: 293, lr: 8.0e-05, train_loss: 0.2071, train_acc: 0.9300 test_loss: 0.9642, test_acc: 0.7884, best: 0.7939, time: 0:01:41
 Epoch: 294, lr: 8.0e-05, train_loss: 0.2163, train_acc: 0.9224 test_loss: 0.9648, test_acc: 0.7913, best: 0.7939, time: 0:01:43
 Epoch: 295, lr: 8.0e-05, train_loss: 0.2119, train_acc: 0.9242 test_loss: 0.9576, test_acc: 0.7924, best: 0.7939, time: 0:01:43
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1900, train_acc: 0.9380 test_loss: 0.9501, test_acc: 0.7930, best: 0.7939, time: 0:01:44
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2011, train_acc: 0.9284 test_loss: 0.9437, test_acc: 0.7921, best: 0.7939, time: 0:01:43
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1982, train_acc: 0.9318 test_loss: 0.9612, test_acc: 0.7915, best: 0.7939, time: 0:01:44
 Epoch: 299, lr: 8.0e-05, train_loss: 0.2178, train_acc: 0.9262 test_loss: 0.9715, test_acc: 0.7893, best: 0.7939, time: 0:01:43
 Highest accuracy: 0.7939