
 Run on time: 2022-07-01 02:47:07.298890

 Architecture: resnet18_v2-nlp_headfix2-2222

 Pool Config: {
    "arch": "resnet18_v2",
    "conv1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "skip",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "pool": {
        "_conv2d": null,
        "pool_cfg": {
            "_ptype": "maxp",
            "_stride": 2,
            "_psize": null,
            "_dim_reduced_ratio": null,
            "_num_heads": null,
            "_conv2d": null,
            "_win_norm": null
        }
    },
    "layer1": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer2": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer3": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    },
    "layer4": {
        "_conv2d": "norm",
        "pool_cfg": {
            "_ptype": "nlp",
            "_stride": 2,
            "_psize": 1,
            "_dim_reduced_ratio": 1,
            "_num_heads": 2,
            "_conv2d": "norm",
            "_win_norm": true
        }
    }
}

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET18_V2-NLP_HEADFIX2-2222
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): Network(
    (net): ResNet_v2(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): BasicBlock(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 32)
                  (col_embed): Embedding(256, 32)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer2): Sequential(
        (0): BasicBlock(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 64)
                  (col_embed): Embedding(256, 64)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer3): Sequential(
        (0): BasicBlock(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 128)
                  (col_embed): Embedding(256, 128)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (layer4): Sequential(
        (0): BasicBlock(
          (pooling): Pool2d(
            (logit): Sequential(
              (pool_weight): NLP_BASE(
                (downsample): Sequential(
                  (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): ReLU(inplace=True)
                )
                (multihead_attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
                )
                (restore): Sequential(
                  (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                  (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): Sigmoid()
                )
                (pos_embed): PositionEmbeddingLearned(
                  (row_embed): Embedding(256, 256)
                  (col_embed): Embedding(256, 256)
                )
              )
            )
            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
          )
          (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=512, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.3301, train_acc: 0.1876 test_loss: 1.9247, test_acc: 0.2696, best: 0.2696, time: 0:01:04
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0034, train_acc: 0.2430 test_loss: 1.8607, test_acc: 0.3038, best: 0.3038, time: 0:01:05
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9110, train_acc: 0.2636 test_loss: 1.6467, test_acc: 0.3360, best: 0.3360, time: 0:01:06
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8446, train_acc: 0.2988 test_loss: 1.7318, test_acc: 0.3616, best: 0.3616, time: 0:01:06
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8026, train_acc: 0.3296 test_loss: 1.5777, test_acc: 0.3927, best: 0.3927, time: 0:01:06
 Epoch: 6, lr: 1.0e-02, train_loss: 1.7332, train_acc: 0.3494 test_loss: 1.6543, test_acc: 0.3946, best: 0.3946, time: 0:01:06
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7071, train_acc: 0.3584 test_loss: 1.5352, test_acc: 0.4284, best: 0.4284, time: 0:01:06
 Epoch: 8, lr: 1.0e-02, train_loss: 1.6424, train_acc: 0.3810 test_loss: 1.6290, test_acc: 0.4255, best: 0.4284, time: 0:01:05
 Epoch: 9, lr: 1.0e-02, train_loss: 1.5619, train_acc: 0.4226 test_loss: 1.6280, test_acc: 0.4421, best: 0.4421, time: 0:01:06
 Epoch: 10, lr: 1.0e-02, train_loss: 1.5642, train_acc: 0.4236 test_loss: 1.3509, test_acc: 0.4911, best: 0.4911, time: 0:01:06
 Epoch: 11, lr: 1.0e-02, train_loss: 1.5095, train_acc: 0.4326 test_loss: 1.4036, test_acc: 0.4871, best: 0.4911, time: 0:01:05
 Epoch: 12, lr: 1.0e-02, train_loss: 1.4731, train_acc: 0.4682 test_loss: 1.3278, test_acc: 0.5144, best: 0.5144, time: 0:01:06
 Epoch: 13, lr: 1.0e-02, train_loss: 1.4416, train_acc: 0.4742 test_loss: 1.3629, test_acc: 0.5141, best: 0.5144, time: 0:01:05
 Epoch: 14, lr: 1.0e-02, train_loss: 1.4047, train_acc: 0.4846 test_loss: 1.4206, test_acc: 0.5060, best: 0.5144, time: 0:01:05
 Epoch: 15, lr: 1.0e-02, train_loss: 1.3850, train_acc: 0.4978 test_loss: 1.1653, test_acc: 0.5736, best: 0.5736, time: 0:01:06
 Epoch: 16, lr: 1.0e-02, train_loss: 1.3361, train_acc: 0.5108 test_loss: 1.2378, test_acc: 0.5621, best: 0.5736, time: 0:01:05
 Epoch: 17, lr: 1.0e-02, train_loss: 1.3115, train_acc: 0.5206 test_loss: 1.2734, test_acc: 0.5426, best: 0.5736, time: 0:01:05
 Epoch: 18, lr: 1.0e-02, train_loss: 1.2973, train_acc: 0.5330 test_loss: 1.1689, test_acc: 0.5823, best: 0.5823, time: 0:01:06
 Epoch: 19, lr: 1.0e-02, train_loss: 1.2671, train_acc: 0.5362 test_loss: 1.1254, test_acc: 0.5894, best: 0.5894, time: 0:01:06
 Epoch: 20, lr: 1.0e-02, train_loss: 1.2591, train_acc: 0.5488 test_loss: 1.1630, test_acc: 0.5849, best: 0.5894, time: 0:01:05
 Epoch: 21, lr: 1.0e-02, train_loss: 1.2268, train_acc: 0.5466 test_loss: 1.1998, test_acc: 0.5723, best: 0.5894, time: 0:01:05
 Epoch: 22, lr: 1.0e-02, train_loss: 1.2167, train_acc: 0.5618 test_loss: 1.3187, test_acc: 0.5654, best: 0.5894, time: 0:01:06
 Epoch: 23, lr: 1.0e-02, train_loss: 1.1822, train_acc: 0.5732 test_loss: 1.1090, test_acc: 0.5941, best: 0.5941, time: 0:01:05
 Epoch: 24, lr: 1.0e-02, train_loss: 1.1658, train_acc: 0.5762 test_loss: 1.1958, test_acc: 0.5857, best: 0.5941, time: 0:01:05
 Epoch: 25, lr: 1.0e-02, train_loss: 1.1725, train_acc: 0.5722 test_loss: 1.1721, test_acc: 0.5966, best: 0.5966, time: 0:01:05
 Epoch: 26, lr: 1.0e-02, train_loss: 1.1272, train_acc: 0.5902 test_loss: 1.0504, test_acc: 0.6296, best: 0.6296, time: 0:01:05
 Epoch: 27, lr: 1.0e-02, train_loss: 1.1152, train_acc: 0.5940 test_loss: 1.0394, test_acc: 0.6238, best: 0.6296, time: 0:01:05
 Epoch: 28, lr: 1.0e-02, train_loss: 1.1175, train_acc: 0.5972 test_loss: 0.9857, test_acc: 0.6521, best: 0.6521, time: 0:01:05
 Epoch: 29, lr: 1.0e-02, train_loss: 1.0865, train_acc: 0.6070 test_loss: 1.0086, test_acc: 0.6421, best: 0.6521, time: 0:01:05
 Epoch: 30, lr: 1.0e-02, train_loss: 1.0673, train_acc: 0.6104 test_loss: 1.0106, test_acc: 0.6415, best: 0.6521, time: 0:01:05
 Epoch: 31, lr: 1.0e-02, train_loss: 1.0462, train_acc: 0.6208 test_loss: 1.0479, test_acc: 0.6338, best: 0.6521, time: 0:01:05
 Epoch: 32, lr: 1.0e-02, train_loss: 1.0586, train_acc: 0.6182 test_loss: 0.9545, test_acc: 0.6624, best: 0.6624, time: 0:01:05
 Epoch: 33, lr: 1.0e-02, train_loss: 1.0282, train_acc: 0.6308 test_loss: 0.9624, test_acc: 0.6643, best: 0.6643, time: 0:01:05
 Epoch: 34, lr: 1.0e-02, train_loss: 1.0040, train_acc: 0.6332 test_loss: 1.1169, test_acc: 0.6191, best: 0.6643, time: 0:01:05
 Epoch: 35, lr: 1.0e-02, train_loss: 0.9956, train_acc: 0.6402 test_loss: 1.0297, test_acc: 0.6445, best: 0.6643, time: 0:01:05
 Epoch: 36, lr: 1.0e-02, train_loss: 0.9891, train_acc: 0.6436 test_loss: 0.9142, test_acc: 0.6735, best: 0.6735, time: 0:01:05
 Epoch: 37, lr: 1.0e-02, train_loss: 0.9880, train_acc: 0.6424 test_loss: 0.9993, test_acc: 0.6471, best: 0.6735, time: 0:01:05
 Epoch: 38, lr: 1.0e-02, train_loss: 0.9518, train_acc: 0.6592 test_loss: 0.9071, test_acc: 0.6826, best: 0.6826, time: 0:01:05
 Epoch: 39, lr: 1.0e-02, train_loss: 0.9700, train_acc: 0.6550 test_loss: 0.8830, test_acc: 0.6866, best: 0.6866, time: 0:01:05
 Epoch: 40, lr: 1.0e-02, train_loss: 0.9385, train_acc: 0.6640 test_loss: 1.0084, test_acc: 0.6560, best: 0.6866, time: 0:01:05
 Epoch: 41, lr: 1.0e-02, train_loss: 0.9161, train_acc: 0.6646 test_loss: 1.0545, test_acc: 0.6366, best: 0.6866, time: 0:01:05
 Epoch: 42, lr: 1.0e-02, train_loss: 0.9114, train_acc: 0.6766 test_loss: 0.9214, test_acc: 0.6785, best: 0.6866, time: 0:01:05
 Epoch: 43, lr: 1.0e-02, train_loss: 0.8968, train_acc: 0.6734 test_loss: 0.8968, test_acc: 0.6930, best: 0.6930, time: 0:01:05
 Epoch: 44, lr: 1.0e-02, train_loss: 0.8751, train_acc: 0.6918 test_loss: 0.9976, test_acc: 0.6606, best: 0.6930, time: 0:01:04
 Epoch: 45, lr: 1.0e-02, train_loss: 0.8842, train_acc: 0.6846 test_loss: 0.9452, test_acc: 0.6764, best: 0.6930, time: 0:01:04
 Epoch: 46, lr: 1.0e-02, train_loss: 0.8708, train_acc: 0.6854 test_loss: 0.9350, test_acc: 0.6883, best: 0.6930, time: 0:01:04
 Epoch: 47, lr: 1.0e-02, train_loss: 0.8568, train_acc: 0.6936 test_loss: 0.9060, test_acc: 0.6850, best: 0.6930, time: 0:01:04
 Epoch: 48, lr: 1.0e-02, train_loss: 0.8237, train_acc: 0.7116 test_loss: 1.1366, test_acc: 0.6558, best: 0.6930, time: 0:01:04
 Epoch: 49, lr: 1.0e-02, train_loss: 0.8454, train_acc: 0.6968 test_loss: 0.8787, test_acc: 0.7074, best: 0.7074, time: 0:01:05
 Epoch: 50, lr: 1.0e-02, train_loss: 0.8064, train_acc: 0.7162 test_loss: 0.9390, test_acc: 0.6790, best: 0.7074, time: 0:01:04
 Epoch: 51, lr: 1.0e-02, train_loss: 0.7998, train_acc: 0.7178 test_loss: 0.8946, test_acc: 0.7070, best: 0.7074, time: 0:01:04
 Epoch: 52, lr: 1.0e-02, train_loss: 0.8103, train_acc: 0.7074 test_loss: 0.9234, test_acc: 0.6903, best: 0.7074, time: 0:01:04
 Epoch: 53, lr: 1.0e-02, train_loss: 0.8231, train_acc: 0.7036 test_loss: 0.8594, test_acc: 0.7105, best: 0.7105, time: 0:01:05
 Epoch: 54, lr: 1.0e-02, train_loss: 0.8008, train_acc: 0.7168 test_loss: 0.8844, test_acc: 0.7070, best: 0.7105, time: 0:01:04
 Epoch: 55, lr: 1.0e-02, train_loss: 0.7943, train_acc: 0.7186 test_loss: 0.9436, test_acc: 0.6869, best: 0.7105, time: 0:01:04
 Epoch: 56, lr: 1.0e-02, train_loss: 0.7536, train_acc: 0.7250 test_loss: 0.8953, test_acc: 0.7094, best: 0.7105, time: 0:01:04
 Epoch: 57, lr: 1.0e-02, train_loss: 0.7637, train_acc: 0.7302 test_loss: 0.8646, test_acc: 0.7111, best: 0.7111, time: 0:01:05
 Epoch: 58, lr: 1.0e-02, train_loss: 0.7632, train_acc: 0.7244 test_loss: 0.8747, test_acc: 0.7109, best: 0.7111, time: 0:01:04
 Epoch: 59, lr: 1.0e-02, train_loss: 0.7464, train_acc: 0.7330 test_loss: 1.0647, test_acc: 0.6756, best: 0.7111, time: 0:01:04
 Epoch: 60, lr: 1.0e-02, train_loss: 0.7217, train_acc: 0.7406 test_loss: 0.8670, test_acc: 0.7130, best: 0.7130, time: 0:01:04
 Epoch: 61, lr: 1.0e-02, train_loss: 0.7189, train_acc: 0.7436 test_loss: 0.9594, test_acc: 0.6967, best: 0.7130, time: 0:01:04
 Epoch: 62, lr: 1.0e-02, train_loss: 0.7310, train_acc: 0.7376 test_loss: 0.9892, test_acc: 0.6919, best: 0.7130, time: 0:01:04
 Epoch: 63, lr: 1.0e-02, train_loss: 0.7258, train_acc: 0.7458 test_loss: 0.8564, test_acc: 0.7194, best: 0.7194, time: 0:01:04
 Epoch: 64, lr: 1.0e-02, train_loss: 0.7154, train_acc: 0.7442 test_loss: 0.8853, test_acc: 0.7165, best: 0.7194, time: 0:01:04
 Epoch: 65, lr: 1.0e-02, train_loss: 0.7014, train_acc: 0.7484 test_loss: 0.9403, test_acc: 0.7047, best: 0.7194, time: 0:01:04
 Epoch: 66, lr: 1.0e-02, train_loss: 0.6892, train_acc: 0.7598 test_loss: 0.8952, test_acc: 0.7123, best: 0.7194, time: 0:01:04
 Epoch: 67, lr: 1.0e-02, train_loss: 0.6875, train_acc: 0.7556 test_loss: 0.8382, test_acc: 0.7321, best: 0.7321, time: 0:01:05
 Epoch: 68, lr: 1.0e-02, train_loss: 0.6856, train_acc: 0.7590 test_loss: 1.0592, test_acc: 0.6744, best: 0.7321, time: 0:01:04
 Epoch: 69, lr: 1.0e-02, train_loss: 0.6510, train_acc: 0.7708 test_loss: 0.8768, test_acc: 0.7246, best: 0.7321, time: 0:01:04
 Epoch: 70, lr: 1.0e-02, train_loss: 0.6612, train_acc: 0.7622 test_loss: 1.0129, test_acc: 0.6934, best: 0.7321, time: 0:01:04
 Epoch: 71, lr: 1.0e-02, train_loss: 0.6541, train_acc: 0.7660 test_loss: 0.8905, test_acc: 0.7248, best: 0.7321, time: 0:01:04
 Epoch: 72, lr: 1.0e-02, train_loss: 0.6567, train_acc: 0.7650 test_loss: 0.9470, test_acc: 0.7075, best: 0.7321, time: 0:01:04
 Epoch: 73, lr: 1.0e-02, train_loss: 0.6523, train_acc: 0.7668 test_loss: 0.9288, test_acc: 0.7270, best: 0.7321, time: 0:01:04
 Epoch: 74, lr: 1.0e-02, train_loss: 0.6343, train_acc: 0.7744 test_loss: 0.9386, test_acc: 0.7215, best: 0.7321, time: 0:01:04
 Epoch: 75, lr: 1.0e-02, train_loss: 0.6312, train_acc: 0.7768 test_loss: 0.8606, test_acc: 0.7351, best: 0.7351, time: 0:01:05
 Epoch: 76, lr: 1.0e-02, train_loss: 0.6156, train_acc: 0.7850 test_loss: 0.9117, test_acc: 0.7151, best: 0.7351, time: 0:01:04
 Epoch: 77, lr: 1.0e-02, train_loss: 0.6173, train_acc: 0.7886 test_loss: 0.8720, test_acc: 0.7318, best: 0.7351, time: 0:01:04
 Epoch: 78, lr: 1.0e-02, train_loss: 0.6164, train_acc: 0.7880 test_loss: 0.8528, test_acc: 0.7388, best: 0.7388, time: 0:01:05
 Epoch: 79, lr: 1.0e-02, train_loss: 0.5809, train_acc: 0.7964 test_loss: 0.9671, test_acc: 0.7157, best: 0.7388, time: 0:01:04
 Epoch: 80, lr: 1.0e-02, train_loss: 0.5947, train_acc: 0.7900 test_loss: 0.8428, test_acc: 0.7380, best: 0.7388, time: 0:01:04
 Epoch: 81, lr: 1.0e-02, train_loss: 0.5989, train_acc: 0.7912 test_loss: 0.9891, test_acc: 0.7137, best: 0.7388, time: 0:01:04
 Epoch: 82, lr: 1.0e-02, train_loss: 0.5899, train_acc: 0.7942 test_loss: 0.8459, test_acc: 0.7311, best: 0.7388, time: 0:01:04
 Epoch: 83, lr: 1.0e-02, train_loss: 0.5754, train_acc: 0.7978 test_loss: 0.8901, test_acc: 0.7380, best: 0.7388, time: 0:01:04
 Epoch: 84, lr: 1.0e-02, train_loss: 0.6141, train_acc: 0.7858 test_loss: 0.9445, test_acc: 0.7399, best: 0.7399, time: 0:01:05
 Epoch: 85, lr: 1.0e-02, train_loss: 0.5642, train_acc: 0.8026 test_loss: 0.9991, test_acc: 0.7141, best: 0.7399, time: 0:01:04
 Epoch: 86, lr: 1.0e-02, train_loss: 0.5543, train_acc: 0.8014 test_loss: 0.8567, test_acc: 0.7470, best: 0.7470, time: 0:01:05
 Epoch: 87, lr: 1.0e-02, train_loss: 0.5682, train_acc: 0.8008 test_loss: 0.9398, test_acc: 0.7329, best: 0.7470, time: 0:01:04
 Epoch: 88, lr: 1.0e-02, train_loss: 0.5696, train_acc: 0.7964 test_loss: 0.9559, test_acc: 0.7244, best: 0.7470, time: 0:01:04
 Epoch: 89, lr: 1.0e-02, train_loss: 0.5274, train_acc: 0.8158 test_loss: 0.9008, test_acc: 0.7299, best: 0.7470, time: 0:01:04
 Epoch: 90, lr: 1.0e-02, train_loss: 0.5517, train_acc: 0.8060 test_loss: 0.9183, test_acc: 0.7401, best: 0.7470, time: 0:01:04
 Epoch: 91, lr: 1.0e-02, train_loss: 0.5568, train_acc: 0.8092 test_loss: 0.9187, test_acc: 0.7290, best: 0.7470, time: 0:01:04
 Epoch: 92, lr: 1.0e-02, train_loss: 0.5386, train_acc: 0.8046 test_loss: 0.9112, test_acc: 0.7332, best: 0.7470, time: 0:01:04
 Epoch: 93, lr: 1.0e-02, train_loss: 0.5252, train_acc: 0.8108 test_loss: 0.9309, test_acc: 0.7406, best: 0.7470, time: 0:01:04
 Epoch: 94, lr: 1.0e-02, train_loss: 0.5235, train_acc: 0.8220 test_loss: 0.9856, test_acc: 0.7275, best: 0.7470, time: 0:01:04
 Epoch: 95, lr: 1.0e-02, train_loss: 0.5119, train_acc: 0.8198 test_loss: 0.8822, test_acc: 0.7481, best: 0.7481, time: 0:01:05
 Epoch: 96, lr: 1.0e-02, train_loss: 0.5024, train_acc: 0.8242 test_loss: 0.9857, test_acc: 0.7216, best: 0.7481, time: 0:01:04
 Epoch: 97, lr: 1.0e-02, train_loss: 0.5229, train_acc: 0.8206 test_loss: 0.9469, test_acc: 0.7392, best: 0.7481, time: 0:01:04
 Epoch: 98, lr: 1.0e-02, train_loss: 0.4918, train_acc: 0.8250 test_loss: 0.9203, test_acc: 0.7366, best: 0.7481, time: 0:01:04
 Epoch: 99, lr: 1.0e-02, train_loss: 0.5307, train_acc: 0.8146 test_loss: 0.9423, test_acc: 0.7434, best: 0.7481, time: 0:01:05
 Epoch: 100, lr: 1.0e-02, train_loss: 0.5090, train_acc: 0.8240 test_loss: 0.9510, test_acc: 0.7421, best: 0.7481, time: 0:01:05
 Epoch: 101, lr: 1.0e-02, train_loss: 0.4919, train_acc: 0.8262 test_loss: 0.9292, test_acc: 0.7466, best: 0.7481, time: 0:01:04
 Epoch: 102, lr: 1.0e-02, train_loss: 0.4830, train_acc: 0.8334 test_loss: 0.8719, test_acc: 0.7496, best: 0.7496, time: 0:01:04
 Epoch: 103, lr: 1.0e-02, train_loss: 0.4848, train_acc: 0.8240 test_loss: 0.9778, test_acc: 0.7424, best: 0.7496, time: 0:01:04
 Epoch: 104, lr: 1.0e-02, train_loss: 0.4858, train_acc: 0.8226 test_loss: 0.9956, test_acc: 0.7266, best: 0.7496, time: 0:01:04
 Epoch: 105, lr: 1.0e-02, train_loss: 0.4624, train_acc: 0.8438 test_loss: 0.9710, test_acc: 0.7366, best: 0.7496, time: 0:01:04
 Epoch: 106, lr: 1.0e-02, train_loss: 0.4732, train_acc: 0.8360 test_loss: 0.9778, test_acc: 0.7361, best: 0.7496, time: 0:01:04
 Epoch: 107, lr: 1.0e-02, train_loss: 0.4475, train_acc: 0.8474 test_loss: 0.9337, test_acc: 0.7440, best: 0.7496, time: 0:01:04
 Epoch: 108, lr: 1.0e-02, train_loss: 0.4493, train_acc: 0.8408 test_loss: 0.9980, test_acc: 0.7348, best: 0.7496, time: 0:01:04
 Epoch: 109, lr: 1.0e-02, train_loss: 0.4704, train_acc: 0.8342 test_loss: 0.9826, test_acc: 0.7425, best: 0.7496, time: 0:01:04
 Epoch: 110, lr: 1.0e-02, train_loss: 0.4593, train_acc: 0.8366 test_loss: 0.9455, test_acc: 0.7469, best: 0.7496, time: 0:01:05
 Epoch: 111, lr: 1.0e-02, train_loss: 0.4618, train_acc: 0.8356 test_loss: 0.9853, test_acc: 0.7455, best: 0.7496, time: 0:01:04
 Epoch: 112, lr: 1.0e-02, train_loss: 0.4468, train_acc: 0.8448 test_loss: 1.0588, test_acc: 0.7389, best: 0.7496, time: 0:01:04
 Epoch: 113, lr: 1.0e-02, train_loss: 0.4800, train_acc: 0.8326 test_loss: 0.9387, test_acc: 0.7426, best: 0.7496, time: 0:01:04
 Epoch: 114, lr: 1.0e-02, train_loss: 0.4453, train_acc: 0.8482 test_loss: 0.8910, test_acc: 0.7549, best: 0.7549, time: 0:01:05
 Epoch: 115, lr: 1.0e-02, train_loss: 0.4384, train_acc: 0.8466 test_loss: 0.9639, test_acc: 0.7499, best: 0.7549, time: 0:01:04
 Epoch: 116, lr: 1.0e-02, train_loss: 0.4460, train_acc: 0.8466 test_loss: 0.8996, test_acc: 0.7605, best: 0.7605, time: 0:01:05
 Epoch: 117, lr: 1.0e-02, train_loss: 0.4223, train_acc: 0.8518 test_loss: 0.8883, test_acc: 0.7556, best: 0.7605, time: 0:01:05
 Epoch: 118, lr: 1.0e-02, train_loss: 0.4273, train_acc: 0.8496 test_loss: 0.9775, test_acc: 0.7478, best: 0.7605, time: 0:01:04
 Epoch: 119, lr: 1.0e-02, train_loss: 0.4474, train_acc: 0.8444 test_loss: 0.8948, test_acc: 0.7538, best: 0.7605, time: 0:01:04
 Epoch: 120, lr: 1.0e-02, train_loss: 0.4320, train_acc: 0.8542 test_loss: 0.8734, test_acc: 0.7595, best: 0.7605, time: 0:01:04
 Epoch: 121, lr: 1.0e-02, train_loss: 0.4270, train_acc: 0.8522 test_loss: 0.9719, test_acc: 0.7516, best: 0.7605, time: 0:01:04
 Epoch: 122, lr: 1.0e-02, train_loss: 0.4156, train_acc: 0.8552 test_loss: 1.0358, test_acc: 0.7425, best: 0.7605, time: 0:01:04
 Epoch: 123, lr: 1.0e-02, train_loss: 0.4294, train_acc: 0.8546 test_loss: 0.8692, test_acc: 0.7618, best: 0.7618, time: 0:01:05
 Epoch: 124, lr: 1.0e-02, train_loss: 0.4114, train_acc: 0.8552 test_loss: 0.9933, test_acc: 0.7440, best: 0.7618, time: 0:01:04
 Epoch: 125, lr: 1.0e-02, train_loss: 0.4236, train_acc: 0.8556 test_loss: 0.9641, test_acc: 0.7482, best: 0.7618, time: 0:01:04
 Epoch: 126, lr: 1.0e-02, train_loss: 0.4005, train_acc: 0.8582 test_loss: 0.9593, test_acc: 0.7582, best: 0.7618, time: 0:01:04
 Epoch: 127, lr: 1.0e-02, train_loss: 0.3853, train_acc: 0.8672 test_loss: 0.9347, test_acc: 0.7546, best: 0.7618, time: 0:01:04
 Epoch: 128, lr: 1.0e-02, train_loss: 0.4141, train_acc: 0.8576 test_loss: 0.9670, test_acc: 0.7425, best: 0.7618, time: 0:01:04
 Epoch: 129, lr: 1.0e-02, train_loss: 0.4248, train_acc: 0.8490 test_loss: 0.9033, test_acc: 0.7541, best: 0.7618, time: 0:01:04
 Epoch: 130, lr: 1.0e-02, train_loss: 0.4001, train_acc: 0.8586 test_loss: 0.9522, test_acc: 0.7582, best: 0.7618, time: 0:01:04
 Epoch: 131, lr: 1.0e-02, train_loss: 0.3999, train_acc: 0.8626 test_loss: 0.9427, test_acc: 0.7611, best: 0.7618, time: 0:01:04
 Epoch: 132, lr: 1.0e-02, train_loss: 0.3917, train_acc: 0.8630 test_loss: 1.0203, test_acc: 0.7495, best: 0.7618, time: 0:01:04
 Epoch: 133, lr: 1.0e-02, train_loss: 0.3889, train_acc: 0.8618 test_loss: 0.9279, test_acc: 0.7528, best: 0.7618, time: 0:01:04
 Epoch: 134, lr: 1.0e-02, train_loss: 0.3950, train_acc: 0.8574 test_loss: 1.0992, test_acc: 0.7356, best: 0.7618, time: 0:01:04
 Epoch: 135, lr: 1.0e-02, train_loss: 0.3916, train_acc: 0.8656 test_loss: 1.1080, test_acc: 0.7421, best: 0.7618, time: 0:01:04
 Epoch: 136, lr: 1.0e-02, train_loss: 0.3763, train_acc: 0.8714 test_loss: 0.9534, test_acc: 0.7491, best: 0.7618, time: 0:01:04
 Epoch: 137, lr: 1.0e-02, train_loss: 0.3891, train_acc: 0.8666 test_loss: 0.9827, test_acc: 0.7481, best: 0.7618, time: 0:01:04
 Epoch: 138, lr: 1.0e-02, train_loss: 0.3835, train_acc: 0.8684 test_loss: 0.9532, test_acc: 0.7642, best: 0.7642, time: 0:01:05
 Epoch: 139, lr: 1.0e-02, train_loss: 0.3787, train_acc: 0.8628 test_loss: 1.0593, test_acc: 0.7454, best: 0.7642, time: 0:01:04
 Epoch: 140, lr: 1.0e-02, train_loss: 0.3628, train_acc: 0.8696 test_loss: 0.9094, test_acc: 0.7634, best: 0.7642, time: 0:01:04
 Epoch: 141, lr: 1.0e-02, train_loss: 0.3773, train_acc: 0.8702 test_loss: 1.0735, test_acc: 0.7324, best: 0.7642, time: 0:01:04
 Epoch: 142, lr: 1.0e-02, train_loss: 0.3785, train_acc: 0.8662 test_loss: 1.0361, test_acc: 0.7472, best: 0.7642, time: 0:01:05
 Epoch: 143, lr: 1.0e-02, train_loss: 0.3784, train_acc: 0.8712 test_loss: 1.0339, test_acc: 0.7439, best: 0.7642, time: 0:01:05
 Epoch: 144, lr: 1.0e-02, train_loss: 0.3804, train_acc: 0.8608 test_loss: 0.9839, test_acc: 0.7496, best: 0.7642, time: 0:01:04
 Epoch: 145, lr: 1.0e-02, train_loss: 0.3643, train_acc: 0.8728 test_loss: 1.0502, test_acc: 0.7471, best: 0.7642, time: 0:01:04
 Epoch: 146, lr: 1.0e-02, train_loss: 0.3685, train_acc: 0.8686 test_loss: 0.9841, test_acc: 0.7505, best: 0.7642, time: 0:01:05
 Epoch: 147, lr: 1.0e-02, train_loss: 0.3534, train_acc: 0.8774 test_loss: 0.9048, test_acc: 0.7595, best: 0.7642, time: 0:01:05
 Epoch: 148, lr: 1.0e-02, train_loss: 0.3585, train_acc: 0.8746 test_loss: 0.9796, test_acc: 0.7568, best: 0.7642, time: 0:01:04
 Epoch: 149, lr: 1.0e-02, train_loss: 0.3551, train_acc: 0.8750 test_loss: 1.0019, test_acc: 0.7564, best: 0.7642, time: 0:01:04
 Epoch: 150, lr: 1.0e-02, train_loss: 0.3586, train_acc: 0.8778 test_loss: 0.9386, test_acc: 0.7585, best: 0.7642, time: 0:01:04
 Epoch: 151, lr: 1.0e-02, train_loss: 0.3615, train_acc: 0.8770 test_loss: 0.9203, test_acc: 0.7598, best: 0.7642, time: 0:01:04
 Epoch: 152, lr: 1.0e-02, train_loss: 0.3488, train_acc: 0.8796 test_loss: 1.1194, test_acc: 0.7459, best: 0.7642, time: 0:01:04
 Epoch: 153, lr: 1.0e-02, train_loss: 0.3562, train_acc: 0.8734 test_loss: 0.9984, test_acc: 0.7590, best: 0.7642, time: 0:01:04
 Epoch: 154, lr: 1.0e-02, train_loss: 0.3749, train_acc: 0.8728 test_loss: 1.0258, test_acc: 0.7509, best: 0.7642, time: 0:01:04
 Epoch: 155, lr: 1.0e-02, train_loss: 0.3479, train_acc: 0.8784 test_loss: 0.9513, test_acc: 0.7580, best: 0.7642, time: 0:01:04
 Epoch: 156, lr: 1.0e-02, train_loss: 0.3598, train_acc: 0.8734 test_loss: 1.0059, test_acc: 0.7611, best: 0.7642, time: 0:01:04
 Epoch: 157, lr: 1.0e-02, train_loss: 0.3427, train_acc: 0.8762 test_loss: 0.9963, test_acc: 0.7602, best: 0.7642, time: 0:01:04
 Epoch: 158, lr: 1.0e-02, train_loss: 0.3404, train_acc: 0.8826 test_loss: 1.0009, test_acc: 0.7621, best: 0.7642, time: 0:01:04
 Epoch: 159, lr: 1.0e-02, train_loss: 0.3388, train_acc: 0.8832 test_loss: 1.0241, test_acc: 0.7478, best: 0.7642, time: 0:01:04
 Epoch: 160, lr: 1.0e-02, train_loss: 0.3382, train_acc: 0.8814 test_loss: 1.1018, test_acc: 0.7479, best: 0.7642, time: 0:01:04
 Epoch: 161, lr: 1.0e-02, train_loss: 0.3439, train_acc: 0.8818 test_loss: 1.0770, test_acc: 0.7592, best: 0.7642, time: 0:01:04
 Epoch: 162, lr: 1.0e-02, train_loss: 0.3468, train_acc: 0.8790 test_loss: 0.9087, test_acc: 0.7682, best: 0.7682, time: 0:01:05
 Epoch: 163, lr: 1.0e-02, train_loss: 0.3175, train_acc: 0.8922 test_loss: 1.1356, test_acc: 0.7569, best: 0.7682, time: 0:01:05
 Epoch: 164, lr: 1.0e-02, train_loss: 0.3294, train_acc: 0.8866 test_loss: 1.0169, test_acc: 0.7578, best: 0.7682, time: 0:01:04
 Epoch: 165, lr: 1.0e-02, train_loss: 0.3071, train_acc: 0.8948 test_loss: 1.0218, test_acc: 0.7668, best: 0.7682, time: 0:01:04
 Epoch: 166, lr: 1.0e-02, train_loss: 0.3303, train_acc: 0.8876 test_loss: 1.0535, test_acc: 0.7492, best: 0.7682, time: 0:01:05
 Epoch: 167, lr: 1.0e-02, train_loss: 0.3392, train_acc: 0.8826 test_loss: 0.9625, test_acc: 0.7632, best: 0.7682, time: 0:01:04
 Epoch: 168, lr: 1.0e-02, train_loss: 0.3512, train_acc: 0.8808 test_loss: 1.1445, test_acc: 0.7430, best: 0.7682, time: 0:01:04
 Epoch: 169, lr: 1.0e-02, train_loss: 0.3188, train_acc: 0.8914 test_loss: 0.9727, test_acc: 0.7629, best: 0.7682, time: 0:01:05
 Epoch: 170, lr: 1.0e-02, train_loss: 0.3210, train_acc: 0.8846 test_loss: 1.1018, test_acc: 0.7496, best: 0.7682, time: 0:01:04
 Epoch: 171, lr: 1.0e-02, train_loss: 0.3385, train_acc: 0.8814 test_loss: 1.0046, test_acc: 0.7596, best: 0.7682, time: 0:01:04
 Epoch: 172, lr: 1.0e-02, train_loss: 0.3221, train_acc: 0.8904 test_loss: 0.9637, test_acc: 0.7610, best: 0.7682, time: 0:01:04
 Epoch: 173, lr: 1.0e-02, train_loss: 0.3317, train_acc: 0.8816 test_loss: 1.0790, test_acc: 0.7518, best: 0.7682, time: 0:01:04
 Epoch: 174, lr: 1.0e-02, train_loss: 0.3261, train_acc: 0.8870 test_loss: 1.0066, test_acc: 0.7634, best: 0.7682, time: 0:01:04
 Epoch: 175, lr: 1.0e-02, train_loss: 0.3256, train_acc: 0.8860 test_loss: 0.9609, test_acc: 0.7622, best: 0.7682, time: 0:01:04
 Epoch: 176, lr: 1.0e-02, train_loss: 0.3268, train_acc: 0.8882 test_loss: 1.1337, test_acc: 0.7385, best: 0.7682, time: 0:01:04
 Epoch: 177, lr: 1.0e-02, train_loss: 0.3189, train_acc: 0.8908 test_loss: 1.0544, test_acc: 0.7609, best: 0.7682, time: 0:01:04
 Epoch: 178, lr: 1.0e-02, train_loss: 0.3041, train_acc: 0.8940 test_loss: 1.0932, test_acc: 0.7546, best: 0.7682, time: 0:01:04
 Epoch: 179, lr: 1.0e-02, train_loss: 0.3247, train_acc: 0.8886 test_loss: 0.9683, test_acc: 0.7711, best: 0.7711, time: 0:01:05
 Epoch: 180, lr: 2.0e-03, train_loss: 0.2697, train_acc: 0.9116 test_loss: 0.9178, test_acc: 0.7855, best: 0.7855, time: 0:01:05
 Epoch: 181, lr: 2.0e-03, train_loss: 0.2432, train_acc: 0.9168 test_loss: 0.9275, test_acc: 0.7865, best: 0.7865, time: 0:01:04
 Epoch: 182, lr: 2.0e-03, train_loss: 0.2525, train_acc: 0.9132 test_loss: 0.9012, test_acc: 0.7859, best: 0.7865, time: 0:01:03
 Epoch: 183, lr: 2.0e-03, train_loss: 0.2434, train_acc: 0.9162 test_loss: 0.9212, test_acc: 0.7867, best: 0.7867, time: 0:01:04
 Epoch: 184, lr: 2.0e-03, train_loss: 0.2433, train_acc: 0.9146 test_loss: 0.8933, test_acc: 0.7873, best: 0.7873, time: 0:01:03
 Epoch: 185, lr: 2.0e-03, train_loss: 0.2221, train_acc: 0.9242 test_loss: 0.9092, test_acc: 0.7856, best: 0.7873, time: 0:01:03
 Epoch: 186, lr: 2.0e-03, train_loss: 0.2376, train_acc: 0.9184 test_loss: 0.9193, test_acc: 0.7792, best: 0.7873, time: 0:01:03
 Epoch: 187, lr: 2.0e-03, train_loss: 0.2278, train_acc: 0.9228 test_loss: 0.9262, test_acc: 0.7824, best: 0.7873, time: 0:01:03
 Epoch: 188, lr: 2.0e-03, train_loss: 0.2208, train_acc: 0.9216 test_loss: 0.9368, test_acc: 0.7820, best: 0.7873, time: 0:01:03
 Epoch: 189, lr: 2.0e-03, train_loss: 0.2134, train_acc: 0.9270 test_loss: 0.9210, test_acc: 0.7860, best: 0.7873, time: 0:01:03
 Epoch: 190, lr: 2.0e-03, train_loss: 0.2067, train_acc: 0.9276 test_loss: 0.9235, test_acc: 0.7837, best: 0.7873, time: 0:01:03
 Epoch: 191, lr: 2.0e-03, train_loss: 0.2282, train_acc: 0.9224 test_loss: 0.9148, test_acc: 0.7905, best: 0.7905, time: 0:01:04
 Epoch: 192, lr: 2.0e-03, train_loss: 0.2117, train_acc: 0.9312 test_loss: 0.9283, test_acc: 0.7859, best: 0.7905, time: 0:01:03
 Epoch: 193, lr: 2.0e-03, train_loss: 0.2165, train_acc: 0.9286 test_loss: 0.9168, test_acc: 0.7854, best: 0.7905, time: 0:01:01
 Epoch: 194, lr: 2.0e-03, train_loss: 0.2215, train_acc: 0.9258 test_loss: 0.9130, test_acc: 0.7904, best: 0.7905, time: 0:01:01
 Epoch: 195, lr: 2.0e-03, train_loss: 0.2190, train_acc: 0.9242 test_loss: 0.9526, test_acc: 0.7786, best: 0.7905, time: 0:01:01
 Epoch: 196, lr: 2.0e-03, train_loss: 0.2177, train_acc: 0.9254 test_loss: 0.9194, test_acc: 0.7877, best: 0.7905, time: 0:01:01
 Epoch: 197, lr: 2.0e-03, train_loss: 0.2120, train_acc: 0.9266 test_loss: 0.9489, test_acc: 0.7836, best: 0.7905, time: 0:01:01
 Epoch: 198, lr: 2.0e-03, train_loss: 0.2125, train_acc: 0.9304 test_loss: 0.9379, test_acc: 0.7864, best: 0.7905, time: 0:01:01
 Epoch: 199, lr: 2.0e-03, train_loss: 0.2017, train_acc: 0.9324 test_loss: 0.9308, test_acc: 0.7826, best: 0.7905, time: 0:01:01
 Epoch: 200, lr: 2.0e-03, train_loss: 0.2199, train_acc: 0.9232 test_loss: 0.9729, test_acc: 0.7799, best: 0.7905, time: 0:01:01
 Epoch: 201, lr: 2.0e-03, train_loss: 0.2007, train_acc: 0.9338 test_loss: 0.9260, test_acc: 0.7847, best: 0.7905, time: 0:01:01
 Epoch: 202, lr: 2.0e-03, train_loss: 0.2123, train_acc: 0.9288 test_loss: 0.9787, test_acc: 0.7780, best: 0.7905, time: 0:01:01
 Epoch: 203, lr: 2.0e-03, train_loss: 0.2152, train_acc: 0.9304 test_loss: 0.9771, test_acc: 0.7764, best: 0.7905, time: 0:01:01
 Epoch: 204, lr: 2.0e-03, train_loss: 0.2106, train_acc: 0.9290 test_loss: 0.9278, test_acc: 0.7833, best: 0.7905, time: 0:01:01
 Epoch: 205, lr: 2.0e-03, train_loss: 0.2107, train_acc: 0.9266 test_loss: 0.9711, test_acc: 0.7784, best: 0.7905, time: 0:01:01
 Epoch: 206, lr: 2.0e-03, train_loss: 0.2059, train_acc: 0.9276 test_loss: 0.9363, test_acc: 0.7839, best: 0.7905, time: 0:01:01
 Epoch: 207, lr: 2.0e-03, train_loss: 0.1951, train_acc: 0.9332 test_loss: 0.9397, test_acc: 0.7833, best: 0.7905, time: 0:01:01
 Epoch: 208, lr: 2.0e-03, train_loss: 0.2046, train_acc: 0.9298 test_loss: 0.9384, test_acc: 0.7849, best: 0.7905, time: 0:01:00
 Epoch: 209, lr: 2.0e-03, train_loss: 0.2031, train_acc: 0.9318 test_loss: 0.9650, test_acc: 0.7789, best: 0.7905, time: 0:01:00
 Epoch: 210, lr: 2.0e-03, train_loss: 0.2010, train_acc: 0.9314 test_loss: 0.9520, test_acc: 0.7809, best: 0.7905, time: 0:01:00
 Epoch: 211, lr: 2.0e-03, train_loss: 0.2154, train_acc: 0.9244 test_loss: 0.9553, test_acc: 0.7827, best: 0.7905, time: 0:01:01
 Epoch: 212, lr: 2.0e-03, train_loss: 0.1943, train_acc: 0.9344 test_loss: 0.9198, test_acc: 0.7897, best: 0.7905, time: 0:01:01
 Epoch: 213, lr: 2.0e-03, train_loss: 0.1884, train_acc: 0.9382 test_loss: 0.9301, test_acc: 0.7890, best: 0.7905, time: 0:01:01
 Epoch: 214, lr: 2.0e-03, train_loss: 0.1960, train_acc: 0.9306 test_loss: 0.9634, test_acc: 0.7809, best: 0.7905, time: 0:01:01
 Epoch: 215, lr: 2.0e-03, train_loss: 0.1804, train_acc: 0.9370 test_loss: 0.9581, test_acc: 0.7835, best: 0.7905, time: 0:01:01
 Epoch: 216, lr: 2.0e-03, train_loss: 0.2106, train_acc: 0.9288 test_loss: 0.9643, test_acc: 0.7821, best: 0.7905, time: 0:01:01
 Epoch: 217, lr: 2.0e-03, train_loss: 0.1984, train_acc: 0.9342 test_loss: 0.9454, test_acc: 0.7809, best: 0.7905, time: 0:01:01
 Epoch: 218, lr: 2.0e-03, train_loss: 0.2049, train_acc: 0.9348 test_loss: 0.9713, test_acc: 0.7796, best: 0.7905, time: 0:01:01
 Epoch: 219, lr: 2.0e-03, train_loss: 0.2049, train_acc: 0.9266 test_loss: 0.9609, test_acc: 0.7817, best: 0.7905, time: 0:01:01
 Epoch: 220, lr: 2.0e-03, train_loss: 0.2027, train_acc: 0.9336 test_loss: 0.9727, test_acc: 0.7802, best: 0.7905, time: 0:01:01
 Epoch: 221, lr: 2.0e-03, train_loss: 0.1705, train_acc: 0.9438 test_loss: 0.9469, test_acc: 0.7799, best: 0.7905, time: 0:01:01
 Epoch: 222, lr: 2.0e-03, train_loss: 0.1796, train_acc: 0.9406 test_loss: 0.9937, test_acc: 0.7798, best: 0.7905, time: 0:01:01
 Epoch: 223, lr: 2.0e-03, train_loss: 0.2043, train_acc: 0.9310 test_loss: 0.9819, test_acc: 0.7814, best: 0.7905, time: 0:01:01
 Epoch: 224, lr: 2.0e-03, train_loss: 0.2012, train_acc: 0.9312 test_loss: 0.9511, test_acc: 0.7839, best: 0.7905, time: 0:01:01
 Epoch: 225, lr: 2.0e-03, train_loss: 0.1966, train_acc: 0.9316 test_loss: 0.9523, test_acc: 0.7871, best: 0.7905, time: 0:01:01
 Epoch: 226, lr: 2.0e-03, train_loss: 0.1991, train_acc: 0.9338 test_loss: 0.9551, test_acc: 0.7871, best: 0.7905, time: 0:01:01
 Epoch: 227, lr: 2.0e-03, train_loss: 0.1902, train_acc: 0.9350 test_loss: 0.9627, test_acc: 0.7855, best: 0.7905, time: 0:01:01
 Epoch: 228, lr: 2.0e-03, train_loss: 0.1889, train_acc: 0.9342 test_loss: 0.9697, test_acc: 0.7820, best: 0.7905, time: 0:01:01
 Epoch: 229, lr: 2.0e-03, train_loss: 0.1906, train_acc: 0.9340 test_loss: 0.9470, test_acc: 0.7885, best: 0.7905, time: 0:01:01
 Epoch: 230, lr: 2.0e-03, train_loss: 0.1964, train_acc: 0.9320 test_loss: 0.9770, test_acc: 0.7835, best: 0.7905, time: 0:01:01
 Epoch: 231, lr: 2.0e-03, train_loss: 0.1896, train_acc: 0.9348 test_loss: 0.9531, test_acc: 0.7883, best: 0.7905, time: 0:01:01
 Epoch: 232, lr: 2.0e-03, train_loss: 0.1898, train_acc: 0.9338 test_loss: 0.9859, test_acc: 0.7806, best: 0.7905, time: 0:01:01
 Epoch: 233, lr: 2.0e-03, train_loss: 0.1667, train_acc: 0.9414 test_loss: 0.9816, test_acc: 0.7846, best: 0.7905, time: 0:01:01
 Epoch: 234, lr: 2.0e-03, train_loss: 0.1960, train_acc: 0.9348 test_loss: 0.9740, test_acc: 0.7810, best: 0.7905, time: 0:01:01
 Epoch: 235, lr: 2.0e-03, train_loss: 0.1893, train_acc: 0.9360 test_loss: 0.9540, test_acc: 0.7834, best: 0.7905, time: 0:01:01
 Epoch: 236, lr: 2.0e-03, train_loss: 0.1772, train_acc: 0.9404 test_loss: 0.9639, test_acc: 0.7846, best: 0.7905, time: 0:01:01
 Epoch: 237, lr: 2.0e-03, train_loss: 0.1987, train_acc: 0.9358 test_loss: 0.9613, test_acc: 0.7847, best: 0.7905, time: 0:01:01
 Epoch: 238, lr: 2.0e-03, train_loss: 0.1944, train_acc: 0.9310 test_loss: 0.9582, test_acc: 0.7877, best: 0.7905, time: 0:01:01
 Epoch: 239, lr: 2.0e-03, train_loss: 0.1909, train_acc: 0.9352 test_loss: 1.0072, test_acc: 0.7795, best: 0.7905, time: 0:01:01
 Epoch: 240, lr: 4.0e-04, train_loss: 0.1795, train_acc: 0.9328 test_loss: 0.9625, test_acc: 0.7845, best: 0.7905, time: 0:01:01
 Epoch: 241, lr: 4.0e-04, train_loss: 0.1894, train_acc: 0.9364 test_loss: 0.9557, test_acc: 0.7831, best: 0.7905, time: 0:01:01
 Epoch: 242, lr: 4.0e-04, train_loss: 0.1940, train_acc: 0.9332 test_loss: 0.9306, test_acc: 0.7857, best: 0.7905, time: 0:01:01
 Epoch: 243, lr: 4.0e-04, train_loss: 0.1896, train_acc: 0.9374 test_loss: 0.9275, test_acc: 0.7876, best: 0.7905, time: 0:01:01
 Epoch: 244, lr: 4.0e-04, train_loss: 0.1802, train_acc: 0.9380 test_loss: 0.9495, test_acc: 0.7849, best: 0.7905, time: 0:01:01
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1827, train_acc: 0.9368 test_loss: 0.9215, test_acc: 0.7859, best: 0.7905, time: 0:01:01
 Epoch: 246, lr: 4.0e-04, train_loss: 0.1764, train_acc: 0.9420 test_loss: 0.9374, test_acc: 0.7865, best: 0.7905, time: 0:01:01
 Epoch: 247, lr: 4.0e-04, train_loss: 0.1820, train_acc: 0.9400 test_loss: 0.9356, test_acc: 0.7846, best: 0.7905, time: 0:01:01
 Epoch: 248, lr: 4.0e-04, train_loss: 0.1881, train_acc: 0.9380 test_loss: 0.9366, test_acc: 0.7875, best: 0.7905, time: 0:01:01
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1789, train_acc: 0.9378 test_loss: 0.9379, test_acc: 0.7856, best: 0.7905, time: 0:01:01
 Epoch: 250, lr: 4.0e-04, train_loss: 0.1622, train_acc: 0.9472 test_loss: 0.9419, test_acc: 0.7844, best: 0.7905, time: 0:01:01
 Epoch: 251, lr: 4.0e-04, train_loss: 0.1674, train_acc: 0.9442 test_loss: 0.9538, test_acc: 0.7841, best: 0.7905, time: 0:01:01
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1736, train_acc: 0.9388 test_loss: 0.9456, test_acc: 0.7850, best: 0.7905, time: 0:01:01
 Epoch: 253, lr: 4.0e-04, train_loss: 0.1753, train_acc: 0.9458 test_loss: 0.9526, test_acc: 0.7861, best: 0.7905, time: 0:01:01
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1728, train_acc: 0.9434 test_loss: 0.9324, test_acc: 0.7849, best: 0.7905, time: 0:01:01
 Epoch: 255, lr: 4.0e-04, train_loss: 0.1847, train_acc: 0.9406 test_loss: 0.9555, test_acc: 0.7844, best: 0.7905, time: 0:01:01
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1810, train_acc: 0.9378 test_loss: 0.9431, test_acc: 0.7869, best: 0.7905, time: 0:01:01
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1751, train_acc: 0.9394 test_loss: 0.9324, test_acc: 0.7860, best: 0.7905, time: 0:01:01
 Epoch: 258, lr: 4.0e-04, train_loss: 0.1809, train_acc: 0.9376 test_loss: 0.9358, test_acc: 0.7846, best: 0.7905, time: 0:01:01
 Epoch: 259, lr: 4.0e-04, train_loss: 0.1707, train_acc: 0.9414 test_loss: 0.9328, test_acc: 0.7861, best: 0.7905, time: 0:01:01
 Epoch: 260, lr: 4.0e-04, train_loss: 0.1691, train_acc: 0.9412 test_loss: 0.9192, test_acc: 0.7879, best: 0.7905, time: 0:01:01
 Epoch: 261, lr: 4.0e-04, train_loss: 0.1766, train_acc: 0.9366 test_loss: 0.9177, test_acc: 0.7869, best: 0.7905, time: 0:01:01
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1676, train_acc: 0.9412 test_loss: 0.9447, test_acc: 0.7846, best: 0.7905, time: 0:01:01
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1705, train_acc: 0.9434 test_loss: 0.9237, test_acc: 0.7897, best: 0.7905, time: 0:01:01
 Epoch: 264, lr: 4.0e-04, train_loss: 0.1856, train_acc: 0.9376 test_loss: 0.9288, test_acc: 0.7900, best: 0.7905, time: 0:01:01
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1766, train_acc: 0.9382 test_loss: 0.9343, test_acc: 0.7861, best: 0.7905, time: 0:01:00
 Epoch: 266, lr: 4.0e-04, train_loss: 0.1693, train_acc: 0.9424 test_loss: 0.9160, test_acc: 0.7895, best: 0.7905, time: 0:01:00
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1799, train_acc: 0.9368 test_loss: 0.9436, test_acc: 0.7895, best: 0.7905, time: 0:01:00
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1547, train_acc: 0.9450 test_loss: 0.9132, test_acc: 0.7885, best: 0.7905, time: 0:01:00
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1717, train_acc: 0.9426 test_loss: 0.9343, test_acc: 0.7900, best: 0.7905, time: 0:01:00
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1724, train_acc: 0.9422 test_loss: 0.9189, test_acc: 0.7887, best: 0.7905, time: 0:01:00
 Epoch: 271, lr: 8.0e-05, train_loss: 0.1751, train_acc: 0.9414 test_loss: 0.9359, test_acc: 0.7900, best: 0.7905, time: 0:01:00
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1700, train_acc: 0.9432 test_loss: 0.9268, test_acc: 0.7917, best: 0.7917, time: 0:01:00
 Epoch: 273, lr: 8.0e-05, train_loss: 0.1617, train_acc: 0.9422 test_loss: 0.9256, test_acc: 0.7877, best: 0.7917, time: 0:01:00
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1694, train_acc: 0.9418 test_loss: 0.9227, test_acc: 0.7886, best: 0.7917, time: 0:01:00
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1734, train_acc: 0.9402 test_loss: 0.9098, test_acc: 0.7883, best: 0.7917, time: 0:01:00
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1757, train_acc: 0.9394 test_loss: 0.9486, test_acc: 0.7875, best: 0.7917, time: 0:01:00
 Epoch: 277, lr: 8.0e-05, train_loss: 0.1774, train_acc: 0.9388 test_loss: 0.9392, test_acc: 0.7896, best: 0.7917, time: 0:01:00
 Epoch: 278, lr: 8.0e-05, train_loss: 0.1770, train_acc: 0.9374 test_loss: 0.9198, test_acc: 0.7899, best: 0.7917, time: 0:01:00
 Epoch: 279, lr: 8.0e-05, train_loss: 0.1852, train_acc: 0.9364 test_loss: 0.9110, test_acc: 0.7900, best: 0.7917, time: 0:01:00
 Epoch: 280, lr: 8.0e-05, train_loss: 0.1659, train_acc: 0.9438 test_loss: 0.9495, test_acc: 0.7856, best: 0.7917, time: 0:01:00
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1646, train_acc: 0.9438 test_loss: 0.9605, test_acc: 0.7849, best: 0.7917, time: 0:01:00
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1757, train_acc: 0.9356 test_loss: 0.9261, test_acc: 0.7876, best: 0.7917, time: 0:01:00
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1706, train_acc: 0.9426 test_loss: 0.9265, test_acc: 0.7877, best: 0.7917, time: 0:01:00
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1656, train_acc: 0.9408 test_loss: 0.9148, test_acc: 0.7903, best: 0.7917, time: 0:01:00
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1791, train_acc: 0.9382 test_loss: 0.9099, test_acc: 0.7901, best: 0.7917, time: 0:01:00
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1762, train_acc: 0.9386 test_loss: 0.9332, test_acc: 0.7870, best: 0.7917, time: 0:01:00
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1581, train_acc: 0.9460 test_loss: 0.9506, test_acc: 0.7876, best: 0.7917, time: 0:01:00
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1712, train_acc: 0.9408 test_loss: 0.9352, test_acc: 0.7876, best: 0.7917, time: 0:01:00
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1689, train_acc: 0.9416 test_loss: 0.9291, test_acc: 0.7890, best: 0.7917, time: 0:01:00
 Epoch: 290, lr: 8.0e-05, train_loss: 0.1717, train_acc: 0.9422 test_loss: 0.9171, test_acc: 0.7896, best: 0.7917, time: 0:01:00
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1777, train_acc: 0.9380 test_loss: 0.9200, test_acc: 0.7880, best: 0.7917, time: 0:01:00
 Epoch: 292, lr: 8.0e-05, train_loss: 0.1512, train_acc: 0.9498 test_loss: 0.9108, test_acc: 0.7916, best: 0.7917, time: 0:01:00
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1650, train_acc: 0.9444 test_loss: 0.9340, test_acc: 0.7870, best: 0.7917, time: 0:01:00
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1704, train_acc: 0.9434 test_loss: 0.9148, test_acc: 0.7900, best: 0.7917, time: 0:01:00
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1697, train_acc: 0.9418 test_loss: 0.9113, test_acc: 0.7893, best: 0.7917, time: 0:01:00
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1653, train_acc: 0.9430 test_loss: 0.9109, test_acc: 0.7901, best: 0.7917, time: 0:01:00
 Epoch: 297, lr: 8.0e-05, train_loss: 0.1652, train_acc: 0.9442 test_loss: 0.9377, test_acc: 0.7876, best: 0.7917, time: 0:01:00
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1583, train_acc: 0.9496 test_loss: 0.9341, test_acc: 0.7875, best: 0.7917, time: 0:01:00
 Epoch: 299, lr: 8.0e-05, train_loss: 0.1744, train_acc: 0.9394 test_loss: 0.9351, test_acc: 0.7871, best: 0.7917, time: 0:01:00
 Highest accuracy: 0.7917