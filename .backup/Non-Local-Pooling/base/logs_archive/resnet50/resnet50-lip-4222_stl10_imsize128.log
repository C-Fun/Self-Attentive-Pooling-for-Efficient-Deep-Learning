
 Run on time: 2022-06-29 22:09:51.797916

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50_LIP_4222
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): NetworkByName(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): LIP_BASE(
              (logit): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
            )
          )
          (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): LIP_BASE(
              (logit): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): LIP_BASE(
              (logit): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): LIP_BASE(
              (logit): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.6381, train_acc: 0.1294 test_loss: 5.0645, test_acc: 0.1891, best: 0.1891, time: 0:01:12
 Epoch: 2, lr: 1.0e-02, train_loss: 2.3318, train_acc: 0.1752 test_loss: 3.7053, test_acc: 0.2501, best: 0.2501, time: 0:01:10
 Epoch: 3, lr: 1.0e-02, train_loss: 2.1925, train_acc: 0.2010 test_loss: 2.3544, test_acc: 0.2529, best: 0.2529, time: 0:01:11
 Epoch: 4, lr: 1.0e-02, train_loss: 2.1292, train_acc: 0.2220 test_loss: 4.6319, test_acc: 0.2497, best: 0.2529, time: 0:01:09
 Epoch: 5, lr: 1.0e-02, train_loss: 2.0860, train_acc: 0.2340 test_loss: 3.0705, test_acc: 0.3105, best: 0.3105, time: 0:01:10
 Epoch: 6, lr: 1.0e-02, train_loss: 2.0220, train_acc: 0.2444 test_loss: 2.4828, test_acc: 0.3076, best: 0.3105, time: 0:01:09
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9858, train_acc: 0.2634 test_loss: 2.1448, test_acc: 0.2880, best: 0.3105, time: 0:01:09
 Epoch: 8, lr: 1.0e-02, train_loss: 1.9943, train_acc: 0.2564 test_loss: 2.3564, test_acc: 0.3078, best: 0.3105, time: 0:01:09
 Epoch: 9, lr: 1.0e-02, train_loss: 1.9191, train_acc: 0.2832 test_loss: 3.7789, test_acc: 0.3724, best: 0.3724, time: 0:01:10
 Epoch: 10, lr: 1.0e-02, train_loss: 1.8842, train_acc: 0.2902 test_loss: 2.3282, test_acc: 0.3660, best: 0.3724, time: 0:01:09
 Epoch: 11, lr: 1.0e-02, train_loss: 1.8422, train_acc: 0.3056 test_loss: 2.5557, test_acc: 0.3695, best: 0.3724, time: 0:01:09
 Epoch: 12, lr: 1.0e-02, train_loss: 1.8099, train_acc: 0.3158 test_loss: 2.9860, test_acc: 0.3705, best: 0.3724, time: 0:01:09
 Epoch: 13, lr: 1.0e-02, train_loss: 1.7865, train_acc: 0.3288 test_loss: 2.4313, test_acc: 0.3921, best: 0.3921, time: 0:01:10
 Epoch: 14, lr: 1.0e-02, train_loss: 1.7890, train_acc: 0.3362 test_loss: 5.1238, test_acc: 0.3762, best: 0.3921, time: 0:01:09
 Epoch: 15, lr: 1.0e-02, train_loss: 1.7517, train_acc: 0.3362 test_loss: 2.2208, test_acc: 0.3990, best: 0.3990, time: 0:01:10
 Epoch: 16, lr: 1.0e-02, train_loss: 1.7415, train_acc: 0.3454 test_loss: 1.8097, test_acc: 0.4012, best: 0.4012, time: 0:01:10
 Epoch: 17, lr: 1.0e-02, train_loss: 1.7096, train_acc: 0.3578 test_loss: 1.6165, test_acc: 0.4136, best: 0.4136, time: 0:01:10
 Epoch: 18, lr: 1.0e-02, train_loss: 1.7027, train_acc: 0.3680 test_loss: 2.6474, test_acc: 0.3986, best: 0.4136, time: 0:01:09
 Epoch: 19, lr: 1.0e-02, train_loss: 1.6833, train_acc: 0.3822 test_loss: 3.4641, test_acc: 0.4156, best: 0.4156, time: 0:01:10
 Epoch: 20, lr: 1.0e-02, train_loss: 1.6680, train_acc: 0.3728 test_loss: 1.9300, test_acc: 0.4288, best: 0.4288, time: 0:01:11
 Epoch: 21, lr: 1.0e-02, train_loss: 1.6590, train_acc: 0.3710 test_loss: 2.3289, test_acc: 0.4489, best: 0.4489, time: 0:01:10
 Epoch: 22, lr: 1.0e-02, train_loss: 1.6195, train_acc: 0.3978 test_loss: 2.7241, test_acc: 0.4275, best: 0.4489, time: 0:01:09
 Epoch: 23, lr: 1.0e-02, train_loss: 1.6147, train_acc: 0.4072 test_loss: 1.8393, test_acc: 0.4561, best: 0.4561, time: 0:01:11
 Epoch: 24, lr: 1.0e-02, train_loss: 1.5755, train_acc: 0.4190 test_loss: 2.3418, test_acc: 0.4699, best: 0.4699, time: 0:01:10
 Epoch: 25, lr: 1.0e-02, train_loss: 1.5931, train_acc: 0.4086 test_loss: 2.1026, test_acc: 0.4669, best: 0.4699, time: 0:01:09
 Epoch: 26, lr: 1.0e-02, train_loss: 1.5480, train_acc: 0.4320 test_loss: 1.9789, test_acc: 0.4861, best: 0.4861, time: 0:01:10
 Epoch: 27, lr: 1.0e-02, train_loss: 1.5380, train_acc: 0.4340 test_loss: 1.8363, test_acc: 0.4878, best: 0.4878, time: 0:01:10
 Epoch: 28, lr: 1.0e-02, train_loss: 1.5291, train_acc: 0.4336 test_loss: 2.4437, test_acc: 0.4861, best: 0.4878, time: 0:01:09
 Epoch: 29, lr: 1.0e-02, train_loss: 1.4824, train_acc: 0.4442 test_loss: 5.0473, test_acc: 0.4522, best: 0.4878, time: 0:01:09
 Epoch: 30, lr: 1.0e-02, train_loss: 1.4691, train_acc: 0.4656 test_loss: 2.0841, test_acc: 0.4880, best: 0.4880, time: 0:01:10
 Epoch: 31, lr: 1.0e-02, train_loss: 1.4637, train_acc: 0.4620 test_loss: 1.4441, test_acc: 0.5222, best: 0.5222, time: 0:01:10
 Epoch: 32, lr: 1.0e-02, train_loss: 1.4602, train_acc: 0.4538 test_loss: 7.0086, test_acc: 0.4644, best: 0.5222, time: 0:01:09
 Epoch: 33, lr: 1.0e-02, train_loss: 1.4280, train_acc: 0.4764 test_loss: 2.0308, test_acc: 0.5226, best: 0.5226, time: 0:01:10
 Epoch: 34, lr: 1.0e-02, train_loss: 1.4136, train_acc: 0.4738 test_loss: 2.5205, test_acc: 0.5108, best: 0.5226, time: 0:01:09
 Epoch: 35, lr: 1.0e-02, train_loss: 1.4091, train_acc: 0.4814 test_loss: 1.7039, test_acc: 0.5325, best: 0.5325, time: 0:01:10
 Epoch: 36, lr: 1.0e-02, train_loss: 1.3600, train_acc: 0.5018 test_loss: 1.7929, test_acc: 0.5275, best: 0.5325, time: 0:01:09
 Epoch: 37, lr: 1.0e-02, train_loss: 1.3676, train_acc: 0.4956 test_loss: 1.8764, test_acc: 0.4853, best: 0.5325, time: 0:01:09
 Epoch: 38, lr: 1.0e-02, train_loss: 1.3719, train_acc: 0.4920 test_loss: 1.7407, test_acc: 0.5494, best: 0.5494, time: 0:01:09
 Epoch: 39, lr: 1.0e-02, train_loss: 1.3472, train_acc: 0.5072 test_loss: 1.5775, test_acc: 0.5476, best: 0.5494, time: 0:01:09
 Epoch: 40, lr: 1.0e-02, train_loss: 1.3181, train_acc: 0.5220 test_loss: 1.6405, test_acc: 0.5339, best: 0.5494, time: 0:01:09
 Epoch: 41, lr: 1.0e-02, train_loss: 1.3197, train_acc: 0.5104 test_loss: 1.7945, test_acc: 0.5764, best: 0.5764, time: 0:01:10
 Epoch: 42, lr: 1.0e-02, train_loss: 1.3235, train_acc: 0.5126 test_loss: 2.3595, test_acc: 0.5353, best: 0.5764, time: 0:01:09
 Epoch: 43, lr: 1.0e-02, train_loss: 1.2926, train_acc: 0.5290 test_loss: 1.5388, test_acc: 0.5787, best: 0.5787, time: 0:01:10
 Epoch: 44, lr: 1.0e-02, train_loss: 1.2780, train_acc: 0.5300 test_loss: 1.7601, test_acc: 0.5644, best: 0.5787, time: 0:01:09
 Epoch: 45, lr: 1.0e-02, train_loss: 1.2392, train_acc: 0.5446 test_loss: 6.5383, test_acc: 0.5319, best: 0.5787, time: 0:01:09
 Epoch: 46, lr: 1.0e-02, train_loss: 1.2644, train_acc: 0.5364 test_loss: 4.4046, test_acc: 0.5445, best: 0.5787, time: 0:01:09
 Epoch: 47, lr: 1.0e-02, train_loss: 1.2505, train_acc: 0.5412 test_loss: 3.2428, test_acc: 0.5741, best: 0.5787, time: 0:01:09
 Epoch: 48, lr: 1.0e-02, train_loss: 1.2295, train_acc: 0.5450 test_loss: 1.4727, test_acc: 0.5610, best: 0.5787, time: 0:01:09
 Epoch: 49, lr: 1.0e-02, train_loss: 1.2367, train_acc: 0.5528 test_loss: 1.7731, test_acc: 0.5769, best: 0.5787, time: 0:01:09
 Epoch: 50, lr: 1.0e-02, train_loss: 1.2383, train_acc: 0.5384 test_loss: 2.4771, test_acc: 0.5603, best: 0.5787, time: 0:01:09
 Epoch: 51, lr: 1.0e-02, train_loss: 1.1893, train_acc: 0.5674 test_loss: 3.3256, test_acc: 0.5567, best: 0.5787, time: 0:01:08
 Epoch: 52, lr: 1.0e-02, train_loss: 1.2369, train_acc: 0.5564 test_loss: 1.3700, test_acc: 0.5691, best: 0.5787, time: 0:01:08
 Epoch: 53, lr: 1.0e-02, train_loss: 1.2294, train_acc: 0.5424 test_loss: 1.7425, test_acc: 0.5846, best: 0.5846, time: 0:01:09
 Epoch: 54, lr: 1.0e-02, train_loss: 1.1911, train_acc: 0.5638 test_loss: 1.4144, test_acc: 0.5839, best: 0.5846, time: 0:01:08
 Epoch: 55, lr: 1.0e-02, train_loss: 1.1731, train_acc: 0.5772 test_loss: 2.2971, test_acc: 0.5696, best: 0.5846, time: 0:01:08
 Epoch: 56, lr: 1.0e-02, train_loss: 1.1617, train_acc: 0.5788 test_loss: 1.2888, test_acc: 0.6035, best: 0.6035, time: 0:01:09
 Epoch: 57, lr: 1.0e-02, train_loss: 1.1410, train_acc: 0.5856 test_loss: 1.1812, test_acc: 0.6109, best: 0.6109, time: 0:01:09
 Epoch: 58, lr: 1.0e-02, train_loss: 1.1442, train_acc: 0.5810 test_loss: 1.5356, test_acc: 0.6042, best: 0.6109, time: 0:01:08
 Epoch: 59, lr: 1.0e-02, train_loss: 1.1366, train_acc: 0.5870 test_loss: 1.4564, test_acc: 0.6086, best: 0.6109, time: 0:01:08
 Epoch: 60, lr: 1.0e-02, train_loss: 1.1394, train_acc: 0.5856 test_loss: 1.3164, test_acc: 0.5974, best: 0.6109, time: 0:01:08
 Epoch: 61, lr: 1.0e-02, train_loss: 1.1552, train_acc: 0.5838 test_loss: 2.4379, test_acc: 0.5716, best: 0.6109, time: 0:01:08
 Epoch: 62, lr: 1.0e-02, train_loss: 1.1206, train_acc: 0.5996 test_loss: 1.2802, test_acc: 0.6230, best: 0.6230, time: 0:01:09
 Epoch: 63, lr: 1.0e-02, train_loss: 1.0875, train_acc: 0.6046 test_loss: 1.8258, test_acc: 0.6006, best: 0.6230, time: 0:01:08
 Epoch: 64, lr: 1.0e-02, train_loss: 1.0798, train_acc: 0.6074 test_loss: 1.4497, test_acc: 0.6280, best: 0.6280, time: 0:01:09
 Epoch: 65, lr: 1.0e-02, train_loss: 1.0482, train_acc: 0.6162 test_loss: 2.9963, test_acc: 0.6116, best: 0.6280, time: 0:01:08
 Epoch: 66, lr: 1.0e-02, train_loss: 1.0425, train_acc: 0.6200 test_loss: 2.3744, test_acc: 0.6118, best: 0.6280, time: 0:01:08
 Epoch: 67, lr: 1.0e-02, train_loss: 1.0470, train_acc: 0.6210 test_loss: 1.6817, test_acc: 0.6228, best: 0.6280, time: 0:01:08
 Epoch: 68, lr: 1.0e-02, train_loss: 1.0261, train_acc: 0.6264 test_loss: 4.9814, test_acc: 0.6135, best: 0.6280, time: 0:01:08
 Epoch: 69, lr: 1.0e-02, train_loss: 1.0341, train_acc: 0.6254 test_loss: 1.5625, test_acc: 0.6281, best: 0.6281, time: 0:01:09
 Epoch: 70, lr: 1.0e-02, train_loss: 1.0371, train_acc: 0.6288 test_loss: 2.2433, test_acc: 0.6286, best: 0.6286, time: 0:01:09
 Epoch: 71, lr: 1.0e-02, train_loss: 0.9964, train_acc: 0.6414 test_loss: 5.1488, test_acc: 0.5920, best: 0.6286, time: 0:01:08
 Epoch: 72, lr: 1.0e-02, train_loss: 1.0018, train_acc: 0.6400 test_loss: 2.7740, test_acc: 0.6144, best: 0.6286, time: 0:01:08
 Epoch: 73, lr: 1.0e-02, train_loss: 0.9758, train_acc: 0.6508 test_loss: 1.3342, test_acc: 0.6466, best: 0.6466, time: 0:01:09
 Epoch: 74, lr: 1.0e-02, train_loss: 0.9638, train_acc: 0.6572 test_loss: 3.8707, test_acc: 0.6215, best: 0.6466, time: 0:01:08
 Epoch: 75, lr: 1.0e-02, train_loss: 0.9712, train_acc: 0.6524 test_loss: 4.3700, test_acc: 0.6194, best: 0.6466, time: 0:01:08
 Epoch: 76, lr: 1.0e-02, train_loss: 0.9752, train_acc: 0.6546 test_loss: 3.1484, test_acc: 0.6258, best: 0.6466, time: 0:01:08
 Epoch: 77, lr: 1.0e-02, train_loss: 0.9402, train_acc: 0.6578 test_loss: 2.3089, test_acc: 0.6346, best: 0.6466, time: 0:01:08
 Epoch: 78, lr: 1.0e-02, train_loss: 0.9987, train_acc: 0.6398 test_loss: 3.0560, test_acc: 0.6294, best: 0.6466, time: 0:01:08
 Epoch: 79, lr: 1.0e-02, train_loss: 1.0321, train_acc: 0.6210 test_loss: 1.9072, test_acc: 0.6010, best: 0.6466, time: 0:01:08
 Epoch: 80, lr: 1.0e-02, train_loss: 1.0163, train_acc: 0.6350 test_loss: 2.4485, test_acc: 0.6134, best: 0.6466, time: 0:01:08
 Epoch: 81, lr: 1.0e-02, train_loss: 0.9575, train_acc: 0.6634 test_loss: 1.7816, test_acc: 0.6304, best: 0.6466, time: 0:01:08
 Epoch: 82, lr: 1.0e-02, train_loss: 0.9130, train_acc: 0.6650 test_loss: 1.9128, test_acc: 0.6190, best: 0.6466, time: 0:01:08
 Epoch: 83, lr: 1.0e-02, train_loss: 0.9258, train_acc: 0.6746 test_loss: 1.5048, test_acc: 0.6439, best: 0.6466, time: 0:01:08
 Epoch: 84, lr: 1.0e-02, train_loss: 0.9170, train_acc: 0.6706 test_loss: 1.0878, test_acc: 0.6431, best: 0.6466, time: 0:01:08
 Epoch: 85, lr: 1.0e-02, train_loss: 0.9444, train_acc: 0.6572 test_loss: 1.8311, test_acc: 0.6294, best: 0.6466, time: 0:01:08
 Epoch: 86, lr: 1.0e-02, train_loss: 0.8826, train_acc: 0.6846 test_loss: 3.8832, test_acc: 0.5946, best: 0.6466, time: 0:01:08
 Epoch: 87, lr: 1.0e-02, train_loss: 0.9168, train_acc: 0.6716 test_loss: 5.4912, test_acc: 0.6218, best: 0.6466, time: 0:01:08
 Epoch: 88, lr: 1.0e-02, train_loss: 0.9083, train_acc: 0.6718 test_loss: 2.6279, test_acc: 0.6435, best: 0.6466, time: 0:01:08
 Epoch: 89, lr: 1.0e-02, train_loss: 0.9065, train_acc: 0.6758 test_loss: 12.3287, test_acc: 0.6231, best: 0.6466, time: 0:01:08
 Epoch: 90, lr: 1.0e-02, train_loss: 0.8915, train_acc: 0.6830 test_loss: 3.0373, test_acc: 0.6401, best: 0.6466, time: 0:01:08
 Epoch: 91, lr: 1.0e-02, train_loss: 0.8682, train_acc: 0.6936 test_loss: 1.9490, test_acc: 0.6299, best: 0.6466, time: 0:01:08
 Epoch: 92, lr: 1.0e-02, train_loss: 0.8514, train_acc: 0.6962 test_loss: 3.7400, test_acc: 0.6339, best: 0.6466, time: 0:01:08
 Epoch: 93, lr: 1.0e-02, train_loss: 0.8344, train_acc: 0.7034 test_loss: 1.7370, test_acc: 0.6609, best: 0.6609, time: 0:01:09
 Epoch: 94, lr: 1.0e-02, train_loss: 0.8717, train_acc: 0.6962 test_loss: 1.5337, test_acc: 0.6486, best: 0.6609, time: 0:01:06
 Epoch: 95, lr: 1.0e-02, train_loss: 0.8358, train_acc: 0.7032 test_loss: 1.5361, test_acc: 0.6482, best: 0.6609, time: 0:01:04
 Epoch: 96, lr: 1.0e-02, train_loss: 0.8343, train_acc: 0.6984 test_loss: 2.5969, test_acc: 0.6548, best: 0.6609, time: 0:01:04
 Epoch: 97, lr: 1.0e-02, train_loss: 0.8343, train_acc: 0.7040 test_loss: 4.4929, test_acc: 0.6402, best: 0.6609, time: 0:01:04
 Epoch: 98, lr: 1.0e-02, train_loss: 0.8117, train_acc: 0.7080 test_loss: 7.2574, test_acc: 0.6370, best: 0.6609, time: 0:01:04
 Epoch: 99, lr: 1.0e-02, train_loss: 0.8171, train_acc: 0.7134 test_loss: 3.3962, test_acc: 0.6289, best: 0.6609, time: 0:01:04
 Epoch: 100, lr: 1.0e-02, train_loss: 0.8030, train_acc: 0.7140 test_loss: 5.2109, test_acc: 0.6211, best: 0.6609, time: 0:01:04
 Epoch: 101, lr: 1.0e-02, train_loss: 0.8159, train_acc: 0.7092 test_loss: 4.4093, test_acc: 0.6375, best: 0.6609, time: 0:01:04
 Epoch: 102, lr: 1.0e-02, train_loss: 0.8074, train_acc: 0.7112 test_loss: 3.0512, test_acc: 0.6510, best: 0.6609, time: 0:01:05
 Epoch: 103, lr: 1.0e-02, train_loss: 0.8051, train_acc: 0.7148 test_loss: 1.1741, test_acc: 0.6630, best: 0.6630, time: 0:01:05
 Epoch: 104, lr: 1.0e-02, train_loss: 0.7815, train_acc: 0.7180 test_loss: 2.4992, test_acc: 0.6220, best: 0.6630, time: 0:01:04
 Epoch: 105, lr: 1.0e-02, train_loss: 0.7665, train_acc: 0.7272 test_loss: 1.4978, test_acc: 0.6505, best: 0.6630, time: 0:01:04
 Epoch: 106, lr: 1.0e-02, train_loss: 0.7692, train_acc: 0.7224 test_loss: 3.1522, test_acc: 0.6490, best: 0.6630, time: 0:01:05
 Epoch: 107, lr: 1.0e-02, train_loss: 0.7684, train_acc: 0.7278 test_loss: 1.7646, test_acc: 0.6606, best: 0.6630, time: 0:01:05
 Epoch: 108, lr: 1.0e-02, train_loss: 0.7430, train_acc: 0.7410 test_loss: 2.7520, test_acc: 0.6374, best: 0.6630, time: 0:01:04
 Epoch: 109, lr: 1.0e-02, train_loss: 0.7389, train_acc: 0.7438 test_loss: 2.1298, test_acc: 0.6562, best: 0.6630, time: 0:01:04
 Epoch: 110, lr: 1.0e-02, train_loss: 0.7404, train_acc: 0.7380 test_loss: 1.7978, test_acc: 0.6669, best: 0.6669, time: 0:01:05
 Epoch: 111, lr: 1.0e-02, train_loss: 0.7418, train_acc: 0.7378 test_loss: 1.8226, test_acc: 0.6716, best: 0.6716, time: 0:01:05
 Epoch: 112, lr: 1.0e-02, train_loss: 0.7390, train_acc: 0.7374 test_loss: 4.8189, test_acc: 0.6485, best: 0.6716, time: 0:01:04
 Epoch: 113, lr: 1.0e-02, train_loss: 0.7315, train_acc: 0.7394 test_loss: 4.2032, test_acc: 0.6369, best: 0.6716, time: 0:01:04
 Epoch: 114, lr: 1.0e-02, train_loss: 0.7283, train_acc: 0.7402 test_loss: 3.3857, test_acc: 0.6542, best: 0.6716, time: 0:01:04
 Epoch: 115, lr: 1.0e-02, train_loss: 0.6958, train_acc: 0.7522 test_loss: 5.0891, test_acc: 0.6436, best: 0.6716, time: 0:01:04
 Epoch: 116, lr: 1.0e-02, train_loss: 0.7158, train_acc: 0.7446 test_loss: 8.6632, test_acc: 0.6339, best: 0.6716, time: 0:01:04
 Epoch: 117, lr: 1.0e-02, train_loss: 0.7215, train_acc: 0.7352 test_loss: 14.2119, test_acc: 0.6335, best: 0.6716, time: 0:01:04
 Epoch: 118, lr: 1.0e-02, train_loss: 0.6947, train_acc: 0.7532 test_loss: 5.1310, test_acc: 0.6442, best: 0.6716, time: 0:01:04
 Epoch: 119, lr: 1.0e-02, train_loss: 0.7117, train_acc: 0.7478 test_loss: 6.4975, test_acc: 0.6430, best: 0.6716, time: 0:01:04
 Epoch: 120, lr: 1.0e-02, train_loss: 0.7554, train_acc: 0.7360 test_loss: 2.2705, test_acc: 0.6542, best: 0.6716, time: 0:01:04
 Epoch: 121, lr: 1.0e-02, train_loss: 0.7583, train_acc: 0.7266 test_loss: 2.1002, test_acc: 0.6565, best: 0.6716, time: 0:01:04
 Epoch: 122, lr: 1.0e-02, train_loss: 0.7476, train_acc: 0.7326 test_loss: 1.2134, test_acc: 0.6546, best: 0.6716, time: 0:01:04
 Epoch: 123, lr: 1.0e-02, train_loss: 0.8240, train_acc: 0.7070 test_loss: 2.6980, test_acc: 0.6545, best: 0.6716, time: 0:01:05
 Epoch: 124, lr: 1.0e-02, train_loss: 0.7183, train_acc: 0.7480 test_loss: 1.5943, test_acc: 0.6635, best: 0.6716, time: 0:01:04
 Epoch: 125, lr: 1.0e-02, train_loss: 0.7166, train_acc: 0.7474 test_loss: 1.8711, test_acc: 0.6446, best: 0.6716, time: 0:01:04
 Epoch: 126, lr: 1.0e-02, train_loss: 0.6907, train_acc: 0.7540 test_loss: 3.5643, test_acc: 0.6574, best: 0.6716, time: 0:01:04
 Epoch: 127, lr: 1.0e-02, train_loss: 0.7188, train_acc: 0.7468 test_loss: 4.6010, test_acc: 0.6299, best: 0.6716, time: 0:01:04
 Epoch: 128, lr: 1.0e-02, train_loss: 0.7430, train_acc: 0.7384 test_loss: 12.3560, test_acc: 0.6310, best: 0.6716, time: 0:01:04
 Epoch: 129, lr: 1.0e-02, train_loss: 0.6876, train_acc: 0.7574 test_loss: 14.0499, test_acc: 0.6425, best: 0.6716, time: 0:01:05
 Epoch: 130, lr: 1.0e-02, train_loss: 0.6755, train_acc: 0.7558 test_loss: 14.0554, test_acc: 0.6512, best: 0.6716, time: 0:01:04
 Epoch: 131, lr: 1.0e-02, train_loss: 0.6475, train_acc: 0.7700 test_loss: 3.3455, test_acc: 0.6599, best: 0.6716, time: 0:01:04
 Epoch: 132, lr: 1.0e-02, train_loss: 0.6542, train_acc: 0.7722 test_loss: 17.8775, test_acc: 0.6329, best: 0.6716, time: 0:01:05
 Epoch: 133, lr: 1.0e-02, train_loss: 0.6559, train_acc: 0.7696 test_loss: 7.9537, test_acc: 0.6536, best: 0.6716, time: 0:01:04
 Epoch: 134, lr: 1.0e-02, train_loss: 0.6549, train_acc: 0.7690 test_loss: 8.5316, test_acc: 0.6396, best: 0.6716, time: 0:01:04
 Epoch: 135, lr: 1.0e-02, train_loss: 0.6528, train_acc: 0.7710 test_loss: 18.8733, test_acc: 0.6625, best: 0.6716, time: 0:01:04
 Epoch: 136, lr: 1.0e-02, train_loss: 0.6199, train_acc: 0.7754 test_loss: 4.1496, test_acc: 0.6749, best: 0.6749, time: 0:01:06
 Epoch: 137, lr: 1.0e-02, train_loss: 0.6313, train_acc: 0.7812 test_loss: 5.0173, test_acc: 0.6623, best: 0.6749, time: 0:01:05
 Epoch: 138, lr: 1.0e-02, train_loss: 0.6595, train_acc: 0.7660 test_loss: 5.3861, test_acc: 0.6661, best: 0.6749, time: 0:01:05
 Epoch: 139, lr: 1.0e-02, train_loss: 0.6898, train_acc: 0.7616 test_loss: 16.3800, test_acc: 0.6328, best: 0.6749, time: 0:01:05
 Epoch: 140, lr: 1.0e-02, train_loss: 0.6539, train_acc: 0.7690 test_loss: 55.0381, test_acc: 0.5861, best: 0.6749, time: 0:01:04
 Epoch: 141, lr: 1.0e-02, train_loss: 0.6471, train_acc: 0.7610 test_loss: 10.6593, test_acc: 0.6345, best: 0.6749, time: 0:01:04
 Epoch: 142, lr: 1.0e-02, train_loss: 0.6250, train_acc: 0.7836 test_loss: 9.9790, test_acc: 0.6581, best: 0.6749, time: 0:01:04
 Epoch: 143, lr: 1.0e-02, train_loss: 0.6171, train_acc: 0.7822 test_loss: 42.7062, test_acc: 0.6248, best: 0.6749, time: 0:01:04
 Epoch: 144, lr: 1.0e-02, train_loss: 0.6121, train_acc: 0.7842 test_loss: 9.5308, test_acc: 0.6765, best: 0.6765, time: 0:01:05
 Epoch: 145, lr: 1.0e-02, train_loss: 0.6043, train_acc: 0.7884 test_loss: 10.0850, test_acc: 0.6438, best: 0.6765, time: 0:01:04
 Epoch: 146, lr: 1.0e-02, train_loss: 0.5961, train_acc: 0.7892 test_loss: 9.1761, test_acc: 0.6571, best: 0.6765, time: 0:01:04
 Epoch: 147, lr: 1.0e-02, train_loss: 0.5829, train_acc: 0.7936 test_loss: 37.3726, test_acc: 0.5483, best: 0.6765, time: 0:01:05
 Epoch: 148, lr: 1.0e-02, train_loss: 0.6383, train_acc: 0.7764 test_loss: 2.3702, test_acc: 0.6603, best: 0.6765, time: 0:01:05
 Epoch: 149, lr: 1.0e-02, train_loss: 0.5870, train_acc: 0.7964 test_loss: 6.8429, test_acc: 0.6615, best: 0.6765, time: 0:01:04
 Epoch: 150, lr: 1.0e-02, train_loss: 0.5722, train_acc: 0.7992 test_loss: 16.9232, test_acc: 0.6306, best: 0.6765, time: 0:01:04
 Epoch: 151, lr: 1.0e-02, train_loss: 0.5747, train_acc: 0.7928 test_loss: 4.2362, test_acc: 0.6576, best: 0.6765, time: 0:01:04
 Epoch: 152, lr: 1.0e-02, train_loss: 0.5451, train_acc: 0.8064 test_loss: 3.4892, test_acc: 0.6733, best: 0.6765, time: 0:01:04
 Epoch: 153, lr: 1.0e-02, train_loss: 0.5616, train_acc: 0.8012 test_loss: 12.8602, test_acc: 0.6444, best: 0.6765, time: 0:01:04
 Epoch: 154, lr: 1.0e-02, train_loss: 0.5801, train_acc: 0.7992 test_loss: 4.8057, test_acc: 0.6647, best: 0.6765, time: 0:01:04
 Epoch: 155, lr: 1.0e-02, train_loss: 0.5726, train_acc: 0.8066 test_loss: 14.2057, test_acc: 0.6311, best: 0.6765, time: 0:01:05
 Epoch: 156, lr: 1.0e-02, train_loss: 0.5490, train_acc: 0.8050 test_loss: 7.7109, test_acc: 0.6562, best: 0.6765, time: 0:01:05
 Epoch: 157, lr: 1.0e-02, train_loss: 0.5542, train_acc: 0.8088 test_loss: 86.3931, test_acc: 0.6512, best: 0.6765, time: 0:01:04
 Epoch: 158, lr: 1.0e-02, train_loss: 0.5405, train_acc: 0.8080 test_loss: 17.1718, test_acc: 0.6522, best: 0.6765, time: 0:01:04
 Epoch: 159, lr: 1.0e-02, train_loss: 0.5445, train_acc: 0.8048 test_loss: 26.6205, test_acc: 0.6536, best: 0.6765, time: 0:01:04
 Epoch: 160, lr: 1.0e-02, train_loss: 0.5594, train_acc: 0.8080 test_loss: 6.5504, test_acc: 0.6482, best: 0.6765, time: 0:01:04
 Epoch: 161, lr: 1.0e-02, train_loss: 0.5615, train_acc: 0.8010 test_loss: 13.5939, test_acc: 0.6561, best: 0.6765, time: 0:01:04
 Epoch: 162, lr: 1.0e-02, train_loss: 0.5435, train_acc: 0.8068 test_loss: 8.5542, test_acc: 0.6548, best: 0.6765, time: 0:01:04
 Epoch: 163, lr: 1.0e-02, train_loss: 0.5157, train_acc: 0.8166 test_loss: 9.1958, test_acc: 0.6538, best: 0.6765, time: 0:01:04
 Epoch: 164, lr: 1.0e-02, train_loss: 0.5478, train_acc: 0.8072 test_loss: 16.3479, test_acc: 0.6455, best: 0.6765, time: 0:01:04
 Epoch: 165, lr: 1.0e-02, train_loss: 0.5288, train_acc: 0.8188 test_loss: 11.4287, test_acc: 0.6624, best: 0.6765, time: 0:01:04
 Epoch: 166, lr: 1.0e-02, train_loss: 0.5320, train_acc: 0.8162 test_loss: 12.7025, test_acc: 0.6401, best: 0.6765, time: 0:01:05
 Epoch: 167, lr: 1.0e-02, train_loss: 0.5318, train_acc: 0.8068 test_loss: 16.2381, test_acc: 0.6469, best: 0.6765, time: 0:01:04
 Epoch: 168, lr: 1.0e-02, train_loss: 0.5308, train_acc: 0.8136 test_loss: 12.7806, test_acc: 0.6631, best: 0.6765, time: 0:01:04
 Epoch: 169, lr: 1.0e-02, train_loss: 0.5040, train_acc: 0.8264 test_loss: 26.6462, test_acc: 0.6414, best: 0.6765, time: 0:01:05
 Epoch: 170, lr: 1.0e-02, train_loss: 0.5311, train_acc: 0.8158 test_loss: 10.0835, test_acc: 0.6409, best: 0.6765, time: 0:01:04
 Epoch: 171, lr: 1.0e-02, train_loss: 0.5136, train_acc: 0.8196 test_loss: 20.0727, test_acc: 0.6306, best: 0.6765, time: 0:01:04
 Epoch: 172, lr: 1.0e-02, train_loss: 0.5394, train_acc: 0.8140 test_loss: 2.5547, test_acc: 0.6629, best: 0.6765, time: 0:01:04
 Epoch: 173, lr: 1.0e-02, train_loss: 0.5090, train_acc: 0.8266 test_loss: 5.3196, test_acc: 0.6627, best: 0.6765, time: 0:01:04
 Epoch: 174, lr: 1.0e-02, train_loss: 0.5135, train_acc: 0.8144 test_loss: 2.2573, test_acc: 0.6404, best: 0.6765, time: 0:01:05
 Epoch: 175, lr: 1.0e-02, train_loss: 0.5155, train_acc: 0.8218 test_loss: 2.0046, test_acc: 0.6753, best: 0.6765, time: 0:01:04
 Epoch: 176, lr: 1.0e-02, train_loss: 0.5130, train_acc: 0.8136 test_loss: 3.4901, test_acc: 0.6624, best: 0.6765, time: 0:01:04
 Epoch: 177, lr: 1.0e-02, train_loss: 0.5401, train_acc: 0.8156 test_loss: 6.6753, test_acc: 0.6240, best: 0.6765, time: 0:01:04
 Epoch: 178, lr: 1.0e-02, train_loss: 0.5084, train_acc: 0.8176 test_loss: 5.9093, test_acc: 0.6480, best: 0.6765, time: 0:01:04
 Epoch: 179, lr: 1.0e-02, train_loss: 0.5142, train_acc: 0.8276 test_loss: 2.9931, test_acc: 0.6705, best: 0.6765, time: 0:01:05
 Epoch: 180, lr: 2.0e-03, train_loss: 0.4352, train_acc: 0.8490 test_loss: 4.6250, test_acc: 0.6785, best: 0.6785, time: 0:01:05
 Epoch: 181, lr: 2.0e-03, train_loss: 0.3951, train_acc: 0.8646 test_loss: 3.6451, test_acc: 0.6870, best: 0.6870, time: 0:01:05
 Epoch: 182, lr: 2.0e-03, train_loss: 0.3827, train_acc: 0.8700 test_loss: 2.9188, test_acc: 0.6867, best: 0.6870, time: 0:01:04
 Epoch: 183, lr: 2.0e-03, train_loss: 0.3642, train_acc: 0.8724 test_loss: 4.1668, test_acc: 0.6749, best: 0.6870, time: 0:01:04
 Epoch: 184, lr: 2.0e-03, train_loss: 0.3857, train_acc: 0.8714 test_loss: 4.8579, test_acc: 0.6607, best: 0.6870, time: 0:01:04
 Epoch: 185, lr: 2.0e-03, train_loss: 0.3780, train_acc: 0.8766 test_loss: 6.0796, test_acc: 0.6494, best: 0.6870, time: 0:01:04
 Epoch: 186, lr: 2.0e-03, train_loss: 0.3766, train_acc: 0.8716 test_loss: 7.6741, test_acc: 0.6442, best: 0.6870, time: 0:01:04
 Epoch: 187, lr: 2.0e-03, train_loss: 0.3501, train_acc: 0.8824 test_loss: 4.2530, test_acc: 0.6640, best: 0.6870, time: 0:01:04
 Epoch: 188, lr: 2.0e-03, train_loss: 0.3399, train_acc: 0.8848 test_loss: 2.7802, test_acc: 0.6805, best: 0.6870, time: 0:01:04
 Epoch: 189, lr: 2.0e-03, train_loss: 0.3444, train_acc: 0.8820 test_loss: 2.3340, test_acc: 0.6960, best: 0.6960, time: 0:01:05
 Epoch: 190, lr: 2.0e-03, train_loss: 0.3610, train_acc: 0.8792 test_loss: 3.4658, test_acc: 0.6881, best: 0.6960, time: 0:01:04
 Epoch: 191, lr: 2.0e-03, train_loss: 0.3358, train_acc: 0.8846 test_loss: 4.5295, test_acc: 0.6731, best: 0.6960, time: 0:01:04
 Epoch: 192, lr: 2.0e-03, train_loss: 0.3358, train_acc: 0.8838 test_loss: 3.3989, test_acc: 0.6843, best: 0.6960, time: 0:01:04
 Epoch: 193, lr: 2.0e-03, train_loss: 0.3310, train_acc: 0.8874 test_loss: 4.6071, test_acc: 0.6683, best: 0.6960, time: 0:01:04
 Epoch: 194, lr: 2.0e-03, train_loss: 0.3640, train_acc: 0.8750 test_loss: 4.6276, test_acc: 0.6667, best: 0.6960, time: 0:01:05
 Epoch: 195, lr: 2.0e-03, train_loss: 0.3409, train_acc: 0.8820 test_loss: 3.6537, test_acc: 0.6781, best: 0.6960, time: 0:01:04
 Epoch: 196, lr: 2.0e-03, train_loss: 0.3403, train_acc: 0.8804 test_loss: 3.8244, test_acc: 0.6704, best: 0.6960, time: 0:01:04
 Epoch: 197, lr: 2.0e-03, train_loss: 0.3680, train_acc: 0.8720 test_loss: 2.7320, test_acc: 0.6834, best: 0.6960, time: 0:01:04
 Epoch: 198, lr: 2.0e-03, train_loss: 0.3404, train_acc: 0.8830 test_loss: 5.2291, test_acc: 0.6558, best: 0.6960, time: 0:01:04
 Epoch: 199, lr: 2.0e-03, train_loss: 0.3361, train_acc: 0.8912 test_loss: 3.1656, test_acc: 0.6794, best: 0.6960, time: 0:01:05
 Epoch: 200, lr: 2.0e-03, train_loss: 0.3339, train_acc: 0.8884 test_loss: 3.7594, test_acc: 0.6827, best: 0.6960, time: 0:01:04
 Epoch: 201, lr: 2.0e-03, train_loss: 0.3420, train_acc: 0.8882 test_loss: 2.7288, test_acc: 0.6776, best: 0.6960, time: 0:01:04
 Epoch: 202, lr: 2.0e-03, train_loss: 0.3255, train_acc: 0.8854 test_loss: 2.3361, test_acc: 0.6824, best: 0.6960, time: 0:01:05
 Epoch: 203, lr: 2.0e-03, train_loss: 0.3147, train_acc: 0.8956 test_loss: 3.1210, test_acc: 0.6830, best: 0.6960, time: 0:01:04
 Epoch: 204, lr: 2.0e-03, train_loss: 0.3235, train_acc: 0.8874 test_loss: 4.5648, test_acc: 0.6796, best: 0.6960, time: 0:01:04
 Epoch: 205, lr: 2.0e-03, train_loss: 0.3216, train_acc: 0.8892 test_loss: 7.5297, test_acc: 0.6574, best: 0.6960, time: 0:01:04
 Epoch: 206, lr: 2.0e-03, train_loss: 0.3284, train_acc: 0.8866 test_loss: 8.2965, test_acc: 0.6422, best: 0.6960, time: 0:01:05
 Epoch: 207, lr: 2.0e-03, train_loss: 0.3444, train_acc: 0.8826 test_loss: 7.5497, test_acc: 0.6488, best: 0.6960, time: 0:01:04
 Epoch: 208, lr: 2.0e-03, train_loss: 0.3243, train_acc: 0.8856 test_loss: 4.1141, test_acc: 0.6721, best: 0.6960, time: 0:01:04
 Epoch: 209, lr: 2.0e-03, train_loss: 0.3199, train_acc: 0.8910 test_loss: 6.9361, test_acc: 0.6504, best: 0.6960, time: 0:01:04
 Epoch: 210, lr: 2.0e-03, train_loss: 0.3085, train_acc: 0.8894 test_loss: 8.2183, test_acc: 0.6338, best: 0.6960, time: 0:01:04
 Epoch: 211, lr: 2.0e-03, train_loss: 0.3246, train_acc: 0.8896 test_loss: 8.2742, test_acc: 0.6479, best: 0.6960, time: 0:01:05
 Epoch: 212, lr: 2.0e-03, train_loss: 0.3056, train_acc: 0.8938 test_loss: 3.2978, test_acc: 0.6726, best: 0.6960, time: 0:01:04
 Epoch: 213, lr: 2.0e-03, train_loss: 0.3036, train_acc: 0.9004 test_loss: 4.3664, test_acc: 0.6599, best: 0.6960, time: 0:01:04
 Epoch: 214, lr: 2.0e-03, train_loss: 0.3161, train_acc: 0.8900 test_loss: 4.0488, test_acc: 0.6699, best: 0.6960, time: 0:01:04
 Epoch: 215, lr: 2.0e-03, train_loss: 0.3221, train_acc: 0.8906 test_loss: 5.1451, test_acc: 0.6847, best: 0.6960, time: 0:01:04
 Epoch: 216, lr: 2.0e-03, train_loss: 0.3245, train_acc: 0.8862 test_loss: 5.0422, test_acc: 0.6667, best: 0.6960, time: 0:01:04
 Epoch: 217, lr: 2.0e-03, train_loss: 0.2983, train_acc: 0.8996 test_loss: 5.2259, test_acc: 0.6714, best: 0.6960, time: 0:01:04
 Epoch: 218, lr: 2.0e-03, train_loss: 0.3285, train_acc: 0.8888 test_loss: 1.8419, test_acc: 0.7034, best: 0.7034, time: 0:01:05
 Epoch: 219, lr: 2.0e-03, train_loss: 0.3177, train_acc: 0.8920 test_loss: 2.1917, test_acc: 0.6963, best: 0.7034, time: 0:01:04
 Epoch: 220, lr: 2.0e-03, train_loss: 0.2989, train_acc: 0.8950 test_loss: 5.3355, test_acc: 0.6813, best: 0.7034, time: 0:01:04
 Epoch: 221, lr: 2.0e-03, train_loss: 0.3154, train_acc: 0.8934 test_loss: 4.5143, test_acc: 0.6591, best: 0.7034, time: 0:01:04
 Epoch: 222, lr: 2.0e-03, train_loss: 0.2877, train_acc: 0.9018 test_loss: 3.3493, test_acc: 0.6820, best: 0.7034, time: 0:01:04
 Epoch: 223, lr: 2.0e-03, train_loss: 0.3064, train_acc: 0.8948 test_loss: 2.3636, test_acc: 0.6859, best: 0.7034, time: 0:01:04
 Epoch: 224, lr: 2.0e-03, train_loss: 0.3052, train_acc: 0.8962 test_loss: 3.8806, test_acc: 0.6747, best: 0.7034, time: 0:01:04
 Epoch: 225, lr: 2.0e-03, train_loss: 0.3062, train_acc: 0.8964 test_loss: 2.2359, test_acc: 0.6906, best: 0.7034, time: 0:01:04
 Epoch: 226, lr: 2.0e-03, train_loss: 0.2977, train_acc: 0.8966 test_loss: 2.5534, test_acc: 0.6799, best: 0.7034, time: 0:01:04
 Epoch: 227, lr: 2.0e-03, train_loss: 0.3115, train_acc: 0.8954 test_loss: 3.9637, test_acc: 0.6746, best: 0.7034, time: 0:01:04
 Epoch: 228, lr: 2.0e-03, train_loss: 0.2921, train_acc: 0.8986 test_loss: 5.6116, test_acc: 0.6637, best: 0.7034, time: 0:01:04
 Epoch: 229, lr: 2.0e-03, train_loss: 0.3064, train_acc: 0.8990 test_loss: 4.4443, test_acc: 0.6817, best: 0.7034, time: 0:01:04
 Epoch: 230, lr: 2.0e-03, train_loss: 0.3058, train_acc: 0.8932 test_loss: 3.2210, test_acc: 0.6904, best: 0.7034, time: 0:01:05
 Epoch: 231, lr: 2.0e-03, train_loss: 0.2809, train_acc: 0.9022 test_loss: 3.4657, test_acc: 0.6836, best: 0.7034, time: 0:01:04
 Epoch: 232, lr: 2.0e-03, train_loss: 0.2985, train_acc: 0.8994 test_loss: 3.5272, test_acc: 0.6986, best: 0.7034, time: 0:01:04
 Epoch: 233, lr: 2.0e-03, train_loss: 0.2896, train_acc: 0.9000 test_loss: 7.1643, test_acc: 0.6776, best: 0.7034, time: 0:01:04
 Epoch: 234, lr: 2.0e-03, train_loss: 0.2801, train_acc: 0.9006 test_loss: 9.1754, test_acc: 0.6703, best: 0.7034, time: 0:01:04
 Epoch: 235, lr: 2.0e-03, train_loss: 0.2736, train_acc: 0.9054 test_loss: 7.8019, test_acc: 0.6763, best: 0.7034, time: 0:01:04
 Epoch: 236, lr: 2.0e-03, train_loss: 0.3124, train_acc: 0.8926 test_loss: 6.0446, test_acc: 0.6790, best: 0.7034, time: 0:01:04
 Epoch: 237, lr: 2.0e-03, train_loss: 0.2743, train_acc: 0.9028 test_loss: 6.1515, test_acc: 0.6843, best: 0.7034, time: 0:01:04
 Epoch: 238, lr: 2.0e-03, train_loss: 0.3104, train_acc: 0.8974 test_loss: 10.0333, test_acc: 0.6252, best: 0.7034, time: 0:01:04
 Epoch: 239, lr: 2.0e-03, train_loss: 0.2851, train_acc: 0.9022 test_loss: 8.6022, test_acc: 0.6625, best: 0.7034, time: 0:01:04
 Epoch: 240, lr: 4.0e-04, train_loss: 0.2910, train_acc: 0.8996 test_loss: 3.9603, test_acc: 0.6819, best: 0.7034, time: 0:01:04
 Epoch: 241, lr: 4.0e-04, train_loss: 0.2800, train_acc: 0.9016 test_loss: 5.3393, test_acc: 0.6861, best: 0.7034, time: 0:01:04
 Epoch: 242, lr: 4.0e-04, train_loss: 0.2656, train_acc: 0.9106 test_loss: 4.4268, test_acc: 0.6817, best: 0.7034, time: 0:01:04
 Epoch: 243, lr: 4.0e-04, train_loss: 0.2522, train_acc: 0.9140 test_loss: 8.6222, test_acc: 0.6570, best: 0.7034, time: 0:01:04
 Epoch: 244, lr: 4.0e-04, train_loss: 0.2720, train_acc: 0.9082 test_loss: 5.6887, test_acc: 0.6779, best: 0.7034, time: 0:01:04
 Epoch: 245, lr: 4.0e-04, train_loss: 0.2618, train_acc: 0.9098 test_loss: 4.8984, test_acc: 0.6794, best: 0.7034, time: 0:01:04
 Epoch: 246, lr: 4.0e-04, train_loss: 0.2883, train_acc: 0.9006 test_loss: 4.3412, test_acc: 0.6881, best: 0.7034, time: 0:01:04
 Epoch: 247, lr: 4.0e-04, train_loss: 0.2725, train_acc: 0.9062 test_loss: 5.3204, test_acc: 0.6839, best: 0.7034, time: 0:01:04
 Epoch: 248, lr: 4.0e-04, train_loss: 0.2699, train_acc: 0.9084 test_loss: 3.8121, test_acc: 0.6989, best: 0.7034, time: 0:01:04
 Epoch: 249, lr: 4.0e-04, train_loss: 0.2650, train_acc: 0.9094 test_loss: 8.4888, test_acc: 0.6710, best: 0.7034, time: 0:01:05
 Epoch: 250, lr: 4.0e-04, train_loss: 0.2736, train_acc: 0.9050 test_loss: 3.8560, test_acc: 0.7040, best: 0.7040, time: 0:01:05
 Epoch: 251, lr: 4.0e-04, train_loss: 0.2670, train_acc: 0.9094 test_loss: 6.0525, test_acc: 0.6793, best: 0.7040, time: 0:01:04
 Epoch: 252, lr: 4.0e-04, train_loss: 0.2848, train_acc: 0.9020 test_loss: 8.0247, test_acc: 0.6676, best: 0.7040, time: 0:01:04
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2770, train_acc: 0.9054 test_loss: 3.6211, test_acc: 0.6891, best: 0.7040, time: 0:01:04
 Epoch: 254, lr: 4.0e-04, train_loss: 0.2725, train_acc: 0.9068 test_loss: 4.1710, test_acc: 0.6947, best: 0.7040, time: 0:01:04
 Epoch: 255, lr: 4.0e-04, train_loss: 0.2500, train_acc: 0.9184 test_loss: 5.7363, test_acc: 0.6785, best: 0.7040, time: 0:01:04
 Epoch: 256, lr: 4.0e-04, train_loss: 0.2514, train_acc: 0.9088 test_loss: 3.6144, test_acc: 0.6936, best: 0.7040, time: 0:01:04
 Epoch: 257, lr: 4.0e-04, train_loss: 0.2538, train_acc: 0.9174 test_loss: 5.0148, test_acc: 0.6749, best: 0.7040, time: 0:01:05
 Epoch: 258, lr: 4.0e-04, train_loss: 0.2733, train_acc: 0.9082 test_loss: 3.3467, test_acc: 0.6843, best: 0.7040, time: 0:01:04
 Epoch: 259, lr: 4.0e-04, train_loss: 0.2468, train_acc: 0.9160 test_loss: 6.5067, test_acc: 0.6654, best: 0.7040, time: 0:01:04
 Epoch: 260, lr: 4.0e-04, train_loss: 0.2594, train_acc: 0.9108 test_loss: 2.5514, test_acc: 0.7046, best: 0.7046, time: 0:01:05
 Epoch: 261, lr: 4.0e-04, train_loss: 0.2767, train_acc: 0.9034 test_loss: 2.9063, test_acc: 0.6903, best: 0.7046, time: 0:01:04
 Epoch: 262, lr: 4.0e-04, train_loss: 0.2513, train_acc: 0.9138 test_loss: 2.0541, test_acc: 0.7067, best: 0.7067, time: 0:01:05
 Epoch: 263, lr: 4.0e-04, train_loss: 0.2687, train_acc: 0.9058 test_loss: 1.7404, test_acc: 0.7136, best: 0.7136, time: 0:01:05
 Epoch: 264, lr: 4.0e-04, train_loss: 0.2515, train_acc: 0.9134 test_loss: 2.8015, test_acc: 0.6891, best: 0.7136, time: 0:01:04
 Epoch: 265, lr: 4.0e-04, train_loss: 0.2663, train_acc: 0.9012 test_loss: 2.4271, test_acc: 0.6983, best: 0.7136, time: 0:01:04
 Epoch: 266, lr: 4.0e-04, train_loss: 0.2624, train_acc: 0.9046 test_loss: 1.7977, test_acc: 0.7134, best: 0.7136, time: 0:01:05
 Epoch: 267, lr: 4.0e-04, train_loss: 0.2538, train_acc: 0.9122 test_loss: 2.1392, test_acc: 0.7039, best: 0.7136, time: 0:01:04
 Epoch: 268, lr: 4.0e-04, train_loss: 0.2599, train_acc: 0.9146 test_loss: 1.8399, test_acc: 0.7185, best: 0.7185, time: 0:01:05
 Epoch: 269, lr: 4.0e-04, train_loss: 0.2716, train_acc: 0.9068 test_loss: 4.6140, test_acc: 0.6727, best: 0.7185, time: 0:01:04
 Epoch: 270, lr: 8.0e-05, train_loss: 0.2626, train_acc: 0.9124 test_loss: 2.1500, test_acc: 0.7106, best: 0.7185, time: 0:01:04
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2614, train_acc: 0.9096 test_loss: 1.9974, test_acc: 0.7106, best: 0.7185, time: 0:01:04
 Epoch: 272, lr: 8.0e-05, train_loss: 0.2518, train_acc: 0.9176 test_loss: 2.4435, test_acc: 0.6991, best: 0.7185, time: 0:01:04
 Epoch: 273, lr: 8.0e-05, train_loss: 0.2297, train_acc: 0.9222 test_loss: 4.6376, test_acc: 0.6800, best: 0.7185, time: 0:01:04
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2351, train_acc: 0.9186 test_loss: 2.7587, test_acc: 0.6969, best: 0.7185, time: 0:01:04
 Epoch: 275, lr: 8.0e-05, train_loss: 0.2734, train_acc: 0.9044 test_loss: 3.0652, test_acc: 0.6910, best: 0.7185, time: 0:01:04
 Epoch: 276, lr: 8.0e-05, train_loss: 0.2479, train_acc: 0.9200 test_loss: 3.7664, test_acc: 0.6753, best: 0.7185, time: 0:01:04
 Epoch: 277, lr: 8.0e-05, train_loss: 0.2563, train_acc: 0.9142 test_loss: 3.4415, test_acc: 0.6900, best: 0.7185, time: 0:01:04
 Epoch: 278, lr: 8.0e-05, train_loss: 0.2505, train_acc: 0.9128 test_loss: 2.4662, test_acc: 0.7061, best: 0.7185, time: 0:01:04
 Epoch: 279, lr: 8.0e-05, train_loss: 0.2526, train_acc: 0.9124 test_loss: 3.6920, test_acc: 0.6841, best: 0.7185, time: 0:01:04
 Epoch: 280, lr: 8.0e-05, train_loss: 0.2522, train_acc: 0.9116 test_loss: 2.8388, test_acc: 0.6929, best: 0.7185, time: 0:01:04
 Epoch: 281, lr: 8.0e-05, train_loss: 0.2428, train_acc: 0.9148 test_loss: 2.8952, test_acc: 0.6985, best: 0.7185, time: 0:01:04
 Epoch: 282, lr: 8.0e-05, train_loss: 0.2517, train_acc: 0.9106 test_loss: 2.5902, test_acc: 0.6925, best: 0.7185, time: 0:01:05
 Epoch: 283, lr: 8.0e-05, train_loss: 0.2505, train_acc: 0.9124 test_loss: 4.6986, test_acc: 0.6753, best: 0.7185, time: 0:01:04
 Epoch: 284, lr: 8.0e-05, train_loss: 0.2426, train_acc: 0.9180 test_loss: 2.5927, test_acc: 0.6946, best: 0.7185, time: 0:01:04
 Epoch: 285, lr: 8.0e-05, train_loss: 0.2764, train_acc: 0.9002 test_loss: 2.5364, test_acc: 0.7035, best: 0.7185, time: 0:01:05
 Epoch: 286, lr: 8.0e-05, train_loss: 0.2506, train_acc: 0.9138 test_loss: 3.3402, test_acc: 0.6939, best: 0.7185, time: 0:01:04
 Epoch: 287, lr: 8.0e-05, train_loss: 0.2534, train_acc: 0.9118 test_loss: 2.4864, test_acc: 0.7023, best: 0.7185, time: 0:01:04
 Epoch: 288, lr: 8.0e-05, train_loss: 0.2516, train_acc: 0.9162 test_loss: 3.2246, test_acc: 0.6895, best: 0.7185, time: 0:01:04
 Epoch: 289, lr: 8.0e-05, train_loss: 0.2679, train_acc: 0.9112 test_loss: 3.2510, test_acc: 0.6885, best: 0.7185, time: 0:01:04
 Epoch: 290, lr: 8.0e-05, train_loss: 0.2448, train_acc: 0.9162 test_loss: 2.8128, test_acc: 0.7057, best: 0.7185, time: 0:01:05
 Epoch: 291, lr: 8.0e-05, train_loss: 0.2498, train_acc: 0.9146 test_loss: 6.0759, test_acc: 0.6713, best: 0.7185, time: 0:01:04
 Epoch: 292, lr: 8.0e-05, train_loss: 0.2578, train_acc: 0.9090 test_loss: 3.8839, test_acc: 0.6829, best: 0.7185, time: 0:01:05
 Epoch: 293, lr: 8.0e-05, train_loss: 0.2471, train_acc: 0.9132 test_loss: 2.2982, test_acc: 0.7044, best: 0.7185, time: 0:01:04
 Epoch: 294, lr: 8.0e-05, train_loss: 0.2483, train_acc: 0.9162 test_loss: 4.6905, test_acc: 0.6850, best: 0.7185, time: 0:01:04
 Epoch: 295, lr: 8.0e-05, train_loss: 0.2620, train_acc: 0.9118 test_loss: 3.5666, test_acc: 0.6867, best: 0.7185, time: 0:01:05
 Epoch: 296, lr: 8.0e-05, train_loss: 0.2704, train_acc: 0.9060 test_loss: 4.0483, test_acc: 0.6835, best: 0.7185, time: 0:01:04
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2561, train_acc: 0.9198 test_loss: 2.3005, test_acc: 0.7119, best: 0.7185, time: 0:01:04
 Epoch: 298, lr: 8.0e-05, train_loss: 0.2490, train_acc: 0.9148 test_loss: 2.9080, test_acc: 0.6905, best: 0.7185, time: 0:01:04
 Epoch: 299, lr: 8.0e-05, train_loss: 0.2642, train_acc: 0.9070 test_loss: 5.1215, test_acc: 0.6811, best: 0.7185, time: 0:01:04
 Highest accuracy: 0.7185