
 Run on time: 2022-06-30 11:15:55.558685

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50_NLP
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): NetworkByName(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 256)
                (col_embed): Embedding(256, 256)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=1024, out_features=1024, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 512)
                (col_embed): Embedding(256, 512)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=2048, out_features=2048, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 1024)
                (col_embed): Embedding(256, 1024)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.6751, train_acc: 0.1604 test_loss: 2.5381, test_acc: 0.2491, best: 0.2491, time: 0:03:42
 Epoch: 2, lr: 1.0e-02, train_loss: 1.9978, train_acc: 0.2312 test_loss: 2.7913, test_acc: 0.2450, best: 0.2491, time: 0:03:42
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9260, train_acc: 0.2402 test_loss: 5.1662, test_acc: 0.2521, best: 0.2521, time: 0:03:47
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8910, train_acc: 0.2624 test_loss: 4.7740, test_acc: 0.2712, best: 0.2712, time: 0:03:45
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9295, train_acc: 0.2472 test_loss: 1.6585, test_acc: 0.3354, best: 0.3354, time: 0:03:46
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8669, train_acc: 0.2722 test_loss: 1.6876, test_acc: 0.3385, best: 0.3385, time: 0:03:45
 Epoch: 7, lr: 1.0e-02, train_loss: 1.8040, train_acc: 0.3094 test_loss: 1.7467, test_acc: 0.3564, best: 0.3564, time: 0:03:45
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7488, train_acc: 0.3270 test_loss: 1.5861, test_acc: 0.3885, best: 0.3885, time: 0:03:47
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7206, train_acc: 0.3468 test_loss: 1.5650, test_acc: 0.4060, best: 0.4060, time: 0:03:47
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6666, train_acc: 0.3714 test_loss: 1.6185, test_acc: 0.4299, best: 0.4299, time: 0:03:48
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6323, train_acc: 0.3892 test_loss: 1.5804, test_acc: 0.4115, best: 0.4299, time: 0:03:46
 Epoch: 12, lr: 1.0e-02, train_loss: 1.5741, train_acc: 0.4084 test_loss: 1.4382, test_acc: 0.4726, best: 0.4726, time: 0:03:48
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5299, train_acc: 0.4332 test_loss: 1.5738, test_acc: 0.4647, best: 0.4726, time: 0:03:46
 Epoch: 14, lr: 1.0e-02, train_loss: 1.4895, train_acc: 0.4446 test_loss: 1.6199, test_acc: 0.5038, best: 0.5038, time: 0:03:49
 Epoch: 15, lr: 1.0e-02, train_loss: 1.4518, train_acc: 0.4570 test_loss: 1.4336, test_acc: 0.4941, best: 0.5038, time: 0:03:46
 Epoch: 16, lr: 1.0e-02, train_loss: 1.4255, train_acc: 0.4696 test_loss: 1.5918, test_acc: 0.5051, best: 0.5051, time: 0:03:49
 Epoch: 17, lr: 1.0e-02, train_loss: 1.3930, train_acc: 0.4810 test_loss: 1.8615, test_acc: 0.5119, best: 0.5119, time: 0:03:47
 Epoch: 18, lr: 1.0e-02, train_loss: 1.3695, train_acc: 0.4912 test_loss: 1.6037, test_acc: 0.5413, best: 0.5413, time: 0:03:47
 Epoch: 19, lr: 1.0e-02, train_loss: 1.3310, train_acc: 0.5154 test_loss: 1.6726, test_acc: 0.5305, best: 0.5413, time: 0:03:46
 Epoch: 20, lr: 1.0e-02, train_loss: 1.2965, train_acc: 0.5268 test_loss: 1.5753, test_acc: 0.5499, best: 0.5499, time: 0:03:49
 Epoch: 21, lr: 1.0e-02, train_loss: 1.2670, train_acc: 0.5396 test_loss: 2.6820, test_acc: 0.5190, best: 0.5499, time: 0:03:46
 Epoch: 22, lr: 1.0e-02, train_loss: 1.2688, train_acc: 0.5366 test_loss: 1.5682, test_acc: 0.5343, best: 0.5499, time: 0:03:48
 Epoch: 23, lr: 1.0e-02, train_loss: 1.2332, train_acc: 0.5532 test_loss: 1.5852, test_acc: 0.5744, best: 0.5744, time: 0:03:50
 Epoch: 24, lr: 1.0e-02, train_loss: 1.1937, train_acc: 0.5650 test_loss: 1.7916, test_acc: 0.5413, best: 0.5744, time: 0:03:45
 Epoch: 25, lr: 1.0e-02, train_loss: 1.1828, train_acc: 0.5724 test_loss: 1.1231, test_acc: 0.6145, best: 0.6145, time: 0:03:49
 Epoch: 26, lr: 1.0e-02, train_loss: 1.1619, train_acc: 0.5748 test_loss: 1.4512, test_acc: 0.5806, best: 0.6145, time: 0:03:46
 Epoch: 27, lr: 1.0e-02, train_loss: 1.1419, train_acc: 0.5888 test_loss: 1.7290, test_acc: 0.5779, best: 0.6145, time: 0:03:47
 Epoch: 28, lr: 1.0e-02, train_loss: 1.1275, train_acc: 0.5874 test_loss: 1.1831, test_acc: 0.6179, best: 0.6179, time: 0:03:49
 Epoch: 29, lr: 1.0e-02, train_loss: 1.0838, train_acc: 0.6114 test_loss: 4.0669, test_acc: 0.5851, best: 0.6179, time: 0:03:46
 Epoch: 30, lr: 1.0e-02, train_loss: 1.0763, train_acc: 0.6220 test_loss: 2.3556, test_acc: 0.5769, best: 0.6179, time: 0:03:48
 Epoch: 31, lr: 1.0e-02, train_loss: 1.0497, train_acc: 0.6204 test_loss: 1.3586, test_acc: 0.6074, best: 0.6179, time: 0:03:49
 Epoch: 32, lr: 1.0e-02, train_loss: 1.0896, train_acc: 0.6030 test_loss: 1.0883, test_acc: 0.6209, best: 0.6209, time: 0:03:50
 Epoch: 33, lr: 1.0e-02, train_loss: 1.0789, train_acc: 0.6054 test_loss: 1.6004, test_acc: 0.5964, best: 0.6209, time: 0:03:46
 Epoch: 34, lr: 1.0e-02, train_loss: 1.0589, train_acc: 0.6222 test_loss: 1.0299, test_acc: 0.6392, best: 0.6392, time: 0:03:49
 Epoch: 35, lr: 1.0e-02, train_loss: 1.0104, train_acc: 0.6368 test_loss: 1.0644, test_acc: 0.6562, best: 0.6562, time: 0:03:47
 Epoch: 36, lr: 1.0e-02, train_loss: 0.9769, train_acc: 0.6478 test_loss: 1.0906, test_acc: 0.6904, best: 0.6904, time: 0:03:47
 Epoch: 37, lr: 1.0e-02, train_loss: 0.9657, train_acc: 0.6514 test_loss: 1.7519, test_acc: 0.6366, best: 0.6904, time: 0:03:46
 Epoch: 38, lr: 1.0e-02, train_loss: 0.9401, train_acc: 0.6614 test_loss: 1.9820, test_acc: 0.6295, best: 0.6904, time: 0:03:48
 Epoch: 39, lr: 1.0e-02, train_loss: 0.9449, train_acc: 0.6548 test_loss: 1.7788, test_acc: 0.6621, best: 0.6904, time: 0:03:49
 Epoch: 40, lr: 1.0e-02, train_loss: 0.9086, train_acc: 0.6676 test_loss: 2.5024, test_acc: 0.6508, best: 0.6904, time: 0:03:49
 Epoch: 41, lr: 1.0e-02, train_loss: 0.8952, train_acc: 0.6766 test_loss: 1.1355, test_acc: 0.6875, best: 0.6904, time: 0:03:49
 Epoch: 42, lr: 1.0e-02, train_loss: 0.8801, train_acc: 0.6896 test_loss: 1.7773, test_acc: 0.6690, best: 0.6904, time: 0:03:49
 Epoch: 43, lr: 1.0e-02, train_loss: 0.8758, train_acc: 0.6830 test_loss: 1.8155, test_acc: 0.6577, best: 0.6904, time: 0:03:49
 Epoch: 44, lr: 1.0e-02, train_loss: 0.8919, train_acc: 0.6786 test_loss: 0.9727, test_acc: 0.6903, best: 0.6904, time: 0:03:49
 Epoch: 45, lr: 1.0e-02, train_loss: 0.8704, train_acc: 0.6898 test_loss: 1.0086, test_acc: 0.6765, best: 0.6904, time: 0:03:49
 Epoch: 46, lr: 1.0e-02, train_loss: 0.8497, train_acc: 0.6944 test_loss: 0.9538, test_acc: 0.7039, best: 0.7039, time: 0:03:50
 Epoch: 47, lr: 1.0e-02, train_loss: 0.8263, train_acc: 0.6982 test_loss: 1.2017, test_acc: 0.6960, best: 0.7039, time: 0:03:45
 Epoch: 48, lr: 1.0e-02, train_loss: 0.8212, train_acc: 0.7042 test_loss: 1.3295, test_acc: 0.6713, best: 0.7039, time: 0:03:48
 Epoch: 49, lr: 1.0e-02, train_loss: 0.7963, train_acc: 0.7178 test_loss: 1.1859, test_acc: 0.7120, best: 0.7120, time: 0:03:50
 Epoch: 50, lr: 1.0e-02, train_loss: 0.7952, train_acc: 0.7166 test_loss: 1.2773, test_acc: 0.7015, best: 0.7120, time: 0:03:47
 Epoch: 51, lr: 1.0e-02, train_loss: 0.7745, train_acc: 0.7222 test_loss: 1.7331, test_acc: 0.6683, best: 0.7120, time: 0:03:48
 Epoch: 52, lr: 1.0e-02, train_loss: 0.7834, train_acc: 0.7228 test_loss: 1.3752, test_acc: 0.6997, best: 0.7120, time: 0:03:49
 Epoch: 53, lr: 1.0e-02, train_loss: 0.7936, train_acc: 0.7166 test_loss: 1.9981, test_acc: 0.6541, best: 0.7120, time: 0:03:49
 Epoch: 54, lr: 1.0e-02, train_loss: 0.7950, train_acc: 0.7172 test_loss: 0.8411, test_acc: 0.7185, best: 0.7185, time: 0:03:49
 Epoch: 55, lr: 1.0e-02, train_loss: 0.7525, train_acc: 0.7296 test_loss: 1.9026, test_acc: 0.6747, best: 0.7185, time: 0:03:45
 Epoch: 56, lr: 1.0e-02, train_loss: 0.7344, train_acc: 0.7442 test_loss: 1.5228, test_acc: 0.6864, best: 0.7185, time: 0:03:47
 Epoch: 57, lr: 1.0e-02, train_loss: 0.7066, train_acc: 0.7528 test_loss: 0.8733, test_acc: 0.7262, best: 0.7262, time: 0:03:49
 Epoch: 58, lr: 1.0e-02, train_loss: 0.6921, train_acc: 0.7536 test_loss: 1.0322, test_acc: 0.7155, best: 0.7262, time: 0:03:46
 Epoch: 59, lr: 1.0e-02, train_loss: 0.7050, train_acc: 0.7482 test_loss: 1.4121, test_acc: 0.7116, best: 0.7262, time: 0:03:47
 Epoch: 60, lr: 1.0e-02, train_loss: 0.6704, train_acc: 0.7640 test_loss: 1.4423, test_acc: 0.6960, best: 0.7262, time: 0:03:48
 Epoch: 61, lr: 1.0e-02, train_loss: 0.6922, train_acc: 0.7568 test_loss: 1.4810, test_acc: 0.6944, best: 0.7262, time: 0:03:48
 Epoch: 62, lr: 1.0e-02, train_loss: 0.6807, train_acc: 0.7536 test_loss: 0.9403, test_acc: 0.7001, best: 0.7262, time: 0:03:48
 Epoch: 63, lr: 1.0e-02, train_loss: 0.6708, train_acc: 0.7600 test_loss: 1.5376, test_acc: 0.7040, best: 0.7262, time: 0:03:47
 Epoch: 64, lr: 1.0e-02, train_loss: 0.6729, train_acc: 0.7594 test_loss: 2.3740, test_acc: 0.6953, best: 0.7262, time: 0:03:47
 Epoch: 65, lr: 1.0e-02, train_loss: 0.6841, train_acc: 0.7566 test_loss: 1.1278, test_acc: 0.7116, best: 0.7262, time: 0:03:47
 Epoch: 66, lr: 1.0e-02, train_loss: 0.6887, train_acc: 0.7554 test_loss: 0.9103, test_acc: 0.7360, best: 0.7360, time: 0:03:48
 Epoch: 67, lr: 1.0e-02, train_loss: 0.6819, train_acc: 0.7572 test_loss: 1.2500, test_acc: 0.7111, best: 0.7360, time: 0:03:44
 Epoch: 68, lr: 1.0e-02, train_loss: 0.6531, train_acc: 0.7700 test_loss: 1.0364, test_acc: 0.7332, best: 0.7360, time: 0:03:46
 Epoch: 69, lr: 1.0e-02, train_loss: 0.6476, train_acc: 0.7686 test_loss: 0.8452, test_acc: 0.7382, best: 0.7382, time: 0:03:48
 Epoch: 70, lr: 1.0e-02, train_loss: 0.6289, train_acc: 0.7784 test_loss: 1.0332, test_acc: 0.7219, best: 0.7382, time: 0:03:44
 Epoch: 71, lr: 1.0e-02, train_loss: 0.6080, train_acc: 0.7830 test_loss: 3.0320, test_acc: 0.6849, best: 0.7382, time: 0:03:47
 Epoch: 72, lr: 1.0e-02, train_loss: 0.6248, train_acc: 0.7816 test_loss: 2.2215, test_acc: 0.7163, best: 0.7382, time: 0:03:47
 Epoch: 73, lr: 1.0e-02, train_loss: 0.5758, train_acc: 0.7978 test_loss: 5.6521, test_acc: 0.6645, best: 0.7382, time: 0:03:47
 Epoch: 74, lr: 1.0e-02, train_loss: 0.5863, train_acc: 0.7898 test_loss: 2.3299, test_acc: 0.7209, best: 0.7382, time: 0:03:47
 Epoch: 75, lr: 1.0e-02, train_loss: 0.5641, train_acc: 0.7934 test_loss: 3.6347, test_acc: 0.7030, best: 0.7382, time: 0:03:48
 Epoch: 76, lr: 1.0e-02, train_loss: 0.5660, train_acc: 0.8032 test_loss: 2.9076, test_acc: 0.7125, best: 0.7382, time: 0:03:47
 Epoch: 77, lr: 1.0e-02, train_loss: 0.5632, train_acc: 0.7968 test_loss: 1.0355, test_acc: 0.7359, best: 0.7382, time: 0:03:47
 Epoch: 78, lr: 1.0e-02, train_loss: 0.5574, train_acc: 0.8020 test_loss: 1.6673, test_acc: 0.7371, best: 0.7382, time: 0:03:47
 Epoch: 79, lr: 1.0e-02, train_loss: 0.5577, train_acc: 0.8026 test_loss: 1.9964, test_acc: 0.7390, best: 0.7390, time: 0:03:48
 Epoch: 80, lr: 1.0e-02, train_loss: 0.5214, train_acc: 0.8146 test_loss: 3.7302, test_acc: 0.7130, best: 0.7390, time: 0:03:44
 Epoch: 81, lr: 1.0e-02, train_loss: 0.5139, train_acc: 0.8224 test_loss: 2.2412, test_acc: 0.7314, best: 0.7390, time: 0:03:46
 Epoch: 82, lr: 1.0e-02, train_loss: 0.5180, train_acc: 0.8198 test_loss: 2.0898, test_acc: 0.7234, best: 0.7390, time: 0:03:47
 Epoch: 83, lr: 1.0e-02, train_loss: 0.5319, train_acc: 0.8084 test_loss: 0.8812, test_acc: 0.7632, best: 0.7632, time: 0:03:48
 Epoch: 84, lr: 1.0e-02, train_loss: 0.5182, train_acc: 0.8176 test_loss: 2.7350, test_acc: 0.7206, best: 0.7632, time: 0:03:44
 Epoch: 85, lr: 1.0e-02, train_loss: 0.5039, train_acc: 0.8256 test_loss: 1.6890, test_acc: 0.7103, best: 0.7632, time: 0:03:46
 Epoch: 86, lr: 1.0e-02, train_loss: 0.5070, train_acc: 0.8248 test_loss: 3.4449, test_acc: 0.6940, best: 0.7632, time: 0:03:47
 Epoch: 87, lr: 1.0e-02, train_loss: 0.5093, train_acc: 0.8158 test_loss: 0.9775, test_acc: 0.7601, best: 0.7632, time: 0:03:47
 Epoch: 88, lr: 1.0e-02, train_loss: 0.4812, train_acc: 0.8330 test_loss: 1.3371, test_acc: 0.7346, best: 0.7632, time: 0:03:47
 Epoch: 89, lr: 1.0e-02, train_loss: 0.4961, train_acc: 0.8208 test_loss: 1.1206, test_acc: 0.7504, best: 0.7632, time: 0:03:47
 Epoch: 90, lr: 1.0e-02, train_loss: 0.4789, train_acc: 0.8316 test_loss: 1.2225, test_acc: 0.7376, best: 0.7632, time: 0:03:47
 Epoch: 91, lr: 1.0e-02, train_loss: 0.4725, train_acc: 0.8296 test_loss: 0.9513, test_acc: 0.7552, best: 0.7632, time: 0:03:47
 Epoch: 92, lr: 1.0e-02, train_loss: 0.4561, train_acc: 0.8344 test_loss: 1.0463, test_acc: 0.7505, best: 0.7632, time: 0:03:47
 Epoch: 93, lr: 1.0e-02, train_loss: 0.4586, train_acc: 0.8390 test_loss: 1.6887, test_acc: 0.7289, best: 0.7632, time: 0:03:47
 Epoch: 94, lr: 1.0e-02, train_loss: 0.4772, train_acc: 0.8334 test_loss: 1.6465, test_acc: 0.7140, best: 0.7632, time: 0:03:47
 Epoch: 95, lr: 1.0e-02, train_loss: 0.4628, train_acc: 0.8414 test_loss: 1.2868, test_acc: 0.7605, best: 0.7632, time: 0:03:47
 Epoch: 96, lr: 1.0e-02, train_loss: 0.4510, train_acc: 0.8412 test_loss: 1.1128, test_acc: 0.7608, best: 0.7632, time: 0:03:47
 Epoch: 97, lr: 1.0e-02, train_loss: 0.4550, train_acc: 0.8374 test_loss: 2.1228, test_acc: 0.7321, best: 0.7632, time: 0:03:47
 Epoch: 98, lr: 1.0e-02, train_loss: 0.4230, train_acc: 0.8480 test_loss: 1.8656, test_acc: 0.7376, best: 0.7632, time: 0:03:47
 Epoch: 99, lr: 1.0e-02, train_loss: 0.4366, train_acc: 0.8488 test_loss: 1.1835, test_acc: 0.7609, best: 0.7632, time: 0:03:47
 Epoch: 100, lr: 1.0e-02, train_loss: 0.4413, train_acc: 0.8432 test_loss: 1.2909, test_acc: 0.7521, best: 0.7632, time: 0:03:47
 Epoch: 101, lr: 1.0e-02, train_loss: 0.4235, train_acc: 0.8536 test_loss: 1.1876, test_acc: 0.7544, best: 0.7632, time: 0:03:47
 Epoch: 102, lr: 1.0e-02, train_loss: 0.4405, train_acc: 0.8448 test_loss: 2.5505, test_acc: 0.7399, best: 0.7632, time: 0:03:47
 Epoch: 103, lr: 1.0e-02, train_loss: 0.4346, train_acc: 0.8440 test_loss: 1.1375, test_acc: 0.7601, best: 0.7632, time: 0:03:47
 Epoch: 104, lr: 1.0e-02, train_loss: 0.4044, train_acc: 0.8614 test_loss: 1.3421, test_acc: 0.7340, best: 0.7632, time: 0:03:47
 Epoch: 105, lr: 1.0e-02, train_loss: 0.4188, train_acc: 0.8552 test_loss: 1.3179, test_acc: 0.7254, best: 0.7632, time: 0:03:47
 Epoch: 106, lr: 1.0e-02, train_loss: 0.4042, train_acc: 0.8596 test_loss: 1.3014, test_acc: 0.7399, best: 0.7632, time: 0:03:47
 Epoch: 107, lr: 1.0e-02, train_loss: 0.3800, train_acc: 0.8668 test_loss: 1.1301, test_acc: 0.7578, best: 0.7632, time: 0:03:47
 Epoch: 108, lr: 1.0e-02, train_loss: 0.4247, train_acc: 0.8500 test_loss: 1.0255, test_acc: 0.7514, best: 0.7632, time: 0:03:47
 Epoch: 109, lr: 1.0e-02, train_loss: 0.4204, train_acc: 0.8486 test_loss: 0.8644, test_acc: 0.7671, best: 0.7671, time: 0:03:48
 Epoch: 110, lr: 1.0e-02, train_loss: 0.4013, train_acc: 0.8608 test_loss: 1.1172, test_acc: 0.7585, best: 0.7671, time: 0:03:45
 Epoch: 111, lr: 1.0e-02, train_loss: 0.3927, train_acc: 0.8596 test_loss: 1.2377, test_acc: 0.7599, best: 0.7671, time: 0:03:46
 Epoch: 112, lr: 1.0e-02, train_loss: 0.3788, train_acc: 0.8676 test_loss: 1.1765, test_acc: 0.7500, best: 0.7671, time: 0:03:46
 Epoch: 113, lr: 1.0e-02, train_loss: 0.3858, train_acc: 0.8634 test_loss: 1.5823, test_acc: 0.7624, best: 0.7671, time: 0:03:47
 Epoch: 114, lr: 1.0e-02, train_loss: 0.3839, train_acc: 0.8690 test_loss: 1.5201, test_acc: 0.7515, best: 0.7671, time: 0:03:47
 Epoch: 115, lr: 1.0e-02, train_loss: 0.3894, train_acc: 0.8680 test_loss: 1.1361, test_acc: 0.7636, best: 0.7671, time: 0:03:47
 Epoch: 116, lr: 1.0e-02, train_loss: 0.3922, train_acc: 0.8632 test_loss: 1.1725, test_acc: 0.7678, best: 0.7678, time: 0:03:48
 Epoch: 117, lr: 1.0e-02, train_loss: 0.3799, train_acc: 0.8646 test_loss: 2.0394, test_acc: 0.7372, best: 0.7678, time: 0:03:43
 Epoch: 118, lr: 1.0e-02, train_loss: 0.3675, train_acc: 0.8692 test_loss: 2.5323, test_acc: 0.7432, best: 0.7678, time: 0:03:46
 Epoch: 119, lr: 1.0e-02, train_loss: 0.3936, train_acc: 0.8640 test_loss: 3.1711, test_acc: 0.7324, best: 0.7678, time: 0:03:46
 Epoch: 120, lr: 1.0e-02, train_loss: 0.3705, train_acc: 0.8668 test_loss: 1.7540, test_acc: 0.7435, best: 0.7678, time: 0:03:47
 Epoch: 121, lr: 1.0e-02, train_loss: 0.3601, train_acc: 0.8686 test_loss: 1.6464, test_acc: 0.7499, best: 0.7678, time: 0:03:47
 Epoch: 122, lr: 1.0e-02, train_loss: 0.3610, train_acc: 0.8764 test_loss: 1.3365, test_acc: 0.7634, best: 0.7678, time: 0:03:47
 Epoch: 123, lr: 1.0e-02, train_loss: 0.3518, train_acc: 0.8778 test_loss: 2.4083, test_acc: 0.7365, best: 0.7678, time: 0:03:47
 Epoch: 124, lr: 1.0e-02, train_loss: 0.3583, train_acc: 0.8736 test_loss: 1.2462, test_acc: 0.7620, best: 0.7678, time: 0:03:47
 Epoch: 125, lr: 1.0e-02, train_loss: 0.3485, train_acc: 0.8814 test_loss: 1.3450, test_acc: 0.7554, best: 0.7678, time: 0:03:46
 Epoch: 126, lr: 1.0e-02, train_loss: 0.3421, train_acc: 0.8770 test_loss: 1.4220, test_acc: 0.7469, best: 0.7678, time: 0:03:47
 Epoch: 127, lr: 1.0e-02, train_loss: 0.3368, train_acc: 0.8800 test_loss: 1.2529, test_acc: 0.7619, best: 0.7678, time: 0:03:47
 Epoch: 128, lr: 1.0e-02, train_loss: 0.3360, train_acc: 0.8814 test_loss: 1.2463, test_acc: 0.7515, best: 0.7678, time: 0:03:47
 Epoch: 129, lr: 1.0e-02, train_loss: 0.3425, train_acc: 0.8814 test_loss: 1.0828, test_acc: 0.7748, best: 0.7748, time: 0:03:46
 Epoch: 130, lr: 1.0e-02, train_loss: 0.3248, train_acc: 0.8860 test_loss: 1.4543, test_acc: 0.7536, best: 0.7748, time: 0:03:41
 Epoch: 131, lr: 1.0e-02, train_loss: 0.3330, train_acc: 0.8874 test_loss: 1.4483, test_acc: 0.7392, best: 0.7748, time: 0:03:42
 Epoch: 132, lr: 1.0e-02, train_loss: 0.3440, train_acc: 0.8798 test_loss: 1.8793, test_acc: 0.7618, best: 0.7748, time: 0:03:43
 Epoch: 133, lr: 1.0e-02, train_loss: 0.3237, train_acc: 0.8908 test_loss: 1.4602, test_acc: 0.7502, best: 0.7748, time: 0:03:44
 Epoch: 134, lr: 1.0e-02, train_loss: 0.3166, train_acc: 0.8870 test_loss: 1.1159, test_acc: 0.7748, best: 0.7748, time: 0:03:44
 Epoch: 135, lr: 1.0e-02, train_loss: 0.3301, train_acc: 0.8850 test_loss: 1.5987, test_acc: 0.7471, best: 0.7748, time: 0:03:44
 Epoch: 136, lr: 1.0e-02, train_loss: 0.3926, train_acc: 0.8608 test_loss: 0.8225, test_acc: 0.7699, best: 0.7748, time: 0:03:44
 Epoch: 137, lr: 1.0e-02, train_loss: 0.3704, train_acc: 0.8730 test_loss: 0.9363, test_acc: 0.7689, best: 0.7748, time: 0:03:44
 Epoch: 138, lr: 1.0e-02, train_loss: 0.3755, train_acc: 0.8706 test_loss: 1.3890, test_acc: 0.7476, best: 0.7748, time: 0:03:44
 Epoch: 139, lr: 1.0e-02, train_loss: 0.3608, train_acc: 0.8740 test_loss: 1.0962, test_acc: 0.7702, best: 0.7748, time: 0:03:43
 Epoch: 140, lr: 1.0e-02, train_loss: 0.3536, train_acc: 0.8724 test_loss: 2.4381, test_acc: 0.7368, best: 0.7748, time: 0:03:43
 Epoch: 141, lr: 1.0e-02, train_loss: 0.3487, train_acc: 0.8800 test_loss: 3.2872, test_acc: 0.7164, best: 0.7748, time: 0:03:43
 Epoch: 142, lr: 1.0e-02, train_loss: 0.3452, train_acc: 0.8772 test_loss: 1.5126, test_acc: 0.7456, best: 0.7748, time: 0:03:44
 Epoch: 143, lr: 1.0e-02, train_loss: 0.3417, train_acc: 0.8782 test_loss: 1.6181, test_acc: 0.7591, best: 0.7748, time: 0:03:44
 Epoch: 144, lr: 1.0e-02, train_loss: 0.3085, train_acc: 0.8932 test_loss: 1.2387, test_acc: 0.7561, best: 0.7748, time: 0:03:43
 Epoch: 145, lr: 1.0e-02, train_loss: 0.3052, train_acc: 0.8934 test_loss: 1.3284, test_acc: 0.7746, best: 0.7748, time: 0:03:43
 Epoch: 146, lr: 1.0e-02, train_loss: 0.3012, train_acc: 0.9000 test_loss: 1.7930, test_acc: 0.7631, best: 0.7748, time: 0:03:43
 Epoch: 147, lr: 1.0e-02, train_loss: 0.3115, train_acc: 0.8944 test_loss: 1.9245, test_acc: 0.7666, best: 0.7748, time: 0:03:43
 Epoch: 148, lr: 1.0e-02, train_loss: 0.2989, train_acc: 0.8990 test_loss: 2.5884, test_acc: 0.7296, best: 0.7748, time: 0:03:43
 Epoch: 149, lr: 1.0e-02, train_loss: 0.2961, train_acc: 0.8954 test_loss: 1.7172, test_acc: 0.7552, best: 0.7748, time: 0:03:43
 Epoch: 150, lr: 1.0e-02, train_loss: 0.3039, train_acc: 0.8998 test_loss: 4.6424, test_acc: 0.7276, best: 0.7748, time: 0:03:43
 Epoch: 151, lr: 1.0e-02, train_loss: 0.3034, train_acc: 0.8948 test_loss: 1.6922, test_acc: 0.7748, best: 0.7748, time: 0:03:43
 Epoch: 152, lr: 1.0e-02, train_loss: 0.2915, train_acc: 0.8996 test_loss: 1.7903, test_acc: 0.7520, best: 0.7748, time: 0:03:44
 Epoch: 153, lr: 1.0e-02, train_loss: 0.3024, train_acc: 0.8988 test_loss: 2.1158, test_acc: 0.7468, best: 0.7748, time: 0:03:44
 Epoch: 154, lr: 1.0e-02, train_loss: 0.2824, train_acc: 0.9044 test_loss: 2.3130, test_acc: 0.7415, best: 0.7748, time: 0:03:44
 Epoch: 155, lr: 1.0e-02, train_loss: 0.2837, train_acc: 0.9014 test_loss: 1.4365, test_acc: 0.7630, best: 0.7748, time: 0:03:43
 Epoch: 156, lr: 1.0e-02, train_loss: 0.2758, train_acc: 0.9070 test_loss: 1.8742, test_acc: 0.7578, best: 0.7748, time: 0:03:43
 Epoch: 157, lr: 1.0e-02, train_loss: 0.2809, train_acc: 0.9038 test_loss: 1.6112, test_acc: 0.7739, best: 0.7748, time: 0:03:43
 Epoch: 158, lr: 1.0e-02, train_loss: 0.2727, train_acc: 0.9058 test_loss: 1.6157, test_acc: 0.7719, best: 0.7748, time: 0:03:43
 Epoch: 159, lr: 1.0e-02, train_loss: 0.2544, train_acc: 0.9112 test_loss: 3.4637, test_acc: 0.7396, best: 0.7748, time: 0:03:44
 Epoch: 160, lr: 1.0e-02, train_loss: 0.2705, train_acc: 0.9052 test_loss: 1.8073, test_acc: 0.7559, best: 0.7748, time: 0:03:44
 Epoch: 161, lr: 1.0e-02, train_loss: 0.2738, train_acc: 0.9002 test_loss: 1.7019, test_acc: 0.7815, best: 0.7815, time: 0:03:45
 Epoch: 162, lr: 1.0e-02, train_loss: 0.2753, train_acc: 0.9060 test_loss: 1.4935, test_acc: 0.7719, best: 0.7815, time: 0:03:41
 Epoch: 163, lr: 1.0e-02, train_loss: 0.2713, train_acc: 0.9074 test_loss: 5.0531, test_acc: 0.7209, best: 0.7815, time: 0:03:42
 Epoch: 164, lr: 1.0e-02, train_loss: 0.2766, train_acc: 0.9054 test_loss: 2.6881, test_acc: 0.7512, best: 0.7815, time: 0:03:43
 Epoch: 165, lr: 1.0e-02, train_loss: 0.2518, train_acc: 0.9110 test_loss: 1.9819, test_acc: 0.7595, best: 0.7815, time: 0:03:43
 Epoch: 166, lr: 1.0e-02, train_loss: 0.2636, train_acc: 0.9124 test_loss: 3.0924, test_acc: 0.7454, best: 0.7815, time: 0:03:43
 Epoch: 167, lr: 1.0e-02, train_loss: 0.2555, train_acc: 0.9144 test_loss: 5.0222, test_acc: 0.7085, best: 0.7815, time: 0:03:43
 Epoch: 168, lr: 1.0e-02, train_loss: 0.2494, train_acc: 0.9116 test_loss: 2.4800, test_acc: 0.7591, best: 0.7815, time: 0:03:43
 Epoch: 169, lr: 1.0e-02, train_loss: 0.2468, train_acc: 0.9168 test_loss: 2.5210, test_acc: 0.7479, best: 0.7815, time: 0:03:43
 Epoch: 170, lr: 1.0e-02, train_loss: 0.2525, train_acc: 0.9124 test_loss: 2.3681, test_acc: 0.7476, best: 0.7815, time: 0:03:43
 Epoch: 171, lr: 1.0e-02, train_loss: 0.2442, train_acc: 0.9168 test_loss: 1.9139, test_acc: 0.7586, best: 0.7815, time: 0:03:43
 Epoch: 172, lr: 1.0e-02, train_loss: 0.2525, train_acc: 0.9092 test_loss: 2.6054, test_acc: 0.7441, best: 0.7815, time: 0:03:43
 Epoch: 173, lr: 1.0e-02, train_loss: 0.2273, train_acc: 0.9218 test_loss: 1.4102, test_acc: 0.7674, best: 0.7815, time: 0:03:43
 Epoch: 174, lr: 1.0e-02, train_loss: 0.2602, train_acc: 0.9110 test_loss: 2.1976, test_acc: 0.7578, best: 0.7815, time: 0:03:43
 Epoch: 175, lr: 1.0e-02, train_loss: 0.2371, train_acc: 0.9190 test_loss: 2.2417, test_acc: 0.7589, best: 0.7815, time: 0:03:43
 Epoch: 176, lr: 1.0e-02, train_loss: 0.2539, train_acc: 0.9136 test_loss: 1.6258, test_acc: 0.7844, best: 0.7844, time: 0:03:44
 Epoch: 177, lr: 1.0e-02, train_loss: 0.2499, train_acc: 0.9134 test_loss: 2.1470, test_acc: 0.7628, best: 0.7844, time: 0:03:41
 Epoch: 178, lr: 1.0e-02, train_loss: 0.2585, train_acc: 0.9082 test_loss: 1.7041, test_acc: 0.7669, best: 0.7844, time: 0:03:42
 Epoch: 179, lr: 1.0e-02, train_loss: 0.2567, train_acc: 0.9086 test_loss: 1.5908, test_acc: 0.7820, best: 0.7844, time: 0:03:44
 Epoch: 180, lr: 2.0e-03, train_loss: 0.2072, train_acc: 0.9286 test_loss: 2.3325, test_acc: 0.7849, best: 0.7849, time: 0:03:45
 Epoch: 181, lr: 2.0e-03, train_loss: 0.1876, train_acc: 0.9366 test_loss: 1.9687, test_acc: 0.7914, best: 0.7914, time: 0:03:42
 Epoch: 182, lr: 2.0e-03, train_loss: 0.1901, train_acc: 0.9314 test_loss: 1.6223, test_acc: 0.7933, best: 0.7933, time: 0:03:42
 Epoch: 183, lr: 2.0e-03, train_loss: 0.1661, train_acc: 0.9418 test_loss: 1.7220, test_acc: 0.7915, best: 0.7933, time: 0:03:41
 Epoch: 184, lr: 2.0e-03, train_loss: 0.1786, train_acc: 0.9424 test_loss: 1.8751, test_acc: 0.7844, best: 0.7933, time: 0:03:42
 Epoch: 185, lr: 2.0e-03, train_loss: 0.1585, train_acc: 0.9442 test_loss: 2.3703, test_acc: 0.7779, best: 0.7933, time: 0:03:43
 Epoch: 186, lr: 2.0e-03, train_loss: 0.1832, train_acc: 0.9336 test_loss: 1.2402, test_acc: 0.8063, best: 0.8063, time: 0:03:44
 Epoch: 187, lr: 2.0e-03, train_loss: 0.1519, train_acc: 0.9468 test_loss: 1.6835, test_acc: 0.7919, best: 0.8063, time: 0:03:41
 Epoch: 188, lr: 2.0e-03, train_loss: 0.1634, train_acc: 0.9474 test_loss: 1.7426, test_acc: 0.7916, best: 0.8063, time: 0:03:42
 Epoch: 189, lr: 2.0e-03, train_loss: 0.1615, train_acc: 0.9428 test_loss: 2.0439, test_acc: 0.7907, best: 0.8063, time: 0:03:43
 Epoch: 190, lr: 2.0e-03, train_loss: 0.1460, train_acc: 0.9488 test_loss: 1.3880, test_acc: 0.8015, best: 0.8063, time: 0:03:43
 Epoch: 191, lr: 2.0e-03, train_loss: 0.1652, train_acc: 0.9424 test_loss: 1.6273, test_acc: 0.7944, best: 0.8063, time: 0:03:43
 Epoch: 192, lr: 2.0e-03, train_loss: 0.1633, train_acc: 0.9468 test_loss: 1.4232, test_acc: 0.8004, best: 0.8063, time: 0:03:43
 Epoch: 193, lr: 2.0e-03, train_loss: 0.1601, train_acc: 0.9436 test_loss: 1.7393, test_acc: 0.7959, best: 0.8063, time: 0:03:43
 Epoch: 194, lr: 2.0e-03, train_loss: 0.1562, train_acc: 0.9448 test_loss: 1.1018, test_acc: 0.8101, best: 0.8101, time: 0:03:44
 Epoch: 195, lr: 2.0e-03, train_loss: 0.1525, train_acc: 0.9484 test_loss: 1.4996, test_acc: 0.7995, best: 0.8101, time: 0:03:41
 Epoch: 196, lr: 2.0e-03, train_loss: 0.1556, train_acc: 0.9452 test_loss: 2.9613, test_acc: 0.7815, best: 0.8101, time: 0:03:42
 Epoch: 197, lr: 2.0e-03, train_loss: 0.1328, train_acc: 0.9540 test_loss: 2.3167, test_acc: 0.7920, best: 0.8101, time: 0:03:43
 Epoch: 198, lr: 2.0e-03, train_loss: 0.1559, train_acc: 0.9474 test_loss: 3.3485, test_acc: 0.7812, best: 0.8101, time: 0:03:44
 Epoch: 199, lr: 2.0e-03, train_loss: 0.1408, train_acc: 0.9510 test_loss: 1.8985, test_acc: 0.7946, best: 0.8101, time: 0:03:44
 Epoch: 200, lr: 2.0e-03, train_loss: 0.1506, train_acc: 0.9484 test_loss: 3.0062, test_acc: 0.7861, best: 0.8101, time: 0:03:44
 Epoch: 201, lr: 2.0e-03, train_loss: 0.1388, train_acc: 0.9514 test_loss: 1.5073, test_acc: 0.8025, best: 0.8101, time: 0:03:43
 Epoch: 202, lr: 2.0e-03, train_loss: 0.1431, train_acc: 0.9526 test_loss: 2.7335, test_acc: 0.7917, best: 0.8101, time: 0:03:43
 Epoch: 203, lr: 2.0e-03, train_loss: 0.1581, train_acc: 0.9460 test_loss: 2.3946, test_acc: 0.7890, best: 0.8101, time: 0:03:43
 Epoch: 204, lr: 2.0e-03, train_loss: 0.1481, train_acc: 0.9512 test_loss: 1.8335, test_acc: 0.7970, best: 0.8101, time: 0:03:43
 Epoch: 205, lr: 2.0e-03, train_loss: 0.1363, train_acc: 0.9492 test_loss: 1.5913, test_acc: 0.8021, best: 0.8101, time: 0:03:43
 Epoch: 206, lr: 2.0e-03, train_loss: 0.1362, train_acc: 0.9518 test_loss: 2.3073, test_acc: 0.7880, best: 0.8101, time: 0:03:43
 Epoch: 207, lr: 2.0e-03, train_loss: 0.1348, train_acc: 0.9536 test_loss: 1.5842, test_acc: 0.7965, best: 0.8101, time: 0:03:43
 Epoch: 208, lr: 2.0e-03, train_loss: 0.1404, train_acc: 0.9540 test_loss: 2.6685, test_acc: 0.7844, best: 0.8101, time: 0:03:43
 Epoch: 209, lr: 2.0e-03, train_loss: 0.1403, train_acc: 0.9538 test_loss: 2.0459, test_acc: 0.7921, best: 0.8101, time: 0:03:43
 Epoch: 210, lr: 2.0e-03, train_loss: 0.1328, train_acc: 0.9554 test_loss: 2.1258, test_acc: 0.7886, best: 0.8101, time: 0:03:43
 Epoch: 211, lr: 2.0e-03, train_loss: 0.1397, train_acc: 0.9526 test_loss: 5.4231, test_acc: 0.7586, best: 0.8101, time: 0:03:43
 Epoch: 212, lr: 2.0e-03, train_loss: 0.1413, train_acc: 0.9530 test_loss: 2.2661, test_acc: 0.7877, best: 0.8101, time: 0:03:44
 Epoch: 213, lr: 2.0e-03, train_loss: 0.1312, train_acc: 0.9556 test_loss: 1.6524, test_acc: 0.7989, best: 0.8101, time: 0:03:44
 Epoch: 214, lr: 2.0e-03, train_loss: 0.1301, train_acc: 0.9530 test_loss: 3.4199, test_acc: 0.7772, best: 0.8101, time: 0:03:44
 Epoch: 215, lr: 2.0e-03, train_loss: 0.1381, train_acc: 0.9540 test_loss: 1.8617, test_acc: 0.7960, best: 0.8101, time: 0:03:43
 Epoch: 216, lr: 2.0e-03, train_loss: 0.1301, train_acc: 0.9544 test_loss: 2.5556, test_acc: 0.7903, best: 0.8101, time: 0:03:43
 Epoch: 217, lr: 2.0e-03, train_loss: 0.1249, train_acc: 0.9562 test_loss: 2.2063, test_acc: 0.7929, best: 0.8101, time: 0:03:43
 Epoch: 218, lr: 2.0e-03, train_loss: 0.1438, train_acc: 0.9516 test_loss: 4.8366, test_acc: 0.7606, best: 0.8101, time: 0:03:43
 Epoch: 219, lr: 2.0e-03, train_loss: 0.1272, train_acc: 0.9544 test_loss: 2.7777, test_acc: 0.7915, best: 0.8101, time: 0:03:43
 Epoch: 220, lr: 2.0e-03, train_loss: 0.1427, train_acc: 0.9528 test_loss: 4.3562, test_acc: 0.7817, best: 0.8101, time: 0:03:43
 Epoch: 221, lr: 2.0e-03, train_loss: 0.1306, train_acc: 0.9554 test_loss: 4.8466, test_acc: 0.7745, best: 0.8101, time: 0:03:43
 Epoch: 222, lr: 2.0e-03, train_loss: 0.1367, train_acc: 0.9510 test_loss: 3.5792, test_acc: 0.7799, best: 0.8101, time: 0:03:43
 Epoch: 223, lr: 2.0e-03, train_loss: 0.1214, train_acc: 0.9562 test_loss: 2.8357, test_acc: 0.7969, best: 0.8101, time: 0:03:43
 Epoch: 224, lr: 2.0e-03, train_loss: 0.1367, train_acc: 0.9522 test_loss: 3.7887, test_acc: 0.7834, best: 0.8101, time: 0:03:43
 Epoch: 225, lr: 2.0e-03, train_loss: 0.1339, train_acc: 0.9518 test_loss: 1.9741, test_acc: 0.8024, best: 0.8101, time: 0:03:43
 Epoch: 226, lr: 2.0e-03, train_loss: 0.1371, train_acc: 0.9518 test_loss: 2.1737, test_acc: 0.7977, best: 0.8101, time: 0:03:43
 Epoch: 227, lr: 2.0e-03, train_loss: 0.1399, train_acc: 0.9512 test_loss: 1.8040, test_acc: 0.7921, best: 0.8101, time: 0:03:43
 Epoch: 228, lr: 2.0e-03, train_loss: 0.1277, train_acc: 0.9582 test_loss: 3.4590, test_acc: 0.7788, best: 0.8101, time: 0:03:44
 Epoch: 229, lr: 2.0e-03, train_loss: 0.1321, train_acc: 0.9516 test_loss: 2.7799, test_acc: 0.7887, best: 0.8101, time: 0:03:44
 Epoch: 230, lr: 2.0e-03, train_loss: 0.1296, train_acc: 0.9552 test_loss: 2.4723, test_acc: 0.7915, best: 0.8101, time: 0:03:43
 Epoch: 231, lr: 2.0e-03, train_loss: 0.1292, train_acc: 0.9532 test_loss: 1.9310, test_acc: 0.7957, best: 0.8101, time: 0:03:43
 Epoch: 232, lr: 2.0e-03, train_loss: 0.1162, train_acc: 0.9584 test_loss: 1.5814, test_acc: 0.8029, best: 0.8101, time: 0:03:43
 Epoch: 233, lr: 2.0e-03, train_loss: 0.1307, train_acc: 0.9574 test_loss: 2.9396, test_acc: 0.7847, best: 0.8101, time: 0:03:43
 Epoch: 234, lr: 2.0e-03, train_loss: 0.1288, train_acc: 0.9570 test_loss: 2.2350, test_acc: 0.7940, best: 0.8101, time: 0:03:43
 Epoch: 235, lr: 2.0e-03, train_loss: 0.1309, train_acc: 0.9564 test_loss: 5.0657, test_acc: 0.7680, best: 0.8101, time: 0:03:43
 Epoch: 236, lr: 2.0e-03, train_loss: 0.1299, train_acc: 0.9506 test_loss: 3.3356, test_acc: 0.7911, best: 0.8101, time: 0:03:43
 Epoch: 237, lr: 2.0e-03, train_loss: 0.1250, train_acc: 0.9578 test_loss: 4.5298, test_acc: 0.7796, best: 0.8101, time: 0:03:43
 Epoch: 238, lr: 2.0e-03, train_loss: 0.1152, train_acc: 0.9614 test_loss: 3.3293, test_acc: 0.7974, best: 0.8101, time: 0:03:43
 Epoch: 239, lr: 2.0e-03, train_loss: 0.1207, train_acc: 0.9616 test_loss: 4.0256, test_acc: 0.7811, best: 0.8101, time: 0:03:44
 Epoch: 240, lr: 4.0e-04, train_loss: 0.1318, train_acc: 0.9580 test_loss: 3.6988, test_acc: 0.7820, best: 0.8101, time: 0:03:44
 Epoch: 241, lr: 4.0e-04, train_loss: 0.1161, train_acc: 0.9604 test_loss: 3.1097, test_acc: 0.7953, best: 0.8101, time: 0:03:44
 Epoch: 242, lr: 4.0e-04, train_loss: 0.1224, train_acc: 0.9594 test_loss: 5.9502, test_acc: 0.7715, best: 0.8101, time: 0:03:43
 Epoch: 243, lr: 4.0e-04, train_loss: 0.1123, train_acc: 0.9616 test_loss: 4.6453, test_acc: 0.7840, best: 0.8101, time: 0:03:43
 Epoch: 244, lr: 4.0e-04, train_loss: 0.1156, train_acc: 0.9610 test_loss: 3.1288, test_acc: 0.7915, best: 0.8101, time: 0:03:43
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1279, train_acc: 0.9552 test_loss: 4.1733, test_acc: 0.7851, best: 0.8101, time: 0:03:43
 Epoch: 246, lr: 4.0e-04, train_loss: 0.1183, train_acc: 0.9576 test_loss: 3.3399, test_acc: 0.7954, best: 0.8101, time: 0:03:43
 Epoch: 247, lr: 4.0e-04, train_loss: 0.1230, train_acc: 0.9552 test_loss: 3.7614, test_acc: 0.7885, best: 0.8101, time: 0:03:43
 Epoch: 248, lr: 4.0e-04, train_loss: 0.1101, train_acc: 0.9660 test_loss: 4.3286, test_acc: 0.7853, best: 0.8101, time: 0:03:44
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1116, train_acc: 0.9620 test_loss: 6.0359, test_acc: 0.7796, best: 0.8101, time: 0:03:46
 Epoch: 250, lr: 4.0e-04, train_loss: 0.1168, train_acc: 0.9582 test_loss: 2.3740, test_acc: 0.8033, best: 0.8101, time: 0:03:48
 Epoch: 251, lr: 4.0e-04, train_loss: 0.1089, train_acc: 0.9630 test_loss: 3.4637, test_acc: 0.7879, best: 0.8101, time: 0:03:49
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1201, train_acc: 0.9580 test_loss: 4.1051, test_acc: 0.7876, best: 0.8101, time: 0:03:49
 Epoch: 253, lr: 4.0e-04, train_loss: 0.1207, train_acc: 0.9584 test_loss: 5.1943, test_acc: 0.7804, best: 0.8101, time: 0:03:49
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1205, train_acc: 0.9592 test_loss: 5.0761, test_acc: 0.7760, best: 0.8101, time: 0:03:49
 Epoch: 255, lr: 4.0e-04, train_loss: 0.1139, train_acc: 0.9630 test_loss: 2.9150, test_acc: 0.7954, best: 0.8101, time: 0:03:49
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1190, train_acc: 0.9614 test_loss: 2.5081, test_acc: 0.7977, best: 0.8101, time: 0:03:49
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1185, train_acc: 0.9588 test_loss: 2.0633, test_acc: 0.8033, best: 0.8101, time: 0:03:49
 Epoch: 258, lr: 4.0e-04, train_loss: 0.1156, train_acc: 0.9606 test_loss: 4.1124, test_acc: 0.7866, best: 0.8101, time: 0:03:49
 Epoch: 259, lr: 4.0e-04, train_loss: 0.1089, train_acc: 0.9620 test_loss: 3.1574, test_acc: 0.7933, best: 0.8101, time: 0:03:49
 Epoch: 260, lr: 4.0e-04, train_loss: 0.0980, train_acc: 0.9684 test_loss: 2.8785, test_acc: 0.7944, best: 0.8101, time: 0:03:49
 Epoch: 261, lr: 4.0e-04, train_loss: 0.1214, train_acc: 0.9592 test_loss: 3.5737, test_acc: 0.7874, best: 0.8101, time: 0:03:49
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1105, train_acc: 0.9634 test_loss: 3.7090, test_acc: 0.7796, best: 0.8101, time: 0:03:49
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1145, train_acc: 0.9594 test_loss: 4.1626, test_acc: 0.7871, best: 0.8101, time: 0:03:49
 Epoch: 264, lr: 4.0e-04, train_loss: 0.1125, train_acc: 0.9584 test_loss: 4.9233, test_acc: 0.7728, best: 0.8101, time: 0:03:48
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1246, train_acc: 0.9572 test_loss: 6.0933, test_acc: 0.7679, best: 0.8101, time: 0:03:47
 Epoch: 266, lr: 4.0e-04, train_loss: 0.1048, train_acc: 0.9648 test_loss: 5.7827, test_acc: 0.7709, best: 0.8101, time: 0:03:48
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1218, train_acc: 0.9604 test_loss: 2.1181, test_acc: 0.8017, best: 0.8101, time: 0:03:48
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1069, train_acc: 0.9642 test_loss: 3.2799, test_acc: 0.7921, best: 0.8101, time: 0:03:48
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1040, train_acc: 0.9662 test_loss: 4.4393, test_acc: 0.7786, best: 0.8101, time: 0:03:48
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1092, train_acc: 0.9598 test_loss: 2.0792, test_acc: 0.8006, best: 0.8101, time: 0:03:48
 Epoch: 271, lr: 8.0e-05, train_loss: 0.1108, train_acc: 0.9646 test_loss: 4.6798, test_acc: 0.7792, best: 0.8101, time: 0:03:47
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1152, train_acc: 0.9620 test_loss: 4.8062, test_acc: 0.7794, best: 0.8101, time: 0:03:48
 Epoch: 273, lr: 8.0e-05, train_loss: 0.1091, train_acc: 0.9606 test_loss: 6.7265, test_acc: 0.7709, best: 0.8101, time: 0:03:48
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1090, train_acc: 0.9646 test_loss: 7.2446, test_acc: 0.7651, best: 0.8101, time: 0:03:48
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1140, train_acc: 0.9618 test_loss: 5.6161, test_acc: 0.7671, best: 0.8101, time: 0:03:48
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1179, train_acc: 0.9592 test_loss: 6.9879, test_acc: 0.7599, best: 0.8101, time: 0:03:48
 Epoch: 277, lr: 8.0e-05, train_loss: 0.1026, train_acc: 0.9658 test_loss: 3.5831, test_acc: 0.7910, best: 0.8101, time: 0:03:48
 Epoch: 278, lr: 8.0e-05, train_loss: 0.1048, train_acc: 0.9654 test_loss: 5.7913, test_acc: 0.7692, best: 0.8101, time: 0:03:48
 Epoch: 279, lr: 8.0e-05, train_loss: 0.1159, train_acc: 0.9624 test_loss: 3.0966, test_acc: 0.7910, best: 0.8101, time: 0:03:48
 Epoch: 280, lr: 8.0e-05, train_loss: 0.1104, train_acc: 0.9630 test_loss: 3.5471, test_acc: 0.7899, best: 0.8101, time: 0:03:48
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1032, train_acc: 0.9630 test_loss: 2.0686, test_acc: 0.8041, best: 0.8101, time: 0:03:48
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1062, train_acc: 0.9640 test_loss: 2.1805, test_acc: 0.8071, best: 0.8101, time: 0:03:48
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1161, train_acc: 0.9604 test_loss: 2.3739, test_acc: 0.8033, best: 0.8101, time: 0:03:48
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1129, train_acc: 0.9614 test_loss: 4.5194, test_acc: 0.7874, best: 0.8101, time: 0:03:48
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1171, train_acc: 0.9598 test_loss: 5.3809, test_acc: 0.7670, best: 0.8101, time: 0:03:48
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1073, train_acc: 0.9620 test_loss: 4.0926, test_acc: 0.7849, best: 0.8101, time: 0:03:48
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1072, train_acc: 0.9616 test_loss: 2.4786, test_acc: 0.7990, best: 0.8101, time: 0:03:48
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1198, train_acc: 0.9588 test_loss: 2.2692, test_acc: 0.8021, best: 0.8101, time: 0:03:48
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1062, train_acc: 0.9622 test_loss: 3.5193, test_acc: 0.7896, best: 0.8101, time: 0:03:48
 Epoch: 290, lr: 8.0e-05, train_loss: 0.1032, train_acc: 0.9664 test_loss: 3.5938, test_acc: 0.7877, best: 0.8101, time: 0:03:48
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1057, train_acc: 0.9640 test_loss: 4.7924, test_acc: 0.7820, best: 0.8101, time: 0:03:48
 Epoch: 292, lr: 8.0e-05, train_loss: 0.1129, train_acc: 0.9626 test_loss: 3.0344, test_acc: 0.7935, best: 0.8101, time: 0:03:48
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1069, train_acc: 0.9634 test_loss: 2.9523, test_acc: 0.7921, best: 0.8101, time: 0:03:48
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1130, train_acc: 0.9638 test_loss: 2.8578, test_acc: 0.7935, best: 0.8101, time: 0:03:48
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1061, train_acc: 0.9624 test_loss: 5.7306, test_acc: 0.7678, best: 0.8101, time: 0:03:48
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1080, train_acc: 0.9602 test_loss: 2.8898, test_acc: 0.7946, best: 0.8101, time: 0:03:49
 Epoch: 297, lr: 8.0e-05, train_loss: 0.1065, train_acc: 0.9616 test_loss: 3.0586, test_acc: 0.7905, best: 0.8101, time: 0:03:49
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1169, train_acc: 0.9594 test_loss: 3.9030, test_acc: 0.7866, best: 0.8101, time: 0:03:48
 Epoch: 299, lr: 8.0e-05, train_loss: 0.1152, train_acc: 0.9626 test_loss: 2.9792, test_acc: 0.7921, best: 0.8101, time: 0:03:48
 Highest accuracy: 0.8101