
 Run on time: 2022-06-29 22:12:15.102540

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50_NLP_2222
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): NetworkByName(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 128)
                (col_embed): Embedding(256, 128)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 256)
                (col_embed): Embedding(256, 256)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=1024, out_features=1024, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 512)
                (col_embed): Embedding(256, 512)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=2048, out_features=2048, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 1024)
                (col_embed): Embedding(256, 1024)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.0653, train_acc: 0.1552 test_loss: 3.2701, test_acc: 0.1936, best: 0.1936, time: 0:01:40
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0777, train_acc: 0.2190 test_loss: 2.6310, test_acc: 0.2789, best: 0.2789, time: 0:01:38
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9675, train_acc: 0.2510 test_loss: 2.1408, test_acc: 0.2895, best: 0.2895, time: 0:01:38
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8997, train_acc: 0.2760 test_loss: 2.4334, test_acc: 0.3315, best: 0.3315, time: 0:01:39
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8617, train_acc: 0.2918 test_loss: 1.9188, test_acc: 0.3470, best: 0.3470, time: 0:01:39
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8253, train_acc: 0.3156 test_loss: 1.6389, test_acc: 0.3982, best: 0.3982, time: 0:01:38
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7720, train_acc: 0.3278 test_loss: 1.8057, test_acc: 0.3738, best: 0.3982, time: 0:01:36
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7571, train_acc: 0.3408 test_loss: 1.6894, test_acc: 0.3891, best: 0.3982, time: 0:01:37
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7211, train_acc: 0.3510 test_loss: 1.6099, test_acc: 0.3952, best: 0.3982, time: 0:01:36
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6702, train_acc: 0.3694 test_loss: 1.7728, test_acc: 0.3960, best: 0.3982, time: 0:01:34
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6300, train_acc: 0.3944 test_loss: 1.7716, test_acc: 0.4110, best: 0.4110, time: 0:01:38
 Epoch: 12, lr: 1.0e-02, train_loss: 1.5844, train_acc: 0.4134 test_loss: 1.5613, test_acc: 0.4639, best: 0.4639, time: 0:01:40
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5600, train_acc: 0.4128 test_loss: 1.8129, test_acc: 0.4804, best: 0.4804, time: 0:01:39
 Epoch: 14, lr: 1.0e-02, train_loss: 1.5073, train_acc: 0.4396 test_loss: 1.8382, test_acc: 0.4364, best: 0.4804, time: 0:01:36
 Epoch: 15, lr: 1.0e-02, train_loss: 1.4963, train_acc: 0.4514 test_loss: 1.4948, test_acc: 0.4675, best: 0.4804, time: 0:01:36
 Epoch: 16, lr: 1.0e-02, train_loss: 1.4595, train_acc: 0.4626 test_loss: 4.4706, test_acc: 0.4278, best: 0.4804, time: 0:01:36
 Epoch: 17, lr: 1.0e-02, train_loss: 1.4487, train_acc: 0.4616 test_loss: 1.4052, test_acc: 0.5129, best: 0.5129, time: 0:01:37
 Epoch: 18, lr: 1.0e-02, train_loss: 1.4351, train_acc: 0.4750 test_loss: 1.5085, test_acc: 0.5154, best: 0.5154, time: 0:01:38
 Epoch: 19, lr: 1.0e-02, train_loss: 1.3954, train_acc: 0.4916 test_loss: 1.3882, test_acc: 0.5216, best: 0.5216, time: 0:01:37
 Epoch: 20, lr: 1.0e-02, train_loss: 1.3610, train_acc: 0.4944 test_loss: 1.4535, test_acc: 0.5164, best: 0.5216, time: 0:01:35
 Epoch: 21, lr: 1.0e-02, train_loss: 1.3512, train_acc: 0.4908 test_loss: 1.4687, test_acc: 0.5400, best: 0.5400, time: 0:01:37
 Epoch: 22, lr: 1.0e-02, train_loss: 1.3215, train_acc: 0.5074 test_loss: 2.0979, test_acc: 0.5515, best: 0.5515, time: 0:01:38
 Epoch: 23, lr: 1.0e-02, train_loss: 1.3217, train_acc: 0.5166 test_loss: 1.3159, test_acc: 0.5535, best: 0.5535, time: 0:01:39
 Epoch: 24, lr: 1.0e-02, train_loss: 1.3130, train_acc: 0.5196 test_loss: 1.2495, test_acc: 0.5484, best: 0.5535, time: 0:01:36
 Epoch: 25, lr: 1.0e-02, train_loss: 1.2724, train_acc: 0.5324 test_loss: 1.2544, test_acc: 0.5607, best: 0.5607, time: 0:01:39
 Epoch: 26, lr: 1.0e-02, train_loss: 1.2949, train_acc: 0.5206 test_loss: 1.3054, test_acc: 0.5148, best: 0.5607, time: 0:01:37
 Epoch: 27, lr: 1.0e-02, train_loss: 1.3099, train_acc: 0.5256 test_loss: 1.3236, test_acc: 0.5539, best: 0.5607, time: 0:01:37
 Epoch: 28, lr: 1.0e-02, train_loss: 1.2428, train_acc: 0.5460 test_loss: 1.3245, test_acc: 0.5676, best: 0.5676, time: 0:01:39
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2184, train_acc: 0.5676 test_loss: 1.3596, test_acc: 0.5704, best: 0.5704, time: 0:01:40
 Epoch: 30, lr: 1.0e-02, train_loss: 1.1865, train_acc: 0.5610 test_loss: 1.3731, test_acc: 0.5769, best: 0.5769, time: 0:01:39
 Epoch: 31, lr: 1.0e-02, train_loss: 1.2112, train_acc: 0.5618 test_loss: 1.1540, test_acc: 0.5820, best: 0.5820, time: 0:01:39
 Epoch: 32, lr: 1.0e-02, train_loss: 1.1977, train_acc: 0.5602 test_loss: 1.2143, test_acc: 0.5673, best: 0.5820, time: 0:01:36
 Epoch: 33, lr: 1.0e-02, train_loss: 1.1706, train_acc: 0.5764 test_loss: 1.1187, test_acc: 0.5877, best: 0.5877, time: 0:01:38
 Epoch: 34, lr: 1.0e-02, train_loss: 1.1448, train_acc: 0.5870 test_loss: 1.0660, test_acc: 0.6156, best: 0.6156, time: 0:01:39
 Epoch: 35, lr: 1.0e-02, train_loss: 1.1377, train_acc: 0.5878 test_loss: 1.3942, test_acc: 0.5282, best: 0.6156, time: 0:01:37
 Epoch: 36, lr: 1.0e-02, train_loss: 1.1319, train_acc: 0.5842 test_loss: 1.1303, test_acc: 0.5984, best: 0.6156, time: 0:01:37
 Epoch: 37, lr: 1.0e-02, train_loss: 1.0987, train_acc: 0.5986 test_loss: 1.0909, test_acc: 0.6062, best: 0.6156, time: 0:01:36
 Epoch: 38, lr: 1.0e-02, train_loss: 1.1013, train_acc: 0.6012 test_loss: 1.1693, test_acc: 0.5919, best: 0.6156, time: 0:01:37
 Epoch: 39, lr: 1.0e-02, train_loss: 1.0917, train_acc: 0.6038 test_loss: 1.1534, test_acc: 0.6062, best: 0.6156, time: 0:01:37
 Epoch: 40, lr: 1.0e-02, train_loss: 1.0481, train_acc: 0.6258 test_loss: 1.0520, test_acc: 0.6306, best: 0.6306, time: 0:01:39
 Epoch: 41, lr: 1.0e-02, train_loss: 1.0507, train_acc: 0.6260 test_loss: 1.0240, test_acc: 0.6308, best: 0.6308, time: 0:01:39
 Epoch: 42, lr: 1.0e-02, train_loss: 1.0209, train_acc: 0.6410 test_loss: 1.0786, test_acc: 0.6290, best: 0.6308, time: 0:01:38
 Epoch: 43, lr: 1.0e-02, train_loss: 1.0279, train_acc: 0.6286 test_loss: 1.0872, test_acc: 0.6161, best: 0.6308, time: 0:01:37
 Epoch: 44, lr: 1.0e-02, train_loss: 1.0085, train_acc: 0.6436 test_loss: 1.1256, test_acc: 0.6210, best: 0.6308, time: 0:01:37
 Epoch: 45, lr: 1.0e-02, train_loss: 1.0057, train_acc: 0.6404 test_loss: 1.0281, test_acc: 0.6345, best: 0.6345, time: 0:01:39
 Epoch: 46, lr: 1.0e-02, train_loss: 0.9737, train_acc: 0.6458 test_loss: 1.0846, test_acc: 0.6440, best: 0.6440, time: 0:01:39
 Epoch: 47, lr: 1.0e-02, train_loss: 0.9658, train_acc: 0.6568 test_loss: 1.0009, test_acc: 0.6464, best: 0.6464, time: 0:01:39
 Epoch: 48, lr: 1.0e-02, train_loss: 0.9546, train_acc: 0.6516 test_loss: 0.9930, test_acc: 0.6574, best: 0.6574, time: 0:01:39
 Epoch: 49, lr: 1.0e-02, train_loss: 0.9648, train_acc: 0.6570 test_loss: 1.0627, test_acc: 0.6416, best: 0.6574, time: 0:01:36
 Epoch: 50, lr: 1.0e-02, train_loss: 0.9726, train_acc: 0.6530 test_loss: 0.9696, test_acc: 0.6614, best: 0.6614, time: 0:01:39
 Epoch: 51, lr: 1.0e-02, train_loss: 0.9518, train_acc: 0.6622 test_loss: 0.9730, test_acc: 0.6614, best: 0.6614, time: 0:01:36
 Epoch: 52, lr: 1.0e-02, train_loss: 0.9239, train_acc: 0.6696 test_loss: 1.1590, test_acc: 0.6305, best: 0.6614, time: 0:01:36
 Epoch: 53, lr: 1.0e-02, train_loss: 0.9266, train_acc: 0.6682 test_loss: 1.1258, test_acc: 0.6374, best: 0.6614, time: 0:01:37
 Epoch: 54, lr: 1.0e-02, train_loss: 0.9183, train_acc: 0.6746 test_loss: 1.2155, test_acc: 0.6324, best: 0.6614, time: 0:01:36
 Epoch: 55, lr: 1.0e-02, train_loss: 0.8830, train_acc: 0.6782 test_loss: 0.9930, test_acc: 0.6614, best: 0.6614, time: 0:01:36
 Epoch: 56, lr: 1.0e-02, train_loss: 0.8733, train_acc: 0.6840 test_loss: 1.0455, test_acc: 0.6551, best: 0.6614, time: 0:01:36
 Epoch: 57, lr: 1.0e-02, train_loss: 0.8665, train_acc: 0.6872 test_loss: 1.0220, test_acc: 0.6641, best: 0.6641, time: 0:01:39
 Epoch: 58, lr: 1.0e-02, train_loss: 0.8267, train_acc: 0.7110 test_loss: 0.9737, test_acc: 0.6806, best: 0.6806, time: 0:01:39
 Epoch: 59, lr: 1.0e-02, train_loss: 0.8505, train_acc: 0.6984 test_loss: 1.1104, test_acc: 0.6631, best: 0.6806, time: 0:01:36
 Epoch: 60, lr: 1.0e-02, train_loss: 0.8472, train_acc: 0.7000 test_loss: 0.9638, test_acc: 0.6781, best: 0.6806, time: 0:01:37
 Epoch: 61, lr: 1.0e-02, train_loss: 0.8211, train_acc: 0.7052 test_loss: 0.9330, test_acc: 0.6780, best: 0.6806, time: 0:01:36
 Epoch: 62, lr: 1.0e-02, train_loss: 0.8064, train_acc: 0.7126 test_loss: 0.9624, test_acc: 0.6844, best: 0.6844, time: 0:01:39
 Epoch: 63, lr: 1.0e-02, train_loss: 0.7925, train_acc: 0.7144 test_loss: 0.8863, test_acc: 0.7021, best: 0.7021, time: 0:01:41
 Epoch: 64, lr: 1.0e-02, train_loss: 0.7957, train_acc: 0.7126 test_loss: 1.0196, test_acc: 0.6801, best: 0.7021, time: 0:01:35
 Epoch: 65, lr: 1.0e-02, train_loss: 0.7824, train_acc: 0.7214 test_loss: 1.0605, test_acc: 0.6754, best: 0.7021, time: 0:01:36
 Epoch: 66, lr: 1.0e-02, train_loss: 0.7610, train_acc: 0.7312 test_loss: 1.0339, test_acc: 0.6704, best: 0.7021, time: 0:01:36
 Epoch: 67, lr: 1.0e-02, train_loss: 0.7562, train_acc: 0.7256 test_loss: 0.9898, test_acc: 0.6926, best: 0.7021, time: 0:01:36
 Epoch: 68, lr: 1.0e-02, train_loss: 0.7362, train_acc: 0.7334 test_loss: 1.0581, test_acc: 0.6757, best: 0.7021, time: 0:01:36
 Epoch: 69, lr: 1.0e-02, train_loss: 0.7385, train_acc: 0.7408 test_loss: 1.0757, test_acc: 0.6833, best: 0.7021, time: 0:01:35
 Epoch: 70, lr: 1.0e-02, train_loss: 0.7287, train_acc: 0.7408 test_loss: 1.0900, test_acc: 0.6871, best: 0.7021, time: 0:01:36
 Epoch: 71, lr: 1.0e-02, train_loss: 0.7411, train_acc: 0.7276 test_loss: 1.0170, test_acc: 0.6801, best: 0.7021, time: 0:01:36
 Epoch: 72, lr: 1.0e-02, train_loss: 0.7155, train_acc: 0.7550 test_loss: 0.9455, test_acc: 0.6909, best: 0.7021, time: 0:01:36
 Epoch: 73, lr: 1.0e-02, train_loss: 0.7506, train_acc: 0.7362 test_loss: 0.8854, test_acc: 0.7046, best: 0.7046, time: 0:01:39
 Epoch: 74, lr: 1.0e-02, train_loss: 0.6954, train_acc: 0.7510 test_loss: 0.9734, test_acc: 0.6957, best: 0.7046, time: 0:01:36
 Epoch: 75, lr: 1.0e-02, train_loss: 0.7017, train_acc: 0.7532 test_loss: 0.9245, test_acc: 0.7104, best: 0.7104, time: 0:01:38
 Epoch: 76, lr: 1.0e-02, train_loss: 0.6894, train_acc: 0.7598 test_loss: 0.8242, test_acc: 0.7284, best: 0.7284, time: 0:01:38
 Epoch: 77, lr: 1.0e-02, train_loss: 0.6911, train_acc: 0.7558 test_loss: 0.9927, test_acc: 0.6894, best: 0.7284, time: 0:01:36
 Epoch: 78, lr: 1.0e-02, train_loss: 0.6810, train_acc: 0.7550 test_loss: 0.9615, test_acc: 0.7037, best: 0.7284, time: 0:01:36
 Epoch: 79, lr: 1.0e-02, train_loss: 0.6821, train_acc: 0.7584 test_loss: 0.9449, test_acc: 0.7085, best: 0.7284, time: 0:01:36
 Epoch: 80, lr: 1.0e-02, train_loss: 0.6604, train_acc: 0.7640 test_loss: 0.9335, test_acc: 0.7055, best: 0.7284, time: 0:01:36
 Epoch: 81, lr: 1.0e-02, train_loss: 0.6606, train_acc: 0.7686 test_loss: 0.9560, test_acc: 0.7056, best: 0.7284, time: 0:01:36
 Epoch: 82, lr: 1.0e-02, train_loss: 0.6473, train_acc: 0.7740 test_loss: 0.9442, test_acc: 0.7186, best: 0.7284, time: 0:01:36
 Epoch: 83, lr: 1.0e-02, train_loss: 0.6299, train_acc: 0.7776 test_loss: 0.9346, test_acc: 0.7192, best: 0.7284, time: 0:01:36
 Epoch: 84, lr: 1.0e-02, train_loss: 0.6138, train_acc: 0.7790 test_loss: 0.9677, test_acc: 0.7087, best: 0.7284, time: 0:01:36
 Epoch: 85, lr: 1.0e-02, train_loss: 0.6531, train_acc: 0.7716 test_loss: 0.9550, test_acc: 0.7090, best: 0.7284, time: 0:01:36
 Epoch: 86, lr: 1.0e-02, train_loss: 0.6307, train_acc: 0.7794 test_loss: 0.9149, test_acc: 0.7114, best: 0.7284, time: 0:01:36
 Epoch: 87, lr: 1.0e-02, train_loss: 0.5920, train_acc: 0.7930 test_loss: 1.0061, test_acc: 0.7029, best: 0.7284, time: 0:01:36
 Epoch: 88, lr: 1.0e-02, train_loss: 0.6239, train_acc: 0.7814 test_loss: 0.9704, test_acc: 0.7020, best: 0.7284, time: 0:01:36
 Epoch: 89, lr: 1.0e-02, train_loss: 0.6244, train_acc: 0.7812 test_loss: 0.9459, test_acc: 0.7087, best: 0.7284, time: 0:01:36
 Epoch: 90, lr: 1.0e-02, train_loss: 0.6077, train_acc: 0.7914 test_loss: 1.1030, test_acc: 0.7029, best: 0.7284, time: 0:01:36
 Epoch: 91, lr: 1.0e-02, train_loss: 0.6126, train_acc: 0.7892 test_loss: 0.9246, test_acc: 0.7103, best: 0.7284, time: 0:01:36
 Epoch: 92, lr: 1.0e-02, train_loss: 0.6014, train_acc: 0.7890 test_loss: 0.9133, test_acc: 0.7195, best: 0.7284, time: 0:01:36
 Epoch: 93, lr: 1.0e-02, train_loss: 0.5831, train_acc: 0.7882 test_loss: 1.0082, test_acc: 0.7200, best: 0.7284, time: 0:01:36
 Epoch: 94, lr: 1.0e-02, train_loss: 0.5809, train_acc: 0.7950 test_loss: 1.1280, test_acc: 0.6761, best: 0.7284, time: 0:01:36
 Epoch: 95, lr: 1.0e-02, train_loss: 0.6383, train_acc: 0.7760 test_loss: 1.0340, test_acc: 0.7044, best: 0.7284, time: 0:01:36
 Epoch: 96, lr: 1.0e-02, train_loss: 0.5792, train_acc: 0.7916 test_loss: 0.9780, test_acc: 0.7181, best: 0.7284, time: 0:01:36
 Epoch: 97, lr: 1.0e-02, train_loss: 0.5461, train_acc: 0.8046 test_loss: 1.0103, test_acc: 0.7104, best: 0.7284, time: 0:01:36
 Epoch: 98, lr: 1.0e-02, train_loss: 0.5683, train_acc: 0.7924 test_loss: 1.0956, test_acc: 0.7077, best: 0.7284, time: 0:01:36
 Epoch: 99, lr: 1.0e-02, train_loss: 0.5585, train_acc: 0.8080 test_loss: 0.9302, test_acc: 0.7204, best: 0.7284, time: 0:01:36
 Epoch: 100, lr: 1.0e-02, train_loss: 0.5355, train_acc: 0.8098 test_loss: 0.9779, test_acc: 0.7087, best: 0.7284, time: 0:01:36
 Epoch: 101, lr: 1.0e-02, train_loss: 0.5390, train_acc: 0.8120 test_loss: 1.0154, test_acc: 0.7120, best: 0.7284, time: 0:01:36
 Epoch: 102, lr: 1.0e-02, train_loss: 0.5414, train_acc: 0.8110 test_loss: 1.1409, test_acc: 0.7031, best: 0.7284, time: 0:01:36
 Epoch: 103, lr: 1.0e-02, train_loss: 0.5228, train_acc: 0.8174 test_loss: 1.0070, test_acc: 0.7157, best: 0.7284, time: 0:01:36
 Epoch: 104, lr: 1.0e-02, train_loss: 0.5256, train_acc: 0.8142 test_loss: 0.9877, test_acc: 0.7195, best: 0.7284, time: 0:01:36
 Epoch: 105, lr: 1.0e-02, train_loss: 0.5358, train_acc: 0.8100 test_loss: 1.0066, test_acc: 0.7258, best: 0.7284, time: 0:01:36
 Epoch: 106, lr: 1.0e-02, train_loss: 0.5036, train_acc: 0.8272 test_loss: 1.0439, test_acc: 0.7125, best: 0.7284, time: 0:01:36
 Epoch: 107, lr: 1.0e-02, train_loss: 0.4878, train_acc: 0.8320 test_loss: 1.0034, test_acc: 0.7370, best: 0.7370, time: 0:01:38
 Epoch: 108, lr: 1.0e-02, train_loss: 0.4912, train_acc: 0.8282 test_loss: 0.9706, test_acc: 0.7194, best: 0.7370, time: 0:01:36
 Epoch: 109, lr: 1.0e-02, train_loss: 0.4851, train_acc: 0.8266 test_loss: 0.9695, test_acc: 0.7248, best: 0.7370, time: 0:01:36
 Epoch: 110, lr: 1.0e-02, train_loss: 0.4814, train_acc: 0.8304 test_loss: 1.0722, test_acc: 0.7147, best: 0.7370, time: 0:01:36
 Epoch: 111, lr: 1.0e-02, train_loss: 0.4889, train_acc: 0.8264 test_loss: 1.0766, test_acc: 0.7051, best: 0.7370, time: 0:01:36
 Epoch: 112, lr: 1.0e-02, train_loss: 0.4943, train_acc: 0.8266 test_loss: 0.9261, test_acc: 0.7412, best: 0.7412, time: 0:01:37
 Epoch: 113, lr: 1.0e-02, train_loss: 0.4639, train_acc: 0.8392 test_loss: 1.0672, test_acc: 0.7119, best: 0.7412, time: 0:01:33
 Epoch: 114, lr: 1.0e-02, train_loss: 0.4757, train_acc: 0.8368 test_loss: 1.0870, test_acc: 0.7161, best: 0.7412, time: 0:01:32
 Epoch: 115, lr: 1.0e-02, train_loss: 0.4884, train_acc: 0.8280 test_loss: 1.0239, test_acc: 0.7238, best: 0.7412, time: 0:01:32
 Epoch: 116, lr: 1.0e-02, train_loss: 0.4718, train_acc: 0.8362 test_loss: 1.0155, test_acc: 0.7261, best: 0.7412, time: 0:01:32
 Epoch: 117, lr: 1.0e-02, train_loss: 0.4461, train_acc: 0.8464 test_loss: 1.0217, test_acc: 0.7312, best: 0.7412, time: 0:01:32
 Epoch: 118, lr: 1.0e-02, train_loss: 0.4514, train_acc: 0.8396 test_loss: 1.1114, test_acc: 0.7084, best: 0.7412, time: 0:01:32
 Epoch: 119, lr: 1.0e-02, train_loss: 0.4449, train_acc: 0.8430 test_loss: 1.0449, test_acc: 0.7225, best: 0.7412, time: 0:01:32
 Epoch: 120, lr: 1.0e-02, train_loss: 0.4335, train_acc: 0.8490 test_loss: 0.9642, test_acc: 0.7389, best: 0.7412, time: 0:01:32
 Epoch: 121, lr: 1.0e-02, train_loss: 0.4554, train_acc: 0.8364 test_loss: 0.9222, test_acc: 0.7430, best: 0.7430, time: 0:01:33
 Epoch: 122, lr: 1.0e-02, train_loss: 0.4618, train_acc: 0.8434 test_loss: 1.0349, test_acc: 0.7320, best: 0.7430, time: 0:01:32
 Epoch: 123, lr: 1.0e-02, train_loss: 0.4398, train_acc: 0.8454 test_loss: 0.9550, test_acc: 0.7426, best: 0.7430, time: 0:01:32
 Epoch: 124, lr: 1.0e-02, train_loss: 0.4452, train_acc: 0.8396 test_loss: 0.9399, test_acc: 0.7396, best: 0.7430, time: 0:01:32
 Epoch: 125, lr: 1.0e-02, train_loss: 0.4439, train_acc: 0.8450 test_loss: 1.0690, test_acc: 0.7225, best: 0.7430, time: 0:01:32
 Epoch: 126, lr: 1.0e-02, train_loss: 0.4187, train_acc: 0.8548 test_loss: 0.9972, test_acc: 0.7316, best: 0.7430, time: 0:01:32
 Epoch: 127, lr: 1.0e-02, train_loss: 0.4121, train_acc: 0.8512 test_loss: 1.1041, test_acc: 0.7285, best: 0.7430, time: 0:01:32
 Epoch: 128, lr: 1.0e-02, train_loss: 0.4255, train_acc: 0.8528 test_loss: 0.9684, test_acc: 0.7416, best: 0.7430, time: 0:01:32
 Epoch: 129, lr: 1.0e-02, train_loss: 0.4166, train_acc: 0.8532 test_loss: 1.1085, test_acc: 0.7341, best: 0.7430, time: 0:01:32
 Epoch: 130, lr: 1.0e-02, train_loss: 0.4237, train_acc: 0.8534 test_loss: 1.0363, test_acc: 0.7230, best: 0.7430, time: 0:01:32
 Epoch: 131, lr: 1.0e-02, train_loss: 0.4168, train_acc: 0.8524 test_loss: 0.8984, test_acc: 0.7526, best: 0.7526, time: 0:01:33
 Epoch: 132, lr: 1.0e-02, train_loss: 0.4127, train_acc: 0.8552 test_loss: 1.0735, test_acc: 0.7330, best: 0.7526, time: 0:01:32
 Epoch: 133, lr: 1.0e-02, train_loss: 0.4208, train_acc: 0.8518 test_loss: 1.0105, test_acc: 0.7314, best: 0.7526, time: 0:01:32
 Epoch: 134, lr: 1.0e-02, train_loss: 0.4007, train_acc: 0.8650 test_loss: 1.0185, test_acc: 0.7308, best: 0.7526, time: 0:01:32
 Epoch: 135, lr: 1.0e-02, train_loss: 0.4133, train_acc: 0.8568 test_loss: 0.9707, test_acc: 0.7398, best: 0.7526, time: 0:01:32
 Epoch: 136, lr: 1.0e-02, train_loss: 0.3943, train_acc: 0.8632 test_loss: 0.9955, test_acc: 0.7451, best: 0.7526, time: 0:01:32
 Epoch: 137, lr: 1.0e-02, train_loss: 0.4054, train_acc: 0.8564 test_loss: 1.1428, test_acc: 0.7282, best: 0.7526, time: 0:01:32
 Epoch: 138, lr: 1.0e-02, train_loss: 0.3934, train_acc: 0.8648 test_loss: 1.1474, test_acc: 0.7324, best: 0.7526, time: 0:01:32
 Epoch: 139, lr: 1.0e-02, train_loss: 0.4188, train_acc: 0.8550 test_loss: 1.0384, test_acc: 0.7350, best: 0.7526, time: 0:01:32
 Epoch: 140, lr: 1.0e-02, train_loss: 0.3884, train_acc: 0.8682 test_loss: 1.0086, test_acc: 0.7419, best: 0.7526, time: 0:01:32
 Epoch: 141, lr: 1.0e-02, train_loss: 0.3976, train_acc: 0.8628 test_loss: 1.0401, test_acc: 0.7258, best: 0.7526, time: 0:01:32
 Epoch: 142, lr: 1.0e-02, train_loss: 0.3711, train_acc: 0.8710 test_loss: 0.9559, test_acc: 0.7484, best: 0.7526, time: 0:01:31
 Epoch: 143, lr: 1.0e-02, train_loss: 0.3759, train_acc: 0.8710 test_loss: 0.9948, test_acc: 0.7438, best: 0.7526, time: 0:01:31
 Epoch: 144, lr: 1.0e-02, train_loss: 0.3668, train_acc: 0.8684 test_loss: 0.9463, test_acc: 0.7520, best: 0.7526, time: 0:01:31
 Epoch: 145, lr: 1.0e-02, train_loss: 0.3606, train_acc: 0.8728 test_loss: 0.9911, test_acc: 0.7442, best: 0.7526, time: 0:01:31
 Epoch: 146, lr: 1.0e-02, train_loss: 0.3537, train_acc: 0.8738 test_loss: 1.0001, test_acc: 0.7446, best: 0.7526, time: 0:01:31
 Epoch: 147, lr: 1.0e-02, train_loss: 0.3716, train_acc: 0.8726 test_loss: 1.0188, test_acc: 0.7378, best: 0.7526, time: 0:01:31
 Epoch: 148, lr: 1.0e-02, train_loss: 0.3629, train_acc: 0.8770 test_loss: 0.9745, test_acc: 0.7485, best: 0.7526, time: 0:01:31
 Epoch: 149, lr: 1.0e-02, train_loss: 0.3636, train_acc: 0.8738 test_loss: 1.0642, test_acc: 0.7331, best: 0.7526, time: 0:01:31
 Epoch: 150, lr: 1.0e-02, train_loss: 0.3438, train_acc: 0.8808 test_loss: 1.1042, test_acc: 0.7455, best: 0.7526, time: 0:01:31
 Epoch: 151, lr: 1.0e-02, train_loss: 0.3715, train_acc: 0.8738 test_loss: 0.9712, test_acc: 0.7476, best: 0.7526, time: 0:01:31
 Epoch: 152, lr: 1.0e-02, train_loss: 0.3899, train_acc: 0.8648 test_loss: 1.0659, test_acc: 0.7440, best: 0.7526, time: 0:01:31
 Epoch: 153, lr: 1.0e-02, train_loss: 0.3670, train_acc: 0.8718 test_loss: 0.9546, test_acc: 0.7500, best: 0.7526, time: 0:01:31
 Epoch: 154, lr: 1.0e-02, train_loss: 0.3529, train_acc: 0.8782 test_loss: 1.0129, test_acc: 0.7506, best: 0.7526, time: 0:01:31
 Epoch: 155, lr: 1.0e-02, train_loss: 0.3341, train_acc: 0.8826 test_loss: 1.0542, test_acc: 0.7550, best: 0.7550, time: 0:01:32
 Epoch: 156, lr: 1.0e-02, train_loss: 0.3182, train_acc: 0.8884 test_loss: 0.9789, test_acc: 0.7516, best: 0.7550, time: 0:01:31
 Epoch: 157, lr: 1.0e-02, train_loss: 0.3602, train_acc: 0.8726 test_loss: 1.0355, test_acc: 0.7568, best: 0.7568, time: 0:01:32
 Epoch: 158, lr: 1.0e-02, train_loss: 0.3312, train_acc: 0.8864 test_loss: 1.0433, test_acc: 0.7459, best: 0.7568, time: 0:01:31
 Epoch: 159, lr: 1.0e-02, train_loss: 0.3503, train_acc: 0.8794 test_loss: 1.0182, test_acc: 0.7452, best: 0.7568, time: 0:01:31
 Epoch: 160, lr: 1.0e-02, train_loss: 0.3196, train_acc: 0.8914 test_loss: 1.2240, test_acc: 0.7399, best: 0.7568, time: 0:01:31
 Epoch: 161, lr: 1.0e-02, train_loss: 0.3462, train_acc: 0.8852 test_loss: 1.1454, test_acc: 0.7351, best: 0.7568, time: 0:01:31
 Epoch: 162, lr: 1.0e-02, train_loss: 0.3353, train_acc: 0.8824 test_loss: 1.0484, test_acc: 0.7458, best: 0.7568, time: 0:01:31
 Epoch: 163, lr: 1.0e-02, train_loss: 0.3263, train_acc: 0.8862 test_loss: 1.1557, test_acc: 0.7356, best: 0.7568, time: 0:01:31
 Epoch: 164, lr: 1.0e-02, train_loss: 0.3126, train_acc: 0.8916 test_loss: 1.0754, test_acc: 0.7411, best: 0.7568, time: 0:01:31
 Epoch: 165, lr: 1.0e-02, train_loss: 0.3286, train_acc: 0.8892 test_loss: 1.0751, test_acc: 0.7496, best: 0.7568, time: 0:01:31
 Epoch: 166, lr: 1.0e-02, train_loss: 0.3000, train_acc: 0.8968 test_loss: 1.0556, test_acc: 0.7446, best: 0.7568, time: 0:01:30
 Epoch: 167, lr: 1.0e-02, train_loss: 0.3201, train_acc: 0.8862 test_loss: 1.2182, test_acc: 0.7352, best: 0.7568, time: 0:01:31
 Epoch: 168, lr: 1.0e-02, train_loss: 0.3329, train_acc: 0.8842 test_loss: 1.1149, test_acc: 0.7459, best: 0.7568, time: 0:01:31
 Epoch: 169, lr: 1.0e-02, train_loss: 0.3230, train_acc: 0.8910 test_loss: 1.0695, test_acc: 0.7429, best: 0.7568, time: 0:01:31
 Epoch: 170, lr: 1.0e-02, train_loss: 0.3152, train_acc: 0.8874 test_loss: 1.0742, test_acc: 0.7461, best: 0.7568, time: 0:01:31
 Epoch: 171, lr: 1.0e-02, train_loss: 0.3140, train_acc: 0.8916 test_loss: 1.0428, test_acc: 0.7491, best: 0.7568, time: 0:01:31
 Epoch: 172, lr: 1.0e-02, train_loss: 0.3106, train_acc: 0.8926 test_loss: 1.0055, test_acc: 0.7578, best: 0.7578, time: 0:01:32
 Epoch: 173, lr: 1.0e-02, train_loss: 0.3013, train_acc: 0.8988 test_loss: 1.0258, test_acc: 0.7520, best: 0.7578, time: 0:01:31
 Epoch: 174, lr: 1.0e-02, train_loss: 0.3014, train_acc: 0.8954 test_loss: 1.0412, test_acc: 0.7632, best: 0.7632, time: 0:01:32
 Epoch: 175, lr: 1.0e-02, train_loss: 0.2949, train_acc: 0.8996 test_loss: 1.1948, test_acc: 0.7362, best: 0.7632, time: 0:01:31
 Epoch: 176, lr: 1.0e-02, train_loss: 0.3077, train_acc: 0.8942 test_loss: 1.1294, test_acc: 0.7404, best: 0.7632, time: 0:01:31
 Epoch: 177, lr: 1.0e-02, train_loss: 0.2978, train_acc: 0.8986 test_loss: 0.9827, test_acc: 0.7641, best: 0.7641, time: 0:01:32
 Epoch: 178, lr: 1.0e-02, train_loss: 0.2912, train_acc: 0.8972 test_loss: 1.2176, test_acc: 0.7326, best: 0.7641, time: 0:01:31
 Epoch: 179, lr: 1.0e-02, train_loss: 0.3141, train_acc: 0.8922 test_loss: 1.0642, test_acc: 0.7534, best: 0.7641, time: 0:01:31
 Epoch: 180, lr: 2.0e-03, train_loss: 0.2476, train_acc: 0.9150 test_loss: 0.9577, test_acc: 0.7701, best: 0.7701, time: 0:01:32
 Epoch: 181, lr: 2.0e-03, train_loss: 0.2299, train_acc: 0.9254 test_loss: 1.0554, test_acc: 0.7670, best: 0.7701, time: 0:01:30
 Epoch: 182, lr: 2.0e-03, train_loss: 0.2257, train_acc: 0.9240 test_loss: 1.0917, test_acc: 0.7618, best: 0.7701, time: 0:01:31
 Epoch: 183, lr: 2.0e-03, train_loss: 0.2051, train_acc: 0.9270 test_loss: 1.1414, test_acc: 0.7629, best: 0.7701, time: 0:01:31
 Epoch: 184, lr: 2.0e-03, train_loss: 0.2168, train_acc: 0.9232 test_loss: 1.2504, test_acc: 0.7632, best: 0.7701, time: 0:01:31
 Epoch: 185, lr: 2.0e-03, train_loss: 0.2067, train_acc: 0.9294 test_loss: 1.0277, test_acc: 0.7754, best: 0.7754, time: 0:01:32
 Epoch: 186, lr: 2.0e-03, train_loss: 0.2112, train_acc: 0.9268 test_loss: 1.2235, test_acc: 0.7566, best: 0.7754, time: 0:01:31
 Epoch: 187, lr: 2.0e-03, train_loss: 0.1907, train_acc: 0.9334 test_loss: 1.1195, test_acc: 0.7661, best: 0.7754, time: 0:01:31
 Epoch: 188, lr: 2.0e-03, train_loss: 0.1980, train_acc: 0.9294 test_loss: 1.0732, test_acc: 0.7782, best: 0.7782, time: 0:01:32
 Epoch: 189, lr: 2.0e-03, train_loss: 0.1991, train_acc: 0.9326 test_loss: 1.0690, test_acc: 0.7692, best: 0.7782, time: 0:01:31
 Epoch: 190, lr: 2.0e-03, train_loss: 0.1945, train_acc: 0.9324 test_loss: 1.0510, test_acc: 0.7730, best: 0.7782, time: 0:01:31
 Epoch: 191, lr: 2.0e-03, train_loss: 0.1815, train_acc: 0.9430 test_loss: 1.1934, test_acc: 0.7600, best: 0.7782, time: 0:01:31
 Epoch: 192, lr: 2.0e-03, train_loss: 0.1958, train_acc: 0.9350 test_loss: 1.0668, test_acc: 0.7729, best: 0.7782, time: 0:01:31
 Epoch: 193, lr: 2.0e-03, train_loss: 0.1903, train_acc: 0.9352 test_loss: 1.0562, test_acc: 0.7720, best: 0.7782, time: 0:01:31
 Epoch: 194, lr: 2.0e-03, train_loss: 0.2043, train_acc: 0.9306 test_loss: 1.1092, test_acc: 0.7605, best: 0.7782, time: 0:01:31
 Epoch: 195, lr: 2.0e-03, train_loss: 0.2068, train_acc: 0.9308 test_loss: 1.1951, test_acc: 0.7588, best: 0.7782, time: 0:01:31
 Epoch: 196, lr: 2.0e-03, train_loss: 0.1915, train_acc: 0.9300 test_loss: 1.2053, test_acc: 0.7489, best: 0.7782, time: 0:01:31
 Epoch: 197, lr: 2.0e-03, train_loss: 0.1842, train_acc: 0.9370 test_loss: 1.2511, test_acc: 0.7586, best: 0.7782, time: 0:01:31
 Epoch: 198, lr: 2.0e-03, train_loss: 0.1931, train_acc: 0.9356 test_loss: 1.0615, test_acc: 0.7659, best: 0.7782, time: 0:01:31
 Epoch: 199, lr: 2.0e-03, train_loss: 0.1856, train_acc: 0.9384 test_loss: 1.0636, test_acc: 0.7720, best: 0.7782, time: 0:01:31
 Epoch: 200, lr: 2.0e-03, train_loss: 0.2002, train_acc: 0.9318 test_loss: 1.0469, test_acc: 0.7726, best: 0.7782, time: 0:01:31
 Epoch: 201, lr: 2.0e-03, train_loss: 0.1986, train_acc: 0.9332 test_loss: 1.0697, test_acc: 0.7694, best: 0.7782, time: 0:01:31
 Epoch: 202, lr: 2.0e-03, train_loss: 0.1971, train_acc: 0.9330 test_loss: 1.1073, test_acc: 0.7635, best: 0.7782, time: 0:01:31
 Epoch: 203, lr: 2.0e-03, train_loss: 0.1852, train_acc: 0.9388 test_loss: 1.1792, test_acc: 0.7666, best: 0.7782, time: 0:01:31
 Epoch: 204, lr: 2.0e-03, train_loss: 0.1843, train_acc: 0.9354 test_loss: 1.3090, test_acc: 0.7524, best: 0.7782, time: 0:01:31
 Epoch: 205, lr: 2.0e-03, train_loss: 0.1820, train_acc: 0.9422 test_loss: 1.5456, test_acc: 0.7466, best: 0.7782, time: 0:01:31
 Epoch: 206, lr: 2.0e-03, train_loss: 0.1903, train_acc: 0.9368 test_loss: 1.1869, test_acc: 0.7586, best: 0.7782, time: 0:01:31
 Epoch: 207, lr: 2.0e-03, train_loss: 0.1850, train_acc: 0.9354 test_loss: 1.1635, test_acc: 0.7634, best: 0.7782, time: 0:01:31
 Epoch: 208, lr: 2.0e-03, train_loss: 0.1796, train_acc: 0.9376 test_loss: 1.4787, test_acc: 0.7474, best: 0.7782, time: 0:01:31
 Epoch: 209, lr: 2.0e-03, train_loss: 0.1859, train_acc: 0.9368 test_loss: 1.4775, test_acc: 0.7406, best: 0.7782, time: 0:01:31
 Epoch: 210, lr: 2.0e-03, train_loss: 0.1812, train_acc: 0.9402 test_loss: 1.0927, test_acc: 0.7730, best: 0.7782, time: 0:01:31
 Epoch: 211, lr: 2.0e-03, train_loss: 0.1898, train_acc: 0.9348 test_loss: 1.1796, test_acc: 0.7615, best: 0.7782, time: 0:01:31
 Epoch: 212, lr: 2.0e-03, train_loss: 0.1973, train_acc: 0.9320 test_loss: 1.3327, test_acc: 0.7526, best: 0.7782, time: 0:01:31
 Epoch: 213, lr: 2.0e-03, train_loss: 0.1722, train_acc: 0.9416 test_loss: 1.1862, test_acc: 0.7639, best: 0.7782, time: 0:01:31
 Epoch: 214, lr: 2.0e-03, train_loss: 0.1504, train_acc: 0.9478 test_loss: 1.1609, test_acc: 0.7661, best: 0.7782, time: 0:01:31
 Epoch: 215, lr: 2.0e-03, train_loss: 0.1781, train_acc: 0.9372 test_loss: 1.1867, test_acc: 0.7626, best: 0.7782, time: 0:01:31
 Epoch: 216, lr: 2.0e-03, train_loss: 0.1800, train_acc: 0.9366 test_loss: 1.1634, test_acc: 0.7626, best: 0.7782, time: 0:01:31
 Epoch: 217, lr: 2.0e-03, train_loss: 0.1825, train_acc: 0.9342 test_loss: 1.2327, test_acc: 0.7600, best: 0.7782, time: 0:01:31
 Epoch: 218, lr: 2.0e-03, train_loss: 0.1815, train_acc: 0.9396 test_loss: 1.1907, test_acc: 0.7690, best: 0.7782, time: 0:01:31
 Epoch: 219, lr: 2.0e-03, train_loss: 0.1769, train_acc: 0.9356 test_loss: 1.3782, test_acc: 0.7554, best: 0.7782, time: 0:01:31
 Epoch: 220, lr: 2.0e-03, train_loss: 0.1807, train_acc: 0.9420 test_loss: 1.3061, test_acc: 0.7542, best: 0.7782, time: 0:01:31
 Epoch: 221, lr: 2.0e-03, train_loss: 0.1682, train_acc: 0.9450 test_loss: 1.1604, test_acc: 0.7678, best: 0.7782, time: 0:01:31
 Epoch: 222, lr: 2.0e-03, train_loss: 0.1682, train_acc: 0.9416 test_loss: 1.2517, test_acc: 0.7589, best: 0.7782, time: 0:01:31
 Epoch: 223, lr: 2.0e-03, train_loss: 0.1748, train_acc: 0.9378 test_loss: 1.2726, test_acc: 0.7589, best: 0.7782, time: 0:01:31
 Epoch: 224, lr: 2.0e-03, train_loss: 0.1602, train_acc: 0.9458 test_loss: 1.2833, test_acc: 0.7625, best: 0.7782, time: 0:01:31
 Epoch: 225, lr: 2.0e-03, train_loss: 0.1688, train_acc: 0.9424 test_loss: 1.2065, test_acc: 0.7598, best: 0.7782, time: 0:01:31
 Epoch: 226, lr: 2.0e-03, train_loss: 0.1778, train_acc: 0.9372 test_loss: 1.1457, test_acc: 0.7694, best: 0.7782, time: 0:01:31
 Epoch: 227, lr: 2.0e-03, train_loss: 0.1773, train_acc: 0.9368 test_loss: 1.2472, test_acc: 0.7604, best: 0.7782, time: 0:01:31
 Epoch: 228, lr: 2.0e-03, train_loss: 0.1627, train_acc: 0.9436 test_loss: 1.1160, test_acc: 0.7716, best: 0.7782, time: 0:01:31
 Epoch: 229, lr: 2.0e-03, train_loss: 0.1570, train_acc: 0.9432 test_loss: 1.0813, test_acc: 0.7721, best: 0.7782, time: 0:01:31
 Epoch: 230, lr: 2.0e-03, train_loss: 0.1790, train_acc: 0.9402 test_loss: 1.1874, test_acc: 0.7708, best: 0.7782, time: 0:01:31
 Epoch: 231, lr: 2.0e-03, train_loss: 0.1596, train_acc: 0.9474 test_loss: 1.2584, test_acc: 0.7549, best: 0.7782, time: 0:01:31
 Epoch: 232, lr: 2.0e-03, train_loss: 0.1689, train_acc: 0.9420 test_loss: 1.1996, test_acc: 0.7645, best: 0.7782, time: 0:01:31
 Epoch: 233, lr: 2.0e-03, train_loss: 0.1599, train_acc: 0.9450 test_loss: 1.1656, test_acc: 0.7651, best: 0.7782, time: 0:01:31
 Epoch: 234, lr: 2.0e-03, train_loss: 0.1572, train_acc: 0.9444 test_loss: 1.2603, test_acc: 0.7621, best: 0.7782, time: 0:01:31
 Epoch: 235, lr: 2.0e-03, train_loss: 0.1762, train_acc: 0.9432 test_loss: 1.2084, test_acc: 0.7610, best: 0.7782, time: 0:01:31
 Epoch: 236, lr: 2.0e-03, train_loss: 0.1782, train_acc: 0.9394 test_loss: 1.2060, test_acc: 0.7598, best: 0.7782, time: 0:01:31
 Epoch: 237, lr: 2.0e-03, train_loss: 0.1698, train_acc: 0.9440 test_loss: 1.2004, test_acc: 0.7604, best: 0.7782, time: 0:01:31
 Epoch: 238, lr: 2.0e-03, train_loss: 0.1857, train_acc: 0.9356 test_loss: 1.4923, test_acc: 0.7361, best: 0.7782, time: 0:01:31
 Epoch: 239, lr: 2.0e-03, train_loss: 0.1812, train_acc: 0.9386 test_loss: 1.2108, test_acc: 0.7674, best: 0.7782, time: 0:01:31
 Epoch: 240, lr: 4.0e-04, train_loss: 0.1676, train_acc: 0.9432 test_loss: 1.1637, test_acc: 0.7680, best: 0.7782, time: 0:01:31
 Epoch: 241, lr: 4.0e-04, train_loss: 0.1579, train_acc: 0.9472 test_loss: 1.2441, test_acc: 0.7642, best: 0.7782, time: 0:01:31
 Epoch: 242, lr: 4.0e-04, train_loss: 0.1673, train_acc: 0.9418 test_loss: 1.1706, test_acc: 0.7685, best: 0.7782, time: 0:01:31
 Epoch: 243, lr: 4.0e-04, train_loss: 0.1590, train_acc: 0.9430 test_loss: 1.2151, test_acc: 0.7594, best: 0.7782, time: 0:01:31
 Epoch: 244, lr: 4.0e-04, train_loss: 0.1577, train_acc: 0.9456 test_loss: 1.1473, test_acc: 0.7679, best: 0.7782, time: 0:01:31
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1503, train_acc: 0.9498 test_loss: 1.2806, test_acc: 0.7625, best: 0.7782, time: 0:01:31
 Epoch: 246, lr: 4.0e-04, train_loss: 0.1562, train_acc: 0.9472 test_loss: 1.2494, test_acc: 0.7616, best: 0.7782, time: 0:01:31
 Epoch: 247, lr: 4.0e-04, train_loss: 0.1476, train_acc: 0.9510 test_loss: 1.2391, test_acc: 0.7588, best: 0.7782, time: 0:01:31
 Epoch: 248, lr: 4.0e-04, train_loss: 0.1475, train_acc: 0.9494 test_loss: 1.1193, test_acc: 0.7680, best: 0.7782, time: 0:01:31
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1525, train_acc: 0.9470 test_loss: 1.2511, test_acc: 0.7660, best: 0.7782, time: 0:01:31
 Epoch: 250, lr: 4.0e-04, train_loss: 0.1424, train_acc: 0.9500 test_loss: 1.2367, test_acc: 0.7658, best: 0.7782, time: 0:01:31
 Epoch: 251, lr: 4.0e-04, train_loss: 0.1528, train_acc: 0.9486 test_loss: 1.1645, test_acc: 0.7719, best: 0.7782, time: 0:01:31
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1559, train_acc: 0.9490 test_loss: 1.2634, test_acc: 0.7630, best: 0.7782, time: 0:01:31
 Epoch: 253, lr: 4.0e-04, train_loss: 0.1433, train_acc: 0.9522 test_loss: 1.0949, test_acc: 0.7725, best: 0.7782, time: 0:01:31
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1556, train_acc: 0.9468 test_loss: 1.3945, test_acc: 0.7558, best: 0.7782, time: 0:01:31
 Epoch: 255, lr: 4.0e-04, train_loss: 0.1646, train_acc: 0.9430 test_loss: 1.4741, test_acc: 0.7531, best: 0.7782, time: 0:01:31
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1453, train_acc: 0.9498 test_loss: 1.1174, test_acc: 0.7769, best: 0.7782, time: 0:01:31
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1440, train_acc: 0.9510 test_loss: 1.1371, test_acc: 0.7730, best: 0.7782, time: 0:01:31
 Epoch: 258, lr: 4.0e-04, train_loss: 0.1522, train_acc: 0.9466 test_loss: 1.4750, test_acc: 0.7479, best: 0.7782, time: 0:01:31
 Epoch: 259, lr: 4.0e-04, train_loss: 0.1613, train_acc: 0.9418 test_loss: 1.2991, test_acc: 0.7619, best: 0.7782, time: 0:01:31
 Epoch: 260, lr: 4.0e-04, train_loss: 0.1404, train_acc: 0.9524 test_loss: 1.2414, test_acc: 0.7672, best: 0.7782, time: 0:01:31
 Epoch: 261, lr: 4.0e-04, train_loss: 0.1593, train_acc: 0.9440 test_loss: 1.2111, test_acc: 0.7614, best: 0.7782, time: 0:01:31
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1423, train_acc: 0.9498 test_loss: 1.1320, test_acc: 0.7715, best: 0.7782, time: 0:01:31
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1473, train_acc: 0.9460 test_loss: 1.2240, test_acc: 0.7665, best: 0.7782, time: 0:01:31
 Epoch: 264, lr: 4.0e-04, train_loss: 0.1493, train_acc: 0.9470 test_loss: 1.0850, test_acc: 0.7768, best: 0.7782, time: 0:01:31
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1405, train_acc: 0.9494 test_loss: 1.2839, test_acc: 0.7606, best: 0.7782, time: 0:01:31
 Epoch: 266, lr: 4.0e-04, train_loss: 0.1494, train_acc: 0.9482 test_loss: 1.1372, test_acc: 0.7732, best: 0.7782, time: 0:01:31
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1388, train_acc: 0.9530 test_loss: 1.1995, test_acc: 0.7691, best: 0.7782, time: 0:01:31
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1472, train_acc: 0.9488 test_loss: 1.4963, test_acc: 0.7539, best: 0.7782, time: 0:01:31
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1612, train_acc: 0.9470 test_loss: 1.1258, test_acc: 0.7748, best: 0.7782, time: 0:01:31
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1433, train_acc: 0.9514 test_loss: 1.1705, test_acc: 0.7710, best: 0.7782, time: 0:01:31
 Epoch: 271, lr: 8.0e-05, train_loss: 0.1394, train_acc: 0.9522 test_loss: 1.1148, test_acc: 0.7764, best: 0.7782, time: 0:01:31
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1382, train_acc: 0.9506 test_loss: 1.2060, test_acc: 0.7681, best: 0.7782, time: 0:01:31
 Epoch: 273, lr: 8.0e-05, train_loss: 0.1453, train_acc: 0.9510 test_loss: 1.4043, test_acc: 0.7595, best: 0.7782, time: 0:01:31
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1565, train_acc: 0.9470 test_loss: 1.2838, test_acc: 0.7628, best: 0.7782, time: 0:01:31
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1385, train_acc: 0.9486 test_loss: 1.1948, test_acc: 0.7692, best: 0.7782, time: 0:01:31
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1381, train_acc: 0.9526 test_loss: 1.1775, test_acc: 0.7686, best: 0.7782, time: 0:01:31
 Epoch: 277, lr: 8.0e-05, train_loss: 0.1431, train_acc: 0.9494 test_loss: 1.3076, test_acc: 0.7621, best: 0.7782, time: 0:01:30
 Epoch: 278, lr: 8.0e-05, train_loss: 0.1407, train_acc: 0.9558 test_loss: 1.1551, test_acc: 0.7751, best: 0.7782, time: 0:01:29
 Epoch: 279, lr: 8.0e-05, train_loss: 0.1521, train_acc: 0.9480 test_loss: 1.2370, test_acc: 0.7678, best: 0.7782, time: 0:01:29
 Epoch: 280, lr: 8.0e-05, train_loss: 0.1434, train_acc: 0.9514 test_loss: 1.1522, test_acc: 0.7721, best: 0.7782, time: 0:01:29
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1515, train_acc: 0.9452 test_loss: 1.4357, test_acc: 0.7514, best: 0.7782, time: 0:01:29
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1349, train_acc: 0.9522 test_loss: 1.2322, test_acc: 0.7618, best: 0.7782, time: 0:01:28
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1429, train_acc: 0.9482 test_loss: 1.1119, test_acc: 0.7730, best: 0.7782, time: 0:01:29
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1446, train_acc: 0.9500 test_loss: 1.2209, test_acc: 0.7686, best: 0.7782, time: 0:01:29
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1433, train_acc: 0.9474 test_loss: 1.2815, test_acc: 0.7660, best: 0.7782, time: 0:01:28
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1434, train_acc: 0.9508 test_loss: 1.2686, test_acc: 0.7651, best: 0.7782, time: 0:01:26
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1490, train_acc: 0.9514 test_loss: 1.2811, test_acc: 0.7631, best: 0.7782, time: 0:01:26
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1410, train_acc: 0.9530 test_loss: 1.2741, test_acc: 0.7638, best: 0.7782, time: 0:01:26
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1349, train_acc: 0.9508 test_loss: 1.1816, test_acc: 0.7699, best: 0.7782, time: 0:01:27
 Epoch: 290, lr: 8.0e-05, train_loss: 0.1499, train_acc: 0.9446 test_loss: 1.5936, test_acc: 0.7448, best: 0.7782, time: 0:01:26
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1538, train_acc: 0.9490 test_loss: 1.2635, test_acc: 0.7652, best: 0.7782, time: 0:01:26
 Epoch: 292, lr: 8.0e-05, train_loss: 0.1517, train_acc: 0.9494 test_loss: 1.1659, test_acc: 0.7705, best: 0.7782, time: 0:01:27
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1518, train_acc: 0.9468 test_loss: 1.4888, test_acc: 0.7511, best: 0.7782, time: 0:01:26
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1397, train_acc: 0.9502 test_loss: 1.3000, test_acc: 0.7608, best: 0.7782, time: 0:01:27
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1360, train_acc: 0.9524 test_loss: 1.4168, test_acc: 0.7551, best: 0.7782, time: 0:01:26
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1368, train_acc: 0.9504 test_loss: 1.2883, test_acc: 0.7589, best: 0.7782, time: 0:01:26
 Epoch: 297, lr: 8.0e-05, train_loss: 0.1466, train_acc: 0.9534 test_loss: 1.2108, test_acc: 0.7714, best: 0.7782, time: 0:01:27
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1380, train_acc: 0.9502 test_loss: 1.2293, test_acc: 0.7692, best: 0.7782, time: 0:01:26
 Epoch: 299, lr: 8.0e-05, train_loss: 0.1275, train_acc: 0.9560 test_loss: 1.2967, test_acc: 0.7615, best: 0.7782, time: 0:01:25
 Highest accuracy: 0.7782