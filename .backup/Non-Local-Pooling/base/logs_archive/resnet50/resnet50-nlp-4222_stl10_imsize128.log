
 Run on time: 2022-06-29 22:12:15.104006

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50_NLP_4222
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): NetworkByName(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 128)
                (col_embed): Embedding(256, 128)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=4, stride=4, padding=0)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 256)
                (col_embed): Embedding(256, 256)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=1024, out_features=1024, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 512)
                (col_embed): Embedding(256, 512)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=2048, out_features=2048, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 1024)
                (col_embed): Embedding(256, 1024)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.5907, train_acc: 0.1212 test_loss: 4.5023, test_acc: 0.1343, best: 0.1343, time: 0:01:36
 Epoch: 2, lr: 1.0e-02, train_loss: 2.3113, train_acc: 0.1864 test_loss: 2.2989, test_acc: 0.2375, best: 0.2375, time: 0:01:34
 Epoch: 3, lr: 1.0e-02, train_loss: 2.1724, train_acc: 0.2084 test_loss: 3.0073, test_acc: 0.2812, best: 0.2812, time: 0:01:33
 Epoch: 4, lr: 1.0e-02, train_loss: 2.0815, train_acc: 0.2222 test_loss: 2.1596, test_acc: 0.2825, best: 0.2825, time: 0:01:33
 Epoch: 5, lr: 1.0e-02, train_loss: 2.0338, train_acc: 0.2492 test_loss: 2.4731, test_acc: 0.3184, best: 0.3184, time: 0:01:34
 Epoch: 6, lr: 1.0e-02, train_loss: 2.0025, train_acc: 0.2500 test_loss: 2.0992, test_acc: 0.3518, best: 0.3518, time: 0:01:33
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9634, train_acc: 0.2684 test_loss: 2.3585, test_acc: 0.3377, best: 0.3518, time: 0:01:31
 Epoch: 8, lr: 1.0e-02, train_loss: 1.9257, train_acc: 0.2832 test_loss: 1.9123, test_acc: 0.3443, best: 0.3518, time: 0:01:31
 Epoch: 9, lr: 1.0e-02, train_loss: 1.9660, train_acc: 0.2716 test_loss: 1.9818, test_acc: 0.3341, best: 0.3518, time: 0:01:31
 Epoch: 10, lr: 1.0e-02, train_loss: 1.9143, train_acc: 0.2734 test_loss: 4.8698, test_acc: 0.3417, best: 0.3518, time: 0:01:27
 Epoch: 11, lr: 1.0e-02, train_loss: 1.9461, train_acc: 0.2748 test_loss: 2.6043, test_acc: 0.3021, best: 0.3518, time: 0:01:30
 Epoch: 12, lr: 1.0e-02, train_loss: 1.8885, train_acc: 0.2896 test_loss: 2.6531, test_acc: 0.3521, best: 0.3521, time: 0:01:33
 Epoch: 13, lr: 1.0e-02, train_loss: 1.8453, train_acc: 0.3020 test_loss: 1.9918, test_acc: 0.3776, best: 0.3776, time: 0:01:33
 Epoch: 14, lr: 1.0e-02, train_loss: 1.8147, train_acc: 0.3202 test_loss: 2.0178, test_acc: 0.3929, best: 0.3929, time: 0:01:33
 Epoch: 15, lr: 1.0e-02, train_loss: 1.8131, train_acc: 0.3292 test_loss: 4.7139, test_acc: 0.3519, best: 0.3929, time: 0:01:31
 Epoch: 16, lr: 1.0e-02, train_loss: 1.7753, train_acc: 0.3354 test_loss: 3.9318, test_acc: 0.3760, best: 0.3929, time: 0:01:31
 Epoch: 17, lr: 1.0e-02, train_loss: 1.7757, train_acc: 0.3340 test_loss: 1.8764, test_acc: 0.3839, best: 0.3929, time: 0:01:30
 Epoch: 18, lr: 1.0e-02, train_loss: 1.7952, train_acc: 0.3296 test_loss: 2.4402, test_acc: 0.4113, best: 0.4113, time: 0:01:32
 Epoch: 19, lr: 1.0e-02, train_loss: 1.7896, train_acc: 0.3260 test_loss: 2.5051, test_acc: 0.3850, best: 0.4113, time: 0:01:29
 Epoch: 20, lr: 1.0e-02, train_loss: 1.7457, train_acc: 0.3384 test_loss: 2.6623, test_acc: 0.4124, best: 0.4124, time: 0:01:32
 Epoch: 21, lr: 1.0e-02, train_loss: 1.7449, train_acc: 0.3376 test_loss: 2.5090, test_acc: 0.4159, best: 0.4159, time: 0:01:32
 Epoch: 22, lr: 1.0e-02, train_loss: 1.7186, train_acc: 0.3562 test_loss: 2.5731, test_acc: 0.4135, best: 0.4159, time: 0:01:29
 Epoch: 23, lr: 1.0e-02, train_loss: 1.7162, train_acc: 0.3554 test_loss: 4.2986, test_acc: 0.4123, best: 0.4159, time: 0:01:29
 Epoch: 24, lr: 1.0e-02, train_loss: 1.6747, train_acc: 0.3720 test_loss: 8.7964, test_acc: 0.4116, best: 0.4159, time: 0:01:30
 Epoch: 25, lr: 1.0e-02, train_loss: 1.6750, train_acc: 0.3728 test_loss: 4.2757, test_acc: 0.4209, best: 0.4209, time: 0:01:34
 Epoch: 26, lr: 1.0e-02, train_loss: 1.6300, train_acc: 0.3976 test_loss: 3.8600, test_acc: 0.4487, best: 0.4487, time: 0:01:34
 Epoch: 27, lr: 1.0e-02, train_loss: 1.6912, train_acc: 0.3620 test_loss: 1.9224, test_acc: 0.4289, best: 0.4487, time: 0:01:32
 Epoch: 28, lr: 1.0e-02, train_loss: 1.6600, train_acc: 0.3746 test_loss: 1.8040, test_acc: 0.4190, best: 0.4487, time: 0:01:32
 Epoch: 29, lr: 1.0e-02, train_loss: 1.6480, train_acc: 0.3858 test_loss: 1.5074, test_acc: 0.4696, best: 0.4696, time: 0:01:35
 Epoch: 30, lr: 1.0e-02, train_loss: 1.6141, train_acc: 0.3976 test_loss: 1.5274, test_acc: 0.4436, best: 0.4696, time: 0:01:32
 Epoch: 31, lr: 1.0e-02, train_loss: 1.6370, train_acc: 0.3882 test_loss: 3.0107, test_acc: 0.4427, best: 0.4696, time: 0:01:32
 Epoch: 32, lr: 1.0e-02, train_loss: 1.6110, train_acc: 0.4042 test_loss: 6.8979, test_acc: 0.3920, best: 0.4696, time: 0:01:32
 Epoch: 33, lr: 1.0e-02, train_loss: 1.5859, train_acc: 0.4164 test_loss: 4.0191, test_acc: 0.4303, best: 0.4696, time: 0:01:32
 Epoch: 34, lr: 1.0e-02, train_loss: 1.5388, train_acc: 0.4276 test_loss: 6.0495, test_acc: 0.4542, best: 0.4696, time: 0:01:32
 Epoch: 35, lr: 1.0e-02, train_loss: 1.5540, train_acc: 0.4244 test_loss: 3.0330, test_acc: 0.4701, best: 0.4701, time: 0:01:34
 Epoch: 36, lr: 1.0e-02, train_loss: 1.5218, train_acc: 0.4368 test_loss: 2.0142, test_acc: 0.4630, best: 0.4701, time: 0:01:32
 Epoch: 37, lr: 1.0e-02, train_loss: 1.5147, train_acc: 0.4444 test_loss: 3.4346, test_acc: 0.4898, best: 0.4898, time: 0:01:35
 Epoch: 38, lr: 1.0e-02, train_loss: 1.5049, train_acc: 0.4416 test_loss: 3.1003, test_acc: 0.4612, best: 0.4898, time: 0:01:32
 Epoch: 39, lr: 1.0e-02, train_loss: 1.5731, train_acc: 0.4222 test_loss: 5.0829, test_acc: 0.4258, best: 0.4898, time: 0:01:32
 Epoch: 40, lr: 1.0e-02, train_loss: 1.5251, train_acc: 0.4378 test_loss: 3.7368, test_acc: 0.4359, best: 0.4898, time: 0:01:32
 Epoch: 41, lr: 1.0e-02, train_loss: 1.5954, train_acc: 0.4104 test_loss: 1.8532, test_acc: 0.4601, best: 0.4898, time: 0:01:32
 Epoch: 42, lr: 1.0e-02, train_loss: 1.5794, train_acc: 0.4204 test_loss: 6.0316, test_acc: 0.4507, best: 0.4898, time: 0:01:32
 Epoch: 43, lr: 1.0e-02, train_loss: 1.5318, train_acc: 0.4300 test_loss: 1.8572, test_acc: 0.4546, best: 0.4898, time: 0:01:32
 Epoch: 44, lr: 1.0e-02, train_loss: 1.5011, train_acc: 0.4496 test_loss: 1.9211, test_acc: 0.4885, best: 0.4898, time: 0:01:32
 Epoch: 45, lr: 1.0e-02, train_loss: 1.5074, train_acc: 0.4452 test_loss: 1.9884, test_acc: 0.4522, best: 0.4898, time: 0:01:32
 Epoch: 46, lr: 1.0e-02, train_loss: 1.6112, train_acc: 0.4106 test_loss: 2.5263, test_acc: 0.4259, best: 0.4898, time: 0:01:32
 Epoch: 47, lr: 1.0e-02, train_loss: 1.5943, train_acc: 0.4110 test_loss: 2.1958, test_acc: 0.4632, best: 0.4898, time: 0:01:32
 Epoch: 48, lr: 1.0e-02, train_loss: 1.5490, train_acc: 0.4360 test_loss: 1.7224, test_acc: 0.4745, best: 0.4898, time: 0:01:32
 Epoch: 49, lr: 1.0e-02, train_loss: 1.4944, train_acc: 0.4526 test_loss: 1.6269, test_acc: 0.4938, best: 0.4938, time: 0:01:35
 Epoch: 50, lr: 1.0e-02, train_loss: 1.5112, train_acc: 0.4414 test_loss: 2.1701, test_acc: 0.4574, best: 0.4938, time: 0:01:32
 Epoch: 51, lr: 1.0e-02, train_loss: 1.5121, train_acc: 0.4490 test_loss: 2.0094, test_acc: 0.4439, best: 0.4938, time: 0:01:32
 Epoch: 52, lr: 1.0e-02, train_loss: 1.4838, train_acc: 0.4614 test_loss: 1.9817, test_acc: 0.4919, best: 0.4938, time: 0:01:32
 Epoch: 53, lr: 1.0e-02, train_loss: 1.4923, train_acc: 0.4436 test_loss: 2.0141, test_acc: 0.4587, best: 0.4938, time: 0:01:32
 Epoch: 54, lr: 1.0e-02, train_loss: 1.5164, train_acc: 0.4348 test_loss: 1.4669, test_acc: 0.4733, best: 0.4938, time: 0:01:32
 Epoch: 55, lr: 1.0e-02, train_loss: 1.4720, train_acc: 0.4620 test_loss: 1.3866, test_acc: 0.4981, best: 0.4981, time: 0:01:34
 Epoch: 56, lr: 1.0e-02, train_loss: 1.4614, train_acc: 0.4724 test_loss: 2.3398, test_acc: 0.4976, best: 0.4981, time: 0:01:32
 Epoch: 57, lr: 1.0e-02, train_loss: 1.4276, train_acc: 0.4728 test_loss: 1.4248, test_acc: 0.4909, best: 0.4981, time: 0:01:32
 Epoch: 58, lr: 1.0e-02, train_loss: 1.4826, train_acc: 0.4516 test_loss: 1.4027, test_acc: 0.4960, best: 0.4981, time: 0:01:32
 Epoch: 59, lr: 1.0e-02, train_loss: 1.4668, train_acc: 0.4668 test_loss: 1.4402, test_acc: 0.5100, best: 0.5100, time: 0:01:34
 Epoch: 60, lr: 1.0e-02, train_loss: 1.4520, train_acc: 0.4664 test_loss: 4.1479, test_acc: 0.4786, best: 0.5100, time: 0:01:32
 Epoch: 61, lr: 1.0e-02, train_loss: 1.4115, train_acc: 0.4850 test_loss: 2.6168, test_acc: 0.4894, best: 0.5100, time: 0:01:32
 Epoch: 62, lr: 1.0e-02, train_loss: 1.3882, train_acc: 0.4928 test_loss: 5.7477, test_acc: 0.4814, best: 0.5100, time: 0:01:32
 Epoch: 63, lr: 1.0e-02, train_loss: 1.3829, train_acc: 0.4912 test_loss: 1.6937, test_acc: 0.5052, best: 0.5100, time: 0:01:32
 Epoch: 64, lr: 1.0e-02, train_loss: 1.5658, train_acc: 0.4202 test_loss: 1.8258, test_acc: 0.4392, best: 0.5100, time: 0:01:32
 Epoch: 65, lr: 1.0e-02, train_loss: 1.5019, train_acc: 0.4532 test_loss: 1.8823, test_acc: 0.4716, best: 0.5100, time: 0:01:32
 Epoch: 66, lr: 1.0e-02, train_loss: 1.4719, train_acc: 0.4612 test_loss: 3.6731, test_acc: 0.4664, best: 0.5100, time: 0:01:32
 Epoch: 67, lr: 1.0e-02, train_loss: 1.4278, train_acc: 0.4758 test_loss: 1.7451, test_acc: 0.5035, best: 0.5100, time: 0:01:29
 Epoch: 68, lr: 1.0e-02, train_loss: 1.4004, train_acc: 0.4878 test_loss: 1.4863, test_acc: 0.5251, best: 0.5251, time: 0:01:32
 Epoch: 69, lr: 1.0e-02, train_loss: 1.3821, train_acc: 0.4954 test_loss: 2.7959, test_acc: 0.5155, best: 0.5251, time: 0:01:30
 Epoch: 70, lr: 1.0e-02, train_loss: 1.3522, train_acc: 0.5060 test_loss: 4.3091, test_acc: 0.4924, best: 0.5251, time: 0:01:30
 Epoch: 71, lr: 1.0e-02, train_loss: 1.3541, train_acc: 0.5102 test_loss: 2.2215, test_acc: 0.5169, best: 0.5251, time: 0:01:30
 Epoch: 72, lr: 1.0e-02, train_loss: 1.3163, train_acc: 0.5144 test_loss: 2.8476, test_acc: 0.5317, best: 0.5317, time: 0:01:33
 Epoch: 73, lr: 1.0e-02, train_loss: 1.3044, train_acc: 0.5232 test_loss: 3.6527, test_acc: 0.5485, best: 0.5485, time: 0:01:33
 Epoch: 74, lr: 1.0e-02, train_loss: 1.2811, train_acc: 0.5344 test_loss: 1.9831, test_acc: 0.5158, best: 0.5485, time: 0:01:30
 Epoch: 75, lr: 1.0e-02, train_loss: 1.2803, train_acc: 0.5320 test_loss: 2.8038, test_acc: 0.5256, best: 0.5485, time: 0:01:30
 Epoch: 76, lr: 1.0e-02, train_loss: 1.2662, train_acc: 0.5382 test_loss: 2.4875, test_acc: 0.5457, best: 0.5485, time: 0:01:30
 Epoch: 77, lr: 1.0e-02, train_loss: 1.2831, train_acc: 0.5370 test_loss: 3.5564, test_acc: 0.5154, best: 0.5485, time: 0:01:30
 Epoch: 78, lr: 1.0e-02, train_loss: 1.2704, train_acc: 0.5390 test_loss: 2.2122, test_acc: 0.5456, best: 0.5485, time: 0:01:30
 Epoch: 79, lr: 1.0e-02, train_loss: 1.2657, train_acc: 0.5408 test_loss: 2.6852, test_acc: 0.5347, best: 0.5485, time: 0:01:30
 Epoch: 80, lr: 1.0e-02, train_loss: 1.2502, train_acc: 0.5542 test_loss: 1.9030, test_acc: 0.5343, best: 0.5485, time: 0:01:30
 Epoch: 81, lr: 1.0e-02, train_loss: 1.2249, train_acc: 0.5614 test_loss: 2.3967, test_acc: 0.5431, best: 0.5485, time: 0:01:30
 Epoch: 82, lr: 1.0e-02, train_loss: 1.2110, train_acc: 0.5588 test_loss: 1.4696, test_acc: 0.5793, best: 0.5793, time: 0:01:33
 Epoch: 83, lr: 1.0e-02, train_loss: 1.2003, train_acc: 0.5634 test_loss: 2.0493, test_acc: 0.5584, best: 0.5793, time: 0:01:30
 Epoch: 84, lr: 1.0e-02, train_loss: 1.2038, train_acc: 0.5624 test_loss: 2.9199, test_acc: 0.5611, best: 0.5793, time: 0:01:30
 Epoch: 85, lr: 1.0e-02, train_loss: 1.1966, train_acc: 0.5606 test_loss: 2.6670, test_acc: 0.5571, best: 0.5793, time: 0:01:30
 Epoch: 86, lr: 1.0e-02, train_loss: 1.1675, train_acc: 0.5798 test_loss: 2.1880, test_acc: 0.5607, best: 0.5793, time: 0:01:31
 Epoch: 87, lr: 1.0e-02, train_loss: 1.1412, train_acc: 0.5902 test_loss: 3.3507, test_acc: 0.5198, best: 0.5793, time: 0:01:30
 Epoch: 88, lr: 1.0e-02, train_loss: 1.1932, train_acc: 0.5732 test_loss: 2.2194, test_acc: 0.5424, best: 0.5793, time: 0:01:30
 Epoch: 89, lr: 1.0e-02, train_loss: 1.1573, train_acc: 0.5822 test_loss: 1.9065, test_acc: 0.5724, best: 0.5793, time: 0:01:30
 Epoch: 90, lr: 1.0e-02, train_loss: 1.1400, train_acc: 0.5832 test_loss: 2.7370, test_acc: 0.5464, best: 0.5793, time: 0:01:30
 Epoch: 91, lr: 1.0e-02, train_loss: 1.1451, train_acc: 0.5884 test_loss: 6.1742, test_acc: 0.4790, best: 0.5793, time: 0:01:30
 Epoch: 92, lr: 1.0e-02, train_loss: 1.1438, train_acc: 0.5826 test_loss: 8.8121, test_acc: 0.4948, best: 0.5793, time: 0:01:30
 Epoch: 93, lr: 1.0e-02, train_loss: 1.1668, train_acc: 0.5790 test_loss: 3.2821, test_acc: 0.5088, best: 0.5793, time: 0:01:30
 Epoch: 94, lr: 1.0e-02, train_loss: 1.1871, train_acc: 0.5710 test_loss: 2.3627, test_acc: 0.4833, best: 0.5793, time: 0:01:30
 Epoch: 95, lr: 1.0e-02, train_loss: 1.3158, train_acc: 0.5182 test_loss: 1.2997, test_acc: 0.5720, best: 0.5793, time: 0:01:30
 Epoch: 96, lr: 1.0e-02, train_loss: 1.2052, train_acc: 0.5722 test_loss: 1.5923, test_acc: 0.5347, best: 0.5793, time: 0:01:30
 Epoch: 97, lr: 1.0e-02, train_loss: 1.1599, train_acc: 0.5700 test_loss: 1.5644, test_acc: 0.5651, best: 0.5793, time: 0:01:30
 Epoch: 98, lr: 1.0e-02, train_loss: 1.1388, train_acc: 0.5878 test_loss: 1.7426, test_acc: 0.5674, best: 0.5793, time: 0:01:30
 Epoch: 99, lr: 1.0e-02, train_loss: 1.1354, train_acc: 0.5826 test_loss: 3.8812, test_acc: 0.5209, best: 0.5793, time: 0:01:30
 Epoch: 100, lr: 1.0e-02, train_loss: 1.1171, train_acc: 0.5992 test_loss: 2.3986, test_acc: 0.5574, best: 0.5793, time: 0:01:30
 Epoch: 101, lr: 1.0e-02, train_loss: 1.1045, train_acc: 0.6022 test_loss: 1.4723, test_acc: 0.5836, best: 0.5836, time: 0:01:33
 Epoch: 102, lr: 1.0e-02, train_loss: 1.0602, train_acc: 0.6098 test_loss: 2.7390, test_acc: 0.5461, best: 0.5836, time: 0:01:30
 Epoch: 103, lr: 1.0e-02, train_loss: 1.0806, train_acc: 0.6086 test_loss: 1.5806, test_acc: 0.5673, best: 0.5836, time: 0:01:30
 Epoch: 104, lr: 1.0e-02, train_loss: 1.0555, train_acc: 0.6218 test_loss: 1.5528, test_acc: 0.5739, best: 0.5836, time: 0:01:30
 Epoch: 105, lr: 1.0e-02, train_loss: 1.0963, train_acc: 0.6006 test_loss: 1.2963, test_acc: 0.6096, best: 0.6096, time: 0:01:33
 Epoch: 106, lr: 1.0e-02, train_loss: 1.0541, train_acc: 0.6128 test_loss: 2.1058, test_acc: 0.5369, best: 0.6096, time: 0:01:30
 Epoch: 107, lr: 1.0e-02, train_loss: 1.0286, train_acc: 0.6224 test_loss: 1.2357, test_acc: 0.6174, best: 0.6174, time: 0:01:33
 Epoch: 108, lr: 1.0e-02, train_loss: 1.0429, train_acc: 0.6208 test_loss: 2.3341, test_acc: 0.5903, best: 0.6174, time: 0:01:30
 Epoch: 109, lr: 1.0e-02, train_loss: 1.0291, train_acc: 0.6224 test_loss: 1.2414, test_acc: 0.6111, best: 0.6174, time: 0:01:30
 Epoch: 110, lr: 1.0e-02, train_loss: 1.0229, train_acc: 0.6294 test_loss: 3.2096, test_acc: 0.5735, best: 0.6174, time: 0:01:30
 Epoch: 111, lr: 1.0e-02, train_loss: 1.0415, train_acc: 0.6308 test_loss: 2.2490, test_acc: 0.5726, best: 0.6174, time: 0:01:30
 Epoch: 112, lr: 1.0e-02, train_loss: 1.0382, train_acc: 0.6264 test_loss: 1.8871, test_acc: 0.5764, best: 0.6174, time: 0:01:31
 Epoch: 113, lr: 1.0e-02, train_loss: 0.9926, train_acc: 0.6498 test_loss: 2.7692, test_acc: 0.5663, best: 0.6174, time: 0:01:30
 Epoch: 114, lr: 1.0e-02, train_loss: 1.0052, train_acc: 0.6416 test_loss: 2.4275, test_acc: 0.5631, best: 0.6174, time: 0:01:30
 Epoch: 115, lr: 1.0e-02, train_loss: 0.9834, train_acc: 0.6424 test_loss: 1.9047, test_acc: 0.5915, best: 0.6174, time: 0:01:30
 Epoch: 116, lr: 1.0e-02, train_loss: 0.9990, train_acc: 0.6420 test_loss: 1.7058, test_acc: 0.6054, best: 0.6174, time: 0:01:30
 Epoch: 117, lr: 1.0e-02, train_loss: 0.9552, train_acc: 0.6600 test_loss: 1.6417, test_acc: 0.5883, best: 0.6174, time: 0:01:31
 Epoch: 118, lr: 1.0e-02, train_loss: 0.9542, train_acc: 0.6534 test_loss: 1.6036, test_acc: 0.5769, best: 0.6174, time: 0:01:31
 Epoch: 119, lr: 1.0e-02, train_loss: 0.9799, train_acc: 0.6550 test_loss: 1.6675, test_acc: 0.5706, best: 0.6174, time: 0:01:30
 Epoch: 120, lr: 1.0e-02, train_loss: 0.9528, train_acc: 0.6614 test_loss: 2.4581, test_acc: 0.5839, best: 0.6174, time: 0:01:25
 Epoch: 121, lr: 1.0e-02, train_loss: 0.9589, train_acc: 0.6534 test_loss: 3.1287, test_acc: 0.5726, best: 0.6174, time: 0:01:24
 Epoch: 122, lr: 1.0e-02, train_loss: 0.9391, train_acc: 0.6630 test_loss: 2.8439, test_acc: 0.5860, best: 0.6174, time: 0:01:24
 Epoch: 123, lr: 1.0e-02, train_loss: 0.9297, train_acc: 0.6694 test_loss: 4.8741, test_acc: 0.5544, best: 0.6174, time: 0:01:24
 Epoch: 124, lr: 1.0e-02, train_loss: 0.9238, train_acc: 0.6726 test_loss: 1.9300, test_acc: 0.6032, best: 0.6174, time: 0:01:24
 Epoch: 125, lr: 1.0e-02, train_loss: 0.9120, train_acc: 0.6816 test_loss: 2.8120, test_acc: 0.5825, best: 0.6174, time: 0:01:24
 Epoch: 126, lr: 1.0e-02, train_loss: 0.9093, train_acc: 0.6782 test_loss: 10.4968, test_acc: 0.5306, best: 0.6174, time: 0:01:24
 Epoch: 127, lr: 1.0e-02, train_loss: 0.9305, train_acc: 0.6714 test_loss: 11.1364, test_acc: 0.5387, best: 0.6174, time: 0:01:24
 Epoch: 128, lr: 1.0e-02, train_loss: 0.8951, train_acc: 0.6804 test_loss: 1.4671, test_acc: 0.6158, best: 0.6174, time: 0:01:24
 Epoch: 129, lr: 1.0e-02, train_loss: 0.8940, train_acc: 0.6826 test_loss: 1.7016, test_acc: 0.6048, best: 0.6174, time: 0:01:24
 Epoch: 130, lr: 1.0e-02, train_loss: 0.8866, train_acc: 0.6834 test_loss: 1.9719, test_acc: 0.6052, best: 0.6174, time: 0:01:24
 Epoch: 131, lr: 1.0e-02, train_loss: 0.8530, train_acc: 0.6964 test_loss: 1.3812, test_acc: 0.6190, best: 0.6190, time: 0:01:25
 Epoch: 132, lr: 1.0e-02, train_loss: 0.8558, train_acc: 0.6990 test_loss: 3.1352, test_acc: 0.5989, best: 0.6190, time: 0:01:24
 Epoch: 133, lr: 1.0e-02, train_loss: 0.8706, train_acc: 0.6950 test_loss: 1.1818, test_acc: 0.6309, best: 0.6309, time: 0:01:26
 Epoch: 134, lr: 1.0e-02, train_loss: 0.8582, train_acc: 0.7018 test_loss: 1.7211, test_acc: 0.6058, best: 0.6309, time: 0:01:24
 Epoch: 135, lr: 1.0e-02, train_loss: 0.8663, train_acc: 0.6990 test_loss: 2.4143, test_acc: 0.6086, best: 0.6309, time: 0:01:24
 Epoch: 136, lr: 1.0e-02, train_loss: 0.8511, train_acc: 0.7008 test_loss: 3.5548, test_acc: 0.5981, best: 0.6309, time: 0:01:25
 Epoch: 137, lr: 1.0e-02, train_loss: 0.8362, train_acc: 0.6962 test_loss: 4.4143, test_acc: 0.5687, best: 0.6309, time: 0:01:24
 Epoch: 138, lr: 1.0e-02, train_loss: 0.8389, train_acc: 0.6976 test_loss: 4.1907, test_acc: 0.5356, best: 0.6309, time: 0:01:24
 Epoch: 139, lr: 1.0e-02, train_loss: 0.8787, train_acc: 0.6824 test_loss: 2.7947, test_acc: 0.6002, best: 0.6309, time: 0:01:24
 Epoch: 140, lr: 1.0e-02, train_loss: 0.8450, train_acc: 0.7002 test_loss: 7.9360, test_acc: 0.5677, best: 0.6309, time: 0:01:24
 Epoch: 141, lr: 1.0e-02, train_loss: 0.8541, train_acc: 0.7024 test_loss: 17.2700, test_acc: 0.5304, best: 0.6309, time: 0:01:24
 Epoch: 142, lr: 1.0e-02, train_loss: 0.8219, train_acc: 0.7128 test_loss: 7.8526, test_acc: 0.5693, best: 0.6309, time: 0:01:24
 Epoch: 143, lr: 1.0e-02, train_loss: 0.8125, train_acc: 0.7066 test_loss: 5.3633, test_acc: 0.5665, best: 0.6309, time: 0:01:24
 Epoch: 144, lr: 1.0e-02, train_loss: 0.8039, train_acc: 0.7168 test_loss: 6.7333, test_acc: 0.5657, best: 0.6309, time: 0:01:24
 Epoch: 145, lr: 1.0e-02, train_loss: 0.7797, train_acc: 0.7216 test_loss: 3.5450, test_acc: 0.5754, best: 0.6309, time: 0:01:24
 Epoch: 146, lr: 1.0e-02, train_loss: 0.7894, train_acc: 0.7190 test_loss: 2.2356, test_acc: 0.6136, best: 0.6309, time: 0:01:24
 Epoch: 147, lr: 1.0e-02, train_loss: 0.7984, train_acc: 0.7240 test_loss: 1.4680, test_acc: 0.6046, best: 0.6309, time: 0:01:24
 Epoch: 148, lr: 1.0e-02, train_loss: 0.7799, train_acc: 0.7212 test_loss: 4.1323, test_acc: 0.6088, best: 0.6309, time: 0:01:24
 Epoch: 149, lr: 1.0e-02, train_loss: 0.7820, train_acc: 0.7248 test_loss: 2.2397, test_acc: 0.6039, best: 0.6309, time: 0:01:24
 Epoch: 150, lr: 1.0e-02, train_loss: 0.7630, train_acc: 0.7302 test_loss: 4.2187, test_acc: 0.5959, best: 0.6309, time: 0:01:24
 Epoch: 151, lr: 1.0e-02, train_loss: 0.7507, train_acc: 0.7356 test_loss: 2.2021, test_acc: 0.6091, best: 0.6309, time: 0:01:24
 Epoch: 152, lr: 1.0e-02, train_loss: 0.7761, train_acc: 0.7286 test_loss: 2.8761, test_acc: 0.6054, best: 0.6309, time: 0:01:23
 Epoch: 153, lr: 1.0e-02, train_loss: 0.7564, train_acc: 0.7314 test_loss: 1.7298, test_acc: 0.6108, best: 0.6309, time: 0:01:22
 Epoch: 154, lr: 1.0e-02, train_loss: 0.8391, train_acc: 0.7072 test_loss: 3.2017, test_acc: 0.5751, best: 0.6309, time: 0:01:23
 Epoch: 155, lr: 1.0e-02, train_loss: 0.8028, train_acc: 0.7158 test_loss: 2.8442, test_acc: 0.5719, best: 0.6309, time: 0:01:22
 Epoch: 156, lr: 1.0e-02, train_loss: 0.7491, train_acc: 0.7406 test_loss: 1.5587, test_acc: 0.6221, best: 0.6309, time: 0:01:23
 Epoch: 157, lr: 1.0e-02, train_loss: 0.7706, train_acc: 0.7304 test_loss: 1.4806, test_acc: 0.6249, best: 0.6309, time: 0:01:23
 Epoch: 158, lr: 1.0e-02, train_loss: 0.7405, train_acc: 0.7408 test_loss: 3.1794, test_acc: 0.6065, best: 0.6309, time: 0:01:23
 Epoch: 159, lr: 1.0e-02, train_loss: 0.7536, train_acc: 0.7328 test_loss: 1.6955, test_acc: 0.6205, best: 0.6309, time: 0:01:22
 Epoch: 160, lr: 1.0e-02, train_loss: 0.7393, train_acc: 0.7472 test_loss: 1.6577, test_acc: 0.6290, best: 0.6309, time: 0:01:23
 Epoch: 161, lr: 1.0e-02, train_loss: 0.7297, train_acc: 0.7434 test_loss: 1.4092, test_acc: 0.6226, best: 0.6309, time: 0:01:23
 Epoch: 162, lr: 1.0e-02, train_loss: 0.7237, train_acc: 0.7512 test_loss: 2.9804, test_acc: 0.5974, best: 0.6309, time: 0:01:23
 Epoch: 163, lr: 1.0e-02, train_loss: 0.6931, train_acc: 0.7576 test_loss: 1.8751, test_acc: 0.6212, best: 0.6309, time: 0:01:23
 Epoch: 164, lr: 1.0e-02, train_loss: 0.7233, train_acc: 0.7438 test_loss: 1.5558, test_acc: 0.6218, best: 0.6309, time: 0:01:23
 Epoch: 165, lr: 1.0e-02, train_loss: 0.7072, train_acc: 0.7510 test_loss: 1.5458, test_acc: 0.6255, best: 0.6309, time: 0:01:23
 Epoch: 166, lr: 1.0e-02, train_loss: 0.6969, train_acc: 0.7550 test_loss: 3.5551, test_acc: 0.5979, best: 0.6309, time: 0:01:23
 Epoch: 167, lr: 1.0e-02, train_loss: 0.6825, train_acc: 0.7598 test_loss: 2.8528, test_acc: 0.5945, best: 0.6309, time: 0:01:23
 Epoch: 168, lr: 1.0e-02, train_loss: 0.6935, train_acc: 0.7590 test_loss: 1.9063, test_acc: 0.6168, best: 0.6309, time: 0:01:22
 Epoch: 169, lr: 1.0e-02, train_loss: 0.7054, train_acc: 0.7530 test_loss: 1.4726, test_acc: 0.6460, best: 0.6460, time: 0:01:24
 Epoch: 170, lr: 1.0e-02, train_loss: 0.6861, train_acc: 0.7622 test_loss: 2.3445, test_acc: 0.6028, best: 0.6460, time: 0:01:23
 Epoch: 171, lr: 1.0e-02, train_loss: 0.6799, train_acc: 0.7620 test_loss: 6.1619, test_acc: 0.5676, best: 0.6460, time: 0:01:22
 Epoch: 172, lr: 1.0e-02, train_loss: 0.6690, train_acc: 0.7634 test_loss: 6.5862, test_acc: 0.5719, best: 0.6460, time: 0:01:22
 Epoch: 173, lr: 1.0e-02, train_loss: 0.6704, train_acc: 0.7676 test_loss: 3.2637, test_acc: 0.5870, best: 0.6460, time: 0:01:23
 Epoch: 174, lr: 1.0e-02, train_loss: 0.6596, train_acc: 0.7680 test_loss: 2.4144, test_acc: 0.5679, best: 0.6460, time: 0:01:23
 Epoch: 175, lr: 1.0e-02, train_loss: 0.7208, train_acc: 0.7502 test_loss: 3.6868, test_acc: 0.5952, best: 0.6460, time: 0:01:23
 Epoch: 176, lr: 1.0e-02, train_loss: 0.7030, train_acc: 0.7546 test_loss: 1.9086, test_acc: 0.6002, best: 0.6460, time: 0:01:23
 Epoch: 177, lr: 1.0e-02, train_loss: 0.6929, train_acc: 0.7570 test_loss: 2.6728, test_acc: 0.5573, best: 0.6460, time: 0:01:23
 Epoch: 178, lr: 1.0e-02, train_loss: 0.6637, train_acc: 0.7682 test_loss: 3.0676, test_acc: 0.5764, best: 0.6460, time: 0:01:22
 Epoch: 179, lr: 1.0e-02, train_loss: 0.6636, train_acc: 0.7732 test_loss: 5.9455, test_acc: 0.5361, best: 0.6460, time: 0:01:23
 Epoch: 180, lr: 2.0e-03, train_loss: 0.5684, train_acc: 0.8018 test_loss: 5.2376, test_acc: 0.5831, best: 0.6460, time: 0:01:22
 Epoch: 181, lr: 2.0e-03, train_loss: 0.5641, train_acc: 0.8076 test_loss: 4.0623, test_acc: 0.5814, best: 0.6460, time: 0:01:23
 Epoch: 182, lr: 2.0e-03, train_loss: 0.5425, train_acc: 0.8144 test_loss: 15.7315, test_acc: 0.5414, best: 0.6460, time: 0:01:23
 Epoch: 183, lr: 2.0e-03, train_loss: 0.5115, train_acc: 0.8238 test_loss: 1.8651, test_acc: 0.6258, best: 0.6460, time: 0:01:22
 Epoch: 184, lr: 2.0e-03, train_loss: 0.5248, train_acc: 0.8162 test_loss: 2.6764, test_acc: 0.6118, best: 0.6460, time: 0:01:23
 Epoch: 185, lr: 2.0e-03, train_loss: 0.5084, train_acc: 0.8254 test_loss: 4.0276, test_acc: 0.5906, best: 0.6460, time: 0:01:22
 Epoch: 186, lr: 2.0e-03, train_loss: 0.4967, train_acc: 0.8308 test_loss: 9.0120, test_acc: 0.5359, best: 0.6460, time: 0:01:23
 Epoch: 187, lr: 2.0e-03, train_loss: 0.4915, train_acc: 0.8330 test_loss: 7.4022, test_acc: 0.5430, best: 0.6460, time: 0:01:23
 Epoch: 188, lr: 2.0e-03, train_loss: 0.4709, train_acc: 0.8364 test_loss: 11.1950, test_acc: 0.5777, best: 0.6460, time: 0:01:23
 Epoch: 189, lr: 2.0e-03, train_loss: 0.4926, train_acc: 0.8304 test_loss: 3.9342, test_acc: 0.5897, best: 0.6460, time: 0:01:23
 Epoch: 190, lr: 2.0e-03, train_loss: 0.4755, train_acc: 0.8358 test_loss: 2.5687, test_acc: 0.6112, best: 0.6460, time: 0:01:23
 Epoch: 191, lr: 2.0e-03, train_loss: 0.4740, train_acc: 0.8376 test_loss: 5.6988, test_acc: 0.5880, best: 0.6460, time: 0:01:22
 Epoch: 192, lr: 2.0e-03, train_loss: 0.4682, train_acc: 0.8378 test_loss: 6.5367, test_acc: 0.5723, best: 0.6460, time: 0:01:23
 Epoch: 193, lr: 2.0e-03, train_loss: 0.4602, train_acc: 0.8442 test_loss: 7.1298, test_acc: 0.5705, best: 0.6460, time: 0:01:23
 Epoch: 194, lr: 2.0e-03, train_loss: 0.4694, train_acc: 0.8352 test_loss: 4.0864, test_acc: 0.6152, best: 0.6460, time: 0:01:22
 Epoch: 195, lr: 2.0e-03, train_loss: 0.4671, train_acc: 0.8386 test_loss: 11.7580, test_acc: 0.5520, best: 0.6460, time: 0:01:23
 Epoch: 196, lr: 2.0e-03, train_loss: 0.4470, train_acc: 0.8450 test_loss: 9.2786, test_acc: 0.5557, best: 0.6460, time: 0:01:23
 Epoch: 197, lr: 2.0e-03, train_loss: 0.4632, train_acc: 0.8424 test_loss: 4.6644, test_acc: 0.5998, best: 0.6460, time: 0:01:23
 Epoch: 198, lr: 2.0e-03, train_loss: 0.4587, train_acc: 0.8412 test_loss: 5.2671, test_acc: 0.5885, best: 0.6460, time: 0:01:22
 Epoch: 199, lr: 2.0e-03, train_loss: 0.4541, train_acc: 0.8462 test_loss: 3.5094, test_acc: 0.5939, best: 0.6460, time: 0:01:23
 Epoch: 200, lr: 2.0e-03, train_loss: 0.4663, train_acc: 0.8392 test_loss: 6.9207, test_acc: 0.5992, best: 0.6460, time: 0:01:23
 Epoch: 201, lr: 2.0e-03, train_loss: 0.4499, train_acc: 0.8394 test_loss: 4.6791, test_acc: 0.5933, best: 0.6460, time: 0:01:23
 Epoch: 202, lr: 2.0e-03, train_loss: 0.4847, train_acc: 0.8278 test_loss: 2.7853, test_acc: 0.6156, best: 0.6460, time: 0:01:22
 Epoch: 203, lr: 2.0e-03, train_loss: 0.4550, train_acc: 0.8428 test_loss: 4.4138, test_acc: 0.6034, best: 0.6460, time: 0:01:23
 Epoch: 204, lr: 2.0e-03, train_loss: 0.4454, train_acc: 0.8446 test_loss: 3.3357, test_acc: 0.6126, best: 0.6460, time: 0:01:23
 Epoch: 205, lr: 2.0e-03, train_loss: 0.4307, train_acc: 0.8532 test_loss: 3.3666, test_acc: 0.6074, best: 0.6460, time: 0:01:22
 Epoch: 206, lr: 2.0e-03, train_loss: 0.4337, train_acc: 0.8506 test_loss: 2.6911, test_acc: 0.6178, best: 0.6460, time: 0:01:23
 Epoch: 207, lr: 2.0e-03, train_loss: 0.4377, train_acc: 0.8528 test_loss: 13.5977, test_acc: 0.5559, best: 0.6460, time: 0:01:23
 Epoch: 208, lr: 2.0e-03, train_loss: 0.4313, train_acc: 0.8454 test_loss: 4.4374, test_acc: 0.5911, best: 0.6460, time: 0:01:23
 Epoch: 209, lr: 2.0e-03, train_loss: 0.4233, train_acc: 0.8606 test_loss: 2.9886, test_acc: 0.6019, best: 0.6460, time: 0:01:23
 Epoch: 210, lr: 2.0e-03, train_loss: 0.4273, train_acc: 0.8518 test_loss: 3.4555, test_acc: 0.6160, best: 0.6460, time: 0:01:23
 Epoch: 211, lr: 2.0e-03, train_loss: 0.4307, train_acc: 0.8516 test_loss: 4.7177, test_acc: 0.5989, best: 0.6460, time: 0:01:23
 Epoch: 212, lr: 2.0e-03, train_loss: 0.4367, train_acc: 0.8496 test_loss: 4.6689, test_acc: 0.5976, best: 0.6460, time: 0:01:23
 Epoch: 213, lr: 2.0e-03, train_loss: 0.4220, train_acc: 0.8574 test_loss: 4.6743, test_acc: 0.5971, best: 0.6460, time: 0:01:23
 Epoch: 214, lr: 2.0e-03, train_loss: 0.4096, train_acc: 0.8636 test_loss: 3.6004, test_acc: 0.6068, best: 0.6460, time: 0:01:23
 Epoch: 215, lr: 2.0e-03, train_loss: 0.4183, train_acc: 0.8568 test_loss: 8.0733, test_acc: 0.5581, best: 0.6460, time: 0:01:23
 Epoch: 216, lr: 2.0e-03, train_loss: 0.4296, train_acc: 0.8516 test_loss: 11.4969, test_acc: 0.5487, best: 0.6460, time: 0:01:23
 Epoch: 217, lr: 2.0e-03, train_loss: 0.4191, train_acc: 0.8550 test_loss: 9.2973, test_acc: 0.5696, best: 0.6460, time: 0:01:22
 Epoch: 218, lr: 2.0e-03, train_loss: 0.4269, train_acc: 0.8494 test_loss: 3.6657, test_acc: 0.5986, best: 0.6460, time: 0:01:23
 Epoch: 219, lr: 2.0e-03, train_loss: 0.4180, train_acc: 0.8586 test_loss: 2.5525, test_acc: 0.6200, best: 0.6460, time: 0:01:23
 Epoch: 220, lr: 2.0e-03, train_loss: 0.4155, train_acc: 0.8556 test_loss: 2.6763, test_acc: 0.6024, best: 0.6460, time: 0:01:23
 Epoch: 221, lr: 2.0e-03, train_loss: 0.4098, train_acc: 0.8558 test_loss: 2.6548, test_acc: 0.6059, best: 0.6460, time: 0:01:23
 Epoch: 222, lr: 2.0e-03, train_loss: 0.4061, train_acc: 0.8630 test_loss: 4.4485, test_acc: 0.5803, best: 0.6460, time: 0:01:22
 Epoch: 223, lr: 2.0e-03, train_loss: 0.4163, train_acc: 0.8564 test_loss: 3.4326, test_acc: 0.6071, best: 0.6460, time: 0:01:23
 Epoch: 224, lr: 2.0e-03, train_loss: 0.3983, train_acc: 0.8670 test_loss: 4.0696, test_acc: 0.5907, best: 0.6460, time: 0:01:23
 Epoch: 225, lr: 2.0e-03, train_loss: 0.4164, train_acc: 0.8542 test_loss: 3.3835, test_acc: 0.6006, best: 0.6460, time: 0:01:23
 Epoch: 226, lr: 2.0e-03, train_loss: 0.3924, train_acc: 0.8642 test_loss: 2.2596, test_acc: 0.6152, best: 0.6460, time: 0:01:22
 Epoch: 227, lr: 2.0e-03, train_loss: 0.4133, train_acc: 0.8548 test_loss: 3.2897, test_acc: 0.6115, best: 0.6460, time: 0:01:22
 Epoch: 228, lr: 2.0e-03, train_loss: 0.3926, train_acc: 0.8670 test_loss: 3.7614, test_acc: 0.5805, best: 0.6460, time: 0:01:23
 Epoch: 229, lr: 2.0e-03, train_loss: 0.4148, train_acc: 0.8614 test_loss: 4.1791, test_acc: 0.5934, best: 0.6460, time: 0:01:23
 Epoch: 230, lr: 2.0e-03, train_loss: 0.3999, train_acc: 0.8622 test_loss: 3.0947, test_acc: 0.6111, best: 0.6460, time: 0:01:23
 Epoch: 231, lr: 2.0e-03, train_loss: 0.3931, train_acc: 0.8668 test_loss: 9.6328, test_acc: 0.5640, best: 0.6460, time: 0:01:23
 Epoch: 232, lr: 2.0e-03, train_loss: 0.3857, train_acc: 0.8644 test_loss: 13.2189, test_acc: 0.5365, best: 0.6460, time: 0:01:23
 Epoch: 233, lr: 2.0e-03, train_loss: 0.4022, train_acc: 0.8624 test_loss: 2.6461, test_acc: 0.6090, best: 0.6460, time: 0:01:23
 Epoch: 234, lr: 2.0e-03, train_loss: 0.3918, train_acc: 0.8650 test_loss: 2.3623, test_acc: 0.6212, best: 0.6460, time: 0:01:23
 Epoch: 235, lr: 2.0e-03, train_loss: 0.3917, train_acc: 0.8650 test_loss: 9.3421, test_acc: 0.5443, best: 0.6460, time: 0:01:23
 Epoch: 236, lr: 2.0e-03, train_loss: 0.4063, train_acc: 0.8646 test_loss: 2.8349, test_acc: 0.6160, best: 0.6460, time: 0:01:23
 Epoch: 237, lr: 2.0e-03, train_loss: 0.3956, train_acc: 0.8680 test_loss: 3.8676, test_acc: 0.5954, best: 0.6460, time: 0:01:23
 Epoch: 238, lr: 2.0e-03, train_loss: 0.4086, train_acc: 0.8616 test_loss: 11.0013, test_acc: 0.5380, best: 0.6460, time: 0:01:23
 Epoch: 239, lr: 2.0e-03, train_loss: 0.4110, train_acc: 0.8630 test_loss: 7.5363, test_acc: 0.5693, best: 0.6460, time: 0:01:23
 Epoch: 240, lr: 4.0e-04, train_loss: 0.3808, train_acc: 0.8672 test_loss: 4.2417, test_acc: 0.5972, best: 0.6460, time: 0:01:23
 Epoch: 241, lr: 4.0e-04, train_loss: 0.3797, train_acc: 0.8728 test_loss: 3.0800, test_acc: 0.6046, best: 0.6460, time: 0:01:23
 Epoch: 242, lr: 4.0e-04, train_loss: 0.3794, train_acc: 0.8700 test_loss: 3.6599, test_acc: 0.5869, best: 0.6460, time: 0:01:22
 Epoch: 243, lr: 4.0e-04, train_loss: 0.3650, train_acc: 0.8714 test_loss: 12.6047, test_acc: 0.5309, best: 0.6460, time: 0:01:23
 Epoch: 244, lr: 4.0e-04, train_loss: 0.3674, train_acc: 0.8706 test_loss: 2.8401, test_acc: 0.6155, best: 0.6460, time: 0:01:23
 Epoch: 245, lr: 4.0e-04, train_loss: 0.3467, train_acc: 0.8804 test_loss: 4.2067, test_acc: 0.5864, best: 0.6460, time: 0:01:23
 Epoch: 246, lr: 4.0e-04, train_loss: 0.3588, train_acc: 0.8812 test_loss: 2.3092, test_acc: 0.6281, best: 0.6460, time: 0:01:23
 Epoch: 247, lr: 4.0e-04, train_loss: 0.3586, train_acc: 0.8736 test_loss: 5.8323, test_acc: 0.5879, best: 0.6460, time: 0:01:23
 Epoch: 248, lr: 4.0e-04, train_loss: 0.3502, train_acc: 0.8782 test_loss: 3.4000, test_acc: 0.6092, best: 0.6460, time: 0:01:23
 Epoch: 249, lr: 4.0e-04, train_loss: 0.3743, train_acc: 0.8752 test_loss: 3.0246, test_acc: 0.6156, best: 0.6460, time: 0:01:23
 Epoch: 250, lr: 4.0e-04, train_loss: 0.3480, train_acc: 0.8814 test_loss: 4.3783, test_acc: 0.5965, best: 0.6460, time: 0:01:22
 Epoch: 251, lr: 4.0e-04, train_loss: 0.3580, train_acc: 0.8774 test_loss: 14.3954, test_acc: 0.5546, best: 0.6460, time: 0:01:23
 Epoch: 252, lr: 4.0e-04, train_loss: 0.3651, train_acc: 0.8830 test_loss: 4.7948, test_acc: 0.6045, best: 0.6460, time: 0:01:23
 Epoch: 253, lr: 4.0e-04, train_loss: 0.3572, train_acc: 0.8806 test_loss: 1.6758, test_acc: 0.6455, best: 0.6460, time: 0:01:23
 Epoch: 254, lr: 4.0e-04, train_loss: 0.3620, train_acc: 0.8768 test_loss: 5.4210, test_acc: 0.5901, best: 0.6460, time: 0:01:23
 Epoch: 255, lr: 4.0e-04, train_loss: 0.3698, train_acc: 0.8740 test_loss: 3.6782, test_acc: 0.6112, best: 0.6460, time: 0:01:23
 Epoch: 256, lr: 4.0e-04, train_loss: 0.3545, train_acc: 0.8802 test_loss: 3.7513, test_acc: 0.6229, best: 0.6460, time: 0:01:23
 Epoch: 257, lr: 4.0e-04, train_loss: 0.3460, train_acc: 0.8804 test_loss: 4.2743, test_acc: 0.5980, best: 0.6460, time: 0:01:23
 Epoch: 258, lr: 4.0e-04, train_loss: 0.3551, train_acc: 0.8836 test_loss: 4.9533, test_acc: 0.5992, best: 0.6460, time: 0:01:23
 Epoch: 259, lr: 4.0e-04, train_loss: 0.3550, train_acc: 0.8818 test_loss: 3.1661, test_acc: 0.6238, best: 0.6460, time: 0:01:22
 Epoch: 260, lr: 4.0e-04, train_loss: 0.3323, train_acc: 0.8898 test_loss: 4.9575, test_acc: 0.6121, best: 0.6460, time: 0:01:23
 Epoch: 261, lr: 4.0e-04, train_loss: 0.3597, train_acc: 0.8810 test_loss: 3.5633, test_acc: 0.6116, best: 0.6460, time: 0:01:23
 Epoch: 262, lr: 4.0e-04, train_loss: 0.3348, train_acc: 0.8826 test_loss: 4.4459, test_acc: 0.6170, best: 0.6460, time: 0:01:23
 Epoch: 263, lr: 4.0e-04, train_loss: 0.3508, train_acc: 0.8808 test_loss: 6.3200, test_acc: 0.5988, best: 0.6460, time: 0:01:23
 Epoch: 264, lr: 4.0e-04, train_loss: 0.3464, train_acc: 0.8876 test_loss: 3.2562, test_acc: 0.6295, best: 0.6460, time: 0:01:23
 Epoch: 265, lr: 4.0e-04, train_loss: 0.3318, train_acc: 0.8870 test_loss: 6.1743, test_acc: 0.5753, best: 0.6460, time: 0:01:23
 Epoch: 266, lr: 4.0e-04, train_loss: 0.3733, train_acc: 0.8794 test_loss: 3.5597, test_acc: 0.6185, best: 0.6460, time: 0:01:23
 Epoch: 267, lr: 4.0e-04, train_loss: 0.3428, train_acc: 0.8844 test_loss: 7.5187, test_acc: 0.5884, best: 0.6460, time: 0:01:22
 Epoch: 268, lr: 4.0e-04, train_loss: 0.3357, train_acc: 0.8858 test_loss: 1.8978, test_acc: 0.6435, best: 0.6460, time: 0:01:23
 Epoch: 269, lr: 4.0e-04, train_loss: 0.3641, train_acc: 0.8760 test_loss: 5.2490, test_acc: 0.6009, best: 0.6460, time: 0:01:22
 Epoch: 270, lr: 8.0e-05, train_loss: 0.3474, train_acc: 0.8826 test_loss: 3.4146, test_acc: 0.6150, best: 0.6460, time: 0:01:23
 Epoch: 271, lr: 8.0e-05, train_loss: 0.3520, train_acc: 0.8830 test_loss: 2.7463, test_acc: 0.6194, best: 0.6460, time: 0:01:23
 Epoch: 272, lr: 8.0e-05, train_loss: 0.3473, train_acc: 0.8878 test_loss: 4.0783, test_acc: 0.5971, best: 0.6460, time: 0:01:23
 Epoch: 273, lr: 8.0e-05, train_loss: 0.3519, train_acc: 0.8804 test_loss: 2.0116, test_acc: 0.6305, best: 0.6460, time: 0:01:23
 Epoch: 274, lr: 8.0e-05, train_loss: 0.3506, train_acc: 0.8816 test_loss: 2.8731, test_acc: 0.6054, best: 0.6460, time: 0:01:23
 Epoch: 275, lr: 8.0e-05, train_loss: 0.3324, train_acc: 0.8862 test_loss: 11.7233, test_acc: 0.5521, best: 0.6460, time: 0:01:22
 Epoch: 276, lr: 8.0e-05, train_loss: 0.3209, train_acc: 0.8898 test_loss: 6.9401, test_acc: 0.5721, best: 0.6460, time: 0:01:23
 Epoch: 277, lr: 8.0e-05, train_loss: 0.3503, train_acc: 0.8824 test_loss: 6.3723, test_acc: 0.5749, best: 0.6460, time: 0:01:23
 Epoch: 278, lr: 8.0e-05, train_loss: 0.3218, train_acc: 0.8894 test_loss: 6.7858, test_acc: 0.5917, best: 0.6460, time: 0:01:23
 Epoch: 279, lr: 8.0e-05, train_loss: 0.3463, train_acc: 0.8850 test_loss: 2.3994, test_acc: 0.6194, best: 0.6460, time: 0:01:22
 Epoch: 280, lr: 8.0e-05, train_loss: 0.3341, train_acc: 0.8854 test_loss: 2.8717, test_acc: 0.6105, best: 0.6460, time: 0:01:23
 Epoch: 281, lr: 8.0e-05, train_loss: 0.3512, train_acc: 0.8828 test_loss: 4.1409, test_acc: 0.5920, best: 0.6460, time: 0:01:23
 Epoch: 282, lr: 8.0e-05, train_loss: 0.3470, train_acc: 0.8784 test_loss: 8.4667, test_acc: 0.5744, best: 0.6460, time: 0:01:23
 Epoch: 283, lr: 8.0e-05, train_loss: 0.3474, train_acc: 0.8806 test_loss: 6.8885, test_acc: 0.5813, best: 0.6460, time: 0:01:23
 Epoch: 284, lr: 8.0e-05, train_loss: 0.3311, train_acc: 0.8888 test_loss: 3.0064, test_acc: 0.6115, best: 0.6460, time: 0:01:23
 Epoch: 285, lr: 8.0e-05, train_loss: 0.3467, train_acc: 0.8800 test_loss: 6.0500, test_acc: 0.5841, best: 0.6460, time: 0:01:23
 Epoch: 286, lr: 8.0e-05, train_loss: 0.3348, train_acc: 0.8832 test_loss: 10.2211, test_acc: 0.5623, best: 0.6460, time: 0:01:23
 Epoch: 287, lr: 8.0e-05, train_loss: 0.3187, train_acc: 0.8886 test_loss: 3.8544, test_acc: 0.6071, best: 0.6460, time: 0:01:22
 Epoch: 288, lr: 8.0e-05, train_loss: 0.3277, train_acc: 0.8880 test_loss: 2.3752, test_acc: 0.6216, best: 0.6460, time: 0:01:22
 Epoch: 289, lr: 8.0e-05, train_loss: 0.3170, train_acc: 0.8916 test_loss: 3.4880, test_acc: 0.6105, best: 0.6460, time: 0:01:22
 Epoch: 290, lr: 8.0e-05, train_loss: 0.3584, train_acc: 0.8782 test_loss: 3.8791, test_acc: 0.5884, best: 0.6460, time: 0:01:23
 Epoch: 291, lr: 8.0e-05, train_loss: 0.3384, train_acc: 0.8834 test_loss: 4.6416, test_acc: 0.5946, best: 0.6460, time: 0:01:22
 Epoch: 292, lr: 8.0e-05, train_loss: 0.3327, train_acc: 0.8864 test_loss: 2.7999, test_acc: 0.6284, best: 0.6460, time: 0:01:23
 Epoch: 293, lr: 8.0e-05, train_loss: 0.3395, train_acc: 0.8828 test_loss: 3.0860, test_acc: 0.6082, best: 0.6460, time: 0:01:23
 Epoch: 294, lr: 8.0e-05, train_loss: 0.3218, train_acc: 0.8902 test_loss: 2.1370, test_acc: 0.6380, best: 0.6460, time: 0:01:22
 Epoch: 295, lr: 8.0e-05, train_loss: 0.3322, train_acc: 0.8814 test_loss: 2.2794, test_acc: 0.6360, best: 0.6460, time: 0:01:23
 Epoch: 296, lr: 8.0e-05, train_loss: 0.3437, train_acc: 0.8846 test_loss: 2.5815, test_acc: 0.6324, best: 0.6460, time: 0:01:22
 Epoch: 297, lr: 8.0e-05, train_loss: 0.3531, train_acc: 0.8782 test_loss: 2.2546, test_acc: 0.6421, best: 0.6460, time: 0:01:23
 Epoch: 298, lr: 8.0e-05, train_loss: 0.3299, train_acc: 0.8888 test_loss: 2.4527, test_acc: 0.6259, best: 0.6460, time: 0:01:23
 Epoch: 299, lr: 8.0e-05, train_loss: 0.3299, train_acc: 0.8860 test_loss: 3.1570, test_acc: 0.6092, best: 0.6460, time: 0:01:23
 Highest accuracy: 0.6460