
 Run on time: 2022-06-30 11:46:40.401445

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50_NLP_HEADFIX2
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): NetworkByName(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 256)
                (col_embed): Embedding(256, 256)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=1024, out_features=1024, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 512)
                (col_embed): Embedding(256, 512)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (pool): Pool2d(
          (logit): Sequential(
            (pool_weight): NLP_BASE(
              (downsample): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): ReLU(inplace=True)
              )
              (multihead_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=2048, out_features=2048, bias=True)
              )
              (restore): Sequential(
                (0): Conv2d(2048, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (2): Sigmoid()
              )
              (pos_embed): PositionEmbeddingLearned(
                (row_embed): Embedding(256, 1024)
                (col_embed): Embedding(256, 1024)
              )
            )
          )
          (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.6405, train_acc: 0.1608 test_loss: 2.9171, test_acc: 0.2494, best: 0.2494, time: 0:02:12
 Epoch: 2, lr: 1.0e-02, train_loss: 1.9964, train_acc: 0.2298 test_loss: 2.2898, test_acc: 0.2702, best: 0.2702, time: 0:02:17
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9123, train_acc: 0.2456 test_loss: 2.0650, test_acc: 0.2681, best: 0.2702, time: 0:02:15
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8670, train_acc: 0.2788 test_loss: 4.3210, test_acc: 0.2913, best: 0.2913, time: 0:02:17
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8605, train_acc: 0.2760 test_loss: 1.7888, test_acc: 0.3475, best: 0.3475, time: 0:02:17
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8133, train_acc: 0.2962 test_loss: 1.7340, test_acc: 0.3530, best: 0.3530, time: 0:02:17
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7889, train_acc: 0.3174 test_loss: 1.7016, test_acc: 0.3665, best: 0.3665, time: 0:02:17
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7282, train_acc: 0.3556 test_loss: 1.8117, test_acc: 0.3623, best: 0.3665, time: 0:02:16
 Epoch: 9, lr: 1.0e-02, train_loss: 1.6761, train_acc: 0.3560 test_loss: 1.6190, test_acc: 0.3847, best: 0.3847, time: 0:02:16
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6255, train_acc: 0.3930 test_loss: 1.6277, test_acc: 0.4294, best: 0.4294, time: 0:02:17
 Epoch: 11, lr: 1.0e-02, train_loss: 1.5967, train_acc: 0.4032 test_loss: 1.7209, test_acc: 0.4293, best: 0.4294, time: 0:02:16
 Epoch: 12, lr: 1.0e-02, train_loss: 1.5613, train_acc: 0.4154 test_loss: 1.4081, test_acc: 0.4783, best: 0.4783, time: 0:02:17
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5322, train_acc: 0.4438 test_loss: 2.0476, test_acc: 0.4460, best: 0.4783, time: 0:02:16
 Epoch: 14, lr: 1.0e-02, train_loss: 1.4826, train_acc: 0.4546 test_loss: 1.3735, test_acc: 0.4994, best: 0.4994, time: 0:02:18
 Epoch: 15, lr: 1.0e-02, train_loss: 1.4564, train_acc: 0.4584 test_loss: 1.3238, test_acc: 0.5024, best: 0.5024, time: 0:02:18
 Epoch: 16, lr: 1.0e-02, train_loss: 1.4219, train_acc: 0.4778 test_loss: 2.2465, test_acc: 0.4799, best: 0.5024, time: 0:02:16
 Epoch: 17, lr: 1.0e-02, train_loss: 1.4067, train_acc: 0.4802 test_loss: 4.6421, test_acc: 0.5242, best: 0.5242, time: 0:02:17
 Epoch: 18, lr: 1.0e-02, train_loss: 1.3835, train_acc: 0.4890 test_loss: 2.3635, test_acc: 0.5437, best: 0.5437, time: 0:02:17
 Epoch: 19, lr: 1.0e-02, train_loss: 1.3412, train_acc: 0.5138 test_loss: 6.7989, test_acc: 0.5140, best: 0.5437, time: 0:02:17
 Epoch: 20, lr: 1.0e-02, train_loss: 1.3165, train_acc: 0.5156 test_loss: 2.5177, test_acc: 0.5417, best: 0.5437, time: 0:02:17
 Epoch: 21, lr: 1.0e-02, train_loss: 1.2959, train_acc: 0.5278 test_loss: 1.2740, test_acc: 0.5635, best: 0.5635, time: 0:02:17
 Epoch: 22, lr: 1.0e-02, train_loss: 1.3185, train_acc: 0.5208 test_loss: 1.5349, test_acc: 0.5296, best: 0.5635, time: 0:02:16
 Epoch: 23, lr: 1.0e-02, train_loss: 1.2716, train_acc: 0.5364 test_loss: 1.8195, test_acc: 0.5399, best: 0.5635, time: 0:02:16
 Epoch: 24, lr: 1.0e-02, train_loss: 1.2505, train_acc: 0.5458 test_loss: 1.1994, test_acc: 0.5795, best: 0.5795, time: 0:02:18
 Epoch: 25, lr: 1.0e-02, train_loss: 1.2229, train_acc: 0.5550 test_loss: 2.0527, test_acc: 0.5536, best: 0.5795, time: 0:02:16
 Epoch: 26, lr: 1.0e-02, train_loss: 1.1977, train_acc: 0.5702 test_loss: 1.1998, test_acc: 0.5766, best: 0.5795, time: 0:02:16
 Epoch: 27, lr: 1.0e-02, train_loss: 1.1916, train_acc: 0.5650 test_loss: 1.4589, test_acc: 0.5890, best: 0.5890, time: 0:02:17
 Epoch: 28, lr: 1.0e-02, train_loss: 1.1728, train_acc: 0.5766 test_loss: 1.2531, test_acc: 0.6040, best: 0.6040, time: 0:02:17
 Epoch: 29, lr: 1.0e-02, train_loss: 1.1412, train_acc: 0.5918 test_loss: 1.6374, test_acc: 0.5913, best: 0.6040, time: 0:02:15
 Epoch: 30, lr: 1.0e-02, train_loss: 1.1287, train_acc: 0.5910 test_loss: 3.0821, test_acc: 0.5474, best: 0.6040, time: 0:02:16
 Epoch: 31, lr: 1.0e-02, train_loss: 1.0960, train_acc: 0.6012 test_loss: 1.5170, test_acc: 0.6055, best: 0.6055, time: 0:02:18
 Epoch: 32, lr: 1.0e-02, train_loss: 1.0753, train_acc: 0.6070 test_loss: 1.3715, test_acc: 0.5945, best: 0.6055, time: 0:02:16
 Epoch: 33, lr: 1.0e-02, train_loss: 1.0620, train_acc: 0.6094 test_loss: 1.1939, test_acc: 0.6196, best: 0.6196, time: 0:02:17
 Epoch: 34, lr: 1.0e-02, train_loss: 1.0976, train_acc: 0.6084 test_loss: 1.2147, test_acc: 0.6304, best: 0.6304, time: 0:02:17
 Epoch: 35, lr: 1.0e-02, train_loss: 1.0759, train_acc: 0.6082 test_loss: 1.7399, test_acc: 0.6182, best: 0.6304, time: 0:02:16
 Epoch: 36, lr: 1.0e-02, train_loss: 1.0685, train_acc: 0.6184 test_loss: 0.9426, test_acc: 0.6705, best: 0.6705, time: 0:02:17
 Epoch: 37, lr: 1.0e-02, train_loss: 1.0479, train_acc: 0.6150 test_loss: 0.9837, test_acc: 0.6505, best: 0.6705, time: 0:02:16
 Epoch: 38, lr: 1.0e-02, train_loss: 1.0086, train_acc: 0.6278 test_loss: 1.0576, test_acc: 0.6439, best: 0.6705, time: 0:02:16
 Epoch: 39, lr: 1.0e-02, train_loss: 1.0178, train_acc: 0.6322 test_loss: 0.9156, test_acc: 0.6751, best: 0.6751, time: 0:02:18
 Epoch: 40, lr: 1.0e-02, train_loss: 0.9708, train_acc: 0.6516 test_loss: 1.1993, test_acc: 0.6075, best: 0.6751, time: 0:02:16
 Epoch: 41, lr: 1.0e-02, train_loss: 0.9468, train_acc: 0.6606 test_loss: 0.9269, test_acc: 0.6715, best: 0.6751, time: 0:02:19
 Epoch: 42, lr: 1.0e-02, train_loss: 0.9418, train_acc: 0.6646 test_loss: 0.9961, test_acc: 0.6555, best: 0.6751, time: 0:02:20
 Epoch: 43, lr: 1.0e-02, train_loss: 0.9226, train_acc: 0.6646 test_loss: 0.9039, test_acc: 0.6877, best: 0.6877, time: 0:02:21
 Epoch: 44, lr: 1.0e-02, train_loss: 0.9171, train_acc: 0.6682 test_loss: 0.8911, test_acc: 0.6799, best: 0.6877, time: 0:02:20
 Epoch: 45, lr: 1.0e-02, train_loss: 0.9034, train_acc: 0.6740 test_loss: 0.9899, test_acc: 0.6569, best: 0.6877, time: 0:02:20
 Epoch: 46, lr: 1.0e-02, train_loss: 0.9154, train_acc: 0.6708 test_loss: 0.9035, test_acc: 0.6860, best: 0.6877, time: 0:02:20
 Epoch: 47, lr: 1.0e-02, train_loss: 0.9157, train_acc: 0.6632 test_loss: 0.8858, test_acc: 0.6874, best: 0.6877, time: 0:02:20
 Epoch: 48, lr: 1.0e-02, train_loss: 0.9065, train_acc: 0.6760 test_loss: 1.1429, test_acc: 0.6225, best: 0.6877, time: 0:02:20
 Epoch: 49, lr: 1.0e-02, train_loss: 0.8496, train_acc: 0.6930 test_loss: 0.9087, test_acc: 0.6919, best: 0.6919, time: 0:02:21
 Epoch: 50, lr: 1.0e-02, train_loss: 0.8604, train_acc: 0.6954 test_loss: 0.8607, test_acc: 0.7084, best: 0.7084, time: 0:02:21
 Epoch: 51, lr: 1.0e-02, train_loss: 0.8310, train_acc: 0.7048 test_loss: 0.8995, test_acc: 0.6905, best: 0.7084, time: 0:02:20
 Epoch: 52, lr: 1.0e-02, train_loss: 0.8377, train_acc: 0.7018 test_loss: 0.8516, test_acc: 0.7094, best: 0.7094, time: 0:02:21
 Epoch: 53, lr: 1.0e-02, train_loss: 0.8086, train_acc: 0.7168 test_loss: 0.8833, test_acc: 0.6863, best: 0.7094, time: 0:02:20
 Epoch: 54, lr: 1.0e-02, train_loss: 0.7989, train_acc: 0.7168 test_loss: 0.8534, test_acc: 0.7073, best: 0.7094, time: 0:02:20
 Epoch: 55, lr: 1.0e-02, train_loss: 0.7736, train_acc: 0.7208 test_loss: 1.0167, test_acc: 0.6659, best: 0.7094, time: 0:02:20
 Epoch: 56, lr: 1.0e-02, train_loss: 0.7716, train_acc: 0.7264 test_loss: 0.8952, test_acc: 0.6996, best: 0.7094, time: 0:02:20
 Epoch: 57, lr: 1.0e-02, train_loss: 0.7444, train_acc: 0.7408 test_loss: 0.8138, test_acc: 0.7208, best: 0.7208, time: 0:02:22
 Epoch: 58, lr: 1.0e-02, train_loss: 0.7246, train_acc: 0.7404 test_loss: 0.8841, test_acc: 0.7096, best: 0.7208, time: 0:02:20
 Epoch: 59, lr: 1.0e-02, train_loss: 0.7382, train_acc: 0.7384 test_loss: 0.7951, test_acc: 0.7378, best: 0.7378, time: 0:02:21
 Epoch: 60, lr: 1.0e-02, train_loss: 0.7084, train_acc: 0.7458 test_loss: 0.8333, test_acc: 0.7159, best: 0.7378, time: 0:02:20
 Epoch: 61, lr: 1.0e-02, train_loss: 0.7096, train_acc: 0.7440 test_loss: 0.8418, test_acc: 0.7240, best: 0.7378, time: 0:02:20
 Epoch: 62, lr: 1.0e-02, train_loss: 0.6994, train_acc: 0.7532 test_loss: 0.8014, test_acc: 0.7271, best: 0.7378, time: 0:02:20
 Epoch: 63, lr: 1.0e-02, train_loss: 0.6866, train_acc: 0.7564 test_loss: 0.8088, test_acc: 0.7350, best: 0.7378, time: 0:02:20
 Epoch: 64, lr: 1.0e-02, train_loss: 0.6774, train_acc: 0.7560 test_loss: 0.8369, test_acc: 0.7211, best: 0.7378, time: 0:02:19
 Epoch: 65, lr: 1.0e-02, train_loss: 0.6763, train_acc: 0.7614 test_loss: 0.8120, test_acc: 0.7311, best: 0.7378, time: 0:02:21
 Epoch: 66, lr: 1.0e-02, train_loss: 0.6554, train_acc: 0.7676 test_loss: 0.7416, test_acc: 0.7531, best: 0.7531, time: 0:02:22
 Epoch: 67, lr: 1.0e-02, train_loss: 0.6625, train_acc: 0.7628 test_loss: 0.9150, test_acc: 0.7066, best: 0.7531, time: 0:02:20
 Epoch: 68, lr: 1.0e-02, train_loss: 0.6410, train_acc: 0.7706 test_loss: 0.7871, test_acc: 0.7360, best: 0.7531, time: 0:02:20
 Epoch: 69, lr: 1.0e-02, train_loss: 0.6382, train_acc: 0.7676 test_loss: 0.7643, test_acc: 0.7484, best: 0.7531, time: 0:02:21
 Epoch: 70, lr: 1.0e-02, train_loss: 0.6271, train_acc: 0.7762 test_loss: 0.8090, test_acc: 0.7422, best: 0.7531, time: 0:02:20
 Epoch: 71, lr: 1.0e-02, train_loss: 0.6290, train_acc: 0.7756 test_loss: 0.7545, test_acc: 0.7540, best: 0.7540, time: 0:02:21
 Epoch: 72, lr: 1.0e-02, train_loss: 0.6267, train_acc: 0.7762 test_loss: 0.7700, test_acc: 0.7431, best: 0.7540, time: 0:02:20
 Epoch: 73, lr: 1.0e-02, train_loss: 0.5795, train_acc: 0.7974 test_loss: 0.8072, test_acc: 0.7398, best: 0.7540, time: 0:02:20
 Epoch: 74, lr: 1.0e-02, train_loss: 0.5885, train_acc: 0.7970 test_loss: 0.8090, test_acc: 0.7391, best: 0.7540, time: 0:02:20
 Epoch: 75, lr: 1.0e-02, train_loss: 0.5776, train_acc: 0.7956 test_loss: 0.8748, test_acc: 0.7322, best: 0.7540, time: 0:02:20
 Epoch: 76, lr: 1.0e-02, train_loss: 0.5769, train_acc: 0.7946 test_loss: 0.7941, test_acc: 0.7560, best: 0.7560, time: 0:02:22
 Epoch: 77, lr: 1.0e-02, train_loss: 0.5777, train_acc: 0.7900 test_loss: 0.8641, test_acc: 0.7360, best: 0.7560, time: 0:02:20
 Epoch: 78, lr: 1.0e-02, train_loss: 0.5696, train_acc: 0.7988 test_loss: 0.7862, test_acc: 0.7495, best: 0.7560, time: 0:02:20
 Epoch: 79, lr: 1.0e-02, train_loss: 0.5674, train_acc: 0.8018 test_loss: 0.7980, test_acc: 0.7531, best: 0.7560, time: 0:02:20
 Epoch: 80, lr: 1.0e-02, train_loss: 0.5423, train_acc: 0.8088 test_loss: 0.7849, test_acc: 0.7528, best: 0.7560, time: 0:02:20
 Epoch: 81, lr: 1.0e-02, train_loss: 0.5259, train_acc: 0.8152 test_loss: 0.7677, test_acc: 0.7594, best: 0.7594, time: 0:02:21
 Epoch: 82, lr: 1.0e-02, train_loss: 0.5259, train_acc: 0.8144 test_loss: 0.8204, test_acc: 0.7444, best: 0.7594, time: 0:02:20
 Epoch: 83, lr: 1.0e-02, train_loss: 0.5289, train_acc: 0.8126 test_loss: 0.7177, test_acc: 0.7684, best: 0.7684, time: 0:02:22
 Epoch: 84, lr: 1.0e-02, train_loss: 0.5311, train_acc: 0.8088 test_loss: 0.8369, test_acc: 0.7434, best: 0.7684, time: 0:02:20
 Epoch: 85, lr: 1.0e-02, train_loss: 0.5010, train_acc: 0.8224 test_loss: 0.7100, test_acc: 0.7656, best: 0.7684, time: 0:02:20
 Epoch: 86, lr: 1.0e-02, train_loss: 0.5018, train_acc: 0.8256 test_loss: 0.8216, test_acc: 0.7548, best: 0.7684, time: 0:02:20
 Epoch: 87, lr: 1.0e-02, train_loss: 0.5069, train_acc: 0.8210 test_loss: 0.8220, test_acc: 0.7576, best: 0.7684, time: 0:02:21
 Epoch: 88, lr: 1.0e-02, train_loss: 0.4862, train_acc: 0.8274 test_loss: 0.8612, test_acc: 0.7532, best: 0.7684, time: 0:02:17
 Epoch: 89, lr: 1.0e-02, train_loss: 0.5046, train_acc: 0.8188 test_loss: 0.8712, test_acc: 0.7484, best: 0.7684, time: 0:02:15
 Epoch: 90, lr: 1.0e-02, train_loss: 0.4788, train_acc: 0.8292 test_loss: 0.8148, test_acc: 0.7579, best: 0.7684, time: 0:02:16
 Epoch: 91, lr: 1.0e-02, train_loss: 0.4816, train_acc: 0.8284 test_loss: 0.9386, test_acc: 0.7318, best: 0.7684, time: 0:02:16
 Epoch: 92, lr: 1.0e-02, train_loss: 0.4655, train_acc: 0.8372 test_loss: 0.7325, test_acc: 0.7738, best: 0.7738, time: 0:02:16
 Epoch: 93, lr: 1.0e-02, train_loss: 0.4654, train_acc: 0.8348 test_loss: 0.7873, test_acc: 0.7654, best: 0.7738, time: 0:02:16
 Epoch: 94, lr: 1.0e-02, train_loss: 0.4546, train_acc: 0.8390 test_loss: 0.7455, test_acc: 0.7739, best: 0.7739, time: 0:02:16
 Epoch: 95, lr: 1.0e-02, train_loss: 0.4437, train_acc: 0.8430 test_loss: 0.7939, test_acc: 0.7675, best: 0.7739, time: 0:02:15
 Epoch: 96, lr: 1.0e-02, train_loss: 0.4605, train_acc: 0.8444 test_loss: 0.8631, test_acc: 0.7534, best: 0.7739, time: 0:02:15
 Epoch: 97, lr: 1.0e-02, train_loss: 0.4666, train_acc: 0.8368 test_loss: 0.7747, test_acc: 0.7705, best: 0.7739, time: 0:02:15
 Epoch: 98, lr: 1.0e-02, train_loss: 0.4205, train_acc: 0.8480 test_loss: 0.8816, test_acc: 0.7581, best: 0.7739, time: 0:02:15
 Epoch: 99, lr: 1.0e-02, train_loss: 0.4311, train_acc: 0.8496 test_loss: 0.7234, test_acc: 0.7839, best: 0.7839, time: 0:02:16
 Epoch: 100, lr: 1.0e-02, train_loss: 0.4467, train_acc: 0.8424 test_loss: 0.7064, test_acc: 0.7784, best: 0.7839, time: 0:02:15
 Epoch: 101, lr: 1.0e-02, train_loss: 0.4265, train_acc: 0.8464 test_loss: 0.8822, test_acc: 0.7685, best: 0.7839, time: 0:02:15
 Epoch: 102, lr: 1.0e-02, train_loss: 0.4276, train_acc: 0.8496 test_loss: 0.9258, test_acc: 0.7544, best: 0.7839, time: 0:02:15
 Epoch: 103, lr: 1.0e-02, train_loss: 0.4407, train_acc: 0.8438 test_loss: 0.7232, test_acc: 0.7744, best: 0.7839, time: 0:02:15
 Epoch: 104, lr: 1.0e-02, train_loss: 0.4042, train_acc: 0.8570 test_loss: 0.7903, test_acc: 0.7708, best: 0.7839, time: 0:02:16
 Epoch: 105, lr: 1.0e-02, train_loss: 0.4154, train_acc: 0.8526 test_loss: 0.8380, test_acc: 0.7572, best: 0.7839, time: 0:02:15
 Epoch: 106, lr: 1.0e-02, train_loss: 0.3951, train_acc: 0.8632 test_loss: 0.7602, test_acc: 0.7829, best: 0.7839, time: 0:02:16
 Epoch: 107, lr: 1.0e-02, train_loss: 0.3844, train_acc: 0.8658 test_loss: 0.8410, test_acc: 0.7596, best: 0.7839, time: 0:02:16
 Epoch: 108, lr: 1.0e-02, train_loss: 0.3976, train_acc: 0.8616 test_loss: 1.0067, test_acc: 0.7490, best: 0.7839, time: 0:02:15
 Epoch: 109, lr: 1.0e-02, train_loss: 0.4051, train_acc: 0.8618 test_loss: 0.7760, test_acc: 0.7900, best: 0.7900, time: 0:02:16
 Epoch: 110, lr: 1.0e-02, train_loss: 0.3845, train_acc: 0.8692 test_loss: 0.7779, test_acc: 0.7762, best: 0.7900, time: 0:02:16
 Epoch: 111, lr: 1.0e-02, train_loss: 0.3949, train_acc: 0.8576 test_loss: 0.7643, test_acc: 0.7893, best: 0.7900, time: 0:02:15
 Epoch: 112, lr: 1.0e-02, train_loss: 0.3634, train_acc: 0.8726 test_loss: 0.8565, test_acc: 0.7592, best: 0.7900, time: 0:02:15
 Epoch: 113, lr: 1.0e-02, train_loss: 0.3778, train_acc: 0.8680 test_loss: 0.7186, test_acc: 0.7910, best: 0.7910, time: 0:02:15
 Epoch: 114, lr: 1.0e-02, train_loss: 0.3868, train_acc: 0.8668 test_loss: 0.7568, test_acc: 0.7830, best: 0.7910, time: 0:02:15
 Epoch: 115, lr: 1.0e-02, train_loss: 0.3817, train_acc: 0.8638 test_loss: 0.7360, test_acc: 0.7923, best: 0.7923, time: 0:02:16
 Epoch: 116, lr: 1.0e-02, train_loss: 0.3773, train_acc: 0.8722 test_loss: 0.8376, test_acc: 0.7771, best: 0.7923, time: 0:02:15
 Epoch: 117, lr: 1.0e-02, train_loss: 0.3538, train_acc: 0.8748 test_loss: 0.9313, test_acc: 0.7609, best: 0.7923, time: 0:02:16
 Epoch: 118, lr: 1.0e-02, train_loss: 0.3564, train_acc: 0.8768 test_loss: 0.8556, test_acc: 0.7710, best: 0.7923, time: 0:02:16
 Epoch: 119, lr: 1.0e-02, train_loss: 0.3869, train_acc: 0.8674 test_loss: 0.7546, test_acc: 0.7916, best: 0.7923, time: 0:02:15
 Epoch: 120, lr: 1.0e-02, train_loss: 0.3648, train_acc: 0.8746 test_loss: 0.7629, test_acc: 0.7771, best: 0.7923, time: 0:02:16
 Epoch: 121, lr: 1.0e-02, train_loss: 0.3574, train_acc: 0.8748 test_loss: 0.8930, test_acc: 0.7511, best: 0.7923, time: 0:02:19
 Epoch: 122, lr: 1.0e-02, train_loss: 0.3425, train_acc: 0.8812 test_loss: 0.7787, test_acc: 0.7900, best: 0.7923, time: 0:02:21
 Epoch: 123, lr: 1.0e-02, train_loss: 0.3469, train_acc: 0.8772 test_loss: 0.7774, test_acc: 0.7816, best: 0.7923, time: 0:02:21
 Epoch: 124, lr: 1.0e-02, train_loss: 0.3501, train_acc: 0.8780 test_loss: 0.8434, test_acc: 0.7738, best: 0.7923, time: 0:02:20
 Epoch: 125, lr: 1.0e-02, train_loss: 0.3477, train_acc: 0.8738 test_loss: 0.8596, test_acc: 0.7740, best: 0.7923, time: 0:02:21
 Epoch: 126, lr: 1.0e-02, train_loss: 0.3358, train_acc: 0.8824 test_loss: 0.8490, test_acc: 0.7771, best: 0.7923, time: 0:02:21
 Epoch: 127, lr: 1.0e-02, train_loss: 0.3359, train_acc: 0.8824 test_loss: 0.8098, test_acc: 0.7911, best: 0.7923, time: 0:02:20
 Epoch: 128, lr: 1.0e-02, train_loss: 0.3307, train_acc: 0.8846 test_loss: 0.7136, test_acc: 0.8040, best: 0.8040, time: 0:02:21
 Epoch: 129, lr: 1.0e-02, train_loss: 0.3338, train_acc: 0.8858 test_loss: 0.8248, test_acc: 0.7816, best: 0.8040, time: 0:02:20
 Epoch: 130, lr: 1.0e-02, train_loss: 0.3467, train_acc: 0.8778 test_loss: 1.0439, test_acc: 0.7465, best: 0.8040, time: 0:02:20
 Epoch: 131, lr: 1.0e-02, train_loss: 0.3246, train_acc: 0.8896 test_loss: 1.0663, test_acc: 0.7448, best: 0.8040, time: 0:02:19
 Epoch: 132, lr: 1.0e-02, train_loss: 0.3516, train_acc: 0.8816 test_loss: 0.6783, test_acc: 0.7980, best: 0.8040, time: 0:02:18
 Epoch: 133, lr: 1.0e-02, train_loss: 0.3152, train_acc: 0.8928 test_loss: 0.9156, test_acc: 0.7719, best: 0.8040, time: 0:02:18
 Epoch: 134, lr: 1.0e-02, train_loss: 0.3210, train_acc: 0.8892 test_loss: 0.9529, test_acc: 0.7764, best: 0.8040, time: 0:02:18
 Epoch: 135, lr: 1.0e-02, train_loss: 0.3207, train_acc: 0.8876 test_loss: 0.9339, test_acc: 0.7654, best: 0.8040, time: 0:02:18
 Epoch: 136, lr: 1.0e-02, train_loss: 0.3222, train_acc: 0.8908 test_loss: 0.7294, test_acc: 0.8011, best: 0.8040, time: 0:02:18
 Epoch: 137, lr: 1.0e-02, train_loss: 0.3190, train_acc: 0.8860 test_loss: 0.8878, test_acc: 0.7855, best: 0.8040, time: 0:02:18
 Epoch: 138, lr: 1.0e-02, train_loss: 0.3467, train_acc: 0.8802 test_loss: 0.9870, test_acc: 0.7761, best: 0.8040, time: 0:02:17
 Epoch: 139, lr: 1.0e-02, train_loss: 0.3199, train_acc: 0.8860 test_loss: 0.9207, test_acc: 0.7729, best: 0.8040, time: 0:02:17
 Epoch: 140, lr: 1.0e-02, train_loss: 0.3148, train_acc: 0.8864 test_loss: 1.4682, test_acc: 0.7129, best: 0.8040, time: 0:02:18
 Epoch: 141, lr: 1.0e-02, train_loss: 0.3106, train_acc: 0.8908 test_loss: 0.9447, test_acc: 0.7681, best: 0.8040, time: 0:02:18
 Epoch: 142, lr: 1.0e-02, train_loss: 0.3074, train_acc: 0.8926 test_loss: 0.8369, test_acc: 0.7899, best: 0.8040, time: 0:02:18
 Epoch: 143, lr: 1.0e-02, train_loss: 0.3268, train_acc: 0.8860 test_loss: 1.0235, test_acc: 0.7631, best: 0.8040, time: 0:02:18
 Epoch: 144, lr: 1.0e-02, train_loss: 0.2953, train_acc: 0.8980 test_loss: 0.8606, test_acc: 0.7859, best: 0.8040, time: 0:02:18
 Epoch: 145, lr: 1.0e-02, train_loss: 0.2812, train_acc: 0.9030 test_loss: 0.8210, test_acc: 0.7980, best: 0.8040, time: 0:02:17
 Epoch: 146, lr: 1.0e-02, train_loss: 0.2941, train_acc: 0.9002 test_loss: 0.8369, test_acc: 0.7987, best: 0.8040, time: 0:02:15
 Epoch: 147, lr: 1.0e-02, train_loss: 0.2960, train_acc: 0.9020 test_loss: 0.8712, test_acc: 0.7876, best: 0.8040, time: 0:02:15
 Epoch: 148, lr: 1.0e-02, train_loss: 0.2888, train_acc: 0.8998 test_loss: 0.9053, test_acc: 0.7620, best: 0.8040, time: 0:02:15
 Epoch: 149, lr: 1.0e-02, train_loss: 0.3046, train_acc: 0.8950 test_loss: 0.9638, test_acc: 0.7856, best: 0.8040, time: 0:02:15
 Epoch: 150, lr: 1.0e-02, train_loss: 0.3049, train_acc: 0.8956 test_loss: 0.9694, test_acc: 0.7594, best: 0.8040, time: 0:02:15
 Epoch: 151, lr: 1.0e-02, train_loss: 0.3006, train_acc: 0.8946 test_loss: 0.8341, test_acc: 0.7850, best: 0.8040, time: 0:02:15
 Epoch: 152, lr: 1.0e-02, train_loss: 0.2741, train_acc: 0.9012 test_loss: 0.8710, test_acc: 0.7917, best: 0.8040, time: 0:02:14
 Epoch: 153, lr: 1.0e-02, train_loss: 0.2824, train_acc: 0.8994 test_loss: 0.9977, test_acc: 0.7624, best: 0.8040, time: 0:02:14
 Epoch: 154, lr: 1.0e-02, train_loss: 0.2913, train_acc: 0.8958 test_loss: 0.9235, test_acc: 0.7764, best: 0.8040, time: 0:02:15
 Epoch: 155, lr: 1.0e-02, train_loss: 0.2883, train_acc: 0.8966 test_loss: 0.9128, test_acc: 0.7710, best: 0.8040, time: 0:02:15
 Epoch: 156, lr: 1.0e-02, train_loss: 0.2684, train_acc: 0.9084 test_loss: 0.9485, test_acc: 0.7724, best: 0.8040, time: 0:02:16
 Epoch: 157, lr: 1.0e-02, train_loss: 0.2800, train_acc: 0.9028 test_loss: 0.9462, test_acc: 0.7814, best: 0.8040, time: 0:02:16
 Epoch: 158, lr: 1.0e-02, train_loss: 0.2652, train_acc: 0.9018 test_loss: 0.8360, test_acc: 0.7823, best: 0.8040, time: 0:02:16
 Epoch: 159, lr: 1.0e-02, train_loss: 0.2470, train_acc: 0.9172 test_loss: 0.7896, test_acc: 0.8075, best: 0.8075, time: 0:02:18
 Epoch: 160, lr: 1.0e-02, train_loss: 0.2643, train_acc: 0.9042 test_loss: 0.8169, test_acc: 0.7907, best: 0.8075, time: 0:02:16
 Epoch: 161, lr: 1.0e-02, train_loss: 0.2663, train_acc: 0.9076 test_loss: 0.8300, test_acc: 0.7994, best: 0.8075, time: 0:02:16
 Epoch: 162, lr: 1.0e-02, train_loss: 0.2637, train_acc: 0.9076 test_loss: 0.8907, test_acc: 0.7876, best: 0.8075, time: 0:02:16
 Epoch: 163, lr: 1.0e-02, train_loss: 0.2576, train_acc: 0.9080 test_loss: 1.0805, test_acc: 0.7519, best: 0.8075, time: 0:02:16
 Epoch: 164, lr: 1.0e-02, train_loss: 0.2811, train_acc: 0.9026 test_loss: 0.9287, test_acc: 0.7826, best: 0.8075, time: 0:02:17
 Epoch: 165, lr: 1.0e-02, train_loss: 0.2571, train_acc: 0.9150 test_loss: 0.8651, test_acc: 0.7934, best: 0.8075, time: 0:02:17
 Epoch: 166, lr: 1.0e-02, train_loss: 0.2476, train_acc: 0.9156 test_loss: 0.9489, test_acc: 0.7795, best: 0.8075, time: 0:02:17
 Epoch: 167, lr: 1.0e-02, train_loss: 0.2617, train_acc: 0.9098 test_loss: 0.8179, test_acc: 0.7969, best: 0.8075, time: 0:02:17
 Epoch: 168, lr: 1.0e-02, train_loss: 0.2410, train_acc: 0.9156 test_loss: 0.8051, test_acc: 0.8026, best: 0.8075, time: 0:02:17
 Epoch: 169, lr: 1.0e-02, train_loss: 0.2424, train_acc: 0.9136 test_loss: 0.8301, test_acc: 0.7999, best: 0.8075, time: 0:02:20
 Epoch: 170, lr: 1.0e-02, train_loss: 0.2327, train_acc: 0.9212 test_loss: 0.7837, test_acc: 0.8055, best: 0.8075, time: 0:02:20
 Epoch: 171, lr: 1.0e-02, train_loss: 0.2306, train_acc: 0.9254 test_loss: 0.8334, test_acc: 0.7997, best: 0.8075, time: 0:02:20
 Epoch: 172, lr: 1.0e-02, train_loss: 0.2406, train_acc: 0.9144 test_loss: 0.8684, test_acc: 0.7751, best: 0.8075, time: 0:02:20
 Epoch: 173, lr: 1.0e-02, train_loss: 0.2333, train_acc: 0.9172 test_loss: 0.9375, test_acc: 0.7891, best: 0.8075, time: 0:02:20
 Epoch: 174, lr: 1.0e-02, train_loss: 0.2401, train_acc: 0.9200 test_loss: 0.8605, test_acc: 0.7926, best: 0.8075, time: 0:02:19
 Epoch: 175, lr: 1.0e-02, train_loss: 0.2261, train_acc: 0.9210 test_loss: 0.9300, test_acc: 0.7871, best: 0.8075, time: 0:02:19
 Epoch: 176, lr: 1.0e-02, train_loss: 0.2544, train_acc: 0.9134 test_loss: 0.9323, test_acc: 0.7931, best: 0.8075, time: 0:02:19
 Epoch: 177, lr: 1.0e-02, train_loss: 0.2387, train_acc: 0.9208 test_loss: 0.8481, test_acc: 0.8021, best: 0.8075, time: 0:02:19
 Epoch: 178, lr: 1.0e-02, train_loss: 0.2483, train_acc: 0.9142 test_loss: 0.8425, test_acc: 0.7875, best: 0.8075, time: 0:02:19
 Epoch: 179, lr: 1.0e-02, train_loss: 0.2467, train_acc: 0.9132 test_loss: 0.8128, test_acc: 0.8036, best: 0.8075, time: 0:02:19
 Epoch: 180, lr: 2.0e-03, train_loss: 0.1962, train_acc: 0.9324 test_loss: 0.7630, test_acc: 0.8174, best: 0.8174, time: 0:02:20
 Epoch: 181, lr: 2.0e-03, train_loss: 0.1763, train_acc: 0.9390 test_loss: 0.8090, test_acc: 0.8185, best: 0.8185, time: 0:02:20
 Epoch: 182, lr: 2.0e-03, train_loss: 0.1690, train_acc: 0.9430 test_loss: 0.8211, test_acc: 0.8195, best: 0.8195, time: 0:02:21
 Epoch: 183, lr: 2.0e-03, train_loss: 0.1572, train_acc: 0.9430 test_loss: 0.7900, test_acc: 0.8220, best: 0.8220, time: 0:02:20
 Epoch: 184, lr: 2.0e-03, train_loss: 0.1717, train_acc: 0.9424 test_loss: 0.7952, test_acc: 0.8217, best: 0.8220, time: 0:02:18
 Epoch: 185, lr: 2.0e-03, train_loss: 0.1578, train_acc: 0.9458 test_loss: 0.7806, test_acc: 0.8224, best: 0.8224, time: 0:02:20
 Epoch: 186, lr: 2.0e-03, train_loss: 0.1691, train_acc: 0.9386 test_loss: 0.8154, test_acc: 0.8267, best: 0.8267, time: 0:02:21
 Epoch: 187, lr: 2.0e-03, train_loss: 0.1474, train_acc: 0.9476 test_loss: 0.8477, test_acc: 0.8210, best: 0.8267, time: 0:02:19
 Epoch: 188, lr: 2.0e-03, train_loss: 0.1600, train_acc: 0.9456 test_loss: 0.8065, test_acc: 0.8203, best: 0.8267, time: 0:02:20
 Epoch: 189, lr: 2.0e-03, train_loss: 0.1488, train_acc: 0.9496 test_loss: 0.8234, test_acc: 0.8224, best: 0.8267, time: 0:02:20
 Epoch: 190, lr: 2.0e-03, train_loss: 0.1440, train_acc: 0.9512 test_loss: 0.8181, test_acc: 0.8267, best: 0.8267, time: 0:02:19
 Epoch: 191, lr: 2.0e-03, train_loss: 0.1609, train_acc: 0.9474 test_loss: 0.7972, test_acc: 0.8245, best: 0.8267, time: 0:02:19
 Epoch: 192, lr: 2.0e-03, train_loss: 0.1530, train_acc: 0.9462 test_loss: 0.7848, test_acc: 0.8276, best: 0.8276, time: 0:02:22
 Epoch: 193, lr: 2.0e-03, train_loss: 0.1485, train_acc: 0.9500 test_loss: 0.8130, test_acc: 0.8213, best: 0.8276, time: 0:02:19
 Epoch: 194, lr: 2.0e-03, train_loss: 0.1556, train_acc: 0.9464 test_loss: 0.8130, test_acc: 0.8224, best: 0.8276, time: 0:02:19
 Epoch: 195, lr: 2.0e-03, train_loss: 0.1522, train_acc: 0.9492 test_loss: 0.8637, test_acc: 0.8206, best: 0.8276, time: 0:02:18
 Epoch: 196, lr: 2.0e-03, train_loss: 0.1426, train_acc: 0.9468 test_loss: 0.8588, test_acc: 0.8193, best: 0.8276, time: 0:02:18
 Epoch: 197, lr: 2.0e-03, train_loss: 0.1289, train_acc: 0.9564 test_loss: 0.8581, test_acc: 0.8225, best: 0.8276, time: 0:02:18
 Epoch: 198, lr: 2.0e-03, train_loss: 0.1449, train_acc: 0.9482 test_loss: 0.8575, test_acc: 0.8187, best: 0.8276, time: 0:02:18
 Epoch: 199, lr: 2.0e-03, train_loss: 0.1431, train_acc: 0.9490 test_loss: 0.8409, test_acc: 0.8113, best: 0.8276, time: 0:02:18
 Epoch: 200, lr: 2.0e-03, train_loss: 0.1498, train_acc: 0.9494 test_loss: 0.8039, test_acc: 0.8216, best: 0.8276, time: 0:02:18
 Epoch: 201, lr: 2.0e-03, train_loss: 0.1396, train_acc: 0.9510 test_loss: 0.8417, test_acc: 0.8164, best: 0.8276, time: 0:02:19
 Epoch: 202, lr: 2.0e-03, train_loss: 0.1339, train_acc: 0.9564 test_loss: 0.8390, test_acc: 0.8180, best: 0.8276, time: 0:02:19
 Epoch: 203, lr: 2.0e-03, train_loss: 0.1511, train_acc: 0.9480 test_loss: 0.8262, test_acc: 0.8170, best: 0.8276, time: 0:02:18
 Epoch: 204, lr: 2.0e-03, train_loss: 0.1373, train_acc: 0.9572 test_loss: 0.8213, test_acc: 0.8174, best: 0.8276, time: 0:02:19
 Epoch: 205, lr: 2.0e-03, train_loss: 0.1349, train_acc: 0.9534 test_loss: 0.8161, test_acc: 0.8184, best: 0.8276, time: 0:02:18
 Epoch: 206, lr: 2.0e-03, train_loss: 0.1263, train_acc: 0.9556 test_loss: 0.8924, test_acc: 0.8131, best: 0.8276, time: 0:02:18
 Epoch: 207, lr: 2.0e-03, train_loss: 0.1384, train_acc: 0.9518 test_loss: 0.8850, test_acc: 0.8156, best: 0.8276, time: 0:02:18
 Epoch: 208, lr: 2.0e-03, train_loss: 0.1347, train_acc: 0.9554 test_loss: 0.8465, test_acc: 0.8113, best: 0.8276, time: 0:02:19
 Epoch: 209, lr: 2.0e-03, train_loss: 0.1287, train_acc: 0.9574 test_loss: 0.9215, test_acc: 0.8099, best: 0.8276, time: 0:02:19
 Epoch: 210, lr: 2.0e-03, train_loss: 0.1206, train_acc: 0.9588 test_loss: 0.8613, test_acc: 0.8234, best: 0.8276, time: 0:02:19
 Epoch: 211, lr: 2.0e-03, train_loss: 0.1330, train_acc: 0.9566 test_loss: 0.8892, test_acc: 0.8166, best: 0.8276, time: 0:02:19
 Epoch: 212, lr: 2.0e-03, train_loss: 0.1368, train_acc: 0.9542 test_loss: 0.8340, test_acc: 0.8199, best: 0.8276, time: 0:02:19
 Epoch: 213, lr: 2.0e-03, train_loss: 0.1224, train_acc: 0.9602 test_loss: 0.8936, test_acc: 0.8159, best: 0.8276, time: 0:02:19
 Epoch: 214, lr: 2.0e-03, train_loss: 0.1256, train_acc: 0.9546 test_loss: 0.8838, test_acc: 0.8179, best: 0.8276, time: 0:02:19
 Epoch: 215, lr: 2.0e-03, train_loss: 0.1286, train_acc: 0.9548 test_loss: 0.8768, test_acc: 0.8177, best: 0.8276, time: 0:02:19
 Epoch: 216, lr: 2.0e-03, train_loss: 0.1268, train_acc: 0.9542 test_loss: 0.8237, test_acc: 0.8205, best: 0.8276, time: 0:02:19
 Epoch: 217, lr: 2.0e-03, train_loss: 0.1193, train_acc: 0.9596 test_loss: 0.8891, test_acc: 0.8176, best: 0.8276, time: 0:02:20
 Epoch: 218, lr: 2.0e-03, train_loss: 0.1432, train_acc: 0.9502 test_loss: 0.8798, test_acc: 0.8163, best: 0.8276, time: 0:02:19
 Epoch: 219, lr: 2.0e-03, train_loss: 0.1166, train_acc: 0.9604 test_loss: 0.8800, test_acc: 0.8204, best: 0.8276, time: 0:02:19
 Epoch: 220, lr: 2.0e-03, train_loss: 0.1328, train_acc: 0.9570 test_loss: 0.8524, test_acc: 0.8225, best: 0.8276, time: 0:02:19
 Epoch: 221, lr: 2.0e-03, train_loss: 0.1326, train_acc: 0.9498 test_loss: 0.8596, test_acc: 0.8203, best: 0.8276, time: 0:02:19
 Epoch: 222, lr: 2.0e-03, train_loss: 0.1347, train_acc: 0.9524 test_loss: 0.8571, test_acc: 0.8181, best: 0.8276, time: 0:02:19
 Epoch: 223, lr: 2.0e-03, train_loss: 0.1211, train_acc: 0.9590 test_loss: 0.8139, test_acc: 0.8221, best: 0.8276, time: 0:02:19
 Epoch: 224, lr: 2.0e-03, train_loss: 0.1293, train_acc: 0.9566 test_loss: 0.8779, test_acc: 0.8179, best: 0.8276, time: 0:02:20
 Epoch: 225, lr: 2.0e-03, train_loss: 0.1269, train_acc: 0.9584 test_loss: 0.8758, test_acc: 0.8210, best: 0.8276, time: 0:02:20
 Epoch: 226, lr: 2.0e-03, train_loss: 0.1366, train_acc: 0.9514 test_loss: 0.8446, test_acc: 0.8234, best: 0.8276, time: 0:02:20
 Epoch: 227, lr: 2.0e-03, train_loss: 0.1338, train_acc: 0.9548 test_loss: 0.8645, test_acc: 0.8204, best: 0.8276, time: 0:02:20
 Epoch: 228, lr: 2.0e-03, train_loss: 0.1164, train_acc: 0.9608 test_loss: 0.8805, test_acc: 0.8227, best: 0.8276, time: 0:02:20
 Epoch: 229, lr: 2.0e-03, train_loss: 0.1197, train_acc: 0.9564 test_loss: 0.9461, test_acc: 0.8147, best: 0.8276, time: 0:02:20
 Epoch: 230, lr: 2.0e-03, train_loss: 0.1183, train_acc: 0.9580 test_loss: 0.8501, test_acc: 0.8240, best: 0.8276, time: 0:02:19
 Epoch: 231, lr: 2.0e-03, train_loss: 0.1212, train_acc: 0.9564 test_loss: 0.9104, test_acc: 0.8205, best: 0.8276, time: 0:02:20
 Epoch: 232, lr: 2.0e-03, train_loss: 0.1156, train_acc: 0.9602 test_loss: 0.8922, test_acc: 0.8204, best: 0.8276, time: 0:02:19
 Epoch: 233, lr: 2.0e-03, train_loss: 0.1288, train_acc: 0.9582 test_loss: 0.8693, test_acc: 0.8219, best: 0.8276, time: 0:02:19
 Epoch: 234, lr: 2.0e-03, train_loss: 0.1233, train_acc: 0.9568 test_loss: 0.8807, test_acc: 0.8245, best: 0.8276, time: 0:02:19
 Epoch: 235, lr: 2.0e-03, train_loss: 0.1239, train_acc: 0.9586 test_loss: 0.8446, test_acc: 0.8237, best: 0.8276, time: 0:02:19
 Epoch: 236, lr: 2.0e-03, train_loss: 0.1190, train_acc: 0.9578 test_loss: 0.8865, test_acc: 0.8230, best: 0.8276, time: 0:02:19
 Epoch: 237, lr: 2.0e-03, train_loss: 0.1126, train_acc: 0.9612 test_loss: 0.8884, test_acc: 0.8204, best: 0.8276, time: 0:02:19
 Epoch: 238, lr: 2.0e-03, train_loss: 0.1107, train_acc: 0.9622 test_loss: 0.8791, test_acc: 0.8206, best: 0.8276, time: 0:02:19
 Epoch: 239, lr: 2.0e-03, train_loss: 0.1137, train_acc: 0.9634 test_loss: 0.8792, test_acc: 0.8216, best: 0.8276, time: 0:02:19
 Epoch: 240, lr: 4.0e-04, train_loss: 0.1248, train_acc: 0.9578 test_loss: 0.8712, test_acc: 0.8251, best: 0.8276, time: 0:02:17
 Epoch: 241, lr: 4.0e-04, train_loss: 0.1084, train_acc: 0.9658 test_loss: 0.8930, test_acc: 0.8226, best: 0.8276, time: 0:02:17
 Epoch: 242, lr: 4.0e-04, train_loss: 0.1217, train_acc: 0.9600 test_loss: 0.8830, test_acc: 0.8254, best: 0.8276, time: 0:02:16
 Epoch: 243, lr: 4.0e-04, train_loss: 0.1082, train_acc: 0.9602 test_loss: 0.8640, test_acc: 0.8256, best: 0.8276, time: 0:02:17
 Epoch: 244, lr: 4.0e-04, train_loss: 0.1091, train_acc: 0.9626 test_loss: 0.8529, test_acc: 0.8273, best: 0.8276, time: 0:02:17
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1204, train_acc: 0.9582 test_loss: 0.8679, test_acc: 0.8289, best: 0.8289, time: 0:02:19
 Epoch: 246, lr: 4.0e-04, train_loss: 0.1081, train_acc: 0.9614 test_loss: 0.8656, test_acc: 0.8285, best: 0.8289, time: 0:02:17
 Epoch: 247, lr: 4.0e-04, train_loss: 0.1141, train_acc: 0.9614 test_loss: 0.8329, test_acc: 0.8286, best: 0.8289, time: 0:02:17
 Epoch: 248, lr: 4.0e-04, train_loss: 0.1032, train_acc: 0.9662 test_loss: 0.8547, test_acc: 0.8291, best: 0.8291, time: 0:02:19
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1105, train_acc: 0.9620 test_loss: 0.8457, test_acc: 0.8293, best: 0.8293, time: 0:02:18
 Epoch: 250, lr: 4.0e-04, train_loss: 0.1073, train_acc: 0.9606 test_loss: 0.8989, test_acc: 0.8255, best: 0.8293, time: 0:02:17
 Epoch: 251, lr: 4.0e-04, train_loss: 0.0986, train_acc: 0.9688 test_loss: 0.8500, test_acc: 0.8280, best: 0.8293, time: 0:02:15
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1147, train_acc: 0.9620 test_loss: 0.8616, test_acc: 0.8237, best: 0.8293, time: 0:02:13
 Epoch: 253, lr: 4.0e-04, train_loss: 0.1171, train_acc: 0.9598 test_loss: 0.8585, test_acc: 0.8267, best: 0.8293, time: 0:02:13
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1154, train_acc: 0.9604 test_loss: 0.8278, test_acc: 0.8266, best: 0.8293, time: 0:02:12
 Epoch: 255, lr: 4.0e-04, train_loss: 0.1056, train_acc: 0.9648 test_loss: 0.8697, test_acc: 0.8255, best: 0.8293, time: 0:02:13
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1143, train_acc: 0.9632 test_loss: 0.8389, test_acc: 0.8277, best: 0.8293, time: 0:02:13
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1119, train_acc: 0.9624 test_loss: 0.8446, test_acc: 0.8275, best: 0.8293, time: 0:02:13
 Epoch: 258, lr: 4.0e-04, train_loss: 0.1122, train_acc: 0.9604 test_loss: 0.8380, test_acc: 0.8284, best: 0.8293, time: 0:02:13
 Epoch: 259, lr: 4.0e-04, train_loss: 0.0982, train_acc: 0.9672 test_loss: 0.8744, test_acc: 0.8246, best: 0.8293, time: 0:02:12
 Epoch: 260, lr: 4.0e-04, train_loss: 0.0936, train_acc: 0.9700 test_loss: 0.8400, test_acc: 0.8280, best: 0.8293, time: 0:02:13
 Epoch: 261, lr: 4.0e-04, train_loss: 0.1201, train_acc: 0.9580 test_loss: 0.8671, test_acc: 0.8223, best: 0.8293, time: 0:02:12
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1063, train_acc: 0.9646 test_loss: 0.8628, test_acc: 0.8241, best: 0.8293, time: 0:02:13
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1087, train_acc: 0.9606 test_loss: 0.8799, test_acc: 0.8265, best: 0.8293, time: 0:02:12
 Epoch: 264, lr: 4.0e-04, train_loss: 0.1106, train_acc: 0.9614 test_loss: 0.8841, test_acc: 0.8216, best: 0.8293, time: 0:02:12
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1141, train_acc: 0.9600 test_loss: 0.8534, test_acc: 0.8253, best: 0.8293, time: 0:02:12
 Epoch: 266, lr: 4.0e-04, train_loss: 0.0983, train_acc: 0.9682 test_loss: 0.9064, test_acc: 0.8184, best: 0.8293, time: 0:02:13
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1085, train_acc: 0.9646 test_loss: 0.8601, test_acc: 0.8239, best: 0.8293, time: 0:02:13
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1031, train_acc: 0.9644 test_loss: 0.8692, test_acc: 0.8236, best: 0.8293, time: 0:02:13
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1047, train_acc: 0.9670 test_loss: 0.8870, test_acc: 0.8211, best: 0.8293, time: 0:02:13
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1032, train_acc: 0.9638 test_loss: 0.8591, test_acc: 0.8230, best: 0.8293, time: 0:02:13
 Epoch: 271, lr: 8.0e-05, train_loss: 0.1029, train_acc: 0.9676 test_loss: 0.8548, test_acc: 0.8209, best: 0.8293, time: 0:02:13
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1089, train_acc: 0.9604 test_loss: 0.8836, test_acc: 0.8206, best: 0.8293, time: 0:02:13
 Epoch: 273, lr: 8.0e-05, train_loss: 0.0995, train_acc: 0.9646 test_loss: 0.8654, test_acc: 0.8246, best: 0.8293, time: 0:02:13
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1022, train_acc: 0.9636 test_loss: 0.8963, test_acc: 0.8227, best: 0.8293, time: 0:02:13
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1122, train_acc: 0.9598 test_loss: 0.8992, test_acc: 0.8223, best: 0.8293, time: 0:02:13
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1072, train_acc: 0.9646 test_loss: 0.8621, test_acc: 0.8270, best: 0.8293, time: 0:02:13
 Epoch: 277, lr: 8.0e-05, train_loss: 0.0987, train_acc: 0.9652 test_loss: 0.8883, test_acc: 0.8224, best: 0.8293, time: 0:02:13
 Epoch: 278, lr: 8.0e-05, train_loss: 0.0990, train_acc: 0.9652 test_loss: 0.8579, test_acc: 0.8253, best: 0.8293, time: 0:02:13
 Epoch: 279, lr: 8.0e-05, train_loss: 0.1035, train_acc: 0.9684 test_loss: 0.8641, test_acc: 0.8275, best: 0.8293, time: 0:02:12
 Epoch: 280, lr: 8.0e-05, train_loss: 0.1000, train_acc: 0.9632 test_loss: 0.8911, test_acc: 0.8239, best: 0.8293, time: 0:02:13
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1031, train_acc: 0.9642 test_loss: 0.8740, test_acc: 0.8263, best: 0.8293, time: 0:02:13
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1012, train_acc: 0.9670 test_loss: 0.8667, test_acc: 0.8264, best: 0.8293, time: 0:02:12
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1188, train_acc: 0.9588 test_loss: 0.8775, test_acc: 0.8235, best: 0.8293, time: 0:02:12
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1105, train_acc: 0.9620 test_loss: 0.8822, test_acc: 0.8234, best: 0.8293, time: 0:02:13
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1137, train_acc: 0.9610 test_loss: 0.9047, test_acc: 0.8211, best: 0.8293, time: 0:02:13
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1053, train_acc: 0.9632 test_loss: 0.9113, test_acc: 0.8236, best: 0.8293, time: 0:02:13
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1045, train_acc: 0.9630 test_loss: 0.8819, test_acc: 0.8211, best: 0.8293, time: 0:02:13
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1182, train_acc: 0.9606 test_loss: 0.8700, test_acc: 0.8253, best: 0.8293, time: 0:02:13
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1079, train_acc: 0.9602 test_loss: 0.8872, test_acc: 0.8225, best: 0.8293, time: 0:02:13
 Epoch: 290, lr: 8.0e-05, train_loss: 0.0976, train_acc: 0.9668 test_loss: 0.8591, test_acc: 0.8264, best: 0.8293, time: 0:02:13
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1022, train_acc: 0.9622 test_loss: 0.8645, test_acc: 0.8245, best: 0.8293, time: 0:02:13
 Epoch: 292, lr: 8.0e-05, train_loss: 0.1009, train_acc: 0.9660 test_loss: 0.8693, test_acc: 0.8250, best: 0.8293, time: 0:02:13
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1048, train_acc: 0.9650 test_loss: 0.8825, test_acc: 0.8215, best: 0.8293, time: 0:02:14
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1063, train_acc: 0.9642 test_loss: 0.8563, test_acc: 0.8254, best: 0.8293, time: 0:02:13
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1054, train_acc: 0.9660 test_loss: 0.8924, test_acc: 0.8241, best: 0.8293, time: 0:02:13
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1030, train_acc: 0.9620 test_loss: 0.8721, test_acc: 0.8224, best: 0.8293, time: 0:02:13
 Epoch: 297, lr: 8.0e-05, train_loss: 0.1062, train_acc: 0.9650 test_loss: 0.8759, test_acc: 0.8249, best: 0.8293, time: 0:02:13
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1111, train_acc: 0.9612 test_loss: 0.8989, test_acc: 0.8250, best: 0.8293, time: 0:02:12
 Epoch: 299, lr: 8.0e-05, train_loss: 0.1084, train_acc: 0.9632 test_loss: 0.8711, test_acc: 0.8274, best: 0.8293, time: 0:02:13
 Highest accuracy: 0.8293