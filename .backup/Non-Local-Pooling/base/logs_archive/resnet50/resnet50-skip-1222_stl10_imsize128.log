
 Run on time: 2022-06-29 22:08:43.423870

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): NetworkByName(
    (net): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.0415, train_acc: 0.1492 test_loss: 3.3648, test_acc: 0.2310, best: 0.2310, time: 0:02:13
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0726, train_acc: 0.2114 test_loss: 2.6403, test_acc: 0.2775, best: 0.2775, time: 0:02:17
 Epoch: 3, lr: 1.0e-02, train_loss: 1.9719, train_acc: 0.2520 test_loss: 3.0754, test_acc: 0.2727, best: 0.2775, time: 0:01:52
 Epoch: 4, lr: 1.0e-02, train_loss: 1.8789, train_acc: 0.2692 test_loss: 2.4139, test_acc: 0.2883, best: 0.2883, time: 0:01:44
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8771, train_acc: 0.2800 test_loss: 1.7991, test_acc: 0.3376, best: 0.3376, time: 0:01:57
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8542, train_acc: 0.2932 test_loss: 1.8994, test_acc: 0.3548, best: 0.3548, time: 0:04:18
 Epoch: 7, lr: 1.0e-02, train_loss: 1.8018, train_acc: 0.3058 test_loss: 1.6481, test_acc: 0.3920, best: 0.3920, time: 0:03:50
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7516, train_acc: 0.3284 test_loss: 1.6852, test_acc: 0.3949, best: 0.3949, time: 0:02:05
 Epoch: 9, lr: 1.0e-02, train_loss: 1.7321, train_acc: 0.3474 test_loss: 1.9124, test_acc: 0.3780, best: 0.3949, time: 0:01:59
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6877, train_acc: 0.3666 test_loss: 1.9701, test_acc: 0.4056, best: 0.4056, time: 0:01:46
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6536, train_acc: 0.3822 test_loss: 2.2849, test_acc: 0.4430, best: 0.4430, time: 0:01:40
 Epoch: 12, lr: 1.0e-02, train_loss: 1.6255, train_acc: 0.3938 test_loss: 1.7674, test_acc: 0.4446, best: 0.4446, time: 0:01:50
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5893, train_acc: 0.4048 test_loss: 1.4607, test_acc: 0.4567, best: 0.4567, time: 0:01:45
 Epoch: 14, lr: 1.0e-02, train_loss: 1.6352, train_acc: 0.3990 test_loss: 2.0480, test_acc: 0.4460, best: 0.4567, time: 0:01:44
 Epoch: 15, lr: 1.0e-02, train_loss: 1.5435, train_acc: 0.4232 test_loss: 1.3907, test_acc: 0.4736, best: 0.4736, time: 0:01:42
 Epoch: 16, lr: 1.0e-02, train_loss: 1.5268, train_acc: 0.4316 test_loss: 1.3847, test_acc: 0.5168, best: 0.5168, time: 0:01:39
 Epoch: 17, lr: 1.0e-02, train_loss: 1.5045, train_acc: 0.4388 test_loss: 2.8301, test_acc: 0.4809, best: 0.5168, time: 0:01:44
 Epoch: 18, lr: 1.0e-02, train_loss: 1.4744, train_acc: 0.4590 test_loss: 1.4074, test_acc: 0.5191, best: 0.5191, time: 0:01:49
 Epoch: 19, lr: 1.0e-02, train_loss: 1.4232, train_acc: 0.4748 test_loss: 3.8896, test_acc: 0.4611, best: 0.5191, time: 0:01:44
 Epoch: 20, lr: 1.0e-02, train_loss: 1.4270, train_acc: 0.4806 test_loss: 1.5050, test_acc: 0.5134, best: 0.5191, time: 0:01:40
 Epoch: 21, lr: 1.0e-02, train_loss: 1.3849, train_acc: 0.4874 test_loss: 1.5375, test_acc: 0.5156, best: 0.5191, time: 0:01:39
 Epoch: 22, lr: 1.0e-02, train_loss: 1.3727, train_acc: 0.4948 test_loss: 1.4714, test_acc: 0.5242, best: 0.5242, time: 0:01:42
 Epoch: 23, lr: 1.0e-02, train_loss: 1.3395, train_acc: 0.5040 test_loss: 2.2706, test_acc: 0.5396, best: 0.5396, time: 0:01:43
 Epoch: 24, lr: 1.0e-02, train_loss: 1.3517, train_acc: 0.5018 test_loss: 1.2407, test_acc: 0.5583, best: 0.5583, time: 0:01:41
 Epoch: 25, lr: 1.0e-02, train_loss: 1.3098, train_acc: 0.5214 test_loss: 3.4890, test_acc: 0.5071, best: 0.5583, time: 0:01:39
 Epoch: 26, lr: 1.0e-02, train_loss: 1.3077, train_acc: 0.5152 test_loss: 1.6411, test_acc: 0.5574, best: 0.5583, time: 0:01:42
 Epoch: 27, lr: 1.0e-02, train_loss: 1.2942, train_acc: 0.5292 test_loss: 1.2724, test_acc: 0.5604, best: 0.5604, time: 0:01:40
 Epoch: 28, lr: 1.0e-02, train_loss: 1.2674, train_acc: 0.5432 test_loss: 1.5708, test_acc: 0.5559, best: 0.5604, time: 0:01:37
 Epoch: 29, lr: 1.0e-02, train_loss: 1.2413, train_acc: 0.5426 test_loss: 1.5415, test_acc: 0.5823, best: 0.5823, time: 0:01:39
 Epoch: 30, lr: 1.0e-02, train_loss: 1.2303, train_acc: 0.5436 test_loss: 1.6405, test_acc: 0.5790, best: 0.5823, time: 0:01:41
 Epoch: 31, lr: 1.0e-02, train_loss: 1.1915, train_acc: 0.5648 test_loss: 1.5399, test_acc: 0.5825, best: 0.5825, time: 0:01:39
 Epoch: 32, lr: 1.0e-02, train_loss: 1.1968, train_acc: 0.5604 test_loss: 1.4213, test_acc: 0.5857, best: 0.5857, time: 0:01:42
 Epoch: 33, lr: 1.0e-02, train_loss: 1.1839, train_acc: 0.5606 test_loss: 2.3356, test_acc: 0.5784, best: 0.5857, time: 0:01:47
 Epoch: 34, lr: 1.0e-02, train_loss: 1.1746, train_acc: 0.5772 test_loss: 2.3281, test_acc: 0.5710, best: 0.5857, time: 0:01:41
 Epoch: 35, lr: 1.0e-02, train_loss: 1.1850, train_acc: 0.5730 test_loss: 1.8961, test_acc: 0.5849, best: 0.5857, time: 0:01:39
 Epoch: 36, lr: 1.0e-02, train_loss: 1.1265, train_acc: 0.5946 test_loss: 1.9736, test_acc: 0.5960, best: 0.5960, time: 0:01:40
 Epoch: 37, lr: 1.0e-02, train_loss: 1.1204, train_acc: 0.5880 test_loss: 1.6623, test_acc: 0.6100, best: 0.6100, time: 0:01:43
 Epoch: 38, lr: 1.0e-02, train_loss: 1.1141, train_acc: 0.6010 test_loss: 2.1655, test_acc: 0.5499, best: 0.6100, time: 0:01:44
 Epoch: 39, lr: 1.0e-02, train_loss: 1.1346, train_acc: 0.5876 test_loss: 1.4610, test_acc: 0.6114, best: 0.6114, time: 0:01:44
 Epoch: 40, lr: 1.0e-02, train_loss: 1.0807, train_acc: 0.6112 test_loss: 1.5922, test_acc: 0.5837, best: 0.6114, time: 0:01:42
 Epoch: 41, lr: 1.0e-02, train_loss: 1.1063, train_acc: 0.6014 test_loss: 2.3766, test_acc: 0.6032, best: 0.6114, time: 0:01:38
 Epoch: 42, lr: 1.0e-02, train_loss: 1.0817, train_acc: 0.6072 test_loss: 1.4147, test_acc: 0.6329, best: 0.6329, time: 0:01:44
 Epoch: 43, lr: 1.0e-02, train_loss: 1.0694, train_acc: 0.6132 test_loss: 2.1765, test_acc: 0.6196, best: 0.6329, time: 0:01:45
 Epoch: 44, lr: 1.0e-02, train_loss: 1.1005, train_acc: 0.5986 test_loss: 1.9741, test_acc: 0.6294, best: 0.6329, time: 0:01:47
 Epoch: 45, lr: 1.0e-02, train_loss: 1.0554, train_acc: 0.6130 test_loss: 2.7461, test_acc: 0.6218, best: 0.6329, time: 0:01:39
 Epoch: 46, lr: 1.0e-02, train_loss: 1.0266, train_acc: 0.6288 test_loss: 7.5091, test_acc: 0.5948, best: 0.6329, time: 0:01:42
 Epoch: 47, lr: 1.0e-02, train_loss: 1.0302, train_acc: 0.6274 test_loss: 1.2832, test_acc: 0.6434, best: 0.6434, time: 0:01:36
 Epoch: 48, lr: 1.0e-02, train_loss: 1.0237, train_acc: 0.6260 test_loss: 1.5450, test_acc: 0.6174, best: 0.6434, time: 0:01:39
 Epoch: 49, lr: 1.0e-02, train_loss: 1.0003, train_acc: 0.6382 test_loss: 16.9392, test_acc: 0.5741, best: 0.6434, time: 0:01:47
 Epoch: 50, lr: 1.0e-02, train_loss: 1.0521, train_acc: 0.6288 test_loss: 1.7302, test_acc: 0.6009, best: 0.6434, time: 0:01:47
 Epoch: 51, lr: 1.0e-02, train_loss: 1.0879, train_acc: 0.6050 test_loss: 1.8163, test_acc: 0.5945, best: 0.6434, time: 0:01:43
 Epoch: 52, lr: 1.0e-02, train_loss: 1.0534, train_acc: 0.6202 test_loss: 1.2576, test_acc: 0.6254, best: 0.6434, time: 0:01:38
 Epoch: 53, lr: 1.0e-02, train_loss: 1.0470, train_acc: 0.6206 test_loss: 1.2844, test_acc: 0.6332, best: 0.6434, time: 0:01:38
 Epoch: 54, lr: 1.0e-02, train_loss: 1.0278, train_acc: 0.6302 test_loss: 2.3386, test_acc: 0.6340, best: 0.6434, time: 0:01:39
 Epoch: 55, lr: 1.0e-02, train_loss: 1.0172, train_acc: 0.6246 test_loss: 6.2840, test_acc: 0.6076, best: 0.6434, time: 0:01:42
 Epoch: 56, lr: 1.0e-02, train_loss: 1.0198, train_acc: 0.6320 test_loss: 2.0403, test_acc: 0.6206, best: 0.6434, time: 0:01:41
 Epoch: 57, lr: 1.0e-02, train_loss: 1.0011, train_acc: 0.6380 test_loss: 1.2253, test_acc: 0.6565, best: 0.6565, time: 0:01:42
 Epoch: 58, lr: 1.0e-02, train_loss: 0.9783, train_acc: 0.6476 test_loss: 1.2367, test_acc: 0.6389, best: 0.6565, time: 0:01:41
 Epoch: 59, lr: 1.0e-02, train_loss: 0.9789, train_acc: 0.6522 test_loss: 1.2372, test_acc: 0.6111, best: 0.6565, time: 0:01:41
 Epoch: 60, lr: 1.0e-02, train_loss: 0.9889, train_acc: 0.6406 test_loss: 0.9690, test_acc: 0.6774, best: 0.6774, time: 0:01:44
 Epoch: 61, lr: 1.0e-02, train_loss: 0.9659, train_acc: 0.6540 test_loss: 1.5364, test_acc: 0.6186, best: 0.6774, time: 0:01:45
 Epoch: 62, lr: 1.0e-02, train_loss: 0.9402, train_acc: 0.6570 test_loss: 0.9555, test_acc: 0.6724, best: 0.6774, time: 0:01:37
 Epoch: 63, lr: 1.0e-02, train_loss: 0.9460, train_acc: 0.6604 test_loss: 0.9693, test_acc: 0.6651, best: 0.6774, time: 0:01:43
 Epoch: 64, lr: 1.0e-02, train_loss: 0.9090, train_acc: 0.6824 test_loss: 1.0220, test_acc: 0.6654, best: 0.6774, time: 0:01:38
 Epoch: 65, lr: 1.0e-02, train_loss: 0.9187, train_acc: 0.6596 test_loss: 0.9444, test_acc: 0.6745, best: 0.6774, time: 0:01:37
 Epoch: 66, lr: 1.0e-02, train_loss: 0.9195, train_acc: 0.6718 test_loss: 0.9917, test_acc: 0.6561, best: 0.6774, time: 0:01:45
 Epoch: 67, lr: 1.0e-02, train_loss: 0.8819, train_acc: 0.6834 test_loss: 0.9381, test_acc: 0.6811, best: 0.6811, time: 0:01:44
 Epoch: 68, lr: 1.0e-02, train_loss: 0.8925, train_acc: 0.6824 test_loss: 1.0223, test_acc: 0.6610, best: 0.6811, time: 0:01:44
 Epoch: 69, lr: 1.0e-02, train_loss: 0.8818, train_acc: 0.6846 test_loss: 0.9810, test_acc: 0.6991, best: 0.6991, time: 0:01:42
 Epoch: 70, lr: 1.0e-02, train_loss: 0.8608, train_acc: 0.6864 test_loss: 0.9777, test_acc: 0.6789, best: 0.6991, time: 0:01:44
 Epoch: 71, lr: 1.0e-02, train_loss: 0.8431, train_acc: 0.6920 test_loss: 0.9882, test_acc: 0.6856, best: 0.6991, time: 0:01:40
 Epoch: 72, lr: 1.0e-02, train_loss: 0.8523, train_acc: 0.6964 test_loss: 1.0904, test_acc: 0.6827, best: 0.6991, time: 0:01:44
 Epoch: 73, lr: 1.0e-02, train_loss: 0.8132, train_acc: 0.7038 test_loss: 1.1289, test_acc: 0.6511, best: 0.6991, time: 0:01:41
 Epoch: 74, lr: 1.0e-02, train_loss: 0.8167, train_acc: 0.7036 test_loss: 0.8590, test_acc: 0.6985, best: 0.6991, time: 0:01:43
 Epoch: 75, lr: 1.0e-02, train_loss: 0.7958, train_acc: 0.7180 test_loss: 0.8718, test_acc: 0.7004, best: 0.7004, time: 0:01:44
 Epoch: 76, lr: 1.0e-02, train_loss: 0.8151, train_acc: 0.7038 test_loss: 2.6622, test_acc: 0.6529, best: 0.7004, time: 0:01:40
 Epoch: 77, lr: 1.0e-02, train_loss: 0.8102, train_acc: 0.7160 test_loss: 2.7887, test_acc: 0.6538, best: 0.7004, time: 0:01:40
 Epoch: 78, lr: 1.0e-02, train_loss: 0.8155, train_acc: 0.7112 test_loss: 14.6135, test_acc: 0.6615, best: 0.7004, time: 0:01:43
 Epoch: 79, lr: 1.0e-02, train_loss: 0.8145, train_acc: 0.7112 test_loss: 1.0863, test_acc: 0.6976, best: 0.7004, time: 0:01:45
 Epoch: 80, lr: 1.0e-02, train_loss: 0.7991, train_acc: 0.7142 test_loss: 1.1276, test_acc: 0.6826, best: 0.7004, time: 0:01:42
 Epoch: 81, lr: 1.0e-02, train_loss: 0.7644, train_acc: 0.7298 test_loss: 0.9152, test_acc: 0.7041, best: 0.7041, time: 0:01:37
 Epoch: 82, lr: 1.0e-02, train_loss: 0.7530, train_acc: 0.7264 test_loss: 1.3214, test_acc: 0.7044, best: 0.7044, time: 0:01:40
 Epoch: 83, lr: 1.0e-02, train_loss: 0.7435, train_acc: 0.7286 test_loss: 0.9467, test_acc: 0.7011, best: 0.7044, time: 0:01:37
 Epoch: 84, lr: 1.0e-02, train_loss: 0.7734, train_acc: 0.7182 test_loss: 1.1230, test_acc: 0.6987, best: 0.7044, time: 0:01:42
 Epoch: 85, lr: 1.0e-02, train_loss: 0.7486, train_acc: 0.7332 test_loss: 1.1063, test_acc: 0.7071, best: 0.7071, time: 0:01:44
 Epoch: 86, lr: 1.0e-02, train_loss: 0.7638, train_acc: 0.7278 test_loss: 1.1578, test_acc: 0.7011, best: 0.7071, time: 0:01:45
 Epoch: 87, lr: 1.0e-02, train_loss: 0.7291, train_acc: 0.7424 test_loss: 1.0832, test_acc: 0.6953, best: 0.7071, time: 0:01:43
 Epoch: 88, lr: 1.0e-02, train_loss: 0.7062, train_acc: 0.7504 test_loss: 1.0948, test_acc: 0.6960, best: 0.7071, time: 0:01:41
 Epoch: 89, lr: 1.0e-02, train_loss: 0.7205, train_acc: 0.7400 test_loss: 1.3978, test_acc: 0.7075, best: 0.7075, time: 0:01:40
 Epoch: 90, lr: 1.0e-02, train_loss: 0.7030, train_acc: 0.7492 test_loss: 1.0553, test_acc: 0.7245, best: 0.7245, time: 0:01:42
 Epoch: 91, lr: 1.0e-02, train_loss: 0.7081, train_acc: 0.7428 test_loss: 1.3852, test_acc: 0.7091, best: 0.7245, time: 0:01:41
 Epoch: 92, lr: 1.0e-02, train_loss: 0.7032, train_acc: 0.7482 test_loss: 1.3248, test_acc: 0.6850, best: 0.7245, time: 0:01:41
 Epoch: 93, lr: 1.0e-02, train_loss: 0.7113, train_acc: 0.7470 test_loss: 0.9303, test_acc: 0.7061, best: 0.7245, time: 0:01:36
 Epoch: 94, lr: 1.0e-02, train_loss: 0.6894, train_acc: 0.7518 test_loss: 1.1367, test_acc: 0.6887, best: 0.7245, time: 0:01:37
 Epoch: 95, lr: 1.0e-02, train_loss: 0.6830, train_acc: 0.7568 test_loss: 1.3363, test_acc: 0.7079, best: 0.7245, time: 0:01:37
 Epoch: 96, lr: 1.0e-02, train_loss: 0.6656, train_acc: 0.7628 test_loss: 1.0789, test_acc: 0.7224, best: 0.7245, time: 0:01:42
 Epoch: 97, lr: 1.0e-02, train_loss: 0.6760, train_acc: 0.7616 test_loss: 1.5523, test_acc: 0.7106, best: 0.7245, time: 0:01:40
 Epoch: 98, lr: 1.0e-02, train_loss: 0.6707, train_acc: 0.7580 test_loss: 1.6353, test_acc: 0.6946, best: 0.7245, time: 0:01:39
 Epoch: 99, lr: 1.0e-02, train_loss: 0.6662, train_acc: 0.7638 test_loss: 1.2848, test_acc: 0.7208, best: 0.7245, time: 0:01:41
 Epoch: 100, lr: 1.0e-02, train_loss: 0.6647, train_acc: 0.7656 test_loss: 1.0981, test_acc: 0.7389, best: 0.7389, time: 0:01:39
 Epoch: 101, lr: 1.0e-02, train_loss: 0.6464, train_acc: 0.7704 test_loss: 1.0570, test_acc: 0.7045, best: 0.7389, time: 0:01:39
 Epoch: 102, lr: 1.0e-02, train_loss: 0.6333, train_acc: 0.7736 test_loss: 1.0410, test_acc: 0.7202, best: 0.7389, time: 0:01:41
 Epoch: 103, lr: 1.0e-02, train_loss: 0.6637, train_acc: 0.7646 test_loss: 0.9986, test_acc: 0.7346, best: 0.7389, time: 0:01:40
 Epoch: 104, lr: 1.0e-02, train_loss: 0.6497, train_acc: 0.7706 test_loss: 1.1545, test_acc: 0.7077, best: 0.7389, time: 0:01:42
 Epoch: 105, lr: 1.0e-02, train_loss: 0.6365, train_acc: 0.7758 test_loss: 0.9945, test_acc: 0.7106, best: 0.7389, time: 0:01:41
 Epoch: 106, lr: 1.0e-02, train_loss: 0.6723, train_acc: 0.7588 test_loss: 0.8798, test_acc: 0.7222, best: 0.7389, time: 0:01:43
 Epoch: 107, lr: 1.0e-02, train_loss: 0.6616, train_acc: 0.7634 test_loss: 0.9600, test_acc: 0.7139, best: 0.7389, time: 0:01:38
 Epoch: 108, lr: 1.0e-02, train_loss: 0.6200, train_acc: 0.7806 test_loss: 1.0154, test_acc: 0.7116, best: 0.7389, time: 0:01:42
 Epoch: 109, lr: 1.0e-02, train_loss: 0.6197, train_acc: 0.7798 test_loss: 1.0182, test_acc: 0.7286, best: 0.7389, time: 0:01:45
 Epoch: 110, lr: 1.0e-02, train_loss: 0.6117, train_acc: 0.7916 test_loss: 1.1114, test_acc: 0.7094, best: 0.7389, time: 0:01:44
 Epoch: 111, lr: 1.0e-02, train_loss: 0.6309, train_acc: 0.7818 test_loss: 3.4749, test_acc: 0.6987, best: 0.7389, time: 0:01:42
 Epoch: 112, lr: 1.0e-02, train_loss: 0.6011, train_acc: 0.7868 test_loss: 1.0137, test_acc: 0.7322, best: 0.7389, time: 0:01:43
 Epoch: 113, lr: 1.0e-02, train_loss: 0.5868, train_acc: 0.7946 test_loss: 1.0187, test_acc: 0.7252, best: 0.7389, time: 0:01:37
 Epoch: 114, lr: 1.0e-02, train_loss: 0.5927, train_acc: 0.7964 test_loss: 0.8967, test_acc: 0.7276, best: 0.7389, time: 0:01:44
 Epoch: 115, lr: 1.0e-02, train_loss: 0.6079, train_acc: 0.7862 test_loss: 0.9007, test_acc: 0.7264, best: 0.7389, time: 0:01:49
 Epoch: 116, lr: 1.0e-02, train_loss: 0.5836, train_acc: 0.7938 test_loss: 0.9649, test_acc: 0.7179, best: 0.7389, time: 0:01:52
 Epoch: 117, lr: 1.0e-02, train_loss: 0.5970, train_acc: 0.7878 test_loss: 1.0499, test_acc: 0.7089, best: 0.7389, time: 0:01:41
 Epoch: 118, lr: 1.0e-02, train_loss: 0.5838, train_acc: 0.7976 test_loss: 0.9840, test_acc: 0.7164, best: 0.7389, time: 0:01:41
 Epoch: 119, lr: 1.0e-02, train_loss: 0.5638, train_acc: 0.8002 test_loss: 0.8570, test_acc: 0.7268, best: 0.7389, time: 0:01:37
 Epoch: 120, lr: 1.0e-02, train_loss: 0.5581, train_acc: 0.8024 test_loss: 0.9488, test_acc: 0.7245, best: 0.7389, time: 0:01:41
 Epoch: 121, lr: 1.0e-02, train_loss: 0.5475, train_acc: 0.8084 test_loss: 0.9565, test_acc: 0.7384, best: 0.7389, time: 0:01:42
 Epoch: 122, lr: 1.0e-02, train_loss: 0.5385, train_acc: 0.8148 test_loss: 1.0414, test_acc: 0.7154, best: 0.7389, time: 0:01:42
 Epoch: 123, lr: 1.0e-02, train_loss: 0.5466, train_acc: 0.8044 test_loss: 0.9866, test_acc: 0.7321, best: 0.7389, time: 0:01:49
 Epoch: 124, lr: 1.0e-02, train_loss: 0.5600, train_acc: 0.8076 test_loss: 1.0001, test_acc: 0.7204, best: 0.7389, time: 0:01:43
 Epoch: 125, lr: 1.0e-02, train_loss: 0.5471, train_acc: 0.8080 test_loss: 0.9220, test_acc: 0.7425, best: 0.7425, time: 0:01:41
 Epoch: 126, lr: 1.0e-02, train_loss: 0.5413, train_acc: 0.8120 test_loss: 1.2121, test_acc: 0.7045, best: 0.7425, time: 0:01:39
 Epoch: 127, lr: 1.0e-02, train_loss: 0.5430, train_acc: 0.8078 test_loss: 0.9585, test_acc: 0.7209, best: 0.7425, time: 0:01:40
 Epoch: 128, lr: 1.0e-02, train_loss: 0.5246, train_acc: 0.8138 test_loss: 1.0217, test_acc: 0.7180, best: 0.7425, time: 0:01:44
 Epoch: 129, lr: 1.0e-02, train_loss: 0.5371, train_acc: 0.8110 test_loss: 1.0827, test_acc: 0.7024, best: 0.7425, time: 0:01:41
 Epoch: 130, lr: 1.0e-02, train_loss: 0.5176, train_acc: 0.8218 test_loss: 0.9996, test_acc: 0.7419, best: 0.7425, time: 0:01:42
 Epoch: 131, lr: 1.0e-02, train_loss: 0.5393, train_acc: 0.8060 test_loss: 1.0311, test_acc: 0.7109, best: 0.7425, time: 0:01:39
 Epoch: 132, lr: 1.0e-02, train_loss: 0.5656, train_acc: 0.8040 test_loss: 0.9921, test_acc: 0.7070, best: 0.7425, time: 0:01:40
 Epoch: 133, lr: 1.0e-02, train_loss: 0.5244, train_acc: 0.8128 test_loss: 0.9683, test_acc: 0.7165, best: 0.7425, time: 0:01:48
 Epoch: 134, lr: 1.0e-02, train_loss: 0.5192, train_acc: 0.8202 test_loss: 0.9446, test_acc: 0.7252, best: 0.7425, time: 0:01:44
 Epoch: 135, lr: 1.0e-02, train_loss: 0.5176, train_acc: 0.8230 test_loss: 0.9401, test_acc: 0.7315, best: 0.7425, time: 0:01:40
 Epoch: 136, lr: 1.0e-02, train_loss: 0.5019, train_acc: 0.8240 test_loss: 0.9648, test_acc: 0.7336, best: 0.7425, time: 0:01:37
 Epoch: 137, lr: 1.0e-02, train_loss: 0.5143, train_acc: 0.8190 test_loss: 0.9243, test_acc: 0.7300, best: 0.7425, time: 0:01:37
 Epoch: 138, lr: 1.0e-02, train_loss: 0.4827, train_acc: 0.8274 test_loss: 0.9295, test_acc: 0.7312, best: 0.7425, time: 0:01:38
 Epoch: 139, lr: 1.0e-02, train_loss: 0.4969, train_acc: 0.8324 test_loss: 0.9067, test_acc: 0.7320, best: 0.7425, time: 0:01:39
 Epoch: 140, lr: 1.0e-02, train_loss: 0.4914, train_acc: 0.8284 test_loss: 0.9182, test_acc: 0.7338, best: 0.7425, time: 0:01:39
 Epoch: 141, lr: 1.0e-02, train_loss: 0.5051, train_acc: 0.8244 test_loss: 0.9762, test_acc: 0.7332, best: 0.7425, time: 0:01:40
 Epoch: 142, lr: 1.0e-02, train_loss: 0.5067, train_acc: 0.8230 test_loss: 0.9787, test_acc: 0.7292, best: 0.7425, time: 0:01:38
 Epoch: 143, lr: 1.0e-02, train_loss: 0.4908, train_acc: 0.8238 test_loss: 1.1603, test_acc: 0.7201, best: 0.7425, time: 0:01:42
 Epoch: 144, lr: 1.0e-02, train_loss: 0.5194, train_acc: 0.8172 test_loss: 0.8689, test_acc: 0.7504, best: 0.7504, time: 0:01:40
 Epoch: 145, lr: 1.0e-02, train_loss: 0.4974, train_acc: 0.8250 test_loss: 0.9476, test_acc: 0.7384, best: 0.7504, time: 0:01:41
 Epoch: 146, lr: 1.0e-02, train_loss: 0.4794, train_acc: 0.8336 test_loss: 0.9832, test_acc: 0.7364, best: 0.7504, time: 0:01:43
 Epoch: 147, lr: 1.0e-02, train_loss: 0.4788, train_acc: 0.8400 test_loss: 1.0127, test_acc: 0.7332, best: 0.7504, time: 0:01:40
 Epoch: 148, lr: 1.0e-02, train_loss: 0.4739, train_acc: 0.8352 test_loss: 0.9673, test_acc: 0.7391, best: 0.7504, time: 0:01:42
 Epoch: 149, lr: 1.0e-02, train_loss: 0.4775, train_acc: 0.8342 test_loss: 0.8967, test_acc: 0.7432, best: 0.7504, time: 0:01:42
 Epoch: 150, lr: 1.0e-02, train_loss: 0.4475, train_acc: 0.8468 test_loss: 0.9395, test_acc: 0.7366, best: 0.7504, time: 0:01:46
 Epoch: 151, lr: 1.0e-02, train_loss: 0.4728, train_acc: 0.8342 test_loss: 1.0741, test_acc: 0.7240, best: 0.7504, time: 0:01:39
 Epoch: 152, lr: 1.0e-02, train_loss: 0.4607, train_acc: 0.8404 test_loss: 0.9015, test_acc: 0.7470, best: 0.7504, time: 0:01:42
 Epoch: 153, lr: 1.0e-02, train_loss: 0.4588, train_acc: 0.8356 test_loss: 1.0311, test_acc: 0.7361, best: 0.7504, time: 0:01:40
 Epoch: 154, lr: 1.0e-02, train_loss: 0.4561, train_acc: 0.8378 test_loss: 0.9873, test_acc: 0.7411, best: 0.7504, time: 0:01:43
 Epoch: 155, lr: 1.0e-02, train_loss: 0.4553, train_acc: 0.8404 test_loss: 1.0649, test_acc: 0.7276, best: 0.7504, time: 0:01:42
 Epoch: 156, lr: 1.0e-02, train_loss: 0.4537, train_acc: 0.8434 test_loss: 1.0672, test_acc: 0.7296, best: 0.7504, time: 0:01:44
 Epoch: 157, lr: 1.0e-02, train_loss: 0.4368, train_acc: 0.8478 test_loss: 0.9633, test_acc: 0.7402, best: 0.7504, time: 0:01:39
 Epoch: 158, lr: 1.0e-02, train_loss: 0.4315, train_acc: 0.8474 test_loss: 1.0105, test_acc: 0.7304, best: 0.7504, time: 0:01:42
 Epoch: 159, lr: 1.0e-02, train_loss: 0.4240, train_acc: 0.8454 test_loss: 1.0594, test_acc: 0.7331, best: 0.7504, time: 0:01:39
 Epoch: 160, lr: 1.0e-02, train_loss: 0.4217, train_acc: 0.8564 test_loss: 1.1395, test_acc: 0.7109, best: 0.7504, time: 0:01:41
 Epoch: 161, lr: 1.0e-02, train_loss: 0.4275, train_acc: 0.8522 test_loss: 0.9537, test_acc: 0.7396, best: 0.7504, time: 0:01:43
 Epoch: 162, lr: 1.0e-02, train_loss: 0.4337, train_acc: 0.8470 test_loss: 1.0024, test_acc: 0.7235, best: 0.7504, time: 0:01:43
 Epoch: 163, lr: 1.0e-02, train_loss: 0.4292, train_acc: 0.8488 test_loss: 0.9660, test_acc: 0.7474, best: 0.7504, time: 0:01:41
 Epoch: 164, lr: 1.0e-02, train_loss: 0.4248, train_acc: 0.8520 test_loss: 1.2592, test_acc: 0.7009, best: 0.7504, time: 0:01:40
 Epoch: 165, lr: 1.0e-02, train_loss: 0.4298, train_acc: 0.8520 test_loss: 0.9994, test_acc: 0.7510, best: 0.7510, time: 0:01:40
 Epoch: 166, lr: 1.0e-02, train_loss: 0.4337, train_acc: 0.8466 test_loss: 0.9039, test_acc: 0.7506, best: 0.7510, time: 0:01:42
 Epoch: 167, lr: 1.0e-02, train_loss: 0.4164, train_acc: 0.8526 test_loss: 1.0768, test_acc: 0.7346, best: 0.7510, time: 0:01:44
 Epoch: 168, lr: 1.0e-02, train_loss: 0.4387, train_acc: 0.8556 test_loss: 0.9133, test_acc: 0.7600, best: 0.7600, time: 0:01:46
 Epoch: 169, lr: 1.0e-02, train_loss: 0.4154, train_acc: 0.8578 test_loss: 0.9864, test_acc: 0.7252, best: 0.7600, time: 0:01:45
 Epoch: 170, lr: 1.0e-02, train_loss: 0.4122, train_acc: 0.8582 test_loss: 0.9486, test_acc: 0.7346, best: 0.7600, time: 0:01:38
 Epoch: 171, lr: 1.0e-02, train_loss: 0.4124, train_acc: 0.8598 test_loss: 1.0001, test_acc: 0.7304, best: 0.7600, time: 0:01:44
 Epoch: 172, lr: 1.0e-02, train_loss: 0.4007, train_acc: 0.8652 test_loss: 0.9541, test_acc: 0.7395, best: 0.7600, time: 0:01:44
 Epoch: 173, lr: 1.0e-02, train_loss: 0.3961, train_acc: 0.8600 test_loss: 0.9305, test_acc: 0.7436, best: 0.7600, time: 0:01:41
 Epoch: 174, lr: 1.0e-02, train_loss: 0.4139, train_acc: 0.8572 test_loss: 0.9696, test_acc: 0.7482, best: 0.7600, time: 0:01:41
 Epoch: 175, lr: 1.0e-02, train_loss: 0.3915, train_acc: 0.8674 test_loss: 0.9472, test_acc: 0.7572, best: 0.7600, time: 0:01:37
 Epoch: 176, lr: 1.0e-02, train_loss: 0.4042, train_acc: 0.8586 test_loss: 1.0437, test_acc: 0.7274, best: 0.7600, time: 0:01:37
 Epoch: 177, lr: 1.0e-02, train_loss: 0.4004, train_acc: 0.8598 test_loss: 0.9547, test_acc: 0.7502, best: 0.7600, time: 0:01:43
 Epoch: 178, lr: 1.0e-02, train_loss: 0.3790, train_acc: 0.8706 test_loss: 0.9445, test_acc: 0.7521, best: 0.7600, time: 0:01:38
 Epoch: 179, lr: 1.0e-02, train_loss: 0.3938, train_acc: 0.8606 test_loss: 0.9107, test_acc: 0.7538, best: 0.7600, time: 0:01:39
 Epoch: 180, lr: 2.0e-03, train_loss: 0.3187, train_acc: 0.8948 test_loss: 0.9094, test_acc: 0.7726, best: 0.7726, time: 0:01:38
 Epoch: 181, lr: 2.0e-03, train_loss: 0.2939, train_acc: 0.9012 test_loss: 0.8957, test_acc: 0.7719, best: 0.7726, time: 0:01:47
 Epoch: 182, lr: 2.0e-03, train_loss: 0.2839, train_acc: 0.9006 test_loss: 0.9204, test_acc: 0.7708, best: 0.7726, time: 0:01:39
 Epoch: 183, lr: 2.0e-03, train_loss: 0.2633, train_acc: 0.9098 test_loss: 0.9225, test_acc: 0.7764, best: 0.7764, time: 0:01:43
 Epoch: 184, lr: 2.0e-03, train_loss: 0.2994, train_acc: 0.8950 test_loss: 0.9928, test_acc: 0.7742, best: 0.7764, time: 0:01:38
 Epoch: 185, lr: 2.0e-03, train_loss: 0.2604, train_acc: 0.9130 test_loss: 0.9891, test_acc: 0.7650, best: 0.7764, time: 0:01:42
 Epoch: 186, lr: 2.0e-03, train_loss: 0.2832, train_acc: 0.8984 test_loss: 0.9250, test_acc: 0.7768, best: 0.7768, time: 0:01:45
 Epoch: 187, lr: 2.0e-03, train_loss: 0.2573, train_acc: 0.9126 test_loss: 0.9624, test_acc: 0.7704, best: 0.7768, time: 0:01:39
 Epoch: 188, lr: 2.0e-03, train_loss: 0.2499, train_acc: 0.9138 test_loss: 1.0050, test_acc: 0.7744, best: 0.7768, time: 0:01:39
 Epoch: 189, lr: 2.0e-03, train_loss: 0.2468, train_acc: 0.9136 test_loss: 0.9544, test_acc: 0.7796, best: 0.7796, time: 0:01:42
 Epoch: 190, lr: 2.0e-03, train_loss: 0.2738, train_acc: 0.9116 test_loss: 0.9403, test_acc: 0.7780, best: 0.7796, time: 0:01:40
 Epoch: 191, lr: 2.0e-03, train_loss: 0.2480, train_acc: 0.9142 test_loss: 1.0136, test_acc: 0.7802, best: 0.7802, time: 0:01:41
 Epoch: 192, lr: 2.0e-03, train_loss: 0.2702, train_acc: 0.9070 test_loss: 0.9802, test_acc: 0.7756, best: 0.7802, time: 0:01:38
 Epoch: 193, lr: 2.0e-03, train_loss: 0.2614, train_acc: 0.9064 test_loss: 0.9581, test_acc: 0.7831, best: 0.7831, time: 0:01:42
 Epoch: 194, lr: 2.0e-03, train_loss: 0.2624, train_acc: 0.9114 test_loss: 0.9527, test_acc: 0.7772, best: 0.7831, time: 0:01:42
 Epoch: 195, lr: 2.0e-03, train_loss: 0.2413, train_acc: 0.9148 test_loss: 0.9723, test_acc: 0.7771, best: 0.7831, time: 0:01:42
 Epoch: 196, lr: 2.0e-03, train_loss: 0.2600, train_acc: 0.9102 test_loss: 0.9131, test_acc: 0.7786, best: 0.7831, time: 0:01:41
 Epoch: 197, lr: 2.0e-03, train_loss: 0.2484, train_acc: 0.9152 test_loss: 1.0297, test_acc: 0.7719, best: 0.7831, time: 0:01:40
 Epoch: 198, lr: 2.0e-03, train_loss: 0.2411, train_acc: 0.9166 test_loss: 1.0144, test_acc: 0.7726, best: 0.7831, time: 0:01:43
 Epoch: 199, lr: 2.0e-03, train_loss: 0.2580, train_acc: 0.9116 test_loss: 0.9901, test_acc: 0.7699, best: 0.7831, time: 0:01:47
 Epoch: 200, lr: 2.0e-03, train_loss: 0.2524, train_acc: 0.9120 test_loss: 0.9948, test_acc: 0.7752, best: 0.7831, time: 0:01:43
 Epoch: 201, lr: 2.0e-03, train_loss: 0.2352, train_acc: 0.9252 test_loss: 1.0078, test_acc: 0.7762, best: 0.7831, time: 0:01:38
 Epoch: 202, lr: 2.0e-03, train_loss: 0.2321, train_acc: 0.9198 test_loss: 1.0123, test_acc: 0.7731, best: 0.7831, time: 0:01:42
 Epoch: 203, lr: 2.0e-03, train_loss: 0.2537, train_acc: 0.9100 test_loss: 0.9895, test_acc: 0.7810, best: 0.7831, time: 0:01:40
 Epoch: 204, lr: 2.0e-03, train_loss: 0.2685, train_acc: 0.9068 test_loss: 0.9647, test_acc: 0.7772, best: 0.7831, time: 0:01:54
 Epoch: 205, lr: 2.0e-03, train_loss: 0.2275, train_acc: 0.9250 test_loss: 1.0685, test_acc: 0.7649, best: 0.7831, time: 0:01:54
 Epoch: 206, lr: 2.0e-03, train_loss: 0.2463, train_acc: 0.9140 test_loss: 0.9889, test_acc: 0.7739, best: 0.7831, time: 0:01:49
 Epoch: 207, lr: 2.0e-03, train_loss: 0.2394, train_acc: 0.9176 test_loss: 0.9790, test_acc: 0.7789, best: 0.7831, time: 0:01:43
 Epoch: 208, lr: 2.0e-03, train_loss: 0.2404, train_acc: 0.9164 test_loss: 0.9782, test_acc: 0.7831, best: 0.7831, time: 0:01:41
 Epoch: 209, lr: 2.0e-03, train_loss: 0.2453, train_acc: 0.9154 test_loss: 0.9660, test_acc: 0.7779, best: 0.7831, time: 0:01:38
 Epoch: 210, lr: 2.0e-03, train_loss: 0.2358, train_acc: 0.9164 test_loss: 0.9856, test_acc: 0.7770, best: 0.7831, time: 0:01:41
 Epoch: 211, lr: 2.0e-03, train_loss: 0.2521, train_acc: 0.9122 test_loss: 0.9674, test_acc: 0.7776, best: 0.7831, time: 0:01:42
 Epoch: 212, lr: 2.0e-03, train_loss: 0.2406, train_acc: 0.9188 test_loss: 0.9862, test_acc: 0.7769, best: 0.7831, time: 0:01:43
 Epoch: 213, lr: 2.0e-03, train_loss: 0.2405, train_acc: 0.9226 test_loss: 0.9258, test_acc: 0.7840, best: 0.7840, time: 0:01:38
 Epoch: 214, lr: 2.0e-03, train_loss: 0.2365, train_acc: 0.9164 test_loss: 0.9491, test_acc: 0.7810, best: 0.7840, time: 0:01:42
 Epoch: 215, lr: 2.0e-03, train_loss: 0.2460, train_acc: 0.9124 test_loss: 0.9295, test_acc: 0.7812, best: 0.7840, time: 0:01:40
 Epoch: 216, lr: 2.0e-03, train_loss: 0.2437, train_acc: 0.9126 test_loss: 0.9585, test_acc: 0.7770, best: 0.7840, time: 0:01:47
 Epoch: 217, lr: 2.0e-03, train_loss: 0.2377, train_acc: 0.9226 test_loss: 0.9619, test_acc: 0.7817, best: 0.7840, time: 0:01:43
 Epoch: 218, lr: 2.0e-03, train_loss: 0.2372, train_acc: 0.9162 test_loss: 0.9979, test_acc: 0.7755, best: 0.7840, time: 0:01:49
 Epoch: 219, lr: 2.0e-03, train_loss: 0.2358, train_acc: 0.9188 test_loss: 0.9605, test_acc: 0.7738, best: 0.7840, time: 0:01:42
 Epoch: 220, lr: 2.0e-03, train_loss: 0.2407, train_acc: 0.9180 test_loss: 0.9698, test_acc: 0.7735, best: 0.7840, time: 0:01:43
 Epoch: 221, lr: 2.0e-03, train_loss: 0.2340, train_acc: 0.9196 test_loss: 1.0207, test_acc: 0.7684, best: 0.7840, time: 0:01:38
 Epoch: 222, lr: 2.0e-03, train_loss: 0.2272, train_acc: 0.9230 test_loss: 0.9348, test_acc: 0.7788, best: 0.7840, time: 0:01:42
 Epoch: 223, lr: 2.0e-03, train_loss: 0.2316, train_acc: 0.9180 test_loss: 0.9812, test_acc: 0.7752, best: 0.7840, time: 0:01:43
 Epoch: 224, lr: 2.0e-03, train_loss: 0.2326, train_acc: 0.9238 test_loss: 0.9311, test_acc: 0.7771, best: 0.7840, time: 0:01:42
 Epoch: 225, lr: 2.0e-03, train_loss: 0.2375, train_acc: 0.9188 test_loss: 0.9710, test_acc: 0.7784, best: 0.7840, time: 0:01:43
 Epoch: 226, lr: 2.0e-03, train_loss: 0.2374, train_acc: 0.9166 test_loss: 1.0019, test_acc: 0.7730, best: 0.7840, time: 0:01:39
 Epoch: 227, lr: 2.0e-03, train_loss: 0.2139, train_acc: 0.9274 test_loss: 0.9802, test_acc: 0.7724, best: 0.7840, time: 0:01:37
 Epoch: 228, lr: 2.0e-03, train_loss: 0.2298, train_acc: 0.9244 test_loss: 0.9785, test_acc: 0.7814, best: 0.7840, time: 0:01:44
 Epoch: 229, lr: 2.0e-03, train_loss: 0.2302, train_acc: 0.9198 test_loss: 0.9658, test_acc: 0.7819, best: 0.7840, time: 0:01:41
 Epoch: 230, lr: 2.0e-03, train_loss: 0.2065, train_acc: 0.9272 test_loss: 1.0108, test_acc: 0.7796, best: 0.7840, time: 0:01:39
 Epoch: 231, lr: 2.0e-03, train_loss: 0.2186, train_acc: 0.9238 test_loss: 1.0439, test_acc: 0.7692, best: 0.7840, time: 0:01:42
 Epoch: 232, lr: 2.0e-03, train_loss: 0.2252, train_acc: 0.9194 test_loss: 0.9871, test_acc: 0.7811, best: 0.7840, time: 0:01:40
 Epoch: 233, lr: 2.0e-03, train_loss: 0.2196, train_acc: 0.9252 test_loss: 1.0252, test_acc: 0.7745, best: 0.7840, time: 0:01:40
 Epoch: 234, lr: 2.0e-03, train_loss: 0.2270, train_acc: 0.9216 test_loss: 1.0326, test_acc: 0.7745, best: 0.7840, time: 0:01:41
 Epoch: 235, lr: 2.0e-03, train_loss: 0.2254, train_acc: 0.9218 test_loss: 1.0113, test_acc: 0.7758, best: 0.7840, time: 0:01:44
 Epoch: 236, lr: 2.0e-03, train_loss: 0.2160, train_acc: 0.9272 test_loss: 1.0311, test_acc: 0.7731, best: 0.7840, time: 0:01:36
 Epoch: 237, lr: 2.0e-03, train_loss: 0.2308, train_acc: 0.9224 test_loss: 1.0244, test_acc: 0.7721, best: 0.7840, time: 0:01:41
 Epoch: 238, lr: 2.0e-03, train_loss: 0.2186, train_acc: 0.9266 test_loss: 0.9932, test_acc: 0.7706, best: 0.7840, time: 0:01:40
 Epoch: 239, lr: 2.0e-03, train_loss: 0.2170, train_acc: 0.9266 test_loss: 1.0898, test_acc: 0.7686, best: 0.7840, time: 0:01:43
 Epoch: 240, lr: 4.0e-04, train_loss: 0.2091, train_acc: 0.9274 test_loss: 1.0269, test_acc: 0.7724, best: 0.7840, time: 0:01:39
 Epoch: 241, lr: 4.0e-04, train_loss: 0.2124, train_acc: 0.9296 test_loss: 0.9907, test_acc: 0.7772, best: 0.7840, time: 0:01:37
 Epoch: 242, lr: 4.0e-04, train_loss: 0.2004, train_acc: 0.9320 test_loss: 1.0000, test_acc: 0.7778, best: 0.7840, time: 0:01:39
 Epoch: 243, lr: 4.0e-04, train_loss: 0.2015, train_acc: 0.9314 test_loss: 0.9555, test_acc: 0.7795, best: 0.7840, time: 0:01:40
 Epoch: 244, lr: 4.0e-04, train_loss: 0.2167, train_acc: 0.9258 test_loss: 1.0470, test_acc: 0.7785, best: 0.7840, time: 0:01:39
 Epoch: 245, lr: 4.0e-04, train_loss: 0.2038, train_acc: 0.9302 test_loss: 1.0039, test_acc: 0.7762, best: 0.7840, time: 0:01:38
 Epoch: 246, lr: 4.0e-04, train_loss: 0.2135, train_acc: 0.9246 test_loss: 1.0167, test_acc: 0.7761, best: 0.7840, time: 0:01:39
 Epoch: 247, lr: 4.0e-04, train_loss: 0.2018, train_acc: 0.9328 test_loss: 1.0423, test_acc: 0.7759, best: 0.7840, time: 0:01:38
 Epoch: 248, lr: 4.0e-04, train_loss: 0.2156, train_acc: 0.9222 test_loss: 1.0048, test_acc: 0.7775, best: 0.7840, time: 0:01:48
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1939, train_acc: 0.9334 test_loss: 1.0429, test_acc: 0.7745, best: 0.7840, time: 0:01:48
 Epoch: 250, lr: 4.0e-04, train_loss: 0.2142, train_acc: 0.9268 test_loss: 0.9962, test_acc: 0.7790, best: 0.7840, time: 0:01:43
 Epoch: 251, lr: 4.0e-04, train_loss: 0.2142, train_acc: 0.9268 test_loss: 0.9821, test_acc: 0.7801, best: 0.7840, time: 0:01:46
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1947, train_acc: 0.9320 test_loss: 0.9993, test_acc: 0.7778, best: 0.7840, time: 0:01:41
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2074, train_acc: 0.9292 test_loss: 1.0235, test_acc: 0.7765, best: 0.7840, time: 0:01:42
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1963, train_acc: 0.9328 test_loss: 0.9924, test_acc: 0.7760, best: 0.7840, time: 0:01:42
 Epoch: 255, lr: 4.0e-04, train_loss: 0.2119, train_acc: 0.9258 test_loss: 1.0309, test_acc: 0.7769, best: 0.7840, time: 0:01:40
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1948, train_acc: 0.9320 test_loss: 1.0084, test_acc: 0.7795, best: 0.7840, time: 0:01:45
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1941, train_acc: 0.9322 test_loss: 1.0751, test_acc: 0.7766, best: 0.7840, time: 0:01:42
 Epoch: 258, lr: 4.0e-04, train_loss: 0.2013, train_acc: 0.9314 test_loss: 1.0067, test_acc: 0.7781, best: 0.7840, time: 0:01:42
 Epoch: 259, lr: 4.0e-04, train_loss: 0.2013, train_acc: 0.9308 test_loss: 1.0242, test_acc: 0.7815, best: 0.7840, time: 0:01:39
 Epoch: 260, lr: 4.0e-04, train_loss: 0.2118, train_acc: 0.9242 test_loss: 1.0256, test_acc: 0.7778, best: 0.7840, time: 0:01:37
 Epoch: 261, lr: 4.0e-04, train_loss: 0.2057, train_acc: 0.9338 test_loss: 1.0022, test_acc: 0.7802, best: 0.7840, time: 0:01:43
 Epoch: 262, lr: 4.0e-04, train_loss: 0.2013, train_acc: 0.9312 test_loss: 0.9766, test_acc: 0.7839, best: 0.7840, time: 0:01:43
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1755, train_acc: 0.9376 test_loss: 1.0446, test_acc: 0.7790, best: 0.7840, time: 0:01:37
 Epoch: 264, lr: 4.0e-04, train_loss: 0.2130, train_acc: 0.9262 test_loss: 1.0115, test_acc: 0.7779, best: 0.7840, time: 0:01:42
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1800, train_acc: 0.9392 test_loss: 1.0604, test_acc: 0.7798, best: 0.7840, time: 0:01:39
 Epoch: 266, lr: 4.0e-04, train_loss: 0.2007, train_acc: 0.9348 test_loss: 1.0217, test_acc: 0.7825, best: 0.7840, time: 0:01:46
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1903, train_acc: 0.9344 test_loss: 1.0423, test_acc: 0.7771, best: 0.7840, time: 0:01:43
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1965, train_acc: 0.9304 test_loss: 1.0127, test_acc: 0.7841, best: 0.7841, time: 0:01:59
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1850, train_acc: 0.9360 test_loss: 0.9943, test_acc: 0.7829, best: 0.7841, time: 0:01:44
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1931, train_acc: 0.9334 test_loss: 1.0216, test_acc: 0.7809, best: 0.7841, time: 0:01:43
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2061, train_acc: 0.9310 test_loss: 0.9817, test_acc: 0.7844, best: 0.7844, time: 0:01:40
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1930, train_acc: 0.9336 test_loss: 1.0216, test_acc: 0.7799, best: 0.7844, time: 0:01:41
 Epoch: 273, lr: 8.0e-05, train_loss: 0.1999, train_acc: 0.9328 test_loss: 1.0009, test_acc: 0.7820, best: 0.7844, time: 0:01:44
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1884, train_acc: 0.9338 test_loss: 1.0858, test_acc: 0.7791, best: 0.7844, time: 0:01:47
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1884, train_acc: 0.9376 test_loss: 0.9957, test_acc: 0.7839, best: 0.7844, time: 0:01:39
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1942, train_acc: 0.9300 test_loss: 1.0301, test_acc: 0.7780, best: 0.7844, time: 0:01:42
 Epoch: 277, lr: 8.0e-05, train_loss: 0.1797, train_acc: 0.9430 test_loss: 1.0364, test_acc: 0.7846, best: 0.7846, time: 0:01:43
 Epoch: 278, lr: 8.0e-05, train_loss: 0.1775, train_acc: 0.9384 test_loss: 0.9950, test_acc: 0.7845, best: 0.7846, time: 0:01:37
 Epoch: 279, lr: 8.0e-05, train_loss: 0.2088, train_acc: 0.9270 test_loss: 1.0419, test_acc: 0.7774, best: 0.7846, time: 0:01:46
 Epoch: 280, lr: 8.0e-05, train_loss: 0.2028, train_acc: 0.9326 test_loss: 1.0269, test_acc: 0.7775, best: 0.7846, time: 0:01:35
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1721, train_acc: 0.9408 test_loss: 0.9909, test_acc: 0.7833, best: 0.7846, time: 0:02:00
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1937, train_acc: 0.9346 test_loss: 1.0349, test_acc: 0.7775, best: 0.7846, time: 0:01:35
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1815, train_acc: 0.9356 test_loss: 0.9741, test_acc: 0.7845, best: 0.7846, time: 0:01:34
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1940, train_acc: 0.9332 test_loss: 1.0200, test_acc: 0.7814, best: 0.7846, time: 0:01:34
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1864, train_acc: 0.9354 test_loss: 1.0707, test_acc: 0.7809, best: 0.7846, time: 0:02:01
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1971, train_acc: 0.9334 test_loss: 0.9914, test_acc: 0.7836, best: 0.7846, time: 0:01:50
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1919, train_acc: 0.9322 test_loss: 1.0256, test_acc: 0.7841, best: 0.7846, time: 0:01:41
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1816, train_acc: 0.9344 test_loss: 1.0123, test_acc: 0.7831, best: 0.7846, time: 0:01:30
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1950, train_acc: 0.9328 test_loss: 1.0001, test_acc: 0.7841, best: 0.7846, time: 0:01:40
 Epoch: 290, lr: 8.0e-05, train_loss: 0.1865, train_acc: 0.9378 test_loss: 0.9987, test_acc: 0.7826, best: 0.7846, time: 0:01:30
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1859, train_acc: 0.9396 test_loss: 1.0140, test_acc: 0.7806, best: 0.7846, time: 0:01:48
 Epoch: 292, lr: 8.0e-05, train_loss: 0.2024, train_acc: 0.9318 test_loss: 1.0283, test_acc: 0.7812, best: 0.7846, time: 0:01:38
 Epoch: 293, lr: 8.0e-05, train_loss: 0.2021, train_acc: 0.9322 test_loss: 0.9664, test_acc: 0.7837, best: 0.7846, time: 0:01:42
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1938, train_acc: 0.9378 test_loss: 1.0282, test_acc: 0.7802, best: 0.7846, time: 0:01:53
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1941, train_acc: 0.9346 test_loss: 1.0118, test_acc: 0.7801, best: 0.7846, time: 0:01:48
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1894, train_acc: 0.9338 test_loss: 0.9983, test_acc: 0.7849, best: 0.7849, time: 0:01:54
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2108, train_acc: 0.9286 test_loss: 1.0115, test_acc: 0.7804, best: 0.7849, time: 0:01:38
 Epoch: 298, lr: 8.0e-05, train_loss: 0.2024, train_acc: 0.9316 test_loss: 1.0011, test_acc: 0.7820, best: 0.7849, time: 0:01:53
 Epoch: 299, lr: 8.0e-05, train_loss: 0.1996, train_acc: 0.9330 test_loss: 0.9695, test_acc: 0.7837, best: 0.7849, time: 0:01:48
 Highest accuracy: 0.7849