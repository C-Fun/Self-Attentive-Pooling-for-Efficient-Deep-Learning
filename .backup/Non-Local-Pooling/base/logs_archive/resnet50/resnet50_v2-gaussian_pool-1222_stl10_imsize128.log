
 Run on time: 2022-06-29 22:09:01.474658

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50_GAUSSIAN_POOL
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): NetworkByName(
    (net): ResNet_v2(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 3.7446, train_acc: 0.1468 test_loss: 622.4358, test_acc: 0.2801, best: 0.2801, time: 0:01:34
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1865, train_acc: 0.2094 test_loss: 657.3407, test_acc: 0.2762, best: 0.2801, time: 0:01:33
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0389, train_acc: 0.2408 test_loss: 38176.5162, test_acc: 0.2898, best: 0.2898, time: 0:01:34
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9296, train_acc: 0.2564 test_loss: 29847.3039, test_acc: 0.3020, best: 0.3020, time: 0:01:34
 Epoch: 5, lr: 1.0e-02, train_loss: 1.8950, train_acc: 0.2776 test_loss: 20713.8644, test_acc: 0.3386, best: 0.3386, time: 0:01:34
 Epoch: 6, lr: 1.0e-02, train_loss: 1.8330, train_acc: 0.3018 test_loss: 5242.8677, test_acc: 0.3427, best: 0.3427, time: 0:01:34
 Epoch: 7, lr: 1.0e-02, train_loss: 1.7876, train_acc: 0.3148 test_loss: 6194.3663, test_acc: 0.3520, best: 0.3520, time: 0:01:34
 Epoch: 8, lr: 1.0e-02, train_loss: 1.7253, train_acc: 0.3454 test_loss: 1906.8799, test_acc: 0.3969, best: 0.3969, time: 0:01:34
 Epoch: 9, lr: 1.0e-02, train_loss: 1.6966, train_acc: 0.3632 test_loss: 1032.8802, test_acc: 0.4085, best: 0.4085, time: 0:01:34
 Epoch: 10, lr: 1.0e-02, train_loss: 1.6282, train_acc: 0.3892 test_loss: 637.2482, test_acc: 0.4085, best: 0.4085, time: 0:01:33
 Epoch: 11, lr: 1.0e-02, train_loss: 1.6141, train_acc: 0.3990 test_loss: 1192.7957, test_acc: 0.4389, best: 0.4389, time: 0:01:34
 Epoch: 12, lr: 1.0e-02, train_loss: 1.5681, train_acc: 0.4230 test_loss: 105.8165, test_acc: 0.4671, best: 0.4671, time: 0:01:34
 Epoch: 13, lr: 1.0e-02, train_loss: 1.5183, train_acc: 0.4370 test_loss: 273.1168, test_acc: 0.4764, best: 0.4764, time: 0:01:34
 Epoch: 14, lr: 1.0e-02, train_loss: 1.4901, train_acc: 0.4494 test_loss: 72.8074, test_acc: 0.4799, best: 0.4799, time: 0:01:34
 Epoch: 15, lr: 1.0e-02, train_loss: 1.4723, train_acc: 0.4496 test_loss: 407.8249, test_acc: 0.4903, best: 0.4903, time: 0:01:34
 Epoch: 16, lr: 1.0e-02, train_loss: 1.4531, train_acc: 0.4726 test_loss: 6075.8901, test_acc: 0.4684, best: 0.4903, time: 0:01:33
 Epoch: 17, lr: 1.0e-02, train_loss: 1.4071, train_acc: 0.4882 test_loss: 367.5674, test_acc: 0.4941, best: 0.4941, time: 0:01:34
 Epoch: 18, lr: 1.0e-02, train_loss: 1.3634, train_acc: 0.4956 test_loss: 518.3483, test_acc: 0.5451, best: 0.5451, time: 0:01:33
 Epoch: 19, lr: 1.0e-02, train_loss: 1.3492, train_acc: 0.5106 test_loss: 16429.0005, test_acc: 0.5128, best: 0.5451, time: 0:01:32
 Epoch: 20, lr: 1.0e-02, train_loss: 1.3161, train_acc: 0.5236 test_loss: 4604.1216, test_acc: 0.5466, best: 0.5466, time: 0:01:33
 Epoch: 21, lr: 1.0e-02, train_loss: 1.2914, train_acc: 0.5316 test_loss: 5279.4119, test_acc: 0.5509, best: 0.5509, time: 0:01:33
 Epoch: 22, lr: 1.0e-02, train_loss: 1.2806, train_acc: 0.5286 test_loss: 686.7091, test_acc: 0.5823, best: 0.5823, time: 0:01:33
 Epoch: 23, lr: 1.0e-02, train_loss: 1.2551, train_acc: 0.5388 test_loss: 129.2692, test_acc: 0.5883, best: 0.5883, time: 0:01:33
 Epoch: 24, lr: 1.0e-02, train_loss: 1.2291, train_acc: 0.5482 test_loss: 394.2215, test_acc: 0.5769, best: 0.5883, time: 0:01:33
 Epoch: 25, lr: 1.0e-02, train_loss: 1.2258, train_acc: 0.5510 test_loss: 793.7467, test_acc: 0.5464, best: 0.5883, time: 0:01:33
 Epoch: 26, lr: 1.0e-02, train_loss: 1.1952, train_acc: 0.5640 test_loss: 1093.9684, test_acc: 0.5309, best: 0.5883, time: 0:01:33
 Epoch: 27, lr: 1.0e-02, train_loss: 1.1677, train_acc: 0.5778 test_loss: 155.5689, test_acc: 0.5986, best: 0.5986, time: 0:01:33
 Epoch: 28, lr: 1.0e-02, train_loss: 1.1578, train_acc: 0.5876 test_loss: 1698.4026, test_acc: 0.6018, best: 0.6018, time: 0:01:33
 Epoch: 29, lr: 1.0e-02, train_loss: 1.1249, train_acc: 0.5874 test_loss: 208.7852, test_acc: 0.5970, best: 0.6018, time: 0:01:32
 Epoch: 30, lr: 1.0e-02, train_loss: 1.1263, train_acc: 0.5948 test_loss: 1022.6707, test_acc: 0.6048, best: 0.6048, time: 0:01:33
 Epoch: 31, lr: 1.0e-02, train_loss: 1.0682, train_acc: 0.6174 test_loss: 1945.2008, test_acc: 0.6024, best: 0.6048, time: 0:01:32
 Epoch: 32, lr: 1.0e-02, train_loss: 1.0621, train_acc: 0.6176 test_loss: 370494.2769, test_acc: 0.5540, best: 0.6048, time: 0:01:32
 Epoch: 33, lr: 1.0e-02, train_loss: 1.0411, train_acc: 0.6168 test_loss: 4925.8459, test_acc: 0.6039, best: 0.6048, time: 0:01:32
 Epoch: 34, lr: 1.0e-02, train_loss: 1.0495, train_acc: 0.6226 test_loss: 5840.4052, test_acc: 0.6256, best: 0.6256, time: 0:01:34
 Epoch: 35, lr: 1.0e-02, train_loss: 1.0056, train_acc: 0.6360 test_loss: 7872.2295, test_acc: 0.6288, best: 0.6288, time: 0:01:33
 Epoch: 36, lr: 1.0e-02, train_loss: 1.0019, train_acc: 0.6366 test_loss: 3587.0635, test_acc: 0.6470, best: 0.6470, time: 0:01:33
 Epoch: 37, lr: 1.0e-02, train_loss: 0.9907, train_acc: 0.6404 test_loss: 9527.3993, test_acc: 0.6411, best: 0.6470, time: 0:01:32
 Epoch: 38, lr: 1.0e-02, train_loss: 0.9702, train_acc: 0.6482 test_loss: 2143.7431, test_acc: 0.6358, best: 0.6470, time: 0:01:32
 Epoch: 39, lr: 1.0e-02, train_loss: 0.9601, train_acc: 0.6606 test_loss: 504.3349, test_acc: 0.6571, best: 0.6571, time: 0:01:33
 Epoch: 40, lr: 1.0e-02, train_loss: 0.9552, train_acc: 0.6592 test_loss: 1531078.0030, test_acc: 0.6436, best: 0.6571, time: 0:01:32
 Epoch: 41, lr: 1.0e-02, train_loss: 0.9476, train_acc: 0.6676 test_loss: 50.3220, test_acc: 0.6629, best: 0.6629, time: 0:01:33
 Epoch: 42, lr: 1.0e-02, train_loss: 0.9406, train_acc: 0.6636 test_loss: 5224.4926, test_acc: 0.6468, best: 0.6629, time: 0:01:32
 Epoch: 43, lr: 1.0e-02, train_loss: 0.9328, train_acc: 0.6712 test_loss: 2414.0341, test_acc: 0.6310, best: 0.6629, time: 0:01:32
 Epoch: 44, lr: 1.0e-02, train_loss: 0.9073, train_acc: 0.6756 test_loss: 486.3275, test_acc: 0.6604, best: 0.6629, time: 0:01:32
 Epoch: 45, lr: 1.0e-02, train_loss: 0.9011, train_acc: 0.6758 test_loss: 7169.1136, test_acc: 0.6767, best: 0.6767, time: 0:01:33
 Epoch: 46, lr: 1.0e-02, train_loss: 0.8732, train_acc: 0.6836 test_loss: 35179.9424, test_acc: 0.6524, best: 0.6767, time: 0:01:32
 Epoch: 47, lr: 1.0e-02, train_loss: 0.8590, train_acc: 0.6974 test_loss: 90565.4560, test_acc: 0.6716, best: 0.6767, time: 0:01:32
 Epoch: 48, lr: 1.0e-02, train_loss: 0.8693, train_acc: 0.6868 test_loss: 7024.9044, test_acc: 0.6469, best: 0.6767, time: 0:01:32
 Epoch: 49, lr: 1.0e-02, train_loss: 0.8413, train_acc: 0.7012 test_loss: 21719.7108, test_acc: 0.6624, best: 0.6767, time: 0:01:32
 Epoch: 50, lr: 1.0e-02, train_loss: 0.8364, train_acc: 0.7022 test_loss: 74613.6135, test_acc: 0.6556, best: 0.6767, time: 0:01:32
 Epoch: 51, lr: 1.0e-02, train_loss: 0.8374, train_acc: 0.6944 test_loss: 185915.0187, test_acc: 0.6444, best: 0.6767, time: 0:01:32
 Epoch: 52, lr: 1.0e-02, train_loss: 0.7960, train_acc: 0.7236 test_loss: 9213.2088, test_acc: 0.6528, best: 0.6767, time: 0:01:32
 Epoch: 53, lr: 1.0e-02, train_loss: 0.7967, train_acc: 0.7108 test_loss: 312323.1160, test_acc: 0.6152, best: 0.6767, time: 0:01:32
 Epoch: 54, lr: 1.0e-02, train_loss: 0.7669, train_acc: 0.7276 test_loss: 7920.2799, test_acc: 0.6895, best: 0.6895, time: 0:01:33
 Epoch: 55, lr: 1.0e-02, train_loss: 0.8471, train_acc: 0.6974 test_loss: 1774.2922, test_acc: 0.6589, best: 0.6895, time: 0:01:32
 Epoch: 56, lr: 1.0e-02, train_loss: 0.8083, train_acc: 0.7136 test_loss: 301.1708, test_acc: 0.6366, best: 0.6895, time: 0:01:32
 Epoch: 57, lr: 1.0e-02, train_loss: 0.7821, train_acc: 0.7198 test_loss: 188827.4510, test_acc: 0.6382, best: 0.6895, time: 0:01:32
 Epoch: 58, lr: 1.0e-02, train_loss: 0.7727, train_acc: 0.7166 test_loss: 1697.1102, test_acc: 0.6901, best: 0.6901, time: 0:01:33
 Epoch: 59, lr: 1.0e-02, train_loss: 0.7433, train_acc: 0.7338 test_loss: 242.5101, test_acc: 0.6967, best: 0.6967, time: 0:01:33
 Epoch: 60, lr: 1.0e-02, train_loss: 0.7368, train_acc: 0.7324 test_loss: 7032.2824, test_acc: 0.6945, best: 0.6967, time: 0:01:32
 Epoch: 61, lr: 1.0e-02, train_loss: 0.7053, train_acc: 0.7500 test_loss: 136979.7782, test_acc: 0.6801, best: 0.6967, time: 0:01:32
 Epoch: 62, lr: 1.0e-02, train_loss: 0.6870, train_acc: 0.7562 test_loss: 31088.5139, test_acc: 0.6560, best: 0.6967, time: 0:01:32
 Epoch: 63, lr: 1.0e-02, train_loss: 0.6915, train_acc: 0.7458 test_loss: 1841473.9103, test_acc: 0.6643, best: 0.6967, time: 0:01:32
 Epoch: 64, lr: 1.0e-02, train_loss: 0.6826, train_acc: 0.7588 test_loss: 443299.3450, test_acc: 0.6906, best: 0.6967, time: 0:01:32
 Epoch: 65, lr: 1.0e-02, train_loss: 0.6467, train_acc: 0.7690 test_loss: 88153.0591, test_acc: 0.6983, best: 0.6983, time: 0:01:33
 Epoch: 66, lr: 1.0e-02, train_loss: 0.6569, train_acc: 0.7654 test_loss: 31275.8045, test_acc: 0.6820, best: 0.6983, time: 0:01:32
 Epoch: 67, lr: 1.0e-02, train_loss: 0.6514, train_acc: 0.7712 test_loss: 417624.6493, test_acc: 0.6986, best: 0.6986, time: 0:01:33
 Epoch: 68, lr: 1.0e-02, train_loss: 0.6327, train_acc: 0.7706 test_loss: 1114454.0660, test_acc: 0.6630, best: 0.6986, time: 0:01:32
 Epoch: 69, lr: 1.0e-02, train_loss: 0.6356, train_acc: 0.7786 test_loss: 461826.3356, test_acc: 0.6867, best: 0.6986, time: 0:01:32
 Epoch: 70, lr: 1.0e-02, train_loss: 0.6090, train_acc: 0.7866 test_loss: 177694.9904, test_acc: 0.6850, best: 0.6986, time: 0:01:32
 Epoch: 71, lr: 1.0e-02, train_loss: 0.6046, train_acc: 0.7836 test_loss: 20251.4312, test_acc: 0.6785, best: 0.6986, time: 0:01:32
 Epoch: 72, lr: 1.0e-02, train_loss: 0.6160, train_acc: 0.7754 test_loss: 233256.1005, test_acc: 0.6554, best: 0.6986, time: 0:01:32
 Epoch: 73, lr: 1.0e-02, train_loss: 0.5878, train_acc: 0.7926 test_loss: 58281.5256, test_acc: 0.6845, best: 0.6986, time: 0:01:31
 Epoch: 74, lr: 1.0e-02, train_loss: 0.5887, train_acc: 0.7892 test_loss: 43266.0026, test_acc: 0.6916, best: 0.6986, time: 0:01:31
 Epoch: 75, lr: 1.0e-02, train_loss: 0.5940, train_acc: 0.7942 test_loss: 27445.4072, test_acc: 0.6924, best: 0.6986, time: 0:01:31
 Epoch: 76, lr: 1.0e-02, train_loss: 0.5631, train_acc: 0.8014 test_loss: 759414.8417, test_acc: 0.5956, best: 0.6986, time: 0:01:31
 Epoch: 77, lr: 1.0e-02, train_loss: 0.5929, train_acc: 0.7882 test_loss: 2110.7173, test_acc: 0.6865, best: 0.6986, time: 0:01:31
 Epoch: 78, lr: 1.0e-02, train_loss: 0.5527, train_acc: 0.7998 test_loss: 8316.5378, test_acc: 0.6737, best: 0.6986, time: 0:01:31
 Epoch: 79, lr: 1.0e-02, train_loss: 0.5571, train_acc: 0.7996 test_loss: 524.8673, test_acc: 0.6997, best: 0.6997, time: 0:01:31
 Epoch: 80, lr: 1.0e-02, train_loss: 0.5908, train_acc: 0.7946 test_loss: 22.4561, test_acc: 0.7200, best: 0.7200, time: 0:01:32
 Epoch: 81, lr: 1.0e-02, train_loss: 0.6079, train_acc: 0.7828 test_loss: 15550.3177, test_acc: 0.6621, best: 0.7200, time: 0:01:31
 Epoch: 82, lr: 1.0e-02, train_loss: 0.5608, train_acc: 0.8014 test_loss: 44890.9784, test_acc: 0.6644, best: 0.7200, time: 0:01:31
 Epoch: 83, lr: 1.0e-02, train_loss: 0.5443, train_acc: 0.8036 test_loss: 8366.3572, test_acc: 0.6970, best: 0.7200, time: 0:01:31
 Epoch: 84, lr: 1.0e-02, train_loss: 0.5212, train_acc: 0.8150 test_loss: 17392.1964, test_acc: 0.6925, best: 0.7200, time: 0:01:31
 Epoch: 85, lr: 1.0e-02, train_loss: 0.5161, train_acc: 0.8150 test_loss: 5154.4005, test_acc: 0.7195, best: 0.7200, time: 0:01:31
 Epoch: 86, lr: 1.0e-02, train_loss: 0.5015, train_acc: 0.8306 test_loss: 4231.2371, test_acc: 0.7051, best: 0.7200, time: 0:01:31
 Epoch: 87, lr: 1.0e-02, train_loss: 0.5017, train_acc: 0.8226 test_loss: 149165.1669, test_acc: 0.7226, best: 0.7226, time: 0:01:32
 Epoch: 88, lr: 1.0e-02, train_loss: 0.5149, train_acc: 0.8214 test_loss: 373.7431, test_acc: 0.7255, best: 0.7255, time: 0:01:32
 Epoch: 89, lr: 1.0e-02, train_loss: 0.5490, train_acc: 0.8116 test_loss: 219.2520, test_acc: 0.7188, best: 0.7255, time: 0:01:31
 Epoch: 90, lr: 1.0e-02, train_loss: 0.4739, train_acc: 0.8376 test_loss: 7330.3161, test_acc: 0.7210, best: 0.7255, time: 0:01:31
 Epoch: 91, lr: 1.0e-02, train_loss: 0.4989, train_acc: 0.8282 test_loss: 593.4741, test_acc: 0.6754, best: 0.7255, time: 0:01:31
 Epoch: 92, lr: 1.0e-02, train_loss: 0.4733, train_acc: 0.8326 test_loss: 2269.2004, test_acc: 0.6916, best: 0.7255, time: 0:01:31
 Epoch: 93, lr: 1.0e-02, train_loss: 0.4809, train_acc: 0.8366 test_loss: 1681.2144, test_acc: 0.6907, best: 0.7255, time: 0:01:31
 Epoch: 94, lr: 1.0e-02, train_loss: 0.4772, train_acc: 0.8296 test_loss: 60.7651, test_acc: 0.6996, best: 0.7255, time: 0:01:31
 Epoch: 95, lr: 1.0e-02, train_loss: 0.5016, train_acc: 0.8254 test_loss: 222.4061, test_acc: 0.7225, best: 0.7255, time: 0:01:32
 Epoch: 96, lr: 1.0e-02, train_loss: 0.4771, train_acc: 0.8328 test_loss: 193.5029, test_acc: 0.6960, best: 0.7255, time: 0:01:31
 Epoch: 97, lr: 1.0e-02, train_loss: 0.4490, train_acc: 0.8486 test_loss: 122.5889, test_acc: 0.7051, best: 0.7255, time: 0:01:31
 Epoch: 98, lr: 1.0e-02, train_loss: 0.4510, train_acc: 0.8460 test_loss: 569.2930, test_acc: 0.7044, best: 0.7255, time: 0:01:31
 Epoch: 99, lr: 1.0e-02, train_loss: 0.4554, train_acc: 0.8428 test_loss: 190.7751, test_acc: 0.7106, best: 0.7255, time: 0:01:31
 Epoch: 100, lr: 1.0e-02, train_loss: 0.4241, train_acc: 0.8508 test_loss: 709.9180, test_acc: 0.6986, best: 0.7255, time: 0:01:31
 Epoch: 101, lr: 1.0e-02, train_loss: 0.4407, train_acc: 0.8474 test_loss: 981.6720, test_acc: 0.7036, best: 0.7255, time: 0:01:31
 Epoch: 102, lr: 1.0e-02, train_loss: 0.4131, train_acc: 0.8542 test_loss: 2069.0962, test_acc: 0.7348, best: 0.7348, time: 0:01:32
 Epoch: 103, lr: 1.0e-02, train_loss: 0.4103, train_acc: 0.8596 test_loss: 23585.1191, test_acc: 0.7061, best: 0.7348, time: 0:01:31
 Epoch: 104, lr: 1.0e-02, train_loss: 0.3985, train_acc: 0.8590 test_loss: 67157.5982, test_acc: 0.7059, best: 0.7348, time: 0:01:31
 Epoch: 105, lr: 1.0e-02, train_loss: 0.4247, train_acc: 0.8542 test_loss: 2169.7599, test_acc: 0.7218, best: 0.7348, time: 0:01:31
 Epoch: 106, lr: 1.0e-02, train_loss: 0.4073, train_acc: 0.8582 test_loss: 2170.3895, test_acc: 0.7153, best: 0.7348, time: 0:01:31
 Epoch: 107, lr: 1.0e-02, train_loss: 0.4074, train_acc: 0.8656 test_loss: 8451.1791, test_acc: 0.7031, best: 0.7348, time: 0:01:31
 Epoch: 108, lr: 1.0e-02, train_loss: 0.3915, train_acc: 0.8618 test_loss: 1819.5872, test_acc: 0.7249, best: 0.7348, time: 0:01:31
 Epoch: 109, lr: 1.0e-02, train_loss: 0.4051, train_acc: 0.8590 test_loss: 416.8180, test_acc: 0.7321, best: 0.7348, time: 0:01:31
 Epoch: 110, lr: 1.0e-02, train_loss: 0.3899, train_acc: 0.8602 test_loss: 1013.8940, test_acc: 0.7192, best: 0.7348, time: 0:01:31
 Epoch: 111, lr: 1.0e-02, train_loss: 0.3955, train_acc: 0.8692 test_loss: 12276.3675, test_acc: 0.6916, best: 0.7348, time: 0:01:31
 Epoch: 112, lr: 1.0e-02, train_loss: 0.3854, train_acc: 0.8684 test_loss: 5170.7599, test_acc: 0.7023, best: 0.7348, time: 0:01:31
 Epoch: 113, lr: 1.0e-02, train_loss: 0.3775, train_acc: 0.8700 test_loss: 3638.5593, test_acc: 0.7268, best: 0.7348, time: 0:01:31
 Epoch: 114, lr: 1.0e-02, train_loss: 0.3667, train_acc: 0.8714 test_loss: 3681.3600, test_acc: 0.7218, best: 0.7348, time: 0:01:31
 Epoch: 115, lr: 1.0e-02, train_loss: 0.3536, train_acc: 0.8780 test_loss: 2626.5769, test_acc: 0.7264, best: 0.7348, time: 0:01:31
 Epoch: 116, lr: 1.0e-02, train_loss: 0.3764, train_acc: 0.8672 test_loss: 463.1401, test_acc: 0.7346, best: 0.7348, time: 0:01:31
 Epoch: 117, lr: 1.0e-02, train_loss: 0.3470, train_acc: 0.8762 test_loss: 846.3634, test_acc: 0.7365, best: 0.7365, time: 0:01:32
 Epoch: 118, lr: 1.0e-02, train_loss: 0.3595, train_acc: 0.8808 test_loss: 6076.6179, test_acc: 0.7163, best: 0.7365, time: 0:01:31
 Epoch: 119, lr: 1.0e-02, train_loss: 0.3470, train_acc: 0.8774 test_loss: 1268.3497, test_acc: 0.7342, best: 0.7365, time: 0:01:31
 Epoch: 120, lr: 1.0e-02, train_loss: 0.3207, train_acc: 0.8884 test_loss: 27738.7691, test_acc: 0.7071, best: 0.7365, time: 0:01:31
 Epoch: 121, lr: 1.0e-02, train_loss: 0.3317, train_acc: 0.8890 test_loss: 4701.4870, test_acc: 0.7301, best: 0.7365, time: 0:01:31
 Epoch: 122, lr: 1.0e-02, train_loss: 0.3574, train_acc: 0.8730 test_loss: 3620.5558, test_acc: 0.7316, best: 0.7365, time: 0:01:31
 Epoch: 123, lr: 1.0e-02, train_loss: 0.3423, train_acc: 0.8836 test_loss: 380.4585, test_acc: 0.7369, best: 0.7369, time: 0:01:32
 Epoch: 124, lr: 1.0e-02, train_loss: 0.3393, train_acc: 0.8784 test_loss: 497.4810, test_acc: 0.7364, best: 0.7369, time: 0:01:31
 Epoch: 125, lr: 1.0e-02, train_loss: 0.3491, train_acc: 0.8830 test_loss: 1549.5024, test_acc: 0.7259, best: 0.7369, time: 0:01:31
 Epoch: 126, lr: 1.0e-02, train_loss: 0.3322, train_acc: 0.8840 test_loss: 4240.7768, test_acc: 0.7202, best: 0.7369, time: 0:01:31
 Epoch: 127, lr: 1.0e-02, train_loss: 0.3462, train_acc: 0.8806 test_loss: 36240.6513, test_acc: 0.7084, best: 0.7369, time: 0:01:31
 Epoch: 128, lr: 1.0e-02, train_loss: 0.3387, train_acc: 0.8802 test_loss: 4509.5527, test_acc: 0.7060, best: 0.7369, time: 0:01:31
 Epoch: 129, lr: 1.0e-02, train_loss: 0.3342, train_acc: 0.8832 test_loss: 8437.6659, test_acc: 0.7192, best: 0.7369, time: 0:01:31
 Epoch: 130, lr: 1.0e-02, train_loss: 0.3501, train_acc: 0.8764 test_loss: 8.6388, test_acc: 0.7455, best: 0.7455, time: 0:01:32
 Epoch: 131, lr: 1.0e-02, train_loss: 0.3287, train_acc: 0.8880 test_loss: 224044.0931, test_acc: 0.7146, best: 0.7455, time: 0:01:31
 Epoch: 132, lr: 1.0e-02, train_loss: 0.3291, train_acc: 0.8886 test_loss: 337456.0658, test_acc: 0.6987, best: 0.7455, time: 0:01:31
 Epoch: 133, lr: 1.0e-02, train_loss: 0.3810, train_acc: 0.8700 test_loss: 1828.1478, test_acc: 0.6881, best: 0.7455, time: 0:01:31
 Epoch: 134, lr: 1.0e-02, train_loss: 0.4048, train_acc: 0.8582 test_loss: 102.6223, test_acc: 0.7089, best: 0.7455, time: 0:01:31
 Epoch: 135, lr: 1.0e-02, train_loss: 0.3595, train_acc: 0.8788 test_loss: 112.5956, test_acc: 0.7053, best: 0.7455, time: 0:01:31
 Epoch: 136, lr: 1.0e-02, train_loss: 0.3363, train_acc: 0.8824 test_loss: 161.3194, test_acc: 0.7269, best: 0.7455, time: 0:01:31
 Epoch: 137, lr: 1.0e-02, train_loss: 0.3421, train_acc: 0.8792 test_loss: 36.0786, test_acc: 0.7101, best: 0.7455, time: 0:01:31
 Epoch: 138, lr: 1.0e-02, train_loss: 0.3287, train_acc: 0.8876 test_loss: 24.9601, test_acc: 0.7380, best: 0.7455, time: 0:01:31
 Epoch: 139, lr: 1.0e-02, train_loss: 0.3174, train_acc: 0.8922 test_loss: 39.3220, test_acc: 0.7356, best: 0.7455, time: 0:01:31
 Epoch: 140, lr: 1.0e-02, train_loss: 0.3256, train_acc: 0.8886 test_loss: 41.7511, test_acc: 0.7478, best: 0.7478, time: 0:01:32
 Epoch: 141, lr: 1.0e-02, train_loss: 0.2763, train_acc: 0.9068 test_loss: 2.1970, test_acc: 0.7528, best: 0.7528, time: 0:01:32
 Epoch: 142, lr: 1.0e-02, train_loss: 0.3036, train_acc: 0.9006 test_loss: 383.8792, test_acc: 0.7099, best: 0.7528, time: 0:01:31
 Epoch: 143, lr: 1.0e-02, train_loss: 0.3115, train_acc: 0.8934 test_loss: 343.4692, test_acc: 0.6920, best: 0.7528, time: 0:01:31
 Epoch: 144, lr: 1.0e-02, train_loss: 0.3003, train_acc: 0.8942 test_loss: 323178.5031, test_acc: 0.7163, best: 0.7528, time: 0:01:31
 Epoch: 145, lr: 1.0e-02, train_loss: 0.2948, train_acc: 0.8980 test_loss: 125205.7976, test_acc: 0.7150, best: 0.7528, time: 0:01:31
 Epoch: 146, lr: 1.0e-02, train_loss: 0.2885, train_acc: 0.8982 test_loss: 29415.0670, test_acc: 0.7013, best: 0.7528, time: 0:01:31
 Epoch: 147, lr: 1.0e-02, train_loss: 0.2717, train_acc: 0.9114 test_loss: 12046.9818, test_acc: 0.7059, best: 0.7528, time: 0:01:31
 Epoch: 148, lr: 1.0e-02, train_loss: 0.3044, train_acc: 0.8974 test_loss: 4285.1386, test_acc: 0.7371, best: 0.7528, time: 0:01:31
 Epoch: 149, lr: 1.0e-02, train_loss: 0.2981, train_acc: 0.8966 test_loss: 2835.3175, test_acc: 0.7414, best: 0.7528, time: 0:01:31
 Epoch: 150, lr: 1.0e-02, train_loss: 0.2951, train_acc: 0.8968 test_loss: 15261.3940, test_acc: 0.7106, best: 0.7528, time: 0:01:31
 Epoch: 151, lr: 1.0e-02, train_loss: 0.2861, train_acc: 0.8984 test_loss: 1404.9125, test_acc: 0.7075, best: 0.7528, time: 0:01:31
 Epoch: 152, lr: 1.0e-02, train_loss: 0.2662, train_acc: 0.9116 test_loss: 441.5910, test_acc: 0.7261, best: 0.7528, time: 0:01:31
 Epoch: 153, lr: 1.0e-02, train_loss: 0.2755, train_acc: 0.9062 test_loss: 2327.2529, test_acc: 0.7176, best: 0.7528, time: 0:01:31
 Epoch: 154, lr: 1.0e-02, train_loss: 0.2725, train_acc: 0.9090 test_loss: 531.1944, test_acc: 0.7286, best: 0.7528, time: 0:01:31
 Epoch: 155, lr: 1.0e-02, train_loss: 0.2791, train_acc: 0.9052 test_loss: 2410.8988, test_acc: 0.7232, best: 0.7528, time: 0:01:31
 Epoch: 156, lr: 1.0e-02, train_loss: 0.2533, train_acc: 0.9148 test_loss: 629.6230, test_acc: 0.7109, best: 0.7528, time: 0:01:31
 Epoch: 157, lr: 1.0e-02, train_loss: 0.2673, train_acc: 0.9070 test_loss: 1062.4861, test_acc: 0.7271, best: 0.7528, time: 0:01:31
 Epoch: 158, lr: 1.0e-02, train_loss: 0.2719, train_acc: 0.9062 test_loss: 144.4408, test_acc: 0.7499, best: 0.7528, time: 0:01:31
 Epoch: 159, lr: 1.0e-02, train_loss: 0.2702, train_acc: 0.9062 test_loss: 244.8358, test_acc: 0.7444, best: 0.7528, time: 0:01:31
 Epoch: 160, lr: 1.0e-02, train_loss: 0.2801, train_acc: 0.9016 test_loss: 7.4091, test_acc: 0.7639, best: 0.7639, time: 0:01:32
 Epoch: 161, lr: 1.0e-02, train_loss: 0.2706, train_acc: 0.9066 test_loss: 104.1599, test_acc: 0.7411, best: 0.7639, time: 0:01:31
 Epoch: 162, lr: 1.0e-02, train_loss: 0.2444, train_acc: 0.9132 test_loss: 86.6018, test_acc: 0.7402, best: 0.7639, time: 0:01:31
 Epoch: 163, lr: 1.0e-02, train_loss: 0.3069, train_acc: 0.8974 test_loss: 4.4399, test_acc: 0.7056, best: 0.7639, time: 0:01:31
 Epoch: 164, lr: 1.0e-02, train_loss: 0.2849, train_acc: 0.9024 test_loss: 13.5063, test_acc: 0.6940, best: 0.7639, time: 0:01:31
 Epoch: 165, lr: 1.0e-02, train_loss: 0.2944, train_acc: 0.8994 test_loss: 10.8155, test_acc: 0.7216, best: 0.7639, time: 0:01:31
 Epoch: 166, lr: 1.0e-02, train_loss: 0.2849, train_acc: 0.8992 test_loss: 9.6037, test_acc: 0.7099, best: 0.7639, time: 0:01:31
 Epoch: 167, lr: 1.0e-02, train_loss: 0.2677, train_acc: 0.9112 test_loss: 79.4281, test_acc: 0.6590, best: 0.7639, time: 0:01:31
 Epoch: 168, lr: 1.0e-02, train_loss: 0.2824, train_acc: 0.9040 test_loss: 7.3517, test_acc: 0.7047, best: 0.7639, time: 0:01:31
 Epoch: 169, lr: 1.0e-02, train_loss: 0.2801, train_acc: 0.9018 test_loss: 5.2265, test_acc: 0.7145, best: 0.7639, time: 0:01:31
 Epoch: 170, lr: 1.0e-02, train_loss: 0.2509, train_acc: 0.9158 test_loss: 18.3831, test_acc: 0.6800, best: 0.7639, time: 0:01:31
 Epoch: 171, lr: 1.0e-02, train_loss: 0.2536, train_acc: 0.9130 test_loss: 22.1552, test_acc: 0.6896, best: 0.7639, time: 0:01:31
 Epoch: 172, lr: 1.0e-02, train_loss: 0.2824, train_acc: 0.9038 test_loss: 52.1299, test_acc: 0.7329, best: 0.7639, time: 0:01:31
 Epoch: 173, lr: 1.0e-02, train_loss: 0.2683, train_acc: 0.9120 test_loss: 18.4842, test_acc: 0.7286, best: 0.7639, time: 0:01:31
 Epoch: 174, lr: 1.0e-02, train_loss: 0.2669, train_acc: 0.9058 test_loss: 16.0889, test_acc: 0.7581, best: 0.7639, time: 0:01:31
 Epoch: 175, lr: 1.0e-02, train_loss: 0.2627, train_acc: 0.9104 test_loss: 26.4681, test_acc: 0.6971, best: 0.7639, time: 0:01:31
 Epoch: 176, lr: 1.0e-02, train_loss: 0.2584, train_acc: 0.9112 test_loss: 98.0080, test_acc: 0.6279, best: 0.7639, time: 0:01:31
 Epoch: 177, lr: 1.0e-02, train_loss: 0.2617, train_acc: 0.9076 test_loss: 8.3025, test_acc: 0.7183, best: 0.7639, time: 0:01:31
 Epoch: 178, lr: 1.0e-02, train_loss: 0.2519, train_acc: 0.9138 test_loss: 10.1939, test_acc: 0.7074, best: 0.7639, time: 0:01:31
 Epoch: 179, lr: 1.0e-02, train_loss: 0.2369, train_acc: 0.9214 test_loss: 1.6241, test_acc: 0.7445, best: 0.7639, time: 0:01:31
 Epoch: 180, lr: 2.0e-03, train_loss: 0.2197, train_acc: 0.9214 test_loss: 4.4026, test_acc: 0.7320, best: 0.7639, time: 0:01:31
 Epoch: 181, lr: 2.0e-03, train_loss: 0.2048, train_acc: 0.9292 test_loss: 3.8075, test_acc: 0.7382, best: 0.7639, time: 0:01:31
 Epoch: 182, lr: 2.0e-03, train_loss: 0.1892, train_acc: 0.9356 test_loss: 3.1712, test_acc: 0.7425, best: 0.7639, time: 0:01:31
 Epoch: 183, lr: 2.0e-03, train_loss: 0.1693, train_acc: 0.9430 test_loss: 2.6216, test_acc: 0.7524, best: 0.7639, time: 0:01:31
 Epoch: 184, lr: 2.0e-03, train_loss: 0.1760, train_acc: 0.9388 test_loss: 3.6302, test_acc: 0.7395, best: 0.7639, time: 0:01:31
 Epoch: 185, lr: 2.0e-03, train_loss: 0.1828, train_acc: 0.9390 test_loss: 1.4603, test_acc: 0.7680, best: 0.7680, time: 0:01:31
 Epoch: 186, lr: 2.0e-03, train_loss: 0.1764, train_acc: 0.9336 test_loss: 1.3529, test_acc: 0.7779, best: 0.7779, time: 0:01:31
 Epoch: 187, lr: 2.0e-03, train_loss: 0.1634, train_acc: 0.9480 test_loss: 1.1866, test_acc: 0.7835, best: 0.7835, time: 0:01:31
 Epoch: 188, lr: 2.0e-03, train_loss: 0.1619, train_acc: 0.9500 test_loss: 2.5120, test_acc: 0.7448, best: 0.7835, time: 0:01:31
 Epoch: 189, lr: 2.0e-03, train_loss: 0.1638, train_acc: 0.9444 test_loss: 1.2709, test_acc: 0.7800, best: 0.7835, time: 0:01:31
 Epoch: 190, lr: 2.0e-03, train_loss: 0.1620, train_acc: 0.9460 test_loss: 4.1019, test_acc: 0.7534, best: 0.7835, time: 0:01:31
 Epoch: 191, lr: 2.0e-03, train_loss: 0.1744, train_acc: 0.9420 test_loss: 2.1259, test_acc: 0.7616, best: 0.7835, time: 0:01:31
 Epoch: 192, lr: 2.0e-03, train_loss: 0.1570, train_acc: 0.9466 test_loss: 2.6219, test_acc: 0.7655, best: 0.7835, time: 0:01:31
 Epoch: 193, lr: 2.0e-03, train_loss: 0.1582, train_acc: 0.9462 test_loss: 6.6164, test_acc: 0.7291, best: 0.7835, time: 0:01:31
 Epoch: 194, lr: 2.0e-03, train_loss: 0.1682, train_acc: 0.9436 test_loss: 1.9572, test_acc: 0.7690, best: 0.7835, time: 0:01:31
 Epoch: 195, lr: 2.0e-03, train_loss: 0.1508, train_acc: 0.9490 test_loss: 12.6072, test_acc: 0.7212, best: 0.7835, time: 0:01:31
 Epoch: 196, lr: 2.0e-03, train_loss: 0.1578, train_acc: 0.9462 test_loss: 7.6857, test_acc: 0.7143, best: 0.7835, time: 0:01:31
 Epoch: 197, lr: 2.0e-03, train_loss: 0.1550, train_acc: 0.9504 test_loss: 4.5979, test_acc: 0.7576, best: 0.7835, time: 0:01:31
 Epoch: 198, lr: 2.0e-03, train_loss: 0.1394, train_acc: 0.9530 test_loss: 11.0141, test_acc: 0.7140, best: 0.7835, time: 0:01:31
 Epoch: 199, lr: 2.0e-03, train_loss: 0.1546, train_acc: 0.9468 test_loss: 18.9299, test_acc: 0.6896, best: 0.7835, time: 0:01:31
 Epoch: 200, lr: 2.0e-03, train_loss: 0.1421, train_acc: 0.9504 test_loss: 3.3445, test_acc: 0.7760, best: 0.7835, time: 0:01:31
 Epoch: 201, lr: 2.0e-03, train_loss: 0.1489, train_acc: 0.9502 test_loss: 17.9944, test_acc: 0.7041, best: 0.7835, time: 0:01:31
 Epoch: 202, lr: 2.0e-03, train_loss: 0.1508, train_acc: 0.9460 test_loss: 6.7288, test_acc: 0.7384, best: 0.7835, time: 0:01:31
 Epoch: 203, lr: 2.0e-03, train_loss: 0.1491, train_acc: 0.9498 test_loss: 22.8401, test_acc: 0.6973, best: 0.7835, time: 0:01:31
 Epoch: 204, lr: 2.0e-03, train_loss: 0.1505, train_acc: 0.9492 test_loss: 6.8015, test_acc: 0.7418, best: 0.7835, time: 0:01:31
 Epoch: 205, lr: 2.0e-03, train_loss: 0.1637, train_acc: 0.9444 test_loss: 22.1291, test_acc: 0.7117, best: 0.7835, time: 0:01:31
 Epoch: 206, lr: 2.0e-03, train_loss: 0.1406, train_acc: 0.9518 test_loss: 77.8955, test_acc: 0.6338, best: 0.7835, time: 0:01:31
 Epoch: 207, lr: 2.0e-03, train_loss: 0.1588, train_acc: 0.9476 test_loss: 10.8927, test_acc: 0.7163, best: 0.7835, time: 0:01:31
 Epoch: 208, lr: 2.0e-03, train_loss: 0.1572, train_acc: 0.9458 test_loss: 4.6056, test_acc: 0.7391, best: 0.7835, time: 0:01:31
 Epoch: 209, lr: 2.0e-03, train_loss: 0.1340, train_acc: 0.9570 test_loss: 7.0956, test_acc: 0.7107, best: 0.7835, time: 0:01:31
 Epoch: 210, lr: 2.0e-03, train_loss: 0.1326, train_acc: 0.9526 test_loss: 44.6587, test_acc: 0.6591, best: 0.7835, time: 0:01:31
 Epoch: 211, lr: 2.0e-03, train_loss: 0.1491, train_acc: 0.9496 test_loss: 12.9089, test_acc: 0.7006, best: 0.7835, time: 0:01:31
 Epoch: 212, lr: 2.0e-03, train_loss: 0.1527, train_acc: 0.9472 test_loss: 23.7700, test_acc: 0.6765, best: 0.7835, time: 0:01:31
 Epoch: 213, lr: 2.0e-03, train_loss: 0.1490, train_acc: 0.9506 test_loss: 5.8299, test_acc: 0.7379, best: 0.7835, time: 0:01:31
 Epoch: 214, lr: 2.0e-03, train_loss: 0.1337, train_acc: 0.9532 test_loss: 5.9716, test_acc: 0.7230, best: 0.7835, time: 0:01:31
 Epoch: 215, lr: 2.0e-03, train_loss: 0.1371, train_acc: 0.9516 test_loss: 17.7388, test_acc: 0.6909, best: 0.7835, time: 0:01:31
 Epoch: 216, lr: 2.0e-03, train_loss: 0.1311, train_acc: 0.9566 test_loss: 26.5680, test_acc: 0.6767, best: 0.7835, time: 0:01:31
 Epoch: 217, lr: 2.0e-03, train_loss: 0.1501, train_acc: 0.9490 test_loss: 49.5446, test_acc: 0.6394, best: 0.7835, time: 0:01:31
 Epoch: 218, lr: 2.0e-03, train_loss: 0.1272, train_acc: 0.9566 test_loss: 20.3159, test_acc: 0.6885, best: 0.7835, time: 0:01:31
 Epoch: 219, lr: 2.0e-03, train_loss: 0.1407, train_acc: 0.9498 test_loss: 40.7330, test_acc: 0.6824, best: 0.7835, time: 0:01:31
 Epoch: 220, lr: 2.0e-03, train_loss: 0.1356, train_acc: 0.9532 test_loss: 19.4430, test_acc: 0.7378, best: 0.7835, time: 0:01:31
 Epoch: 221, lr: 2.0e-03, train_loss: 0.1441, train_acc: 0.9492 test_loss: 73.2360, test_acc: 0.7036, best: 0.7835, time: 0:01:31
 Epoch: 222, lr: 2.0e-03, train_loss: 0.1336, train_acc: 0.9568 test_loss: 29.5027, test_acc: 0.7212, best: 0.7835, time: 0:01:31
 Epoch: 223, lr: 2.0e-03, train_loss: 0.1291, train_acc: 0.9530 test_loss: 57.4282, test_acc: 0.7111, best: 0.7835, time: 0:01:31
 Epoch: 224, lr: 2.0e-03, train_loss: 0.1449, train_acc: 0.9524 test_loss: 29.3108, test_acc: 0.7279, best: 0.7835, time: 0:01:31
 Epoch: 225, lr: 2.0e-03, train_loss: 0.1361, train_acc: 0.9550 test_loss: 222.9154, test_acc: 0.6341, best: 0.7835, time: 0:01:31
 Epoch: 226, lr: 2.0e-03, train_loss: 0.1357, train_acc: 0.9514 test_loss: 31.8864, test_acc: 0.7399, best: 0.7835, time: 0:01:31
 Epoch: 227, lr: 2.0e-03, train_loss: 0.1449, train_acc: 0.9484 test_loss: 22.2679, test_acc: 0.7364, best: 0.7835, time: 0:01:31
 Epoch: 228, lr: 2.0e-03, train_loss: 0.1317, train_acc: 0.9522 test_loss: 101.1006, test_acc: 0.7159, best: 0.7835, time: 0:01:31
 Epoch: 229, lr: 2.0e-03, train_loss: 0.1338, train_acc: 0.9572 test_loss: 42.9549, test_acc: 0.7191, best: 0.7835, time: 0:01:31
 Epoch: 230, lr: 2.0e-03, train_loss: 0.1368, train_acc: 0.9532 test_loss: 26.4404, test_acc: 0.7501, best: 0.7835, time: 0:01:31
 Epoch: 231, lr: 2.0e-03, train_loss: 0.1388, train_acc: 0.9496 test_loss: 26.6457, test_acc: 0.7371, best: 0.7835, time: 0:01:29
 Epoch: 232, lr: 2.0e-03, train_loss: 0.1345, train_acc: 0.9522 test_loss: 50.2803, test_acc: 0.7241, best: 0.7835, time: 0:01:29
 Epoch: 233, lr: 2.0e-03, train_loss: 0.1486, train_acc: 0.9506 test_loss: 31.3475, test_acc: 0.7370, best: 0.7835, time: 0:01:29
 Epoch: 234, lr: 2.0e-03, train_loss: 0.1256, train_acc: 0.9572 test_loss: 21.9821, test_acc: 0.7485, best: 0.7835, time: 0:01:29
 Epoch: 235, lr: 2.0e-03, train_loss: 0.1430, train_acc: 0.9536 test_loss: 9.0946, test_acc: 0.7596, best: 0.7835, time: 0:01:29
 Epoch: 236, lr: 2.0e-03, train_loss: 0.1311, train_acc: 0.9558 test_loss: 35.7576, test_acc: 0.7244, best: 0.7835, time: 0:01:29
 Epoch: 237, lr: 2.0e-03, train_loss: 0.1340, train_acc: 0.9552 test_loss: 16.1172, test_acc: 0.7460, best: 0.7835, time: 0:01:29
 Epoch: 238, lr: 2.0e-03, train_loss: 0.1324, train_acc: 0.9582 test_loss: 34.4379, test_acc: 0.6966, best: 0.7835, time: 0:01:30
 Epoch: 239, lr: 2.0e-03, train_loss: 0.1280, train_acc: 0.9536 test_loss: 35.6424, test_acc: 0.7151, best: 0.7835, time: 0:01:30
 Epoch: 240, lr: 4.0e-04, train_loss: 0.1744, train_acc: 0.9410 test_loss: 38.3668, test_acc: 0.7312, best: 0.7835, time: 0:01:29
 Epoch: 241, lr: 4.0e-04, train_loss: 0.1460, train_acc: 0.9490 test_loss: 46.5763, test_acc: 0.7260, best: 0.7835, time: 0:01:29
 Epoch: 242, lr: 4.0e-04, train_loss: 0.1335, train_acc: 0.9546 test_loss: 60.7513, test_acc: 0.7050, best: 0.7835, time: 0:01:28
 Epoch: 243, lr: 4.0e-04, train_loss: 0.1346, train_acc: 0.9534 test_loss: 17.2664, test_acc: 0.7479, best: 0.7835, time: 0:01:28
 Epoch: 244, lr: 4.0e-04, train_loss: 0.1228, train_acc: 0.9564 test_loss: 15.2426, test_acc: 0.7584, best: 0.7835, time: 0:01:28
 Epoch: 245, lr: 4.0e-04, train_loss: 0.1296, train_acc: 0.9566 test_loss: 23.8555, test_acc: 0.7485, best: 0.7835, time: 0:01:28
 Epoch: 246, lr: 4.0e-04, train_loss: 0.1274, train_acc: 0.9560 test_loss: 35.1543, test_acc: 0.7380, best: 0.7835, time: 0:01:28
 Epoch: 247, lr: 4.0e-04, train_loss: 0.1100, train_acc: 0.9618 test_loss: 64.9189, test_acc: 0.7093, best: 0.7835, time: 0:01:28
 Epoch: 248, lr: 4.0e-04, train_loss: 0.1148, train_acc: 0.9622 test_loss: 81.9742, test_acc: 0.6977, best: 0.7835, time: 0:01:28
 Epoch: 249, lr: 4.0e-04, train_loss: 0.1233, train_acc: 0.9570 test_loss: 10.9873, test_acc: 0.7551, best: 0.7835, time: 0:01:28
 Epoch: 250, lr: 4.0e-04, train_loss: 0.1281, train_acc: 0.9570 test_loss: 50.2943, test_acc: 0.7215, best: 0.7835, time: 0:01:28
 Epoch: 251, lr: 4.0e-04, train_loss: 0.1264, train_acc: 0.9556 test_loss: 18.1737, test_acc: 0.7479, best: 0.7835, time: 0:01:28
 Epoch: 252, lr: 4.0e-04, train_loss: 0.1164, train_acc: 0.9606 test_loss: 37.4340, test_acc: 0.7288, best: 0.7835, time: 0:01:28
 Epoch: 253, lr: 4.0e-04, train_loss: 0.1267, train_acc: 0.9554 test_loss: 19.6235, test_acc: 0.7468, best: 0.7835, time: 0:01:28
 Epoch: 254, lr: 4.0e-04, train_loss: 0.1322, train_acc: 0.9554 test_loss: 12.5245, test_acc: 0.7551, best: 0.7835, time: 0:01:28
 Epoch: 255, lr: 4.0e-04, train_loss: 0.1231, train_acc: 0.9610 test_loss: 53.4798, test_acc: 0.7177, best: 0.7835, time: 0:01:28
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1178, train_acc: 0.9576 test_loss: 10.7221, test_acc: 0.7599, best: 0.7835, time: 0:01:28
 Epoch: 257, lr: 4.0e-04, train_loss: 0.1204, train_acc: 0.9580 test_loss: 11.5338, test_acc: 0.7508, best: 0.7835, time: 0:01:28
 Epoch: 258, lr: 4.0e-04, train_loss: 0.1211, train_acc: 0.9602 test_loss: 15.5553, test_acc: 0.7424, best: 0.7835, time: 0:01:28
 Epoch: 259, lr: 4.0e-04, train_loss: 0.1214, train_acc: 0.9578 test_loss: 14.1290, test_acc: 0.7499, best: 0.7835, time: 0:01:28
 Epoch: 260, lr: 4.0e-04, train_loss: 0.1226, train_acc: 0.9580 test_loss: 29.6094, test_acc: 0.7481, best: 0.7835, time: 0:01:28
 Epoch: 261, lr: 4.0e-04, train_loss: 0.1168, train_acc: 0.9608 test_loss: 89.5378, test_acc: 0.7137, best: 0.7835, time: 0:01:28
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1250, train_acc: 0.9604 test_loss: 44.4273, test_acc: 0.7175, best: 0.7835, time: 0:01:28
 Epoch: 263, lr: 4.0e-04, train_loss: 0.1079, train_acc: 0.9630 test_loss: 14.9298, test_acc: 0.7558, best: 0.7835, time: 0:01:28
 Epoch: 264, lr: 4.0e-04, train_loss: 0.1207, train_acc: 0.9588 test_loss: 39.8587, test_acc: 0.7321, best: 0.7835, time: 0:01:28
 Epoch: 265, lr: 4.0e-04, train_loss: 0.1164, train_acc: 0.9574 test_loss: 7.0765, test_acc: 0.7664, best: 0.7835, time: 0:01:28
 Epoch: 266, lr: 4.0e-04, train_loss: 0.1200, train_acc: 0.9606 test_loss: 18.6461, test_acc: 0.7520, best: 0.7835, time: 0:01:28
 Epoch: 267, lr: 4.0e-04, train_loss: 0.1112, train_acc: 0.9568 test_loss: 38.6817, test_acc: 0.7319, best: 0.7835, time: 0:01:28
 Epoch: 268, lr: 4.0e-04, train_loss: 0.1329, train_acc: 0.9556 test_loss: 18.2566, test_acc: 0.7469, best: 0.7835, time: 0:01:28
 Epoch: 269, lr: 4.0e-04, train_loss: 0.1161, train_acc: 0.9602 test_loss: 57.0130, test_acc: 0.7086, best: 0.7835, time: 0:01:28
 Epoch: 270, lr: 8.0e-05, train_loss: 0.1160, train_acc: 0.9610 test_loss: 50.2770, test_acc: 0.7368, best: 0.7835, time: 0:01:28
 Epoch: 271, lr: 8.0e-05, train_loss: 0.1264, train_acc: 0.9540 test_loss: 56.2019, test_acc: 0.7222, best: 0.7835, time: 0:01:28
 Epoch: 272, lr: 8.0e-05, train_loss: 0.1132, train_acc: 0.9620 test_loss: 11.2338, test_acc: 0.7572, best: 0.7835, time: 0:01:28
 Epoch: 273, lr: 8.0e-05, train_loss: 0.1150, train_acc: 0.9612 test_loss: 119.0737, test_acc: 0.6806, best: 0.7835, time: 0:01:28
 Epoch: 274, lr: 8.0e-05, train_loss: 0.1194, train_acc: 0.9622 test_loss: 77.0164, test_acc: 0.7165, best: 0.7835, time: 0:01:28
 Epoch: 275, lr: 8.0e-05, train_loss: 0.1123, train_acc: 0.9580 test_loss: 83.8852, test_acc: 0.6877, best: 0.7835, time: 0:01:28
 Epoch: 276, lr: 8.0e-05, train_loss: 0.1222, train_acc: 0.9576 test_loss: 16.6144, test_acc: 0.7494, best: 0.7835, time: 0:01:28
 Epoch: 277, lr: 8.0e-05, train_loss: 0.1213, train_acc: 0.9600 test_loss: 65.7815, test_acc: 0.7056, best: 0.7835, time: 0:01:28
 Epoch: 278, lr: 8.0e-05, train_loss: 0.1244, train_acc: 0.9566 test_loss: 8.8417, test_acc: 0.7595, best: 0.7835, time: 0:01:28
 Epoch: 279, lr: 8.0e-05, train_loss: 0.1048, train_acc: 0.9636 test_loss: 12.9794, test_acc: 0.7564, best: 0.7835, time: 0:01:28
 Epoch: 280, lr: 8.0e-05, train_loss: 0.1179, train_acc: 0.9600 test_loss: 14.7199, test_acc: 0.7576, best: 0.7835, time: 0:01:28
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1228, train_acc: 0.9582 test_loss: 37.3728, test_acc: 0.7384, best: 0.7835, time: 0:01:28
 Epoch: 282, lr: 8.0e-05, train_loss: 0.1264, train_acc: 0.9552 test_loss: 53.0234, test_acc: 0.7230, best: 0.7835, time: 0:01:28
 Epoch: 283, lr: 8.0e-05, train_loss: 0.1241, train_acc: 0.9594 test_loss: 28.9915, test_acc: 0.7506, best: 0.7835, time: 0:01:28
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1139, train_acc: 0.9604 test_loss: 43.6914, test_acc: 0.7238, best: 0.7835, time: 0:01:28
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1248, train_acc: 0.9552 test_loss: 11.7697, test_acc: 0.7519, best: 0.7835, time: 0:01:28
 Epoch: 286, lr: 8.0e-05, train_loss: 0.1205, train_acc: 0.9592 test_loss: 13.0910, test_acc: 0.7598, best: 0.7835, time: 0:01:28
 Epoch: 287, lr: 8.0e-05, train_loss: 0.1064, train_acc: 0.9650 test_loss: 18.9828, test_acc: 0.7445, best: 0.7835, time: 0:01:28
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1144, train_acc: 0.9580 test_loss: 16.6440, test_acc: 0.7526, best: 0.7835, time: 0:01:28
 Epoch: 289, lr: 8.0e-05, train_loss: 0.1174, train_acc: 0.9606 test_loss: 47.5831, test_acc: 0.7156, best: 0.7835, time: 0:01:28
 Epoch: 290, lr: 8.0e-05, train_loss: 0.1191, train_acc: 0.9626 test_loss: 33.9322, test_acc: 0.7295, best: 0.7835, time: 0:01:28
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1135, train_acc: 0.9594 test_loss: 51.8509, test_acc: 0.7244, best: 0.7835, time: 0:01:28
 Epoch: 292, lr: 8.0e-05, train_loss: 0.1258, train_acc: 0.9554 test_loss: 45.1269, test_acc: 0.7170, best: 0.7835, time: 0:01:28
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1219, train_acc: 0.9594 test_loss: 34.4499, test_acc: 0.7365, best: 0.7835, time: 0:01:28
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1087, train_acc: 0.9646 test_loss: 49.2904, test_acc: 0.7220, best: 0.7835, time: 0:01:28
 Epoch: 295, lr: 8.0e-05, train_loss: 0.1135, train_acc: 0.9616 test_loss: 64.8132, test_acc: 0.6987, best: 0.7835, time: 0:01:28
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1063, train_acc: 0.9612 test_loss: 17.2480, test_acc: 0.7536, best: 0.7835, time: 0:01:28
 Epoch: 297, lr: 8.0e-05, train_loss: 0.1187, train_acc: 0.9580 test_loss: 13.7158, test_acc: 0.7526, best: 0.7835, time: 0:01:28
 Epoch: 298, lr: 8.0e-05, train_loss: 0.1301, train_acc: 0.9576 test_loss: 62.6536, test_acc: 0.6964, best: 0.7835, time: 0:01:28
 Epoch: 299, lr: 8.0e-05, train_loss: 0.1076, train_acc: 0.9640 test_loss: 74.1558, test_acc: 0.6920, best: 0.7835, time: 0:01:28
 Highest accuracy: 0.7835