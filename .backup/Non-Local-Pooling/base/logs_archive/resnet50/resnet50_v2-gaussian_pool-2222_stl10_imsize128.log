
 Run on time: 2022-06-29 22:09:09.753734

 Arguments:
	 gpu                  : True
	 log                  : True
	 seed                 : 0
	 momentum             : 0.9
	 amsgrad              : True
	 dataset              : STL10
	 batch_size           : 8
	 architecture         : RESNET50_GAUSSIAN_POOL_2222
	 im_size              : 128
	 relu_threshold       : 4.0
	 learning_rate        : 0.01
	 pretrained_backbone  : 
	 pretrained_ann       : 
	 weight_decay         : 0.0
	 test_only            : False
	 epochs               : 300
	 lr_interval          : [180, 240, 270]
	 lr_reduce            : 5
	 optimizer            : SGD
	 dropout              : 0.2
	 kernel_size          : 3
	 dont_save            : False
	 visualize            : False
	 devices              : 0
 DataParallel(
  (module): NetworkByName(
    (net): ResNet_v2(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pooling): GaussianPooling2d(
            kernel_size=2, stride=2, padding=0
            (ToHidden): Sequential(
              (0): AdaptiveAvgPool2d(output_size=(1, 1))
              (1): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
              (2): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): ReLU()
            )
            (ToMean): Sequential(
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (ToSigma): Sequential(
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1))
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): Sigmoid()
            )
            (activation): Softplus(beta=1, threshold=20)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (fc): Linear(in_features=2048, out_features=10, bias=True)
    )
  )
)
 SGD (
Parameter Group 0
    dampening: 0
    lr: 0.01
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 5.2955, train_acc: 0.0990 test_loss: 585.9281, test_acc: 0.1011, best: 0.1011, time: 0:01:17
 Epoch: 2, lr: 1.0e-02, train_loss: 2.3728, train_acc: 0.1536 test_loss: 1231.6051, test_acc: 0.1844, best: 0.1844, time: 0:01:16
 Epoch: 3, lr: 1.0e-02, train_loss: 2.1778, train_acc: 0.1836 test_loss: 54.9358, test_acc: 0.2279, best: 0.2279, time: 0:01:16
 Epoch: 4, lr: 1.0e-02, train_loss: 2.0500, train_acc: 0.2198 test_loss: 20.6134, test_acc: 0.2781, best: 0.2781, time: 0:01:16
 Epoch: 5, lr: 1.0e-02, train_loss: 2.0100, train_acc: 0.2332 test_loss: 8.6346, test_acc: 0.3000, best: 0.3000, time: 0:01:17
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9814, train_acc: 0.2454 test_loss: 339.7657, test_acc: 0.3210, best: 0.3210, time: 0:01:16
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9485, train_acc: 0.2662 test_loss: 9.0888, test_acc: 0.3126, best: 0.3210, time: 0:01:15
 Epoch: 8, lr: 1.0e-02, train_loss: 1.8802, train_acc: 0.2834 test_loss: 63.7214, test_acc: 0.3380, best: 0.3380, time: 0:01:16
 Epoch: 9, lr: 1.0e-02, train_loss: 1.8582, train_acc: 0.2932 test_loss: 1232.4367, test_acc: 0.3391, best: 0.3391, time: 0:01:16
 Epoch: 10, lr: 1.0e-02, train_loss: 1.8453, train_acc: 0.3004 test_loss: 391.5071, test_acc: 0.3466, best: 0.3466, time: 0:01:16
 Epoch: 11, lr: 1.0e-02, train_loss: 1.7967, train_acc: 0.3208 test_loss: 115479.5752, test_acc: 0.3980, best: 0.3980, time: 0:01:16
 Epoch: 12, lr: 1.0e-02, train_loss: 1.7809, train_acc: 0.3252 test_loss: 2902110.0279, test_acc: 0.3621, best: 0.3980, time: 0:01:15
 Epoch: 13, lr: 1.0e-02, train_loss: 1.8002, train_acc: 0.3168 test_loss: 8.5996, test_acc: 0.3468, best: 0.3980, time: 0:01:16
 Epoch: 14, lr: 1.0e-02, train_loss: 1.7844, train_acc: 0.3114 test_loss: 47.3176, test_acc: 0.3959, best: 0.3980, time: 0:01:15
 Epoch: 15, lr: 1.0e-02, train_loss: 1.7777, train_acc: 0.3338 test_loss: 40.5224, test_acc: 0.3942, best: 0.3980, time: 0:01:15
 Epoch: 16, lr: 1.0e-02, train_loss: 1.7508, train_acc: 0.3358 test_loss: 2052.4417, test_acc: 0.4002, best: 0.4002, time: 0:01:16
 Epoch: 17, lr: 1.0e-02, train_loss: 1.7294, train_acc: 0.3482 test_loss: 261.3167, test_acc: 0.3857, best: 0.4002, time: 0:01:15
 Epoch: 18, lr: 1.0e-02, train_loss: 1.6807, train_acc: 0.3628 test_loss: 806.3048, test_acc: 0.3775, best: 0.4002, time: 0:01:15
 Epoch: 19, lr: 1.0e-02, train_loss: 1.6685, train_acc: 0.3820 test_loss: 477.4550, test_acc: 0.4278, best: 0.4278, time: 0:01:16
 Epoch: 20, lr: 1.0e-02, train_loss: 1.6456, train_acc: 0.3812 test_loss: 733.4178, test_acc: 0.4041, best: 0.4278, time: 0:01:15
 Epoch: 21, lr: 1.0e-02, train_loss: 1.6314, train_acc: 0.4090 test_loss: 283.7111, test_acc: 0.4244, best: 0.4278, time: 0:01:15
 Epoch: 22, lr: 1.0e-02, train_loss: 1.6073, train_acc: 0.4014 test_loss: 1566.9397, test_acc: 0.4421, best: 0.4421, time: 0:01:16
 Epoch: 23, lr: 1.0e-02, train_loss: 1.5729, train_acc: 0.4122 test_loss: 999.1314, test_acc: 0.4575, best: 0.4575, time: 0:01:16
 Epoch: 24, lr: 1.0e-02, train_loss: 1.5656, train_acc: 0.4204 test_loss: 5286.4513, test_acc: 0.4491, best: 0.4575, time: 0:01:15
 Epoch: 25, lr: 1.0e-02, train_loss: 1.5459, train_acc: 0.4296 test_loss: 645.9459, test_acc: 0.4639, best: 0.4639, time: 0:01:16
 Epoch: 26, lr: 1.0e-02, train_loss: 1.5411, train_acc: 0.4284 test_loss: 3430.4773, test_acc: 0.4754, best: 0.4754, time: 0:01:16
 Epoch: 27, lr: 1.0e-02, train_loss: 1.5132, train_acc: 0.4350 test_loss: 1992.0405, test_acc: 0.4584, best: 0.4754, time: 0:01:15
 Epoch: 28, lr: 1.0e-02, train_loss: 1.4780, train_acc: 0.4490 test_loss: 12127.9898, test_acc: 0.4662, best: 0.4754, time: 0:01:15
 Epoch: 29, lr: 1.0e-02, train_loss: 1.5160, train_acc: 0.4408 test_loss: 487.8011, test_acc: 0.4781, best: 0.4781, time: 0:01:16
 Epoch: 30, lr: 1.0e-02, train_loss: 1.4666, train_acc: 0.4572 test_loss: 177.6884, test_acc: 0.4964, best: 0.4964, time: 0:01:16
 Epoch: 31, lr: 1.0e-02, train_loss: 1.4681, train_acc: 0.4568 test_loss: 12237.2215, test_acc: 0.4831, best: 0.4964, time: 0:01:15
 Epoch: 32, lr: 1.0e-02, train_loss: 1.4310, train_acc: 0.4720 test_loss: 6905.3000, test_acc: 0.4979, best: 0.4979, time: 0:01:16
 Epoch: 33, lr: 1.0e-02, train_loss: 1.4194, train_acc: 0.4826 test_loss: 926.3797, test_acc: 0.5234, best: 0.5234, time: 0:01:16
 Epoch: 34, lr: 1.0e-02, train_loss: 1.3929, train_acc: 0.4928 test_loss: 978.3394, test_acc: 0.5080, best: 0.5234, time: 0:01:15
 Epoch: 35, lr: 1.0e-02, train_loss: 1.3941, train_acc: 0.4856 test_loss: 47.0341, test_acc: 0.5321, best: 0.5321, time: 0:01:16
 Epoch: 36, lr: 1.0e-02, train_loss: 1.3692, train_acc: 0.4988 test_loss: 130.7085, test_acc: 0.5215, best: 0.5321, time: 0:01:15
 Epoch: 37, lr: 1.0e-02, train_loss: 1.3820, train_acc: 0.5036 test_loss: 454.6386, test_acc: 0.5091, best: 0.5321, time: 0:01:15
 Epoch: 38, lr: 1.0e-02, train_loss: 1.3833, train_acc: 0.4890 test_loss: 3482.0723, test_acc: 0.4926, best: 0.5321, time: 0:01:15
 Epoch: 39, lr: 1.0e-02, train_loss: 1.4489, train_acc: 0.4732 test_loss: 11495.1768, test_acc: 0.4783, best: 0.5321, time: 0:01:15
 Epoch: 40, lr: 1.0e-02, train_loss: 1.3610, train_acc: 0.5088 test_loss: 398.9664, test_acc: 0.5289, best: 0.5321, time: 0:01:15
 Epoch: 41, lr: 1.0e-02, train_loss: 1.3539, train_acc: 0.5002 test_loss: 1993.5797, test_acc: 0.5377, best: 0.5377, time: 0:01:16
 Epoch: 42, lr: 1.0e-02, train_loss: 1.3446, train_acc: 0.5030 test_loss: 4700.3200, test_acc: 0.5269, best: 0.5377, time: 0:01:15
 Epoch: 43, lr: 1.0e-02, train_loss: 1.3012, train_acc: 0.5342 test_loss: 1005.9054, test_acc: 0.5220, best: 0.5377, time: 0:01:15
 Epoch: 44, lr: 1.0e-02, train_loss: 1.2977, train_acc: 0.5310 test_loss: 2426.1708, test_acc: 0.5420, best: 0.5420, time: 0:01:16
 Epoch: 45, lr: 1.0e-02, train_loss: 1.2869, train_acc: 0.5312 test_loss: 1097.7756, test_acc: 0.5494, best: 0.5494, time: 0:01:16
 Epoch: 46, lr: 1.0e-02, train_loss: 1.2651, train_acc: 0.5388 test_loss: 5677.2183, test_acc: 0.5225, best: 0.5494, time: 0:01:15
 Epoch: 47, lr: 1.0e-02, train_loss: 1.2491, train_acc: 0.5354 test_loss: 702.9691, test_acc: 0.5443, best: 0.5494, time: 0:01:15
 Epoch: 48, lr: 1.0e-02, train_loss: 1.2333, train_acc: 0.5578 test_loss: 4096.8585, test_acc: 0.5607, best: 0.5607, time: 0:01:16
 Epoch: 49, lr: 1.0e-02, train_loss: 1.2162, train_acc: 0.5594 test_loss: 63618.1637, test_acc: 0.5465, best: 0.5607, time: 0:01:15
 Epoch: 50, lr: 1.0e-02, train_loss: 1.2159, train_acc: 0.5550 test_loss: 6830.2549, test_acc: 0.5476, best: 0.5607, time: 0:01:15
 Epoch: 51, lr: 1.0e-02, train_loss: 1.2261, train_acc: 0.5530 test_loss: 1229.3234, test_acc: 0.4779, best: 0.5607, time: 0:01:15
 Epoch: 52, lr: 1.0e-02, train_loss: 1.3289, train_acc: 0.5134 test_loss: 2.9804, test_acc: 0.5356, best: 0.5607, time: 0:01:15
 Epoch: 53, lr: 1.0e-02, train_loss: 1.3192, train_acc: 0.5146 test_loss: 31.1208, test_acc: 0.5304, best: 0.5607, time: 0:01:15
 Epoch: 54, lr: 1.0e-02, train_loss: 1.3197, train_acc: 0.5222 test_loss: 35.3530, test_acc: 0.5575, best: 0.5607, time: 0:01:14
 Epoch: 55, lr: 1.0e-02, train_loss: 1.2650, train_acc: 0.5500 test_loss: 18301.3389, test_acc: 0.5405, best: 0.5607, time: 0:01:14
 Epoch: 56, lr: 1.0e-02, train_loss: 1.1819, train_acc: 0.5716 test_loss: 6075.0763, test_acc: 0.5205, best: 0.5607, time: 0:01:14
 Epoch: 57, lr: 1.0e-02, train_loss: 1.1860, train_acc: 0.5752 test_loss: 33528.6087, test_acc: 0.5583, best: 0.5607, time: 0:01:14
 Epoch: 58, lr: 1.0e-02, train_loss: 1.1566, train_acc: 0.5826 test_loss: 7248.9505, test_acc: 0.5447, best: 0.5607, time: 0:01:14
 Epoch: 59, lr: 1.0e-02, train_loss: 1.1335, train_acc: 0.5944 test_loss: 20516.1113, test_acc: 0.5403, best: 0.5607, time: 0:01:14
 Epoch: 60, lr: 1.0e-02, train_loss: 1.1009, train_acc: 0.6022 test_loss: 30745.1403, test_acc: 0.5716, best: 0.5716, time: 0:01:15
 Epoch: 61, lr: 1.0e-02, train_loss: 1.1116, train_acc: 0.5986 test_loss: 26216.0011, test_acc: 0.5417, best: 0.5716, time: 0:01:14
 Epoch: 62, lr: 1.0e-02, train_loss: 1.0959, train_acc: 0.5978 test_loss: 7677.1214, test_acc: 0.5771, best: 0.5771, time: 0:01:16
 Epoch: 63, lr: 1.0e-02, train_loss: 1.0889, train_acc: 0.6036 test_loss: 10714.3770, test_acc: 0.5920, best: 0.5920, time: 0:01:15
 Epoch: 64, lr: 1.0e-02, train_loss: 1.0721, train_acc: 0.6136 test_loss: 9794.7911, test_acc: 0.5801, best: 0.5920, time: 0:01:14
 Epoch: 65, lr: 1.0e-02, train_loss: 1.0727, train_acc: 0.6092 test_loss: 1106.4076, test_acc: 0.5971, best: 0.5971, time: 0:01:15
 Epoch: 66, lr: 1.0e-02, train_loss: 1.0427, train_acc: 0.6212 test_loss: 28384.2863, test_acc: 0.5874, best: 0.5971, time: 0:01:14
 Epoch: 67, lr: 1.0e-02, train_loss: 1.0252, train_acc: 0.6360 test_loss: 2013.9589, test_acc: 0.5949, best: 0.5971, time: 0:01:14
 Epoch: 68, lr: 1.0e-02, train_loss: 1.0523, train_acc: 0.6290 test_loss: 7855.5013, test_acc: 0.5770, best: 0.5971, time: 0:01:14
 Epoch: 69, lr: 1.0e-02, train_loss: 1.0597, train_acc: 0.6184 test_loss: 3800.8239, test_acc: 0.5966, best: 0.5971, time: 0:01:14
 Epoch: 70, lr: 1.0e-02, train_loss: 1.0285, train_acc: 0.6290 test_loss: 2448.8326, test_acc: 0.5903, best: 0.5971, time: 0:01:14
 Epoch: 71, lr: 1.0e-02, train_loss: 1.0100, train_acc: 0.6320 test_loss: 2842.0433, test_acc: 0.6210, best: 0.6210, time: 0:01:15
 Epoch: 72, lr: 1.0e-02, train_loss: 1.0253, train_acc: 0.6328 test_loss: 65.1689, test_acc: 0.5655, best: 0.6210, time: 0:01:14
 Epoch: 73, lr: 1.0e-02, train_loss: 1.0346, train_acc: 0.6218 test_loss: 156.0259, test_acc: 0.6086, best: 0.6210, time: 0:01:14
 Epoch: 74, lr: 1.0e-02, train_loss: 0.9912, train_acc: 0.6384 test_loss: 23.0993, test_acc: 0.6211, best: 0.6211, time: 0:01:15
 Epoch: 75, lr: 1.0e-02, train_loss: 0.9950, train_acc: 0.6416 test_loss: 27022.0091, test_acc: 0.5737, best: 0.6211, time: 0:01:14
 Epoch: 76, lr: 1.0e-02, train_loss: 0.9638, train_acc: 0.6518 test_loss: 904.2980, test_acc: 0.6024, best: 0.6211, time: 0:01:14
 Epoch: 77, lr: 1.0e-02, train_loss: 0.9629, train_acc: 0.6602 test_loss: 569.6215, test_acc: 0.6074, best: 0.6211, time: 0:01:14
 Epoch: 78, lr: 1.0e-02, train_loss: 0.9786, train_acc: 0.6452 test_loss: 53.6211, test_acc: 0.6161, best: 0.6211, time: 0:01:14
 Epoch: 79, lr: 1.0e-02, train_loss: 0.9705, train_acc: 0.6514 test_loss: 82.1523, test_acc: 0.6341, best: 0.6341, time: 0:01:15
 Epoch: 80, lr: 1.0e-02, train_loss: 0.9294, train_acc: 0.6690 test_loss: 18.6040, test_acc: 0.6324, best: 0.6341, time: 0:01:14
 Epoch: 81, lr: 1.0e-02, train_loss: 0.9133, train_acc: 0.6732 test_loss: 299.7751, test_acc: 0.6378, best: 0.6378, time: 0:01:15
 Epoch: 82, lr: 1.0e-02, train_loss: 0.8983, train_acc: 0.6790 test_loss: 1711.8798, test_acc: 0.6220, best: 0.6378, time: 0:01:14
 Epoch: 83, lr: 1.0e-02, train_loss: 0.9073, train_acc: 0.6752 test_loss: 564.6152, test_acc: 0.6179, best: 0.6378, time: 0:01:14
 Epoch: 84, lr: 1.0e-02, train_loss: 0.8948, train_acc: 0.6788 test_loss: 1523.8210, test_acc: 0.6200, best: 0.6378, time: 0:01:14
 Epoch: 85, lr: 1.0e-02, train_loss: 0.8664, train_acc: 0.6890 test_loss: 225.2304, test_acc: 0.6299, best: 0.6378, time: 0:01:14
 Epoch: 86, lr: 1.0e-02, train_loss: 0.8775, train_acc: 0.6928 test_loss: 6528.2622, test_acc: 0.6165, best: 0.6378, time: 0:01:14
 Epoch: 87, lr: 1.0e-02, train_loss: 0.8496, train_acc: 0.6968 test_loss: 1039.3070, test_acc: 0.6224, best: 0.6378, time: 0:01:14
 Epoch: 88, lr: 1.0e-02, train_loss: 0.8506, train_acc: 0.6924 test_loss: 2281.8376, test_acc: 0.6224, best: 0.6378, time: 0:01:14
 Epoch: 89, lr: 1.0e-02, train_loss: 0.8167, train_acc: 0.7044 test_loss: 2445.5330, test_acc: 0.6149, best: 0.6378, time: 0:01:14
 Epoch: 90, lr: 1.0e-02, train_loss: 0.8625, train_acc: 0.6888 test_loss: 277.8062, test_acc: 0.6342, best: 0.6378, time: 0:01:13
 Epoch: 91, lr: 1.0e-02, train_loss: 0.8630, train_acc: 0.6900 test_loss: 881.3747, test_acc: 0.6302, best: 0.6378, time: 0:01:13
 Epoch: 92, lr: 1.0e-02, train_loss: 0.7963, train_acc: 0.7192 test_loss: 664.8418, test_acc: 0.6112, best: 0.6378, time: 0:01:13
 Epoch: 93, lr: 1.0e-02, train_loss: 0.7947, train_acc: 0.7210 test_loss: 2322.9275, test_acc: 0.6100, best: 0.6378, time: 0:01:13
 Epoch: 94, lr: 1.0e-02, train_loss: 0.7944, train_acc: 0.7186 test_loss: 2433.8286, test_acc: 0.6032, best: 0.6378, time: 0:01:13
 Epoch: 95, lr: 1.0e-02, train_loss: 0.7948, train_acc: 0.7132 test_loss: 1445.9615, test_acc: 0.6145, best: 0.6378, time: 0:01:13
 Epoch: 96, lr: 1.0e-02, train_loss: 0.7862, train_acc: 0.7238 test_loss: 4501.7388, test_acc: 0.5965, best: 0.6378, time: 0:01:13
 Epoch: 97, lr: 1.0e-02, train_loss: 0.7777, train_acc: 0.7208 test_loss: 407.6578, test_acc: 0.5749, best: 0.6378, time: 0:01:13
 Epoch: 98, lr: 1.0e-02, train_loss: 0.8048, train_acc: 0.7172 test_loss: 213.9622, test_acc: 0.6002, best: 0.6378, time: 0:01:13
 Epoch: 99, lr: 1.0e-02, train_loss: 0.7864, train_acc: 0.7242 test_loss: 1248.5493, test_acc: 0.6330, best: 0.6378, time: 0:01:13
 Epoch: 100, lr: 1.0e-02, train_loss: 0.7518, train_acc: 0.7362 test_loss: 7880.5617, test_acc: 0.6109, best: 0.6378, time: 0:01:13
 Epoch: 101, lr: 1.0e-02, train_loss: 0.7528, train_acc: 0.7346 test_loss: 4712.0476, test_acc: 0.6314, best: 0.6378, time: 0:01:13
 Epoch: 102, lr: 1.0e-02, train_loss: 0.7465, train_acc: 0.7278 test_loss: 1131.0786, test_acc: 0.6449, best: 0.6449, time: 0:01:14
 Epoch: 103, lr: 1.0e-02, train_loss: 0.7301, train_acc: 0.7430 test_loss: 287.5038, test_acc: 0.6189, best: 0.6449, time: 0:01:13
 Epoch: 104, lr: 1.0e-02, train_loss: 0.7352, train_acc: 0.7410 test_loss: 6057.0052, test_acc: 0.6045, best: 0.6449, time: 0:01:13
 Epoch: 105, lr: 1.0e-02, train_loss: 0.7149, train_acc: 0.7490 test_loss: 1165.3791, test_acc: 0.6164, best: 0.6449, time: 0:01:14
 Epoch: 106, lr: 1.0e-02, train_loss: 0.7153, train_acc: 0.7446 test_loss: 105.3434, test_acc: 0.6565, best: 0.6565, time: 0:01:14
 Epoch: 107, lr: 1.0e-02, train_loss: 0.7276, train_acc: 0.7436 test_loss: 649.0517, test_acc: 0.6454, best: 0.6565, time: 0:01:13
 Epoch: 108, lr: 1.0e-02, train_loss: 0.7076, train_acc: 0.7544 test_loss: 625.5133, test_acc: 0.6348, best: 0.6565, time: 0:01:13
 Epoch: 109, lr: 1.0e-02, train_loss: 0.6912, train_acc: 0.7588 test_loss: 1438.0719, test_acc: 0.6504, best: 0.6565, time: 0:01:13
 Epoch: 110, lr: 1.0e-02, train_loss: 0.6829, train_acc: 0.7572 test_loss: 2121.4520, test_acc: 0.6231, best: 0.6565, time: 0:01:13
 Epoch: 111, lr: 1.0e-02, train_loss: 0.6606, train_acc: 0.7650 test_loss: 9378.0052, test_acc: 0.6239, best: 0.6565, time: 0:01:13
 Epoch: 112, lr: 1.0e-02, train_loss: 0.6703, train_acc: 0.7632 test_loss: 37479.8933, test_acc: 0.6008, best: 0.6565, time: 0:01:13
 Epoch: 113, lr: 1.0e-02, train_loss: 0.6683, train_acc: 0.7690 test_loss: 9178.6188, test_acc: 0.5942, best: 0.6565, time: 0:01:13
 Epoch: 114, lr: 1.0e-02, train_loss: 0.6476, train_acc: 0.7744 test_loss: 2490.8707, test_acc: 0.6242, best: 0.6565, time: 0:01:13
 Epoch: 115, lr: 1.0e-02, train_loss: 0.6642, train_acc: 0.7642 test_loss: 187.0033, test_acc: 0.6571, best: 0.6571, time: 0:01:14
 Epoch: 116, lr: 1.0e-02, train_loss: 0.6648, train_acc: 0.7742 test_loss: 2514.9017, test_acc: 0.5927, best: 0.6571, time: 0:01:13
 Epoch: 117, lr: 1.0e-02, train_loss: 0.6370, train_acc: 0.7794 test_loss: 1277.2926, test_acc: 0.6175, best: 0.6571, time: 0:01:13
 Epoch: 118, lr: 1.0e-02, train_loss: 0.6538, train_acc: 0.7684 test_loss: 25713.9800, test_acc: 0.5854, best: 0.6571, time: 0:01:13
 Epoch: 119, lr: 1.0e-02, train_loss: 0.6395, train_acc: 0.7742 test_loss: 9488.5464, test_acc: 0.5747, best: 0.6571, time: 0:01:13
 Epoch: 120, lr: 1.0e-02, train_loss: 0.6312, train_acc: 0.7768 test_loss: 642.2168, test_acc: 0.6030, best: 0.6571, time: 0:01:13
 Epoch: 121, lr: 1.0e-02, train_loss: 0.6142, train_acc: 0.7842 test_loss: 2891.8306, test_acc: 0.5767, best: 0.6571, time: 0:01:13
 Epoch: 122, lr: 1.0e-02, train_loss: 0.5995, train_acc: 0.7862 test_loss: 95.3048, test_acc: 0.6501, best: 0.6571, time: 0:01:13
 Epoch: 123, lr: 1.0e-02, train_loss: 0.6271, train_acc: 0.7846 test_loss: 150.7705, test_acc: 0.6195, best: 0.6571, time: 0:01:13
 Epoch: 124, lr: 1.0e-02, train_loss: 0.6095, train_acc: 0.7852 test_loss: 3825.1996, test_acc: 0.5501, best: 0.6571, time: 0:01:13
 Epoch: 125, lr: 1.0e-02, train_loss: 0.6223, train_acc: 0.7774 test_loss: 2518.0618, test_acc: 0.5544, best: 0.6571, time: 0:01:13
 Epoch: 126, lr: 1.0e-02, train_loss: 0.5934, train_acc: 0.7834 test_loss: 1079.1007, test_acc: 0.5680, best: 0.6571, time: 0:01:13
 Epoch: 127, lr: 1.0e-02, train_loss: 0.6099, train_acc: 0.7874 test_loss: 252.6699, test_acc: 0.6015, best: 0.6571, time: 0:01:13
 Epoch: 128, lr: 1.0e-02, train_loss: 0.6587, train_acc: 0.7650 test_loss: 61.5786, test_acc: 0.6691, best: 0.6691, time: 0:01:14
 Epoch: 129, lr: 1.0e-02, train_loss: 0.6303, train_acc: 0.7776 test_loss: 2896.7978, test_acc: 0.5475, best: 0.6691, time: 0:01:13
 Epoch: 130, lr: 1.0e-02, train_loss: 0.6244, train_acc: 0.7800 test_loss: 110.3386, test_acc: 0.6164, best: 0.6691, time: 0:01:13
 Epoch: 131, lr: 1.0e-02, train_loss: 0.6108, train_acc: 0.7868 test_loss: 764.7674, test_acc: 0.5659, best: 0.6691, time: 0:01:13
 Epoch: 132, lr: 1.0e-02, train_loss: 0.5765, train_acc: 0.7978 test_loss: 290.5423, test_acc: 0.6154, best: 0.6691, time: 0:01:13
 Epoch: 133, lr: 1.0e-02, train_loss: 0.5698, train_acc: 0.8022 test_loss: 292.8848, test_acc: 0.6346, best: 0.6691, time: 0:01:13
 Epoch: 134, lr: 1.0e-02, train_loss: 0.5491, train_acc: 0.8066 test_loss: 37.0972, test_acc: 0.6406, best: 0.6691, time: 0:01:13
 Epoch: 135, lr: 1.0e-02, train_loss: 0.5636, train_acc: 0.8064 test_loss: 32.5473, test_acc: 0.6228, best: 0.6691, time: 0:01:13
 Epoch: 136, lr: 1.0e-02, train_loss: 0.5763, train_acc: 0.7984 test_loss: 332.7035, test_acc: 0.6162, best: 0.6691, time: 0:01:13
 Epoch: 137, lr: 1.0e-02, train_loss: 0.5672, train_acc: 0.8034 test_loss: 1411.7510, test_acc: 0.5935, best: 0.6691, time: 0:01:13
 Epoch: 138, lr: 1.0e-02, train_loss: 0.5230, train_acc: 0.8204 test_loss: 614.1626, test_acc: 0.6118, best: 0.6691, time: 0:01:13
 Epoch: 139, lr: 1.0e-02, train_loss: 0.5218, train_acc: 0.8242 test_loss: 317.5750, test_acc: 0.5815, best: 0.6691, time: 0:01:13
 Epoch: 140, lr: 1.0e-02, train_loss: 0.5236, train_acc: 0.8226 test_loss: 563.2501, test_acc: 0.5801, best: 0.6691, time: 0:01:13
 Epoch: 141, lr: 1.0e-02, train_loss: 0.5478, train_acc: 0.8064 test_loss: 4501.6472, test_acc: 0.5989, best: 0.6691, time: 0:01:13
 Epoch: 142, lr: 1.0e-02, train_loss: 0.5316, train_acc: 0.8136 test_loss: 1835.4836, test_acc: 0.5969, best: 0.6691, time: 0:01:13
 Epoch: 143, lr: 1.0e-02, train_loss: 0.5042, train_acc: 0.8236 test_loss: 910.4299, test_acc: 0.6211, best: 0.6691, time: 0:01:13
 Epoch: 144, lr: 1.0e-02, train_loss: 0.5100, train_acc: 0.8190 test_loss: 107.1535, test_acc: 0.6464, best: 0.6691, time: 0:01:13
 Epoch: 145, lr: 1.0e-02, train_loss: 0.5424, train_acc: 0.8124 test_loss: 1277.7738, test_acc: 0.5539, best: 0.6691, time: 0:01:13
 Epoch: 146, lr: 1.0e-02, train_loss: 0.5004, train_acc: 0.8266 test_loss: 35.9448, test_acc: 0.6424, best: 0.6691, time: 0:01:14
 Epoch: 147, lr: 1.0e-02, train_loss: 0.4953, train_acc: 0.8266 test_loss: 143.4579, test_acc: 0.6416, best: 0.6691, time: 0:01:13
 Epoch: 148, lr: 1.0e-02, train_loss: 0.5131, train_acc: 0.8206 test_loss: 85.4992, test_acc: 0.6078, best: 0.6691, time: 0:01:13
 Epoch: 149, lr: 1.0e-02, train_loss: 0.4916, train_acc: 0.8294 test_loss: 523.6665, test_acc: 0.5976, best: 0.6691, time: 0:01:13
 Epoch: 150, lr: 1.0e-02, train_loss: 0.4940, train_acc: 0.8280 test_loss: 17.8801, test_acc: 0.6296, best: 0.6691, time: 0:01:13
 Epoch: 151, lr: 1.0e-02, train_loss: 0.4962, train_acc: 0.8328 test_loss: 105.7981, test_acc: 0.6104, best: 0.6691, time: 0:01:13
 Epoch: 152, lr: 1.0e-02, train_loss: 0.4666, train_acc: 0.8358 test_loss: 158.4209, test_acc: 0.6040, best: 0.6691, time: 0:01:13
 Epoch: 153, lr: 1.0e-02, train_loss: 0.4780, train_acc: 0.8332 test_loss: 164.2602, test_acc: 0.6094, best: 0.6691, time: 0:01:13
 Epoch: 154, lr: 1.0e-02, train_loss: 0.4686, train_acc: 0.8410 test_loss: 251.7630, test_acc: 0.6282, best: 0.6691, time: 0:01:13
 Epoch: 155, lr: 1.0e-02, train_loss: 0.4928, train_acc: 0.8306 test_loss: 778.5081, test_acc: 0.6022, best: 0.6691, time: 0:01:13
 Epoch: 156, lr: 1.0e-02, train_loss: 0.4852, train_acc: 0.8300 test_loss: 17.9849, test_acc: 0.6492, best: 0.6691, time: 0:01:13
 Epoch: 157, lr: 1.0e-02, train_loss: 0.5007, train_acc: 0.8274 test_loss: 192.8843, test_acc: 0.6388, best: 0.6691, time: 0:01:13
 Epoch: 158, lr: 1.0e-02, train_loss: 0.4705, train_acc: 0.8348 test_loss: 204.2174, test_acc: 0.6045, best: 0.6691, time: 0:01:13
 Epoch: 159, lr: 1.0e-02, train_loss: 0.4730, train_acc: 0.8334 test_loss: 5.8180, test_acc: 0.6508, best: 0.6691, time: 0:01:13
 Epoch: 160, lr: 1.0e-02, train_loss: 0.4549, train_acc: 0.8484 test_loss: 13.1814, test_acc: 0.6448, best: 0.6691, time: 0:01:13
 Epoch: 161, lr: 1.0e-02, train_loss: 0.4620, train_acc: 0.8400 test_loss: 36.3062, test_acc: 0.6209, best: 0.6691, time: 0:01:13
 Epoch: 162, lr: 1.0e-02, train_loss: 0.4759, train_acc: 0.8396 test_loss: 33.6516, test_acc: 0.6386, best: 0.6691, time: 0:01:13
 Epoch: 163, lr: 1.0e-02, train_loss: 0.4505, train_acc: 0.8432 test_loss: 271.1987, test_acc: 0.5703, best: 0.6691, time: 0:01:13
 Epoch: 164, lr: 1.0e-02, train_loss: 0.4516, train_acc: 0.8462 test_loss: 4607.1092, test_acc: 0.5599, best: 0.6691, time: 0:01:13
 Epoch: 165, lr: 1.0e-02, train_loss: 0.4476, train_acc: 0.8434 test_loss: 166.2434, test_acc: 0.5899, best: 0.6691, time: 0:01:13
 Epoch: 166, lr: 1.0e-02, train_loss: 0.4488, train_acc: 0.8468 test_loss: 43.2594, test_acc: 0.6271, best: 0.6691, time: 0:01:14
 Epoch: 167, lr: 1.0e-02, train_loss: 0.4670, train_acc: 0.8300 test_loss: 5.7121, test_acc: 0.6885, best: 0.6885, time: 0:01:13
 Epoch: 168, lr: 1.0e-02, train_loss: 0.4723, train_acc: 0.8388 test_loss: 52.1803, test_acc: 0.6308, best: 0.6885, time: 0:01:13
 Epoch: 169, lr: 1.0e-02, train_loss: 0.4379, train_acc: 0.8490 test_loss: 68.2314, test_acc: 0.6371, best: 0.6885, time: 0:01:13
 Epoch: 170, lr: 1.0e-02, train_loss: 0.4173, train_acc: 0.8498 test_loss: 213.5360, test_acc: 0.6249, best: 0.6885, time: 0:01:13
 Epoch: 171, lr: 1.0e-02, train_loss: 0.4336, train_acc: 0.8514 test_loss: 22.2007, test_acc: 0.6412, best: 0.6885, time: 0:01:13
 Epoch: 172, lr: 1.0e-02, train_loss: 0.4582, train_acc: 0.8386 test_loss: 1.6769, test_acc: 0.6521, best: 0.6885, time: 0:01:13
 Epoch: 173, lr: 1.0e-02, train_loss: 0.4868, train_acc: 0.8330 test_loss: 2.0963, test_acc: 0.6679, best: 0.6885, time: 0:01:13
 Epoch: 174, lr: 1.0e-02, train_loss: 0.4695, train_acc: 0.8386 test_loss: 2.1172, test_acc: 0.6655, best: 0.6885, time: 0:01:13
 Epoch: 175, lr: 1.0e-02, train_loss: 0.4418, train_acc: 0.8494 test_loss: 2.3868, test_acc: 0.6805, best: 0.6885, time: 0:01:13
 Epoch: 176, lr: 1.0e-02, train_loss: 0.4312, train_acc: 0.8552 test_loss: 2.2342, test_acc: 0.6545, best: 0.6885, time: 0:01:13
 Epoch: 177, lr: 1.0e-02, train_loss: 0.4186, train_acc: 0.8580 test_loss: 3.8786, test_acc: 0.6634, best: 0.6885, time: 0:01:13
 Epoch: 178, lr: 1.0e-02, train_loss: 0.4023, train_acc: 0.8590 test_loss: 10.3022, test_acc: 0.6308, best: 0.6885, time: 0:01:13
 Epoch: 179, lr: 1.0e-02, train_loss: 0.4400, train_acc: 0.8498 test_loss: 3.2780, test_acc: 0.6737, best: 0.6885, time: 0:01:13
 Epoch: 180, lr: 2.0e-03, train_loss: 0.3761, train_acc: 0.8746 test_loss: 4.7093, test_acc: 0.6843, best: 0.6885, time: 0:01:13
 Epoch: 181, lr: 2.0e-03, train_loss: 0.3370, train_acc: 0.8844 test_loss: 4.4451, test_acc: 0.6883, best: 0.6885, time: 0:01:13
 Epoch: 182, lr: 2.0e-03, train_loss: 0.3257, train_acc: 0.8870 test_loss: 5.8626, test_acc: 0.6816, best: 0.6885, time: 0:01:13
 Epoch: 183, lr: 2.0e-03, train_loss: 0.3318, train_acc: 0.8878 test_loss: 3.3873, test_acc: 0.6894, best: 0.6894, time: 0:01:13
 Epoch: 184, lr: 2.0e-03, train_loss: 0.3242, train_acc: 0.8878 test_loss: 5.0426, test_acc: 0.6881, best: 0.6894, time: 0:01:13
 Epoch: 185, lr: 2.0e-03, train_loss: 0.3089, train_acc: 0.8964 test_loss: 5.1577, test_acc: 0.6807, best: 0.6894, time: 0:01:13
 Epoch: 186, lr: 2.0e-03, train_loss: 0.2981, train_acc: 0.8972 test_loss: 5.0578, test_acc: 0.6834, best: 0.6894, time: 0:01:13
 Epoch: 187, lr: 2.0e-03, train_loss: 0.2944, train_acc: 0.8984 test_loss: 7.7610, test_acc: 0.6763, best: 0.6894, time: 0:01:13
 Epoch: 188, lr: 2.0e-03, train_loss: 0.2764, train_acc: 0.9046 test_loss: 3.6363, test_acc: 0.6895, best: 0.6895, time: 0:01:14
 Epoch: 189, lr: 2.0e-03, train_loss: 0.2880, train_acc: 0.9044 test_loss: 11.6543, test_acc: 0.6697, best: 0.6895, time: 0:01:13
 Epoch: 190, lr: 2.0e-03, train_loss: 0.2814, train_acc: 0.9018 test_loss: 15.1744, test_acc: 0.6705, best: 0.6895, time: 0:01:13
 Epoch: 191, lr: 2.0e-03, train_loss: 0.2628, train_acc: 0.9124 test_loss: 5.8015, test_acc: 0.6784, best: 0.6895, time: 0:01:13
 Epoch: 192, lr: 2.0e-03, train_loss: 0.2763, train_acc: 0.9072 test_loss: 4.7331, test_acc: 0.6811, best: 0.6895, time: 0:01:13
 Epoch: 193, lr: 2.0e-03, train_loss: 0.2840, train_acc: 0.9038 test_loss: 2.7735, test_acc: 0.6969, best: 0.6969, time: 0:01:14
 Epoch: 194, lr: 2.0e-03, train_loss: 0.2761, train_acc: 0.9030 test_loss: 3.9091, test_acc: 0.6881, best: 0.6969, time: 0:01:13
 Epoch: 195, lr: 2.0e-03, train_loss: 0.2957, train_acc: 0.8996 test_loss: 3.3556, test_acc: 0.6916, best: 0.6969, time: 0:01:14
 Epoch: 196, lr: 2.0e-03, train_loss: 0.2625, train_acc: 0.9128 test_loss: 2.5216, test_acc: 0.6869, best: 0.6969, time: 0:01:13
 Epoch: 197, lr: 2.0e-03, train_loss: 0.2718, train_acc: 0.9098 test_loss: 5.7549, test_acc: 0.6716, best: 0.6969, time: 0:01:13
 Epoch: 198, lr: 2.0e-03, train_loss: 0.2819, train_acc: 0.9030 test_loss: 4.2371, test_acc: 0.6935, best: 0.6969, time: 0:01:13
 Epoch: 199, lr: 2.0e-03, train_loss: 0.2677, train_acc: 0.9098 test_loss: 8.9778, test_acc: 0.6694, best: 0.6969, time: 0:01:13
 Epoch: 200, lr: 2.0e-03, train_loss: 0.2677, train_acc: 0.9064 test_loss: 5.2755, test_acc: 0.6813, best: 0.6969, time: 0:01:13
 Epoch: 201, lr: 2.0e-03, train_loss: 0.2584, train_acc: 0.9118 test_loss: 4.8139, test_acc: 0.6950, best: 0.6969, time: 0:01:13
 Epoch: 202, lr: 2.0e-03, train_loss: 0.2701, train_acc: 0.9066 test_loss: 7.7322, test_acc: 0.6730, best: 0.6969, time: 0:01:13
 Epoch: 203, lr: 2.0e-03, train_loss: 0.2708, train_acc: 0.9082 test_loss: 6.6532, test_acc: 0.6704, best: 0.6969, time: 0:01:13
 Epoch: 204, lr: 2.0e-03, train_loss: 0.2743, train_acc: 0.9030 test_loss: 5.5504, test_acc: 0.6759, best: 0.6969, time: 0:01:13
 Epoch: 205, lr: 2.0e-03, train_loss: 0.2705, train_acc: 0.9090 test_loss: 1.9703, test_acc: 0.7049, best: 0.7049, time: 0:01:14
 Epoch: 206, lr: 2.0e-03, train_loss: 0.2540, train_acc: 0.9116 test_loss: 3.4363, test_acc: 0.6884, best: 0.7049, time: 0:01:13
 Epoch: 207, lr: 2.0e-03, train_loss: 0.2559, train_acc: 0.9146 test_loss: 5.5339, test_acc: 0.6946, best: 0.7049, time: 0:01:13
 Epoch: 208, lr: 2.0e-03, train_loss: 0.2502, train_acc: 0.9154 test_loss: 12.0767, test_acc: 0.6704, best: 0.7049, time: 0:01:13
 Epoch: 209, lr: 2.0e-03, train_loss: 0.2605, train_acc: 0.9068 test_loss: 5.0861, test_acc: 0.6803, best: 0.7049, time: 0:01:13
 Epoch: 210, lr: 2.0e-03, train_loss: 0.2555, train_acc: 0.9170 test_loss: 5.9630, test_acc: 0.6741, best: 0.7049, time: 0:01:13
 Epoch: 211, lr: 2.0e-03, train_loss: 0.2627, train_acc: 0.9142 test_loss: 6.2070, test_acc: 0.6915, best: 0.7049, time: 0:01:13
 Epoch: 212, lr: 2.0e-03, train_loss: 0.2645, train_acc: 0.9124 test_loss: 5.6978, test_acc: 0.6901, best: 0.7049, time: 0:01:13
 Epoch: 213, lr: 2.0e-03, train_loss: 0.2478, train_acc: 0.9118 test_loss: 25.5620, test_acc: 0.6645, best: 0.7049, time: 0:01:13
 Epoch: 214, lr: 2.0e-03, train_loss: 0.2600, train_acc: 0.9076 test_loss: 15.7262, test_acc: 0.6679, best: 0.7049, time: 0:01:13
 Epoch: 215, lr: 2.0e-03, train_loss: 0.2513, train_acc: 0.9118 test_loss: 6.2539, test_acc: 0.6861, best: 0.7049, time: 0:01:13
 Epoch: 216, lr: 2.0e-03, train_loss: 0.2661, train_acc: 0.9110 test_loss: 3.0970, test_acc: 0.6920, best: 0.7049, time: 0:01:13
 Epoch: 217, lr: 2.0e-03, train_loss: 0.2593, train_acc: 0.9108 test_loss: 6.7380, test_acc: 0.6840, best: 0.7049, time: 0:01:13
 Epoch: 218, lr: 2.0e-03, train_loss: 0.2505, train_acc: 0.9162 test_loss: 2.8141, test_acc: 0.6951, best: 0.7049, time: 0:01:13
 Epoch: 219, lr: 2.0e-03, train_loss: 0.2572, train_acc: 0.9102 test_loss: 4.2988, test_acc: 0.6896, best: 0.7049, time: 0:01:13
 Epoch: 220, lr: 2.0e-03, train_loss: 0.2505, train_acc: 0.9160 test_loss: 7.0664, test_acc: 0.6793, best: 0.7049, time: 0:01:13
 Epoch: 221, lr: 2.0e-03, train_loss: 0.2473, train_acc: 0.9152 test_loss: 2.5990, test_acc: 0.6851, best: 0.7049, time: 0:01:13
 Epoch: 222, lr: 2.0e-03, train_loss: 0.2474, train_acc: 0.9170 test_loss: 2.4556, test_acc: 0.6967, best: 0.7049, time: 0:01:13
 Epoch: 223, lr: 2.0e-03, train_loss: 0.2544, train_acc: 0.9154 test_loss: 3.2385, test_acc: 0.6890, best: 0.7049, time: 0:01:13
 Epoch: 224, lr: 2.0e-03, train_loss: 0.2528, train_acc: 0.9170 test_loss: 5.2174, test_acc: 0.6897, best: 0.7049, time: 0:01:13
 Epoch: 225, lr: 2.0e-03, train_loss: 0.2360, train_acc: 0.9162 test_loss: 1.9924, test_acc: 0.6985, best: 0.7049, time: 0:01:13
 Epoch: 226, lr: 2.0e-03, train_loss: 0.2383, train_acc: 0.9184 test_loss: 5.2746, test_acc: 0.6875, best: 0.7049, time: 0:01:13
 Epoch: 227, lr: 2.0e-03, train_loss: 0.2184, train_acc: 0.9268 test_loss: 6.6998, test_acc: 0.6817, best: 0.7049, time: 0:01:13
 Epoch: 228, lr: 2.0e-03, train_loss: 0.2335, train_acc: 0.9226 test_loss: 7.4022, test_acc: 0.6666, best: 0.7049, time: 0:01:13
 Epoch: 229, lr: 2.0e-03, train_loss: 0.2359, train_acc: 0.9196 test_loss: 3.2947, test_acc: 0.6920, best: 0.7049, time: 0:01:13
 Epoch: 230, lr: 2.0e-03, train_loss: 0.2303, train_acc: 0.9202 test_loss: 11.9136, test_acc: 0.6685, best: 0.7049, time: 0:01:13
 Epoch: 231, lr: 2.0e-03, train_loss: 0.2193, train_acc: 0.9264 test_loss: 12.7310, test_acc: 0.6754, best: 0.7049, time: 0:01:13
 Epoch: 232, lr: 2.0e-03, train_loss: 0.2455, train_acc: 0.9196 test_loss: 12.5093, test_acc: 0.6639, best: 0.7049, time: 0:01:13
 Epoch: 233, lr: 2.0e-03, train_loss: 0.2377, train_acc: 0.9174 test_loss: 44.3501, test_acc: 0.6342, best: 0.7049, time: 0:01:13
 Epoch: 234, lr: 2.0e-03, train_loss: 0.2332, train_acc: 0.9166 test_loss: 4.2055, test_acc: 0.6907, best: 0.7049, time: 0:01:13
 Epoch: 235, lr: 2.0e-03, train_loss: 0.2253, train_acc: 0.9212 test_loss: 9.5036, test_acc: 0.6824, best: 0.7049, time: 0:01:13
 Epoch: 236, lr: 2.0e-03, train_loss: 0.2295, train_acc: 0.9216 test_loss: 13.3597, test_acc: 0.6674, best: 0.7049, time: 0:01:13
 Epoch: 237, lr: 2.0e-03, train_loss: 0.2147, train_acc: 0.9264 test_loss: 35.0103, test_acc: 0.6546, best: 0.7049, time: 0:01:13
 Epoch: 238, lr: 2.0e-03, train_loss: 0.2129, train_acc: 0.9268 test_loss: 32.1283, test_acc: 0.6577, best: 0.7049, time: 0:01:13
 Epoch: 239, lr: 2.0e-03, train_loss: 0.2241, train_acc: 0.9226 test_loss: 59.4451, test_acc: 0.6522, best: 0.7049, time: 0:01:13
 Epoch: 240, lr: 4.0e-04, train_loss: 0.2135, train_acc: 0.9268 test_loss: 34.8663, test_acc: 0.6723, best: 0.7049, time: 0:01:13
 Epoch: 241, lr: 4.0e-04, train_loss: 0.2207, train_acc: 0.9250 test_loss: 10.6780, test_acc: 0.6929, best: 0.7049, time: 0:01:13
 Epoch: 242, lr: 4.0e-04, train_loss: 0.2092, train_acc: 0.9302 test_loss: 38.8197, test_acc: 0.6536, best: 0.7049, time: 0:01:13
 Epoch: 243, lr: 4.0e-04, train_loss: 0.2165, train_acc: 0.9246 test_loss: 28.4694, test_acc: 0.6650, best: 0.7049, time: 0:01:13
 Epoch: 244, lr: 4.0e-04, train_loss: 0.2111, train_acc: 0.9280 test_loss: 25.8070, test_acc: 0.6649, best: 0.7049, time: 0:01:13
 Epoch: 245, lr: 4.0e-04, train_loss: 0.2267, train_acc: 0.9238 test_loss: 26.4965, test_acc: 0.6621, best: 0.7049, time: 0:01:13
 Epoch: 246, lr: 4.0e-04, train_loss: 0.2171, train_acc: 0.9256 test_loss: 10.7964, test_acc: 0.6955, best: 0.7049, time: 0:01:13
 Epoch: 247, lr: 4.0e-04, train_loss: 0.2310, train_acc: 0.9198 test_loss: 4.9636, test_acc: 0.6884, best: 0.7049, time: 0:01:13
 Epoch: 248, lr: 4.0e-04, train_loss: 0.2118, train_acc: 0.9296 test_loss: 59.8464, test_acc: 0.6442, best: 0.7049, time: 0:01:13
 Epoch: 249, lr: 4.0e-04, train_loss: 0.2160, train_acc: 0.9270 test_loss: 29.1122, test_acc: 0.6535, best: 0.7049, time: 0:01:13
 Epoch: 250, lr: 4.0e-04, train_loss: 0.2020, train_acc: 0.9318 test_loss: 3.8962, test_acc: 0.6950, best: 0.7049, time: 0:01:13
 Epoch: 251, lr: 4.0e-04, train_loss: 0.2132, train_acc: 0.9288 test_loss: 20.6873, test_acc: 0.6496, best: 0.7049, time: 0:01:13
 Epoch: 252, lr: 4.0e-04, train_loss: 0.2028, train_acc: 0.9314 test_loss: 38.1230, test_acc: 0.6644, best: 0.7049, time: 0:01:13
 Epoch: 253, lr: 4.0e-04, train_loss: 0.2291, train_acc: 0.9192 test_loss: 10.0579, test_acc: 0.6889, best: 0.7049, time: 0:01:13
 Epoch: 254, lr: 4.0e-04, train_loss: 0.2057, train_acc: 0.9324 test_loss: 19.5016, test_acc: 0.6671, best: 0.7049, time: 0:01:13
 Epoch: 255, lr: 4.0e-04, train_loss: 0.2083, train_acc: 0.9296 test_loss: 16.7471, test_acc: 0.6669, best: 0.7049, time: 0:01:13
 Epoch: 256, lr: 4.0e-04, train_loss: 0.1854, train_acc: 0.9374 test_loss: 8.1795, test_acc: 0.6927, best: 0.7049, time: 0:01:13
 Epoch: 257, lr: 4.0e-04, train_loss: 0.2125, train_acc: 0.9268 test_loss: 6.0798, test_acc: 0.6915, best: 0.7049, time: 0:01:13
 Epoch: 258, lr: 4.0e-04, train_loss: 0.2116, train_acc: 0.9270 test_loss: 35.3871, test_acc: 0.6431, best: 0.7049, time: 0:01:13
 Epoch: 259, lr: 4.0e-04, train_loss: 0.2012, train_acc: 0.9282 test_loss: 6.8997, test_acc: 0.6897, best: 0.7049, time: 0:01:13
 Epoch: 260, lr: 4.0e-04, train_loss: 0.2252, train_acc: 0.9236 test_loss: 2.9243, test_acc: 0.6974, best: 0.7049, time: 0:01:13
 Epoch: 261, lr: 4.0e-04, train_loss: 0.2036, train_acc: 0.9322 test_loss: 5.0029, test_acc: 0.6881, best: 0.7049, time: 0:01:13
 Epoch: 262, lr: 4.0e-04, train_loss: 0.1931, train_acc: 0.9334 test_loss: 13.3093, test_acc: 0.6760, best: 0.7049, time: 0:01:13
 Epoch: 263, lr: 4.0e-04, train_loss: 0.2127, train_acc: 0.9242 test_loss: 8.1650, test_acc: 0.6744, best: 0.7049, time: 0:01:13
 Epoch: 264, lr: 4.0e-04, train_loss: 0.2124, train_acc: 0.9266 test_loss: 12.5814, test_acc: 0.6654, best: 0.7049, time: 0:01:13
 Epoch: 265, lr: 4.0e-04, train_loss: 0.2007, train_acc: 0.9326 test_loss: 3.1385, test_acc: 0.6946, best: 0.7049, time: 0:01:13
 Epoch: 266, lr: 4.0e-04, train_loss: 0.2129, train_acc: 0.9256 test_loss: 7.6893, test_acc: 0.6855, best: 0.7049, time: 0:01:13
 Epoch: 267, lr: 4.0e-04, train_loss: 0.2056, train_acc: 0.9300 test_loss: 4.2634, test_acc: 0.6936, best: 0.7049, time: 0:01:13
 Epoch: 268, lr: 4.0e-04, train_loss: 0.2135, train_acc: 0.9260 test_loss: 5.9677, test_acc: 0.6850, best: 0.7049, time: 0:01:13
 Epoch: 269, lr: 4.0e-04, train_loss: 0.2111, train_acc: 0.9266 test_loss: 17.0058, test_acc: 0.6566, best: 0.7049, time: 0:01:13
 Epoch: 270, lr: 8.0e-05, train_loss: 0.2232, train_acc: 0.9260 test_loss: 3.4677, test_acc: 0.6944, best: 0.7049, time: 0:01:13
 Epoch: 271, lr: 8.0e-05, train_loss: 0.2259, train_acc: 0.9220 test_loss: 3.0477, test_acc: 0.7006, best: 0.7049, time: 0:01:13
 Epoch: 272, lr: 8.0e-05, train_loss: 0.2059, train_acc: 0.9310 test_loss: 3.3692, test_acc: 0.6953, best: 0.7049, time: 0:01:13
 Epoch: 273, lr: 8.0e-05, train_loss: 0.1980, train_acc: 0.9326 test_loss: 7.1990, test_acc: 0.6837, best: 0.7049, time: 0:01:13
 Epoch: 274, lr: 8.0e-05, train_loss: 0.2258, train_acc: 0.9220 test_loss: 25.1407, test_acc: 0.6436, best: 0.7049, time: 0:01:13
 Epoch: 275, lr: 8.0e-05, train_loss: 0.2106, train_acc: 0.9276 test_loss: 9.5945, test_acc: 0.6755, best: 0.7049, time: 0:01:13
 Epoch: 276, lr: 8.0e-05, train_loss: 0.2150, train_acc: 0.9270 test_loss: 3.0728, test_acc: 0.6963, best: 0.7049, time: 0:01:13
 Epoch: 277, lr: 8.0e-05, train_loss: 0.1901, train_acc: 0.9368 test_loss: 5.4944, test_acc: 0.6884, best: 0.7049, time: 0:01:13
 Epoch: 278, lr: 8.0e-05, train_loss: 0.2092, train_acc: 0.9298 test_loss: 6.1390, test_acc: 0.6876, best: 0.7049, time: 0:01:13
 Epoch: 279, lr: 8.0e-05, train_loss: 0.2017, train_acc: 0.9308 test_loss: 3.6791, test_acc: 0.6944, best: 0.7049, time: 0:01:13
 Epoch: 280, lr: 8.0e-05, train_loss: 0.1984, train_acc: 0.9320 test_loss: 11.4952, test_acc: 0.6721, best: 0.7049, time: 0:01:13
 Epoch: 281, lr: 8.0e-05, train_loss: 0.1997, train_acc: 0.9306 test_loss: 12.9392, test_acc: 0.6760, best: 0.7049, time: 0:01:13
 Epoch: 282, lr: 8.0e-05, train_loss: 0.2138, train_acc: 0.9288 test_loss: 5.3771, test_acc: 0.6879, best: 0.7049, time: 0:01:13
 Epoch: 283, lr: 8.0e-05, train_loss: 0.2193, train_acc: 0.9258 test_loss: 10.1117, test_acc: 0.6770, best: 0.7049, time: 0:01:13
 Epoch: 284, lr: 8.0e-05, train_loss: 0.1958, train_acc: 0.9320 test_loss: 4.1658, test_acc: 0.6920, best: 0.7049, time: 0:01:13
 Epoch: 285, lr: 8.0e-05, train_loss: 0.1980, train_acc: 0.9344 test_loss: 3.2817, test_acc: 0.7009, best: 0.7049, time: 0:01:13
 Epoch: 286, lr: 8.0e-05, train_loss: 0.2141, train_acc: 0.9306 test_loss: 9.1561, test_acc: 0.6744, best: 0.7049, time: 0:01:12
 Epoch: 287, lr: 8.0e-05, train_loss: 0.2073, train_acc: 0.9296 test_loss: 12.1803, test_acc: 0.6795, best: 0.7049, time: 0:01:11
 Epoch: 288, lr: 8.0e-05, train_loss: 0.1936, train_acc: 0.9340 test_loss: 4.1117, test_acc: 0.6971, best: 0.7049, time: 0:01:11
 Epoch: 289, lr: 8.0e-05, train_loss: 0.2046, train_acc: 0.9330 test_loss: 4.2648, test_acc: 0.6889, best: 0.7049, time: 0:01:11
 Epoch: 290, lr: 8.0e-05, train_loss: 0.2132, train_acc: 0.9276 test_loss: 7.9282, test_acc: 0.6825, best: 0.7049, time: 0:01:11
 Epoch: 291, lr: 8.0e-05, train_loss: 0.1977, train_acc: 0.9346 test_loss: 9.3907, test_acc: 0.6755, best: 0.7049, time: 0:01:11
 Epoch: 292, lr: 8.0e-05, train_loss: 0.2002, train_acc: 0.9314 test_loss: 11.6332, test_acc: 0.6681, best: 0.7049, time: 0:01:11
 Epoch: 293, lr: 8.0e-05, train_loss: 0.1996, train_acc: 0.9312 test_loss: 8.6711, test_acc: 0.6756, best: 0.7049, time: 0:01:11
 Epoch: 294, lr: 8.0e-05, train_loss: 0.1889, train_acc: 0.9404 test_loss: 10.3413, test_acc: 0.6753, best: 0.7049, time: 0:01:11
 Epoch: 295, lr: 8.0e-05, train_loss: 0.2086, train_acc: 0.9292 test_loss: 3.6669, test_acc: 0.6934, best: 0.7049, time: 0:01:11
 Epoch: 296, lr: 8.0e-05, train_loss: 0.1976, train_acc: 0.9328 test_loss: 20.9108, test_acc: 0.6466, best: 0.7049, time: 0:01:11
 Epoch: 297, lr: 8.0e-05, train_loss: 0.2034, train_acc: 0.9334 test_loss: 4.5009, test_acc: 0.6927, best: 0.7049, time: 0:01:11
 Epoch: 298, lr: 8.0e-05, train_loss: 0.2157, train_acc: 0.9328 test_loss: 5.1381, test_acc: 0.6896, best: 0.7049, time: 0:01:11
 Epoch: 299, lr: 8.0e-05, train_loss: 0.2021, train_acc: 0.9358 test_loss: 20.3143, test_acc: 0.6556, best: 0.7049, time: 0:01:11
 Highest accuracy: 0.7049